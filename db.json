{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/langselect.js","path":"js/langselect.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/mouseclick.js","path":"js/mouseclick.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","path":"js/comment/gitalk_.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":0,"renderable":1},{"_id":"source/LICENSE","path":"LICENSE","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar/GRIS.png","path":"img/avatar/GRIS.png","modified":0,"renderable":0},{"_id":"source/img/avatar/maid.jpg","path":"img/avatar/maid.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/404_bg.jpg","path":"img/header_img/404_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg.jpg","path":"img/header_img/archive_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg2.jpg","path":"img/header_img/archive_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg3.jpg","path":"img/header_img/archive_bg3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/categories_bg.jpg","path":"img/header_img/categories_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg.jpg","path":"img/header_img/lml_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg8.jpg","path":"img/header_img/lml_bg8.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/newhome_bg.jpg","path":"img/header_img/newhome_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/nier.png","path":"img/header_img/nier.png","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg.jpg","path":"img/scenery/about_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag_bg.jpg","path":"img/header_img/tag_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg2.jpg","path":"img/scenery/about_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/treat_me_to_coffee.png","path":"img/scenery/treat_me_to_coffee.png","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg4.jpg","path":"img/scenery/about_bg4.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/signature.png","path":"img/signature/signature.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"ec2d37d705a85fa3eaf6f32af4c8962f5c7ef230","modified":1635750784862},{"_id":"source/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1635750784863},{"_id":"source/CNAME","hash":"5f5eab98d6ce7ce139fb8ac1df5e5dbffeaccdb3","modified":1635754665538},{"_id":"source/archive/index.md","hash":"4ce216f06a1b4da989506010c1d7ab96ffa05ff5","modified":1635750784974},{"_id":"source/categories/index.md","hash":"3d5db5dcead0a4f2f8605d1cd2db6df3e8e7e4db","modified":1635750784975},{"_id":"source/tags/index.md","hash":"52e3cad1bc1fb97f9429d4b5053ab97dc6cf22e8","modified":1635750785517},{"_id":"source/about/index.md","hash":"3c89a65f21216cd3000b96c706d4b50a7b67bbd3","modified":1635750784973},{"_id":"source/_posts/cn/Algorithm-Note.md","hash":"e210ef1ebcbd22a1de7a4bcd71e8d66945bc54e1","modified":1636790989047},{"_id":"source/_posts/cn/Algorithm.md","hash":"b1a223a6216f9de1b07de73e431342ec0120fc11","modified":1637133818167},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife.md","hash":"782f71ed413216da1e54475cf175b48258940d9e","modified":1636340584138},{"_id":"source/_posts/cn/MarkDown-Base.md","hash":"9a691c05c84c51db48382b68568d8fdd19fd873d","modified":1637857513425},{"_id":"source/_posts/cn/Python-Note.md","hash":"3c379d58fa8b66a207ea84a65e1874e98ef04070","modified":1641863609851},{"_id":"source/_posts/cn/Unity-Study-Note.md","hash":"e1d1bb0af360fda35ad94909606820aa39d37777","modified":1636813550337},{"_id":"source/_posts/cn/hexo-for-building-blog.md","hash":"af56e9aef1337bdc73f760e6b051ff06a220127e","modified":1636340575048},{"_id":"source/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1635758222043},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1636952969235},{"_id":"source/_posts/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1635860346064},{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1636684773421},{"_id":"themes/livemylife/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1635750785518},{"_id":"themes/livemylife/_config.yml","hash":"cc81f0292e6d73b86b6722dafaf507cbb331d5d8","modified":1635759424354},{"_id":"themes/livemylife/languages/cn.yml","hash":"3f6dabd999e37bf792707c6defdce3cb4a552f70","modified":1635776423407},{"_id":"themes/livemylife/languages/default.yml","hash":"5bf3e178962cfd50f295753d64135278231bddb9","modified":1635757059893},{"_id":"themes/livemylife/languages/en.yml","hash":"b43dba8933b68c4464f94ab94b4065e9955ce06b","modified":1635750785520},{"_id":"themes/livemylife/languages/tw.yml","hash":"684153b0299e9cb68c13ddc545d36c140dcde107","modified":1635750785521},{"_id":"themes/livemylife/layout/404.ejs","hash":"053e99dad0f9810337b0a8f5037db2405683a83b","modified":1635750785522},{"_id":"themes/livemylife/layout/about.ejs","hash":"96eb2c91f8135302e1b0e2371a577ca5bdb5595b","modified":1635750785534},{"_id":"themes/livemylife/layout/archive.ejs","hash":"ca9f4f9e29e074ec0440b7dc02ebbc81dba9b2dd","modified":1635750785535},{"_id":"themes/livemylife/layout/categories.ejs","hash":"fb7e7d769505f9185c4b1616343efa2d827e41c0","modified":1635750785535},{"_id":"themes/livemylife/layout/index.ejs","hash":"3955abc1c16a14ad578957d9984c3798cdbcb64e","modified":1635750785536},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"318a9826afd72fa68989cb79ba8cc96d0061afb0","modified":1635750785537},{"_id":"themes/livemylife/layout/layout.ejs","hash":"5708ac135ff3d184eb37cb50c98184b715193021","modified":1635750785537},{"_id":"themes/livemylife/layout/page.ejs","hash":"333dce279f48b599b2f9d5928e882a36bf97b2e6","modified":1638186913164},{"_id":"themes/livemylife/layout/post.ejs","hash":"3b31e4e200be31929ed09132d05a5a97e524f87c","modified":1635750785538},{"_id":"themes/livemylife/layout/tags.ejs","hash":"cb6ee48772f4df9e1734a325248c7448f25cd7d0","modified":1636878735690},{"_id":"themes/livemylife/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1635750785540},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"3e49635a4b5ba6bf3ca589113b87939a5ba8b4b3","modified":1636686823821},{"_id":"themes/livemylife/source/css/beantech.css","hash":"bce245c3c8de02a7fda56d2c3dfc4ac529fcfbba","modified":1635750785541},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"7db6da0d87a886cce86594e8c8566a0089ce4a7a","modified":1635750785545},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"646a634ac252896d9e9f4d322d782e69c66d65ae","modified":1635750785546},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1635750785547},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1636686697768},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"27c60a8f45ee2a31c2c6a096c513cdfb4a99a98a","modified":1635750785550},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"678420a06065424080c22c2a9d2a7f501dac5ef2","modified":1635750785551},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ef16ea9eeb589e9334a0f071afb5f0cdaa34d69c","modified":1635750785551},{"_id":"themes/livemylife/source/css/search.css","hash":"b8d680e4d9801774bf73784b31f372162d57e4e0","modified":1635750785552},{"_id":"themes/livemylife/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1635750785552},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"65d7309ed06fd6f7d6f24361742e89b35cbede81","modified":1636900539486},{"_id":"themes/livemylife/source/css/top.css","hash":"7fe7d9d4434fe2bb7178e0f43977b3869b5c0fdf","modified":1635750785553},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"bb52e4168e5b740d04bcabe3833f42e98f8037da","modified":1635750785554},{"_id":"themes/livemylife/source/css/wave.css","hash":"fb939f76dc9a48d3a7e7384f64943dac710ad452","modified":1635750785555},{"_id":"themes/livemylife/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1635750785555},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"073df9003dc40e09af1c27438860c22d0bc8fe60","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"dd2336fddd77b83710aad3f3949328ea99438c25","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"4598b83976fe15071b4a76d26dc499fe2a56dac0","modified":1635750785524},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"cdc0a8365aeaa7fabae74cbccf9dc9ac1ad851f4","modified":1635750785524},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"34c97132f17f3c31aabe6dfbc908f0650213e847","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"194a25ef321ea65578cf751db0b7677e0ee4ba42","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"a4ddbaf01edc3af4c10587b0c33cb07d43728628","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/langselect.ejs","hash":"e1e195de53d4b2a46dd9bdc163ba9174e06a3ad8","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"7a8256a4b43fb3726264bd5897fb861d02ef2418","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"d015b8ae6f5aebcd145a3b1bfa96744de66c86c1","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"b1e8ee7b9e5ae7c839edd3a41611bc743bc2092a","modified":1635750785528},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"a827b1d5ffb695b80205bd1378234b9904c8308e","modified":1635750785529},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"0550c303a8e635408db9ae7175b63e940bd7055e","modified":1635750785530},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"1b50bdbc89731a0f04732aff9286ae945ecbe8b7","modified":1635750785529},{"_id":"themes/livemylife/layout/_partial/tip.ejs","hash":"62fc8b17f4661a2baa9357a311b4dd4bb792a138","modified":1635750785530},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"d8915befc058d89a24320d72965c9bd2b4970a2c","modified":1635776405384},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"ea9e5e50d32a80b25ba4323998e969a32b66b1d2","modified":1635750785532},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"037cda2d5616ad5e62f8f668d6947cfe17f37a32","modified":1635776367303},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"7b83d0287e467c11c8c9e434e9e4ce5c864b0980","modified":1635750785533},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"24671d81b25bce97245d8367c7e0c6b2d85955b6","modified":1635750785532},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"a587f6a911ccd9e38335cb856a86bcc354e47b35","modified":1635750785534},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"3a624aecb0c8893d8680d7bba81f9a9aa677ce4f","modified":1635750785534},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1635750785556},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1635750785558},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1635750785559},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1635750785559},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1635750785561},{"_id":"themes/livemylife/source/js/catalog.js","hash":"4e34f47053ece8c1a4ab4a8441760a3d33ea9fb8","modified":1635750785562},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1635750785572},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1635750785573},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1635750785577},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1635750785578},{"_id":"themes/livemylife/source/js/langselect.js","hash":"6438d00cd2d9770ec48ab453aba12fa5ace986ed","modified":1635750785578},{"_id":"themes/livemylife/source/js/line.js","hash":"ffccb7e8713746af8d1f10b1b194c69090429e21","modified":1635750785579},{"_id":"themes/livemylife/source/js/mouseclick.js","hash":"8353161e1cb3446f4647908441b8e2fc1e49aaac","modified":1635750785580},{"_id":"themes/livemylife/source/js/scroll.js","hash":"182250b3bee27de24099863f0973bb7971405464","modified":1635750785581},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","hash":"75449860641e0ca475b1e7b5595851cc6e640722","modified":1635750785580},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1635750785548},{"_id":"themes/livemylife/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1635750785581},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"f61a11e60be24cf0c64019ca4dc4dc49c325ed71","modified":1635750785584},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1635750785550},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"3955cbca226b562f8dec96dc459ce22363affdde","modified":1635750785582},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"b09fff2aa41305e8975b9ef80514eb937ffa6866","modified":1635750785583},{"_id":"source/img/scenery/about_bg.jpg","hash":"462c14b9b00ab2153e579f14cb1e44aa56704ce8","modified":1635750785506},{"_id":"source/img/scenery/about_bg4.jpg","hash":"272f0d4233aea38f32311439f8528d2b3bebd546","modified":1635750785510},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1635750784875},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"c3d5b799e43c9b400ce8ca8831754da6c17c4126","modified":1636686912729},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1635750785557},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1635750785561},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1635750785577},{"_id":"source/img/scenery/treat_me_to_coffee.png","hash":"f5691b4f654701eaa19830a76062d86c0b58f999","modified":1635750785511},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1635750785543},{"_id":"source/img/scenery/about_bg2.jpg","hash":"bdffbe6a94f9c5be1b9353fc2b4f28a74677939f","modified":1635750785508},{"_id":"themes/livemylife/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1635750785576},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1635750784868},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1635750784873},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1635750784896},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1635750784919},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1635750784910},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1635750784915},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1635750784901},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1635750784906},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","hash":"9e326313656b821751f486e31be8418e1578668a","modified":1635750785571},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"4ae45a4e2ee0769a337b65f8bd1d859bd9d3294b","modified":1635750785567},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1635750784891},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1635750784883},{"_id":"source/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1635756780937},{"_id":"source/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1635750785435},{"_id":"source/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1635750785274},{"_id":"source/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1635755481619},{"_id":"source/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1635750785024},{"_id":"source/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1635750785237},{"_id":"source/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1635759711255},{"_id":"source/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1635750785333},{"_id":"source/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1635750785503},{"_id":"source/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785137},{"_id":"source/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785410},{"_id":"source/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1635750785199},{"_id":"public/sitemap.xml","hash":"0d3c8321965358ae25ce38a5e943171a3fb369a1","modified":1638450959275},{"_id":"public/searchVersion.json","hash":"6eeb4587569dbfec85cd82e7246a45c4297966aa","modified":1638450959275},{"_id":"public/baidusitemap.xml","hash":"2647a640a87999544724d8e4ff37890945dd926e","modified":1638450959275},{"_id":"public/404.html","hash":"c99229f8dddecb866e8a50c25595f523ac5288e8","modified":1638450959275},{"_id":"public/tags/index.html","hash":"d18e4117ea5fc590980f4885991bcfaaf028ec22","modified":1638450959275},{"_id":"public/categories/index.html","hash":"aaec135adf6b21ea8017faead7d67e2694a15933","modified":1638450959275},{"_id":"public/cn/Algorithm-Note/index.html","hash":"1bf572e49db0093fba03a454b97fd00d23b5e579","modified":1638450959275},{"_id":"public/cn/Algorithm/index.html","hash":"a4cdd167eeadd42e1f663b902de288071b368d3c","modified":1638450959275},{"_id":"public/cn/Unity-Study-Note/index.html","hash":"317a73fc02256d4ef4eaa2e1aa136c38ad8eaef2","modified":1638450959275},{"_id":"public/cn/MarkDown-Base/index.html","hash":"0f86a69f74a21d2774d9cef0e906c95ad2d2f945","modified":1638450959275},{"_id":"public/cn/Python-Note/index.html","hash":"0359ce7865c7fc9607dc13405e5962628d5ab724","modified":1638450959275},{"_id":"public/cn/hexo-for-building-blog/index.html","hash":"0438c1a5913d3c7018bed949c0767be12f9bfdc8","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/index.html","hash":"5cdb4d81d1628f7278d8c40ccb88785118a1f361","modified":1638450959275},{"_id":"public/about/index.html","hash":"0b0d6a4bd91f953d3396f96505f67719dcc3a671","modified":1638450959275},{"_id":"public/archive/index.html","hash":"95da848fa1323e8deee0c448b2a1e835758adf4a","modified":1638450959275},{"_id":"public/archives/index.html","hash":"2f4e5d63a7c519abe46902f3db7f31147da2ec75","modified":1638450959275},{"_id":"public/archives/2020/index.html","hash":"fa8db8b96541362cd4f7445f37b08297c8b19df5","modified":1638450959275},{"_id":"public/archives/2020/04/index.html","hash":"b67dd7519a01f9b99693d023743da949412ae35b","modified":1638450959275},{"_id":"public/archives/2021/index.html","hash":"c15ecf01662518ddbaa00c9a639dcfc7bdc2d141","modified":1638450959275},{"_id":"public/archives/2021/11/index.html","hash":"28501eceb0c2dd87416f3460b6328dae1abab4fe","modified":1638450959275},{"_id":"public/cn/index.html","hash":"477374d9d5f24733a8ff9ae575f02a77ef7539eb","modified":1638450959275},{"_id":"public/categories/Note/index.html","hash":"9596026d78b53b983da26aa885945fccf5e5a135","modified":1638450959275},{"_id":"public/categories/Tutorials/index.html","hash":"c9f5d2bd05ddb4b0e17e5bd605007e896a8e7038","modified":1638450959275},{"_id":"public/categories/Note/Algorithm/index.html","hash":"8b8753f297a581ef419d0d6ae0b29bed4ea6da19","modified":1638450959275},{"_id":"public/categories/Tutorials/Hexo/index.html","hash":"7447122f5ae746230430ef0e66c39f253d2e295b","modified":1638450959275},{"_id":"public/categories/etc/index.html","hash":"7ff947d54d8dc46662a2bbc1b2c36e751a6de355","modified":1638450959275},{"_id":"public/categories/etc/Hexo/index.html","hash":"41b5f86925e3c27944ad48f781ff6f798b0175e7","modified":1638450959275},{"_id":"public/tags/Algorithm/index.html","hash":"7ef7cc8fab58a8054c46c7f129a62d83fc2d7c73","modified":1638450959275},{"_id":"public/tags/Leetcode/index.html","hash":"561e5d9b7fc7a5efa202713fd65ed3d0177c61ce","modified":1638450959275},{"_id":"public/tags/Hexo-Theme-LiveMyLife/index.html","hash":"349c0ea2ca830cd0b49974a7719f6f68eb338cd2","modified":1638450959275},{"_id":"public/tags/Hexo/index.html","hash":"12eb25728e6c51862a0d056c2beda70d27702cab","modified":1638450959275},{"_id":"public/tags/Tutorials/index.html","hash":"480e6a28858a9b1867bcaa4e743e9a36de6a4420","modified":1638450959275},{"_id":"public/index.html","hash":"10969d5ae20304b694b9de866e673bf8a22fb231","modified":1638450959275},{"_id":"public/tags/Unity/index.html","hash":"5294c026d6ba36f5b255395c335a579f15481791","modified":1638450959275},{"_id":"public/tags/markdown/index.html","hash":"d48292c31695bef9851b62dd550515cabc8cac6e","modified":1638450959275},{"_id":"public/tags/Python/index.html","hash":"64c6ace0d34cdd45d600fd73391de5785e2a51d3","modified":1638450959275},{"_id":"public/tags/Blog/index.html","hash":"5c75589b8dd585c3b63b145b22ae9381d5433df4","modified":1638450959275},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1638450959275},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1638450959275},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1638450959275},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1638450959275},{"_id":"public/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1638450959275},{"_id":"public/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1638450959275},{"_id":"public/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1638450959275},{"_id":"public/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1638450959275},{"_id":"public/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1638450959275},{"_id":"public/CNAME","hash":"5f5eab98d6ce7ce139fb8ac1df5e5dbffeaccdb3","modified":1638450959275},{"_id":"public/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1638450959275},{"_id":"public/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1638450959275},{"_id":"public/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1638450959275},{"_id":"public/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1638450959275},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1638450959275},{"_id":"public/img/scenery/about_bg.jpg","hash":"462c14b9b00ab2153e579f14cb1e44aa56704ce8","modified":1638450959275},{"_id":"public/img/scenery/about_bg4.jpg","hash":"272f0d4233aea38f32311439f8528d2b3bebd546","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1638450959275},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1638450959275},{"_id":"public/css/catalog.css","hash":"6e63e8902ec9ba5ef6256a0c2ef93934c56d612c","modified":1638450959275},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1638450959275},{"_id":"public/css/livemylife.css","hash":"07f90cf42f19b7b86361d202b24918ee0c626211","modified":1638450959275},{"_id":"public/css/rocket.css","hash":"1aa31deaf2c434e883a7b4d096d187244eb964d0","modified":1638450959275},{"_id":"public/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1638450959275},{"_id":"public/css/search.css","hash":"c633ff24b9126676013197280b18bb79ea4abb6c","modified":1638450959275},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1638450959275},{"_id":"public/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1638450959275},{"_id":"public/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1638450959275},{"_id":"public/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1638450959275},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1638450959275},{"_id":"public/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1638450959275},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1638450959275},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1638450959275},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1638450959275},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1638450959275},{"_id":"public/js/mouseclick.js","hash":"b27fb5ae779a855a93b85c923f1ac927ba52dc86","modified":1638450959275},{"_id":"public/js/langselect.js","hash":"52ca6e30814272bc329868944f528f89630404e4","modified":1638450959275},{"_id":"public/js/line.js","hash":"d69576bfe75048345a137c148ffca1d9985811dc","modified":1638450959275},{"_id":"public/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1638450959275},{"_id":"public/js/ribbonDynamic.js","hash":"576f0ce237c87738277868489af30b6538681201","modified":1638450959275},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1638450959275},{"_id":"public/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1638450959275},{"_id":"public/css/beantech.css","hash":"c192d3170301f774fa4c2185dc125cb3d6ec4929","modified":1638450959275},{"_id":"public/css/beantech.min.css","hash":"52f8485f36e94a35de73b9cf1eb49b6237fbedc5","modified":1638450959275},{"_id":"public/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1638450959275},{"_id":"public/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1638450959275},{"_id":"public/css/bootstrap.min.css","hash":"03a1eabfd0b6d2328418723ebe28df6e0847ac1b","modified":1638450959275},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1638450959275},{"_id":"public/css/themecolor.css","hash":"4497f60bcd6d2ac8df59656edbddd307f869d0fb","modified":1638450959275},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1638450959275},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1638450959275},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1638450959275},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1638450959275},{"_id":"public/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1638450959275},{"_id":"public/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1638450959275},{"_id":"public/img/scenery/treat_me_to_coffee.png","hash":"f5691b4f654701eaa19830a76062d86c0b58f999","modified":1638450959275},{"_id":"public/js/comment/gitalk_.js","hash":"9256bc4b8f7341f60083da291d5c7c9f0fe5f1bd","modified":1638450959275},{"_id":"public/js/comment/gitalk.js","hash":"e5c1b7f8a2803765cff831793af377a9f81fb385","modified":1638450959275},{"_id":"public/img/scenery/about_bg2.jpg","hash":"bdffbe6a94f9c5be1b9353fc2b4f28a74677939f","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1638450959275},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1638450959275},{"_id":"public/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1638450959275},{"_id":"public/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1638450959275},{"_id":"public/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1638450959275},{"_id":"public/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1638450959275},{"_id":"public/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1638450959275},{"_id":"public/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1638450959275},{"_id":"public/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1638450959275},{"_id":"public/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1638450959275},{"_id":"public/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1638450959275},{"_id":"public/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1638450959275},{"_id":"public/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1638450959275},{"_id":"public/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1638450959275}],"Category":[{"name":"Note","_id":"ckwozec2j00049kvodbo0gxdc"},{"name":"Tutorials","_id":"ckwozec2o000d9kvo4jcneedq"},{"name":"Algorithm","parent":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2p000f9kvoa278cqqg"},{"name":"Hexo","parent":"ckwozec2o000d9kvo4jcneedq","_id":"ckwozec2r000l9kvo3cz50rto"},{"name":"etc.","_id":"ckwozec2x00159kvoe7j576jt"},{"name":"Hexo","parent":"ckwozec2x00159kvoe7j576jt","_id":"ckwozec2y00199kvo9uijf5ow"}],"Data":[],"Page":[{"layout":"404","description":"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...\"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.862Z","updated":"2021-11-01T07:13:04.862Z","path":"404.html","title":"","comments":1,"_id":"ckwozec2c00009kvohv7f5s3v","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"那些年吹过的牛逼，还有很多没有实现 ......","header-img":"img/scenery/about_bg.jpg","_content":"\n## Talk To Me\n\n> I always say to myself :\n>\n> if my life is peaceful and plain sailing all the time ,\n>\n> it means to die in the electrocardiogram …\n\n\n\n## Just Me\n\n<img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img>\n\n> 有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；\n>\n> 有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；\n>\n> 有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；\n>\n> 有一种态度 叫纹身 其实我们只是想与众不同；\n>\n> 有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；\n>\n> 有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；\n>\n> 有一种悠闲 叫 \" 老板给我杯Cappuccino \" 香香甜甜 浓郁中带着苦涩 醇和而隽永 …\n\n\n\n## The Longest Way ...\n\n<img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img>\n\n>  活在当下 然后忘记 继续往前走 ...\n>\n>  即便是一个人 ...\n>\n>  On the way to meet myself …\n\n\n## Follow With Interest Blogs\n\n> Neo Peng：https://zhile.io\n>\n> 李卫民：https://www.funtl.com/zh/guide\n>\n> duanxz：https://www.cnblogs.com/duanxz/tag\n>\n> Java1234_小锋：http://blog.java1234.com/index.html\n>\n> Deserts：https://deserts.io\n>\n> Super Snail：https://www.dusign.net\n>\n> KIERAN'S BLOG：https://go.kieran.top\n>\n> Mr.Seven：https://itimetraveler.github.io\n\n## Contact me\n\n> Email：601521821@qq.com\n\n## Treat me to coffee\n>  If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee...\n\n<img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img>\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"那些年吹过的牛逼，还有很多没有实现 ......\"\nheader-img: \"img/scenery/about_bg.jpg\"\n---\n\n## Talk To Me\n\n> I always say to myself :\n>\n> if my life is peaceful and plain sailing all the time ,\n>\n> it means to die in the electrocardiogram …\n\n\n\n## Just Me\n\n<img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img>\n\n> 有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；\n>\n> 有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；\n>\n> 有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；\n>\n> 有一种态度 叫纹身 其实我们只是想与众不同；\n>\n> 有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；\n>\n> 有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；\n>\n> 有一种悠闲 叫 \" 老板给我杯Cappuccino \" 香香甜甜 浓郁中带着苦涩 醇和而隽永 …\n\n\n\n## The Longest Way ...\n\n<img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img>\n\n>  活在当下 然后忘记 继续往前走 ...\n>\n>  即便是一个人 ...\n>\n>  On the way to meet myself …\n\n\n## Follow With Interest Blogs\n\n> Neo Peng：https://zhile.io\n>\n> 李卫民：https://www.funtl.com/zh/guide\n>\n> duanxz：https://www.cnblogs.com/duanxz/tag\n>\n> Java1234_小锋：http://blog.java1234.com/index.html\n>\n> Deserts：https://deserts.io\n>\n> Super Snail：https://www.dusign.net\n>\n> KIERAN'S BLOG：https://go.kieran.top\n>\n> Mr.Seven：https://itimetraveler.github.io\n\n## Contact me\n\n> Email：601521821@qq.com\n\n## Treat me to coffee\n>  If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee...\n\n<img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img>\n","updated":"2016-04-20T20:48:33.000Z","path":"about/index.html","comments":1,"_id":"ckwozec2h00029kvog63s6kf5","content":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<blockquote>\n<p>I always say to myself :</p>\n<p>if my life is peaceful and plain sailing all the time ,</p>\n<p>it means to die in the electrocardiogram …</p>\n</blockquote>\n<h2 id=\"Just-Me\">Just Me</h2>\n<p><img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img></p>\n<blockquote>\n<p>有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；</p>\n<p>有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；</p>\n<p>有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；</p>\n<p>有一种态度 叫纹身 其实我们只是想与众不同；</p>\n<p>有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；</p>\n<p>有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；</p>\n<p>有一种悠闲 叫 &quot; 老板给我杯Cappuccino &quot; 香香甜甜 浓郁中带着苦涩 醇和而隽永 …</p>\n</blockquote>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<p><img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img></p>\n<blockquote>\n<p>活在当下 然后忘记 继续往前走 …</p>\n<p>即便是一个人 …</p>\n<p>On the way to meet myself …</p>\n</blockquote>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<blockquote>\n<p>Neo Peng：<a href=\"https://zhile.io\">https://zhile.io</a></p>\n<p>李卫民：<a href=\"https://www.funtl.com/zh/guide\">https://www.funtl.com/zh/guide</a></p>\n<p>duanxz：<a href=\"https://www.cnblogs.com/duanxz/tag\">https://www.cnblogs.com/duanxz/tag</a></p>\n<p>Java1234_小锋：<a href=\"http://blog.java1234.com/index.html\">http://blog.java1234.com/index.html</a></p>\n<p>Deserts：<a href=\"https://deserts.io\">https://deserts.io</a></p>\n<p>Super Snail：<a href=\"https://www.dusign.net\">https://www.dusign.net</a></p>\n<p>KIERAN’S BLOG：<a href=\"https://go.kieran.top\">https://go.kieran.top</a></p>\n<p>Mr.Seven：<a href=\"https://itimetraveler.github.io\">https://itimetraveler.github.io</a></p>\n</blockquote>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：601521821@qq.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n<blockquote>\n<p>If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee…</p>\n</blockquote>\n<p><img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<blockquote>\n<p>I always say to myself :</p>\n<p>if my life is peaceful and plain sailing all the time ,</p>\n<p>it means to die in the electrocardiogram …</p>\n</blockquote>\n<h2 id=\"Just-Me\">Just Me</h2>\n<p><img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img></p>\n<blockquote>\n<p>有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；</p>\n<p>有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；</p>\n<p>有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；</p>\n<p>有一种态度 叫纹身 其实我们只是想与众不同；</p>\n<p>有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；</p>\n<p>有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；</p>\n<p>有一种悠闲 叫 &quot; 老板给我杯Cappuccino &quot; 香香甜甜 浓郁中带着苦涩 醇和而隽永 …</p>\n</blockquote>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<p><img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img></p>\n<blockquote>\n<p>活在当下 然后忘记 继续往前走 …</p>\n<p>即便是一个人 …</p>\n<p>On the way to meet myself …</p>\n</blockquote>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<blockquote>\n<p>Neo Peng：<a href=\"https://zhile.io\">https://zhile.io</a></p>\n<p>李卫民：<a href=\"https://www.funtl.com/zh/guide\">https://www.funtl.com/zh/guide</a></p>\n<p>duanxz：<a href=\"https://www.cnblogs.com/duanxz/tag\">https://www.cnblogs.com/duanxz/tag</a></p>\n<p>Java1234_小锋：<a href=\"http://blog.java1234.com/index.html\">http://blog.java1234.com/index.html</a></p>\n<p>Deserts：<a href=\"https://deserts.io\">https://deserts.io</a></p>\n<p>Super Snail：<a href=\"https://www.dusign.net\">https://www.dusign.net</a></p>\n<p>KIERAN’S BLOG：<a href=\"https://go.kieran.top\">https://go.kieran.top</a></p>\n<p>Mr.Seven：<a href=\"https://itimetraveler.github.io\">https://itimetraveler.github.io</a></p>\n</blockquote>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：601521821@qq.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n<blockquote>\n<p>If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee…</p>\n</blockquote>\n<p><img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img></p>\n"},{"layout":"categories","title":"Categories","description":"Hi , here is Categories ....","header-img":"img/header_img/categories_bg.jpg","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\ndescription: \"Hi , here is Categories ....\"\nheader-img: \"img/header_img/categories_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.975Z","updated":"2021-11-01T07:13:04.975Z","path":"categories/index.html","comments":1,"_id":"ckwozec2k00069kvodpine67d","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive_bg.jpg","date":"2017-03-20T12:49:56.000Z","description":"Don't rush and never settle...... If it's meant to be, it will be......","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive_bg.jpg\"\ndate: 2017-03-20 20:49:56\ndescription: \"Don't rush and never settle...... If it's meant to be, it will be......\"\n---\n","updated":"2017-03-20T12:49:56.000Z","path":"archive/index.html","comments":1,"_id":"ckwozec2l00089kvo9irahetg","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"I don’t know where I am going, but I am on my way......","header-img":"img/header_img/tag_bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"I don’t know where I am going, but I am on my way......\"\nheader-img: \"img/header_img/tag_bg.jpg\"\n---\n","date":"2021-11-01T07:13:05.517Z","updated":"2021-11-01T07:13:05.517Z","path":"tags/index.html","comments":1,"_id":"ckwozec2m00099kvoa9smhdoo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"算法笔记","catalog":true,"lang":"cn","date":"2021-11-12T02:09:37.000Z","subtitle":"Algorithm Note","header-img":"/img/header_img/nier.png","sticky":999,"_content":"## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","source":"_posts/cn/Algorithm-Note.md","raw":"---\ntitle: 算法笔记\ncatalog: true\nlang: cn\ndate: 2021-11-12 10:09:37\nsubtitle: Algorithm Note\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\ncategories:\n- Note\n- Algorithm\nsticky: 999\n---\n## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","slug":"Algorithm-Note","published":1,"updated":"2021-11-12T02:09:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2e00019kvodm0m4l1k","content":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n"},{"title":"算法题库","catalog":true,"lang":"cn","date":"2021-11-08T03:04:24.000Z","subtitle":"力扣每日一题","header-img":"/img/header_img/nier.png","sticky":999,"_content":"\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n","source":"_posts/cn/Algorithm.md","raw":"---\ntitle: 算法题库\ncatalog: true\nlang: cn\ndate: 2021-11-08 11:04:24\nsubtitle: 力扣每日一题\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\n- Leetcode\ncategories:\n- Note\n- Algorithm\nsticky: 999\n---\n\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n","slug":"Algorithm","published":1,"updated":"2021-11-08T03:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2h00039kvo8cyc3c47","content":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo-Theme-LiveMyLife","catalog":true,"date":"2020-04-16T18:34:17.000Z","subtitle":"A succinct hexo theme...","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","source":"_posts/cn/Hexo-Theme-LiveMyLife.md","raw":"---\ntitle: Hexo-Theme-LiveMyLife\ncatalog: true\ndate: 2020-04-17 02:34:17\nsubtitle: A succinct hexo theme...\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n- Hexo-Theme-LiveMyLife\n- Hexo\n- Tutorials\ncategories:\n- [Tutorials,Hexo]\n---\n\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","slug":"Hexo-Theme-LiveMyLife","published":1,"updated":"2020-04-16T18:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2l00079kvo4zm40p6e","content":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n"},{"title":"MarkDown基础","catalog":true,"lang":"cn","date":"2021-11-02T06:36:17.000Z","subtitle":"markdown的基本语法","header-img":"/img/header_img/nier.png","sticky":999,"_content":"## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","source":"_posts/cn/MarkDown-Base.md","raw":"---\ntitle: MarkDown基础\ncatalog: true\nlang: cn\ndate: 2021-11-02 14:36:17\nsubtitle: markdown的基本语法\nheader-img: /img/header_img/nier.png\ntags:\n- markdown\ncategories:\n- Note\nsticky: 999\n---\n## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","slug":"MarkDown-Base","published":1,"updated":"2021-11-02T06:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2t000w9kvodjqydll2","content":"<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n"},{"title":"Unity学习笔记","catalog":true,"lang":"cn","date":"2021-11-08T02:57:50.000Z","subtitle":"learn with MStudio","header-img":"/img/header_img/nier.png","sticky":999,"_content":"待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","source":"_posts/cn/Unity-Study-Note.md","raw":"---\ntitle: Unity学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-08 10:57:50\nsubtitle: learn with MStudio\nheader-img: /img/header_img/nier.png\ntags:\n- Unity\ncategories:\n- Note\nsticky: 999\n---\n待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","slug":"Unity-Study-Note","published":1,"updated":"2021-11-08T02:57:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2u000x9kvobw38dsg2","content":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n","site":{"data":{}},"excerpt":"","more":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n"},{"title":"Python学习笔记","catalog":true,"lang":"cn","date":"2021-11-04T07:25:13.000Z","subtitle":"Python学习笔记","header-img":"/img/header_img/nier.png","sticky":999,"_content":"> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python语法\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 分别赋值\n```\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`的数据类型为： `Number`、`Tuple`、`String`  \n`可变`的数据类型为： `List`、`Set`、`Dictionary`\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> \\<class '\\_\\_main__.A'>  \n> \\<class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n以上代码的输出结果为：  \n> \\<class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] \\<class 'list'>\n> [] \\<class 'list'>\n> [1, 5, 9, '7'] \\<class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n```python\nlst = [1,4]\ndel lst[0]\nprint(lst)\n```\n以上代码的输出结果为：  \n> [4]\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> g:\\Codes\\Python\\algorithm\\test.py in <module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in \\<module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in \\<module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n************************************\n\n### 数值比较\n<!-- TODO: 数值比较 -->\n\n<!-- TODO: _变量 -->\n<!-- TODO: del删除对象 引用 -->\n\n****************************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n\n*****************************************************\n\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  instance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n\n\n## Python math模块\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>","source":"_posts/cn/Python-Note.md","raw":"---\ntitle: Python学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-04 15:25:13\nsubtitle: Python学习笔记\nheader-img: /img/header_img/nier.png\ntags:\n- Python\ncategories:\n- Note\nsticky: 999\n---\n> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python语法\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 分别赋值\n```\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`的数据类型为： `Number`、`Tuple`、`String`  \n`可变`的数据类型为： `List`、`Set`、`Dictionary`\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> \\<class '\\_\\_main__.A'>  \n> \\<class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n以上代码的输出结果为：  \n> \\<class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] \\<class 'list'>\n> [] \\<class 'list'>\n> [1, 5, 9, '7'] \\<class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n```python\nlst = [1,4]\ndel lst[0]\nprint(lst)\n```\n以上代码的输出结果为：  \n> [4]\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> g:\\Codes\\Python\\algorithm\\test.py in <module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in \\<module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in \\<module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n************************************\n\n### 数值比较\n<!-- TODO: 数值比较 -->\n\n<!-- TODO: _变量 -->\n<!-- TODO: del删除对象 引用 -->\n\n****************************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n\n*****************************************************\n\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  instance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n\n\n## Python math模块\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>","slug":"Python-Note","published":1,"updated":"2021-11-04T07:25:13.000Z","_id":"ckwozec2v000z9kvo866yctmx","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h2><ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>windows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。  </li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode  <ul>\n<li>Pycharm</li>\n<li>Rider </li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python语法\"><a href=\"#python语法\" class=\"headerlink\" title=\"python语法\"></a>python语法</h2><h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 分别赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python基本数据类型\"><a href=\"#Python基本数据类型\" class=\"headerlink\" title=\"Python基本数据类型\"></a>Python基本数据类型</h2><p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 </p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number数字\">Number</a></li>\n<li><a href=\"#Tuple元组\">Tuple</a></li>\n<li><a href=\"#String字符串\">String</a></li>\n<li><a href=\"#List列表\">List</a></li>\n<li><a href=\"#Set集合\">Set</a></li>\n<li><a href=\"#Dictionary字典\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br><code>可变</code>的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><a href=\"#type-和-isinstance\" class=\"headerlink\" title=\"type() 和 isinstance()\"></a><code>type()</code> 和 <code>isinstance()</code></h3><p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>type()函数有两个重载方法：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  </p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象  </li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\"><a href=\"#isinstance-与-type-区别：\" class=\"headerlink\" title=\"isinstance() 与 type() 区别：\"></a>isinstance() 与 type() 区别：</h4><p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>isinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>\\<class '\\_\\_main__.A'><br>\\<class '\\_\\_main__.B'><br>True<br>False  </p>\n</blockquote>\n<h3 id=\"Number数字\"><a href=\"#Number数字\" class=\"headerlink\" title=\"Number数字\"></a>Number数字</h3><p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。  </p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\"><a href=\"#具体类型\" class=\"headerlink\" title=\"具体类型\"></a>具体类型</h4><h5 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int\"></a>int</h5><p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h5><p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个临界点是<code>1e+16</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure></p>\n<p>float的正常最多位为16位小数，比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure></p>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float精度问题\">python float 精度问题</a>  </p>\n</blockquote>\n<h5 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool\"></a>bool</h5><p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>Python3中，bool是int的<code>子类</code>；  </p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<strong><em>True</em></strong>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>True<br>2<br>1<br>False<br>False</p>\n<p>注意：从Python3.8开始，使用<strong><em>is</em></strong>和<strong><em>is not</em></strong>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\"><a href=\"#complex\" class=\"headerlink\" title=\"complex\"></a>complex</h5><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\"><a href=\"#数值运算\" class=\"headerlink\" title=\"数值运算\"></a>数值运算</h4><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\"><a href=\"#数字类型转换\" class=\"headerlink\" title=\"数字类型转换\"></a>数字类型转换</h4><p>Python各数字类型间支持互相转换。<br>Python的数字类型转化和创建都可以直接将<strong><em>数据类型作为函数名</em></strong>即可。  </p>\n<p>注意强制类型转换可能会导致<strong><em>数据损失</em></strong>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><h5 id=\"Python的内置函数\"><a href=\"#Python的内置函数\" class=\"headerlink\" title=\"Python的内置函数\"></a><a href=\"#Python内置函数\">Python的内置函数</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的math模块\"><a href=\"#Python的math模块\" class=\"headerlink\" title=\"Python的math模块\"></a><a href=\"#Python-math模块\">Python的math模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的random模块\"><a href=\"#Python的random模块\" class=\"headerlink\" title=\"Python的random模块\"></a><a href=\"#Python-random模块\">Python的random模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"相关常量\"><a href=\"#相关常量\" class=\"headerlink\" title=\"相关常量\"></a>相关常量</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"Tuple元组\"><a href=\"#Tuple元组\" class=\"headerlink\" title=\"Tuple元组\"></a>Tuple元组</h3><p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。  </p>\n<h4 id=\"元组的创建\"><a href=\"#元组的创建\" class=\"headerlink\" title=\"元组的创建\"></a>元组的创建</h4><p>元组的创建方式有两种：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<strong><em>空元组</em></strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"元组的索引和截取\"><a href=\"#元组的索引和截取\" class=\"headerlink\" title=\"元组的索引和截取\"></a>元组的索引和截取</h4><p>因为元组也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9)<br>(8, 9, 7, 2, 23, 1, 1)<br>(8, 7, 23, 1)<br>()<br>(13, 1, 1, 23, 2, 7, 9)  </p>\n</blockquote>\n<h4 id=\"元组运算\"><a href=\"#元组运算\" class=\"headerlink\" title=\"元组运算\"></a>元组运算</h4><p>元组运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#元组的索引和截取\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-1\"><a href=\"#常用函数-1\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p><br></p>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h3><p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\"><a href=\"#字符串创建\" class=\"headerlink\" title=\"字符串创建\"></a>字符串创建</h4><p>我们使用引号<code>( &#39; 或 &quot; )</code>来创建字符串。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>\\<class 'str'></p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 &#39;&#39;&#39;  )</code>来创建多行字符串<br>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure><br>以上代码的结果为：  </p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>多行字符串可以使用制表符<br>TAB (      )。<br>也可以使用换行符 [<br> ]。   </p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串访问\"><a href=\"#字符串访问\" class=\"headerlink\" title=\"字符串访问\"></a>字符串访问</h4><p>字符串的访问和元组类似，使用切片运算和索引定位。   </p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘j’<br>‘5’</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>hello world<br>ello world<br>el<br>hello worl<br>ello worl<br>el ol  </p>\n<p>dlrow oll<br>dlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h4><p>字符串运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#字符串访问\">字符串访问</a></p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h5><p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>更多请见下文<a href=\"#Python转义字符\">Python转义字符</a></p>\n<h5 id=\"r-string\"><a href=\"#r-string\" class=\"headerlink\" title=\"r-string\"></a>r-string</h5><p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>使用方法是在字符串引号前加上 <code>r/R</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>row string<br>\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"%格式\"></a>%格式</h5><p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><strong><em>python字符串格式化符号</em></strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong><em>格式化操作符辅助指令</em></strong><br>格式化操作符位于%和格式化符号字母中间。    ex. %.2f<br>| 符号 | 功能 |<br>| :—: | :——- |<br>| * | 定义宽度或者小数点精度 |<br>| - | 用做左对齐 |<br>| + | 在正数前面显示加号( + ) |<br>| <sp> |     在正数前面显示空格 |<br>| #    | 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) |<br>| 0    | 显示的数字前面填充’0’而不是默认的空格 |<br>| % |    ‘%%’输出一个单一的’%’ |<br>| (var)    | 映射变量(字典参数) |<br>| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |</p>\n<h5 id=\"format函数\"><a href=\"#format函数\" class=\"headerlink\" title=\"format函数\"></a>format函数</h5><p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\"><a href=\"#f-string\" class=\"headerlink\" title=\"f-string\"></a>f-string</h5><p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:  </p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-2\"><a href=\"#常用函数-2\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>检查\\检测 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>字符串操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,’0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\"><a href=\"#Python转义字符\" class=\"headerlink\" title=\"Python转义字符\"></a>Python转义字符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\‘</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\“</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"List列表\"><a href=\"#List列表\" class=\"headerlink\" title=\"List列表\"></a>List列表</h3><p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>列表是可变的数据类型，即其内的数据可以被改变。  </p>\n<h4 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h4><p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] \\<class 'list'><br>[] \\<class 'list'><br>[1, 5, 9, ‘7’] \\<class 'list'><br>[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的索引和截取\"><a href=\"#列表的索引和截取\" class=\"headerlink\" title=\"列表的索引和截取\"></a>列表的索引和截取</h4><p>因为列表也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9]<br>[8, 9, 7, 2, 23, 1, 1]<br>[8, 7, 23, 1]<br>[]<br>[13, 1, 1, 23, 2, 7, 9]<br>[13, 1, 1, 23, 2, 7, 9, 8, 6]   </p>\n</blockquote>\n<h4 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h4><p>因为列表属于可变的数据类型，所以其元素可以修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><strong><em>使用del</em></strong>删除列表元素：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[4]</p>\n</blockquote>\n<h4 id=\"列表运算\"><a href=\"#列表运算\" class=\"headerlink\" title=\"列表运算\"></a>列表运算</h4><p>列表运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#列表的索引和截取\">列表的索引和截取</a></p>\n<h4 id=\"常用函数-3\"><a href=\"#常用函数-3\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>列表操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\"><a href=\"#Set集合\" class=\"headerlink\" title=\"Set集合\"></a>Set集合</h3><p>集合（set）是一个无序的不重复元素序列。<br>在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h4><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合  </p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{1, 5, 6}<br>{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\"><a href=\"#操作集合\" class=\"headerlink\" title=\"操作集合\"></a>操作集合</h4><h5 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9, 11, 13}<br>{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}  </p>\n</blockquote>\n<h5 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>{2, 6, 7, 8, 9}<br>2<br>{6, 7, 8, 9}<br>Traceback (most recent call last)<br>g:\\Codes\\Python\\algorithm\\test.py in <module><br>——&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><p><strong><em><code>数学集合运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘r’, ‘d’, ‘b’}<br>a-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘c’, ‘a’}<br>a-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-4\"><a href=\"#常用函数-4\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\"><a href=\"#Dictionary字典\" class=\"headerlink\" title=\"Dictionary字典\"></a>Dictionary字典</h3><blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\"><a href=\"#创建字典\" class=\"headerlink\" title=\"创建字典\"></a>创建字典</h4><p>创建字典的方法有三种：  </p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{2: 4, 4: 16, 6: 36}<br>{}<br>{}  </p>\n</blockquote>\n<h4 id=\"字典操作\"><a href=\"#字典操作\" class=\"headerlink\" title=\"字典操作\"></a>字典操作</h4><p><strong><em><code>访问值</code></em></strong><br>要访问字典的值只需要将键值填入字典后的方括号中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>test.py in \\<module><br>      1 dict1 = {‘a’:1,’b’:2}<br>——&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><strong><em><code>修改/创建值</code></em></strong><br>要修改字典的值，直接将对应的键值修改即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3  </p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><strong><em><code>删除值</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>{}<br>-—————————————————————————-<br>NameError                                 Traceback (most recent call last)<br>test.py in \\<module><br>     11 # 删除字典<br>     12 del dict1<br>—-&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br>判断key是否在字典中已存在.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为： </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-5\"><a href=\"#常用函数-5\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h3 id=\"数值比较\"><a href=\"#数值比较\" class=\"headerlink\" title=\"数值比较\"></a>数值比较</h3><!-- TODO: 数值比较 -->\n<!-- TODO: _变量 -->\n<!-- TODO: del删除对象 引用 -->\n<hr>\n<h2 id=\"Python序列sequence\"><a href=\"#Python序列sequence\" class=\"headerlink\" title=\"Python序列sequence\"></a>Python序列sequence</h2><h3 id=\"序列运算\"><a href=\"#序列运算\" class=\"headerlink\" title=\"序列运算\"></a>序列运算</h3><!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\"><a href=\"#运算-拼接\" class=\"headerlink\" title=\"+运算/拼接\"></a>+运算/拼接</h4><h4 id=\"运算-复制\"><a href=\"#运算-复制\" class=\"headerlink\" title=\"*运算/复制\"></a>*运算/复制</h4><h4 id=\"in运算\"><a href=\"#in运算\" class=\"headerlink\" title=\"in运算\"></a>in运算</h4><h4 id=\"切片运算符\"><a href=\"#切片运算符\" class=\"headerlink\" title=\"切片运算符\"></a>切片运算符</h4><hr>\n<h2 id=\"Python内置函数\"><a href=\"#Python内置函数\" class=\"headerlink\" title=\"Python内置函数\"></a>Python内置函数</h2><!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  instance() -->\n<h3 id=\"abs\"><a href=\"#abs\" class=\"headerlink\" title=\"abs()\"></a>abs()</h3><p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>1.0<br>5.0<br>0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>format 基本语法是通过 {} 和 : 来代替以前的 % 。 </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li><em>args/*</em>kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>返回格式化后的字符串</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>hello<br>world hello world<br>网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>value 为: 13<br>value 为: 13<br>a 元素对应的位置是 {0}  </p>\n</blockquote>\n<p><strong><em>还可以使用format函数进行数字格式化</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"len()\"></a>len()</h3><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对象长度。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>0<br>9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max()\"></a>max()</h3><p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>6<br>s<br>6<br>[1, 3, 4]<br>[2, 1, 9, 4]<br>babc</p>\n<p>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min()\"></a>min()</h3><p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>-1<br>a<br>1<br>[1, 2, 6]<br>[1, 2, 6, 5, 3]<br>abcd<br>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\"><a href=\"#pow\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8<br>15.625<br>0</p>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>精度要求高的，不建议使用该函数。    </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>10<br>11<br>1.53<br>1.6<br>1.32<br>0<br>-1.24<br>-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple()\"></a>tuple()</h3><p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-math模块\"><a href=\"#Python-math模块\" class=\"headerlink\" title=\"Python math模块\"></a>Python math模块</h2><!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"acos\"><a href=\"#acos\" class=\"headerlink\" title=\"acos()\"></a>acos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"asin\"><a href=\"#asin\" class=\"headerlink\" title=\"asin()\"></a>asin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"atan\"><a href=\"#atan\" class=\"headerlink\" title=\"atan()\"></a>atan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h3><p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回上入整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\"><a href=\"#cos\" class=\"headerlink\" title=\"cos()\"></a>cos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"degress\"><a href=\"#degress\" class=\"headerlink\" title=\"degress()\"></a>degress()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp()\"></a>exp()</h3><p>exp()方法返回x的指数,e^x。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的指数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>2.718281828459045<br>23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\"><a href=\"#fabs\" class=\"headerlink\" title=\"fabs()\"></a>fabs()</h3><p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1.2<br>1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回下舍整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>4<br>-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log()\"></a>log()</h3><p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>0.0<br>1.0<br>2.0<br>1.892789260714372</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\"><a href=\"#log10\" class=\"headerlink\" title=\"log10()\"></a>log10()</h3><p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\"><a href=\"#modf\" class=\"headerlink\" title=\"modf()\"></a>modf()</h3><p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>(-0.52, -1.0)<br>(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-1\"><a href=\"#pow-1\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的y次方值</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8.0<br>15.625</p>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\"><a href=\"#radians\" class=\"headerlink\" title=\"radians()\"></a>radians()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sin\"><a href=\"#sin\" class=\"headerlink\" title=\"sin()\"></a>sin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sqrt\"><a href=\"#sqrt\" class=\"headerlink\" title=\"sqrt()\"></a>sqrt()</h3><p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字x的平方根。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\"><a href=\"#tan\" class=\"headerlink\" title=\"tan()\"></a>tan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h2 id=\"Python-random模块\"><a href=\"#Python-random模块\" class=\"headerlink\" title=\"Python random模块\"></a>Python random模块</h2><blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"choice\"><a href=\"#choice\" class=\"headerlink\" title=\"choice()\"></a>choice()</h3><p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个随机项</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random()\"></a>random()</h3><p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>无  </p>\n<p><strong>返回值：</strong><br>返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"randrange\"><a href=\"#randrange\" class=\"headerlink\" title=\"randrange()\"></a>randrange()</h3><p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"seed\"><a href=\"#seed\" class=\"headerlink\" title=\"seed()\"></a>seed()</h3><p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>无</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>使用默认种子生成随机数： 0.20706442655860602<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle()\"></a>shuffle()</h3><p>将序列的所有元素随机排序</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>lst :  列表 </li>\n</ul>\n<p><strong>返回值：</strong><br>返回None</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\"><a href=\"#uniform\" class=\"headerlink\" title=\"uniform()\"></a>uniform()</h3><p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\"><a href=\"#Python常见问题\" class=\"headerlink\" title=\"Python常见问题\"></a>Python常见问题</h2><h3 id=\"float精度问题\"><a href=\"#float精度问题\" class=\"headerlink\" title=\"float精度问题\"></a>float精度问题</h3><p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\"><a href=\"#round-关于四舍五入不成功的问题\" class=\"headerlink\" title=\"round()关于四舍五入不成功的问题\"></a>round()关于四舍五入不成功的问题</h3><p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。<br> <!-- TODO:round精度问题补全  --><br>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h2><ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>windows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。  </li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode  <ul>\n<li>Pycharm</li>\n<li>Rider </li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python语法\"><a href=\"#python语法\" class=\"headerlink\" title=\"python语法\"></a>python语法</h2><h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 分别赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python基本数据类型\"><a href=\"#Python基本数据类型\" class=\"headerlink\" title=\"Python基本数据类型\"></a>Python基本数据类型</h2><p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 </p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number数字\">Number</a></li>\n<li><a href=\"#Tuple元组\">Tuple</a></li>\n<li><a href=\"#String字符串\">String</a></li>\n<li><a href=\"#List列表\">List</a></li>\n<li><a href=\"#Set集合\">Set</a></li>\n<li><a href=\"#Dictionary字典\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br><code>可变</code>的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><a href=\"#type-和-isinstance\" class=\"headerlink\" title=\"type() 和 isinstance()\"></a><code>type()</code> 和 <code>isinstance()</code></h3><p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>type()函数有两个重载方法：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  </p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象  </li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\"><a href=\"#isinstance-与-type-区别：\" class=\"headerlink\" title=\"isinstance() 与 type() 区别：\"></a>isinstance() 与 type() 区别：</h4><p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>isinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>\\<class '\\_\\_main__.A'><br>\\<class '\\_\\_main__.B'><br>True<br>False  </p>\n</blockquote>\n<h3 id=\"Number数字\"><a href=\"#Number数字\" class=\"headerlink\" title=\"Number数字\"></a>Number数字</h3><p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。  </p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\"><a href=\"#具体类型\" class=\"headerlink\" title=\"具体类型\"></a>具体类型</h4><h5 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int\"></a>int</h5><p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h5><p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个临界点是<code>1e+16</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure></p>\n<p>float的正常最多位为16位小数，比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure></p>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float精度问题\">python float 精度问题</a>  </p>\n</blockquote>\n<h5 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool\"></a>bool</h5><p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>Python3中，bool是int的<code>子类</code>；  </p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<strong><em>True</em></strong>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>True<br>2<br>1<br>False<br>False</p>\n<p>注意：从Python3.8开始，使用<strong><em>is</em></strong>和<strong><em>is not</em></strong>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\"><a href=\"#complex\" class=\"headerlink\" title=\"complex\"></a>complex</h5><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\"><a href=\"#数值运算\" class=\"headerlink\" title=\"数值运算\"></a>数值运算</h4><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\"><a href=\"#数字类型转换\" class=\"headerlink\" title=\"数字类型转换\"></a>数字类型转换</h4><p>Python各数字类型间支持互相转换。<br>Python的数字类型转化和创建都可以直接将<strong><em>数据类型作为函数名</em></strong>即可。  </p>\n<p>注意强制类型转换可能会导致<strong><em>数据损失</em></strong>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><h5 id=\"Python的内置函数\"><a href=\"#Python的内置函数\" class=\"headerlink\" title=\"Python的内置函数\"></a><a href=\"#Python内置函数\">Python的内置函数</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的math模块\"><a href=\"#Python的math模块\" class=\"headerlink\" title=\"Python的math模块\"></a><a href=\"#Python-math模块\">Python的math模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的random模块\"><a href=\"#Python的random模块\" class=\"headerlink\" title=\"Python的random模块\"></a><a href=\"#Python-random模块\">Python的random模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"相关常量\"><a href=\"#相关常量\" class=\"headerlink\" title=\"相关常量\"></a>相关常量</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"Tuple元组\"><a href=\"#Tuple元组\" class=\"headerlink\" title=\"Tuple元组\"></a>Tuple元组</h3><p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。  </p>\n<h4 id=\"元组的创建\"><a href=\"#元组的创建\" class=\"headerlink\" title=\"元组的创建\"></a>元组的创建</h4><p>元组的创建方式有两种：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<strong><em>空元组</em></strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"元组的索引和截取\"><a href=\"#元组的索引和截取\" class=\"headerlink\" title=\"元组的索引和截取\"></a>元组的索引和截取</h4><p>因为元组也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9)<br>(8, 9, 7, 2, 23, 1, 1)<br>(8, 7, 23, 1)<br>()<br>(13, 1, 1, 23, 2, 7, 9)  </p>\n</blockquote>\n<h4 id=\"元组运算\"><a href=\"#元组运算\" class=\"headerlink\" title=\"元组运算\"></a>元组运算</h4><p>元组运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#元组的索引和截取\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-1\"><a href=\"#常用函数-1\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p><br></p>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h3><p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\"><a href=\"#字符串创建\" class=\"headerlink\" title=\"字符串创建\"></a>字符串创建</h4><p>我们使用引号<code>( &#39; 或 &quot; )</code>来创建字符串。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>\\<class 'str'></p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 &#39;&#39;&#39;  )</code>来创建多行字符串<br>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure><br>以上代码的结果为：  </p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>多行字符串可以使用制表符<br>TAB (      )。<br>也可以使用换行符 [<br> ]。   </p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串访问\"><a href=\"#字符串访问\" class=\"headerlink\" title=\"字符串访问\"></a>字符串访问</h4><p>字符串的访问和元组类似，使用切片运算和索引定位。   </p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘j’<br>‘5’</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>hello world<br>ello world<br>el<br>hello worl<br>ello worl<br>el ol  </p>\n<p>dlrow oll<br>dlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h4><p>字符串运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#字符串访问\">字符串访问</a></p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h5><p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>更多请见下文<a href=\"#Python转义字符\">Python转义字符</a></p>\n<h5 id=\"r-string\"><a href=\"#r-string\" class=\"headerlink\" title=\"r-string\"></a>r-string</h5><p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>使用方法是在字符串引号前加上 <code>r/R</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>row string<br>\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"%格式\"></a>%格式</h5><p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><strong><em>python字符串格式化符号</em></strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong><em>格式化操作符辅助指令</em></strong><br>格式化操作符位于%和格式化符号字母中间。    ex. %.2f<br>| 符号 | 功能 |<br>| :—: | :——- |<br>| * | 定义宽度或者小数点精度 |<br>| - | 用做左对齐 |<br>| + | 在正数前面显示加号( + ) |<br>| <sp> |     在正数前面显示空格 |<br>| #    | 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) |<br>| 0    | 显示的数字前面填充’0’而不是默认的空格 |<br>| % |    ‘%%’输出一个单一的’%’ |<br>| (var)    | 映射变量(字典参数) |<br>| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |</p>\n<h5 id=\"format函数\"><a href=\"#format函数\" class=\"headerlink\" title=\"format函数\"></a>format函数</h5><p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\"><a href=\"#f-string\" class=\"headerlink\" title=\"f-string\"></a>f-string</h5><p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:  </p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-2\"><a href=\"#常用函数-2\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>检查\\检测 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>字符串操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,’0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\"><a href=\"#Python转义字符\" class=\"headerlink\" title=\"Python转义字符\"></a>Python转义字符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\‘</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\“</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"List列表\"><a href=\"#List列表\" class=\"headerlink\" title=\"List列表\"></a>List列表</h3><p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>列表是可变的数据类型，即其内的数据可以被改变。  </p>\n<h4 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h4><p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] \\<class 'list'><br>[] \\<class 'list'><br>[1, 5, 9, ‘7’] \\<class 'list'><br>[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的索引和截取\"><a href=\"#列表的索引和截取\" class=\"headerlink\" title=\"列表的索引和截取\"></a>列表的索引和截取</h4><p>因为列表也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure><br>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9]<br>[8, 9, 7, 2, 23, 1, 1]<br>[8, 7, 23, 1]<br>[]<br>[13, 1, 1, 23, 2, 7, 9]<br>[13, 1, 1, 23, 2, 7, 9, 8, 6]   </p>\n</blockquote>\n<h4 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h4><p>因为列表属于可变的数据类型，所以其元素可以修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><strong><em>使用del</em></strong>删除列表元素：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[4]</p>\n</blockquote>\n<h4 id=\"列表运算\"><a href=\"#列表运算\" class=\"headerlink\" title=\"列表运算\"></a>列表运算</h4><p>列表运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#列表的索引和截取\">列表的索引和截取</a></p>\n<h4 id=\"常用函数-3\"><a href=\"#常用函数-3\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>列表操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\"><a href=\"#Set集合\" class=\"headerlink\" title=\"Set集合\"></a>Set集合</h3><p>集合（set）是一个无序的不重复元素序列。<br>在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h4><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合  </p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{1, 5, 6}<br>{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\"><a href=\"#操作集合\" class=\"headerlink\" title=\"操作集合\"></a>操作集合</h4><h5 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9, 11, 13}<br>{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}  </p>\n</blockquote>\n<h5 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>{2, 6, 7, 8, 9}<br>2<br>{6, 7, 8, 9}<br>Traceback (most recent call last)<br>g:\\Codes\\Python\\algorithm\\test.py in <module><br>——&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><p><strong><em><code>数学集合运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘r’, ‘d’, ‘b’}<br>a-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘c’, ‘a’}<br>a-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-4\"><a href=\"#常用函数-4\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\"><a href=\"#Dictionary字典\" class=\"headerlink\" title=\"Dictionary字典\"></a>Dictionary字典</h3><blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\"><a href=\"#创建字典\" class=\"headerlink\" title=\"创建字典\"></a>创建字典</h4><p>创建字典的方法有三种：  </p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{2: 4, 4: 16, 6: 36}<br>{}<br>{}  </p>\n</blockquote>\n<h4 id=\"字典操作\"><a href=\"#字典操作\" class=\"headerlink\" title=\"字典操作\"></a>字典操作</h4><p><strong><em><code>访问值</code></em></strong><br>要访问字典的值只需要将键值填入字典后的方括号中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>test.py in \\<module><br>      1 dict1 = {‘a’:1,’b’:2}<br>——&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><strong><em><code>修改/创建值</code></em></strong><br>要修改字典的值，直接将对应的键值修改即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3  </p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><strong><em><code>删除值</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>{}<br>-—————————————————————————-<br>NameError                                 Traceback (most recent call last)<br>test.py in \\<module><br>     11 # 删除字典<br>     12 del dict1<br>—-&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br>判断key是否在字典中已存在.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为： </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-5\"><a href=\"#常用函数-5\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h3 id=\"数值比较\"><a href=\"#数值比较\" class=\"headerlink\" title=\"数值比较\"></a>数值比较</h3><!-- TODO: 数值比较 -->\n<!-- TODO: _变量 -->\n<!-- TODO: del删除对象 引用 -->\n<hr>\n<h2 id=\"Python序列sequence\"><a href=\"#Python序列sequence\" class=\"headerlink\" title=\"Python序列sequence\"></a>Python序列sequence</h2><h3 id=\"序列运算\"><a href=\"#序列运算\" class=\"headerlink\" title=\"序列运算\"></a>序列运算</h3><!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\"><a href=\"#运算-拼接\" class=\"headerlink\" title=\"+运算/拼接\"></a>+运算/拼接</h4><h4 id=\"运算-复制\"><a href=\"#运算-复制\" class=\"headerlink\" title=\"*运算/复制\"></a>*运算/复制</h4><h4 id=\"in运算\"><a href=\"#in运算\" class=\"headerlink\" title=\"in运算\"></a>in运算</h4><h4 id=\"切片运算符\"><a href=\"#切片运算符\" class=\"headerlink\" title=\"切片运算符\"></a>切片运算符</h4><hr>\n<h2 id=\"Python内置函数\"><a href=\"#Python内置函数\" class=\"headerlink\" title=\"Python内置函数\"></a>Python内置函数</h2><!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  instance() -->\n<h3 id=\"abs\"><a href=\"#abs\" class=\"headerlink\" title=\"abs()\"></a>abs()</h3><p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>1.0<br>5.0<br>0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>format 基本语法是通过 {} 和 : 来代替以前的 % 。 </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li><em>args/*</em>kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>返回格式化后的字符串</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>hello<br>world hello world<br>网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>value 为: 13<br>value 为: 13<br>a 元素对应的位置是 {0}  </p>\n</blockquote>\n<p><strong><em>还可以使用format函数进行数字格式化</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"len()\"></a>len()</h3><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对象长度。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>0<br>9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max()\"></a>max()</h3><p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>6<br>s<br>6<br>[1, 3, 4]<br>[2, 1, 9, 4]<br>babc</p>\n<p>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min()\"></a>min()</h3><p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>-1<br>a<br>1<br>[1, 2, 6]<br>[1, 2, 6, 5, 3]<br>abcd<br>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\"><a href=\"#pow\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8<br>15.625<br>0</p>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>精度要求高的，不建议使用该函数。    </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>10<br>11<br>1.53<br>1.6<br>1.32<br>0<br>-1.24<br>-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple()\"></a>tuple()</h3><p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-math模块\"><a href=\"#Python-math模块\" class=\"headerlink\" title=\"Python math模块\"></a>Python math模块</h2><!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"acos\"><a href=\"#acos\" class=\"headerlink\" title=\"acos()\"></a>acos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"asin\"><a href=\"#asin\" class=\"headerlink\" title=\"asin()\"></a>asin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"atan\"><a href=\"#atan\" class=\"headerlink\" title=\"atan()\"></a>atan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h3><p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回上入整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\"><a href=\"#cos\" class=\"headerlink\" title=\"cos()\"></a>cos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"degress\"><a href=\"#degress\" class=\"headerlink\" title=\"degress()\"></a>degress()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp()\"></a>exp()</h3><p>exp()方法返回x的指数,e^x。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的指数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>2.718281828459045<br>23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\"><a href=\"#fabs\" class=\"headerlink\" title=\"fabs()\"></a>fabs()</h3><p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1.2<br>1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回下舍整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>4<br>-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log()\"></a>log()</h3><p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>0.0<br>1.0<br>2.0<br>1.892789260714372</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\"><a href=\"#log10\" class=\"headerlink\" title=\"log10()\"></a>log10()</h3><p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\"><a href=\"#modf\" class=\"headerlink\" title=\"modf()\"></a>modf()</h3><p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>(-0.52, -1.0)<br>(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-1\"><a href=\"#pow-1\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的y次方值</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8.0<br>15.625</p>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\"><a href=\"#radians\" class=\"headerlink\" title=\"radians()\"></a>radians()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sin\"><a href=\"#sin\" class=\"headerlink\" title=\"sin()\"></a>sin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sqrt\"><a href=\"#sqrt\" class=\"headerlink\" title=\"sqrt()\"></a>sqrt()</h3><p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字x的平方根。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\"><a href=\"#tan\" class=\"headerlink\" title=\"tan()\"></a>tan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h2 id=\"Python-random模块\"><a href=\"#Python-random模块\" class=\"headerlink\" title=\"Python random模块\"></a>Python random模块</h2><blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"choice\"><a href=\"#choice\" class=\"headerlink\" title=\"choice()\"></a>choice()</h3><p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个随机项</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random()\"></a>random()</h3><p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>无  </p>\n<p><strong>返回值：</strong><br>返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"randrange\"><a href=\"#randrange\" class=\"headerlink\" title=\"randrange()\"></a>randrange()</h3><p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"seed\"><a href=\"#seed\" class=\"headerlink\" title=\"seed()\"></a>seed()</h3><p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>无</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>使用默认种子生成随机数： 0.20706442655860602<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle()\"></a>shuffle()</h3><p>将序列的所有元素随机排序</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>lst :  列表 </li>\n</ul>\n<p><strong>返回值：</strong><br>返回None</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\"><a href=\"#uniform\" class=\"headerlink\" title=\"uniform()\"></a>uniform()</h3><p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\"><a href=\"#Python常见问题\" class=\"headerlink\" title=\"Python常见问题\"></a>Python常见问题</h2><h3 id=\"float精度问题\"><a href=\"#float精度问题\" class=\"headerlink\" title=\"float精度问题\"></a>float精度问题</h3><p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\"><a href=\"#round-关于四舍五入不成功的问题\" class=\"headerlink\" title=\"round()关于四舍五入不成功的问题\"></a>round()关于四舍五入不成功的问题</h3><p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。<br> <!-- TODO:round精度问题补全  --><br>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n"},{"title":"使用Hexo搭建博客","catalog":true,"lang":"cn","date":"2021-11-02T05:00:23.000Z","subtitle":null,"header-img":"/img/header_img/nier.png","_content":"> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","source":"_posts/cn/hexo-for-building-blog.md","raw":"---\ntitle: 使用Hexo搭建博客\ncatalog: true\nlang: cn\ndate: 2021-11-02 13:00:23\nsubtitle: \nheader-img: /img/header_img/nier.png\ntags:\n- Hexo\n- Blog\ncategories:\n- [etc.,Hexo]\n---\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","slug":"hexo-for-building-blog","published":1,"updated":"2021-11-02T05:00:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwozec2v00109kvoae6c63z1","content":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","slug":"dp1.png","post":"ckwozec2e00019kvodm0m4l1k","modified":0,"renderable":0},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","slug":"bulbswitcher.jpg","post":"ckwozec2h00039kvo8cyc3c47","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","slug":"bglinecanvas.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","slug":"dark.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","slug":"langcn.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","slug":"langen.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","slug":"light.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","slug":"livemylife-desktop.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","slug":"mouseclick.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","slug":"ribbon.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","slug":"top.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","slug":"wave.png","post":"ckwozec2l00079kvo4zm40p6e","modified":0,"renderable":0},{"_id":"source/_posts/cn/MarkDown-Base/title.png","slug":"title.png","post":"ckwozec2t000w9kvodjqydll2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckwozec2e00019kvodm0m4l1k","category_id":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2r000m9kvogbsl7xj8"},{"post_id":"ckwozec2e00019kvodm0m4l1k","category_id":"ckwozec2p000f9kvoa278cqqg","_id":"ckwozec2r000o9kvo6f4q3tgh"},{"post_id":"ckwozec2h00039kvo8cyc3c47","category_id":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2r000p9kvogl7mh54p"},{"post_id":"ckwozec2h00039kvo8cyc3c47","category_id":"ckwozec2p000f9kvoa278cqqg","_id":"ckwozec2r000q9kvobvtk77td"},{"post_id":"ckwozec2l00079kvo4zm40p6e","category_id":"ckwozec2o000d9kvo4jcneedq","_id":"ckwozec2s000t9kvoba0i93a4"},{"post_id":"ckwozec2l00079kvo4zm40p6e","category_id":"ckwozec2r000l9kvo3cz50rto","_id":"ckwozec2s000v9kvob0ubhqi3"},{"post_id":"ckwozec2t000w9kvodjqydll2","category_id":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2w00119kvoetoa8sc5"},{"post_id":"ckwozec2u000x9kvobw38dsg2","category_id":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2w00129kvo16290alh"},{"post_id":"ckwozec2v000z9kvo866yctmx","category_id":"ckwozec2j00049kvodbo0gxdc","_id":"ckwozec2x00169kvog5ddhq70"},{"post_id":"ckwozec2v00109kvoae6c63z1","category_id":"ckwozec2x00159kvoe7j576jt","_id":"ckwozec2z001e9kvo9u7adxb5"},{"post_id":"ckwozec2v00109kvoae6c63z1","category_id":"ckwozec2y00199kvo9uijf5ow","_id":"ckwozec2z001f9kvo9zj01lqg"}],"PostTag":[{"post_id":"ckwozec2e00019kvodm0m4l1k","tag_id":"ckwozec2k00059kvodvhh0xd2","_id":"ckwozec2o000c9kvohro44ova"},{"post_id":"ckwozec2h00039kvo8cyc3c47","tag_id":"ckwozec2k00059kvodvhh0xd2","_id":"ckwozec2p000h9kvo6aurark2"},{"post_id":"ckwozec2h00039kvo8cyc3c47","tag_id":"ckwozec2o000e9kvob13214qo","_id":"ckwozec2p000i9kvoc44s58q2"},{"post_id":"ckwozec2l00079kvo4zm40p6e","tag_id":"ckwozec2p000g9kvob2al1226","_id":"ckwozec2r000r9kvo5sbfg94e"},{"post_id":"ckwozec2l00079kvo4zm40p6e","tag_id":"ckwozec2q000k9kvo73xshf86","_id":"ckwozec2s000s9kvocah80p88"},{"post_id":"ckwozec2l00079kvo4zm40p6e","tag_id":"ckwozec2r000n9kvodofcg9ii","_id":"ckwozec2s000u9kvo7gryes32"},{"post_id":"ckwozec2t000w9kvodjqydll2","tag_id":"ckwozec2v000y9kvoh016h3cv","_id":"ckwozec2x00149kvo13obbghk"},{"post_id":"ckwozec2u000x9kvobw38dsg2","tag_id":"ckwozec2w00139kvo62gj4i95","_id":"ckwozec2y00189kvobwko36oa"},{"post_id":"ckwozec2v000z9kvo866yctmx","tag_id":"ckwozec2x00179kvo51l0fa2l","_id":"ckwozec2y001b9kvog26v8hlk"},{"post_id":"ckwozec2v00109kvoae6c63z1","tag_id":"ckwozec2q000k9kvo73xshf86","_id":"ckwozec2z001c9kvo4272fw25"},{"post_id":"ckwozec2v00109kvoae6c63z1","tag_id":"ckwozec2y001a9kvoeqra3qrt","_id":"ckwozec2z001d9kvo2l0x4su2"}],"Tag":[{"name":"Algorithm","_id":"ckwozec2k00059kvodvhh0xd2"},{"name":"Leetcode","_id":"ckwozec2o000e9kvob13214qo"},{"name":"Hexo-Theme-LiveMyLife","_id":"ckwozec2p000g9kvob2al1226"},{"name":"Hexo","_id":"ckwozec2q000k9kvo73xshf86"},{"name":"Tutorials","_id":"ckwozec2r000n9kvodofcg9ii"},{"name":"markdown","_id":"ckwozec2v000y9kvoh016h3cv"},{"name":"Unity","_id":"ckwozec2w00139kvo62gj4i95"},{"name":"Python","_id":"ckwozec2x00179kvo51l0fa2l"},{"name":"Blog","_id":"ckwozec2y001a9kvoeqra3qrt"}]}}