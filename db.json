{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/langselect.js","path":"js/langselect.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/mouseclick.js","path":"js/mouseclick.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","path":"js/comment/gitalk_.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/LICENSE","path":"LICENSE","modified":0,"renderable":0},{"_id":"source/img/avatar/GRIS.png","path":"img/avatar/GRIS.png","modified":0,"renderable":0},{"_id":"source/img/avatar/maid.jpg","path":"img/avatar/maid.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/404_bg.jpg","path":"img/header_img/404_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg.jpg","path":"img/header_img/archive_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg2.jpg","path":"img/header_img/archive_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg3.jpg","path":"img/header_img/archive_bg3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg.jpg","path":"img/header_img/lml_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/categories_bg.jpg","path":"img/header_img/categories_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg8.jpg","path":"img/header_img/lml_bg8.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/newhome_bg.jpg","path":"img/header_img/newhome_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/nier.png","path":"img/header_img/nier.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag_bg.jpg","path":"img/header_img/tag_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/signature.png","path":"img/signature/signature.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"ec2d37d705a85fa3eaf6f32af4c8962f5c7ef230","modified":1635750784862},{"_id":"source/CNAME","hash":"d9b12b2da32914f4311e7a37bf986c79c8903e26","modified":1642648427910},{"_id":"source/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1635750784863},{"_id":"source/about/index.md","hash":"ebcee64c6d2649570d9d5daba1384277359cb0bc","modified":1642647920993},{"_id":"source/categories/index.md","hash":"3d5db5dcead0a4f2f8605d1cd2db6df3e8e7e4db","modified":1635750784975},{"_id":"source/tags/index.md","hash":"52e3cad1bc1fb97f9429d4b5053ab97dc6cf22e8","modified":1635750785517},{"_id":"source/archive/index.md","hash":"8e6b2d065236ab2c87866faaedfc4b902a558752","modified":1642647934227},{"_id":"source/_posts/cn/ACGN-Recommendation.md","hash":"96ab50dadb8aae2319970e1686be85dd6977eadf","modified":1642820172547},{"_id":"source/_posts/cn/Algorithm-Note.md","hash":"e210ef1ebcbd22a1de7a4bcd71e8d66945bc54e1","modified":1642745323317},{"_id":"source/_posts/cn/Algorithm.md","hash":"b1a223a6216f9de1b07de73e431342ec0120fc11","modified":1637133818167},{"_id":"source/_posts/cn/Data-Analysis-Note.md","hash":"53f2de038c588bd3724376ba895a4b4b221af628","modified":1644835571586},{"_id":"source/_posts/cn/Existentialism.md","hash":"6dc731c3dbc7d0aa247e0f8f428e51133cf9efed","modified":1642820135145},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife.md","hash":"782f71ed413216da1e54475cf175b48258940d9e","modified":1636340584138},{"_id":"source/_posts/cn/MarkDown-Base.md","hash":"daa81c924f7cf6ed3a56821179b229b63a846c6d","modified":1642993056488},{"_id":"source/_posts/cn/hexo-for-building-blog.md","hash":"af56e9aef1337bdc73f760e6b051ff06a220127e","modified":1636340575048},{"_id":"source/_posts/cn/Unity-Study-Note.md","hash":"e1d1bb0af360fda35ad94909606820aa39d37777","modified":1636813550337},{"_id":"source/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1635758222043},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1636952969235},{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1636684773421},{"_id":"source/_posts/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1635860346064},{"_id":"source/_posts/cn/Python-Note/function-1.png","hash":"95c90eadd8bbfc252bb17f695f251e13a8e9a4d3","modified":1642653950982},{"_id":"source/_posts/cn/Python-Note/if-2.png","hash":"f8458dedf361a5a7551edfaf9d794859b2e39bb4","modified":1642561423740},{"_id":"source/_posts/cn/Python-Note/if-1.png","hash":"58f020a3434e82f1763053012e5c9772e4cc96ee","modified":1642560004679},{"_id":"source/_posts/cn/Python-Note/module-1.png","hash":"6e223869b3ec267929ec1ad18672a377f59b80be","modified":1642899507987},{"_id":"source/_posts/cn/Python-Note/rw-problem.png","hash":"e02f9a8b20127e7b95d81b58f01bb84fddfcf9f1","modified":1642926500892},{"_id":"source/_posts/cn/Python-Note/loop-1.jpg","hash":"302acef8a0d975adc5b0c41b5b63a2a5c96cfb8d","modified":1642562446020},{"_id":"source/_posts/cn/Python-Note/rw_test_2.png","hash":"f53edef8d76dfa95a7e71aed4815bbeed5a37406","modified":1642908780387},{"_id":"source/_posts/cn/Python-Note/rw_test_1.png","hash":"683fef1be2681c7a18aaae9bc3d5dae8b678d7fe","modified":1642908746135},{"_id":"source/_posts/cn/Python-Note/vscode-2.png","hash":"d3fe40552bf0f09139a0bfe9e9ec292cc4690e74","modified":1642927020576},{"_id":"source/_posts/cn/Python-Note/solute.png","hash":"340a8c0dcbbf69f4111c652a7567b2c081228591","modified":1642927466911},{"_id":"source/_posts/cn/Python-Note/vscode-3.png","hash":"a850c8189de1ca80b7c8efb13ab88a730e370ed3","modified":1642927375331},{"_id":"source/_posts/cn/Python-Note/vscode.png","hash":"ce3d3f996dbc5ebb5a7d53ab780e284c87862296","modified":1642926925446},{"_id":"themes/livemylife/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1635750785518},{"_id":"themes/livemylife/languages/cn.yml","hash":"3f6dabd999e37bf792707c6defdce3cb4a552f70","modified":1635776423407},{"_id":"themes/livemylife/_config.yml","hash":"cc81f0292e6d73b86b6722dafaf507cbb331d5d8","modified":1635759424354},{"_id":"themes/livemylife/languages/en.yml","hash":"b43dba8933b68c4464f94ab94b4065e9955ce06b","modified":1635750785520},{"_id":"themes/livemylife/languages/default.yml","hash":"5bf3e178962cfd50f295753d64135278231bddb9","modified":1635757059893},{"_id":"themes/livemylife/layout/404.ejs","hash":"053e99dad0f9810337b0a8f5037db2405683a83b","modified":1635750785522},{"_id":"themes/livemylife/languages/tw.yml","hash":"684153b0299e9cb68c13ddc545d36c140dcde107","modified":1635750785521},{"_id":"themes/livemylife/layout/about.ejs","hash":"96eb2c91f8135302e1b0e2371a577ca5bdb5595b","modified":1635750785534},{"_id":"themes/livemylife/layout/archive.ejs","hash":"ca9f4f9e29e074ec0440b7dc02ebbc81dba9b2dd","modified":1635750785535},{"_id":"themes/livemylife/layout/categories.ejs","hash":"fb7e7d769505f9185c4b1616343efa2d827e41c0","modified":1635750785535},{"_id":"themes/livemylife/layout/index.ejs","hash":"3955abc1c16a14ad578957d9984c3798cdbcb64e","modified":1635750785536},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"318a9826afd72fa68989cb79ba8cc96d0061afb0","modified":1635750785537},{"_id":"themes/livemylife/layout/layout.ejs","hash":"5708ac135ff3d184eb37cb50c98184b715193021","modified":1635750785537},{"_id":"themes/livemylife/layout/page.ejs","hash":"333dce279f48b599b2f9d5928e882a36bf97b2e6","modified":1638186913164},{"_id":"themes/livemylife/layout/tags.ejs","hash":"cb6ee48772f4df9e1734a325248c7448f25cd7d0","modified":1636878735690},{"_id":"themes/livemylife/layout/post.ejs","hash":"3b31e4e200be31929ed09132d05a5a97e524f87c","modified":1635750785538},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"073df9003dc40e09af1c27438860c22d0bc8fe60","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"dd2336fddd77b83710aad3f3949328ea99438c25","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"4598b83976fe15071b4a76d26dc499fe2a56dac0","modified":1635750785524},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"51f13e83031b2e14b4b6773b7f350bd34ac5807f","modified":1644577567649},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"34c97132f17f3c31aabe6dfbc908f0650213e847","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"a4ddbaf01edc3af4c10587b0c33cb07d43728628","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"194a25ef321ea65578cf751db0b7677e0ee4ba42","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"7a8256a4b43fb3726264bd5897fb861d02ef2418","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/langselect.ejs","hash":"e1e195de53d4b2a46dd9bdc163ba9174e06a3ad8","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"d015b8ae6f5aebcd145a3b1bfa96744de66c86c1","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"b1e8ee7b9e5ae7c839edd3a41611bc743bc2092a","modified":1635750785528},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"a827b1d5ffb695b80205bd1378234b9904c8308e","modified":1635750785529},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"1b50bdbc89731a0f04732aff9286ae945ecbe8b7","modified":1635750785529},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"0550c303a8e635408db9ae7175b63e940bd7055e","modified":1635750785530},{"_id":"themes/livemylife/layout/_partial/tip.ejs","hash":"62fc8b17f4661a2baa9357a311b4dd4bb792a138","modified":1635750785530},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"d8915befc058d89a24320d72965c9bd2b4970a2c","modified":1635776405384},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"037cda2d5616ad5e62f8f668d6947cfe17f37a32","modified":1635776367303},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"ea9e5e50d32a80b25ba4323998e969a32b66b1d2","modified":1635750785532},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"24671d81b25bce97245d8367c7e0c6b2d85955b6","modified":1635750785532},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"7b83d0287e467c11c8c9e434e9e4ce5c864b0980","modified":1635750785533},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"3a624aecb0c8893d8680d7bba81f9a9aa677ce4f","modified":1635750785534},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"a587f6a911ccd9e38335cb856a86bcc354e47b35","modified":1635750785534},{"_id":"themes/livemylife/source/css/beantech.css","hash":"bce245c3c8de02a7fda56d2c3dfc4ac529fcfbba","modified":1635750785541},{"_id":"themes/livemylife/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1635750785540},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"3e49635a4b5ba6bf3ca589113b87939a5ba8b4b3","modified":1636686823821},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"7db6da0d87a886cce86594e8c8566a0089ce4a7a","modified":1635750785545},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"646a634ac252896d9e9f4d322d782e69c66d65ae","modified":1635750785546},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1635750785547},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1636686697768},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"27c60a8f45ee2a31c2c6a096c513cdfb4a99a98a","modified":1635750785550},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"678420a06065424080c22c2a9d2a7f501dac5ef2","modified":1635750785551},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ef16ea9eeb589e9334a0f071afb5f0cdaa34d69c","modified":1635750785551},{"_id":"themes/livemylife/source/css/search.css","hash":"b8d680e4d9801774bf73784b31f372162d57e4e0","modified":1635750785552},{"_id":"themes/livemylife/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1635750785552},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"65d7309ed06fd6f7d6f24361742e89b35cbede81","modified":1636900539486},{"_id":"themes/livemylife/source/css/top.css","hash":"7fe7d9d4434fe2bb7178e0f43977b3869b5c0fdf","modified":1635750785553},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"bb52e4168e5b740d04bcabe3833f42e98f8037da","modified":1635750785554},{"_id":"themes/livemylife/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1635750785555},{"_id":"themes/livemylife/source/css/wave.css","hash":"fb939f76dc9a48d3a7e7384f64943dac710ad452","modified":1635750785555},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1635750785558},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1635750785556},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1635750785559},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1635750785559},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1635750785561},{"_id":"themes/livemylife/source/js/catalog.js","hash":"4e34f47053ece8c1a4ab4a8441760a3d33ea9fb8","modified":1635750785562},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1635750785572},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1635750785573},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1635750785577},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1635750785578},{"_id":"themes/livemylife/source/js/langselect.js","hash":"6438d00cd2d9770ec48ab453aba12fa5ace986ed","modified":1635750785578},{"_id":"themes/livemylife/source/js/line.js","hash":"ffccb7e8713746af8d1f10b1b194c69090429e21","modified":1635750785579},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","hash":"75449860641e0ca475b1e7b5595851cc6e640722","modified":1635750785580},{"_id":"themes/livemylife/source/js/mouseclick.js","hash":"8353161e1cb3446f4647908441b8e2fc1e49aaac","modified":1635750785580},{"_id":"themes/livemylife/source/js/scroll.js","hash":"182250b3bee27de24099863f0973bb7971405464","modified":1635750785581},{"_id":"themes/livemylife/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1635750785581},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"f61a11e60be24cf0c64019ca4dc4dc49c325ed71","modified":1635750785584},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1635750785548},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1635750785550},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"3955cbca226b562f8dec96dc459ce22363affdde","modified":1635750785582},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"b09fff2aa41305e8975b9ef80514eb937ffa6866","modified":1635750785583},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1635750784875},{"_id":"source/_posts/cn/Python-Note/break-continue.jpg","hash":"cd0ebebf29284fed29dfe884d31201eef3755017","modified":1642563745140},{"_id":"source/_posts/cn/Python-Note/rwa-1.png","hash":"a04a957ead000b95f588c76030f6fff7272b43c4","modified":1642907140883},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"c3d5b799e43c9b400ce8ca8831754da6c17c4126","modified":1636686912729},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1635750785557},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1635750785561},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1635750785577},{"_id":"source/_posts/cn/Python-Note.md","hash":"425d71c6646e4d57abe0c010626395815a1614cd","modified":1644594390162},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1635750785543},{"_id":"themes/livemylife/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1635750785576},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1635750784873},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1635750784910},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1635750784915},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1635750784896},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1635750784906},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","hash":"9e326313656b821751f486e31be8418e1578668a","modified":1635750785571},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1635750784901},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"4ae45a4e2ee0769a337b65f8bd1d859bd9d3294b","modified":1635750785567},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1635750784919},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1635750784868},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1635750784891},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1635750784883},{"_id":"source/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1635756780937},{"_id":"source/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1635750785435},{"_id":"source/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1635750785274},{"_id":"source/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1635750785024},{"_id":"source/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1635750785237},{"_id":"source/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1635750785503},{"_id":"source/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1635755481619},{"_id":"source/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1635750785333},{"_id":"source/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1635759711255},{"_id":"source/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1635750785199},{"_id":"source/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785137},{"_id":"source/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785410},{"_id":"public/baidusitemap.xml","hash":"43ad320411d64abf90f1fb4211bbea9a05f9deda","modified":1644576085316},{"_id":"public/sitemap.xml","hash":"cba1a9d25040f9e34c24b264de3a8e191ecdf718","modified":1644576085316},{"_id":"public/searchVersion.json","hash":"7a773084172dfe8a2478f528976ecd76e4018807","modified":1644576272869},{"_id":"public/404.html","hash":"53cd971860554c6049e738d84d8ff3b69c0b5197","modified":1644576085316},{"_id":"public/tags/index.html","hash":"f49f5040ce1bad7322d4763ab9d6d7fa6d667b46","modified":1644576085316},{"_id":"public/categories/index.html","hash":"6c949b7b3343558ea2ae5091bb24e7203c2e0b4f","modified":1644576085316},{"_id":"public/cn/ACGN-Recommendation/index.html","hash":"bdbf0b67cf65edcd8cc3462a32546ec6afcc6f25","modified":1644576085316},{"_id":"public/cn/Existentialism/index.html","hash":"6316eab8c8228c2aeaa400fd825eb6a7cf493618","modified":1644576085316},{"_id":"public/cn/Data-Analysis-Note/index.html","hash":"d776caa02160b04d640e7d6c4a91a3bc2c578323","modified":1644576085316},{"_id":"public/cn/Algorithm-Note/index.html","hash":"bd0badf8e8a54e09fa649346bceb201fa8b9f16a","modified":1644576085316},{"_id":"public/cn/Algorithm/index.html","hash":"a69b38c604191d5a1a88cfa76c8d65ead631e5d4","modified":1644576085316},{"_id":"public/cn/Unity-Study-Note/index.html","hash":"f6463f922c56279b8d8f7d10b02522dc9436b190","modified":1644576085316},{"_id":"public/cn/Python-Note/index.html","hash":"737d9553d570902fdaddebfb04000af0a4917034","modified":1644576085316},{"_id":"public/cn/MarkDown-Base/index.html","hash":"be1237380e1b38475b4cdb8304aa28cc6fa48b24","modified":1644576085316},{"_id":"public/cn/hexo-for-building-blog/index.html","hash":"09e99a88541a848dc5d9eec9426c448b0fbc16f0","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/index.html","hash":"81dff2a82a46009133cceaeda903194b756e9f3e","modified":1644576085316},{"_id":"public/about/index.html","hash":"7138d146d7b0d0cc78fed5a975282c2fcc70a757","modified":1644576085316},{"_id":"public/archive/index.html","hash":"e2913ca64e839fdadc532690fa71f0fa1bc034a0","modified":1644576085316},{"_id":"public/archives/index.html","hash":"285d683b5fa6675cd42dfe23a8934d339c06a751","modified":1644576085316},{"_id":"public/archives/2020/index.html","hash":"04c07e7c868e897ea1f3ad35c4d709e198681cc4","modified":1644576085316},{"_id":"public/archives/2020/04/index.html","hash":"d997c04ee683a637baf545b101e00de7bb6c5fad","modified":1644576085316},{"_id":"public/archives/2021/index.html","hash":"c7af8248e26ddcdb892c6000c46d5c2559dfefd2","modified":1644576085316},{"_id":"public/archives/2021/11/index.html","hash":"6d2d29a8258a776ebb87186434ee797bf0fabfe4","modified":1644576085316},{"_id":"public/archives/2022/index.html","hash":"03f43ff6ec3d7d2ff26814bf358f2f6cc43c606c","modified":1644576085316},{"_id":"public/archives/2022/01/index.html","hash":"c0ade8d7d86687b5124276e6dd8050bf0c25f268","modified":1644576085316},{"_id":"public/categories/Note/index.html","hash":"fe268d7f6670a3675a14e93775501eb2ff41db57","modified":1644576085316},{"_id":"public/categories/Note/Algorithm/index.html","hash":"cb986bf9110c102d2713664e031ed3faaecac937","modified":1644576085316},{"_id":"public/categories/Tutorials/index.html","hash":"b9fc99c68b7f75fb41aa55a152e6a7a5dfd6f97e","modified":1644576085316},{"_id":"public/index.html","hash":"a2b646695c42d2c64539d0c5624cc81bccd1bfdb","modified":1644576085316},{"_id":"public/categories/etc/index.html","hash":"57acc88c3262e8613af43eef6e628612f20a6b5d","modified":1644576085316},{"_id":"public/cn/index.html","hash":"71d634adf6aadc7586b154b047a1dd047093caab","modified":1644576085316},{"_id":"public/categories/Tutorials/Hexo/index.html","hash":"e41b1f63cfe7cc068b862877fb2cbfec11d40e73","modified":1644576085316},{"_id":"public/categories/etc/Hexo/index.html","hash":"27c76fde95bad1e4b4175f2852c8b2f20c5ea4bb","modified":1644576085316},{"_id":"public/tags/Algorithm/index.html","hash":"5446161acc9427cd2fdcda9ce4f19251456520b3","modified":1644576085316},{"_id":"public/tags/Leetcode/index.html","hash":"56c2d018505d4ff3102800535574069ec4262f9d","modified":1644576085316},{"_id":"public/tags/Date-Analysis/index.html","hash":"48327470baaf01dd5785556fa1a9a5b1b48863eb","modified":1644576085316},{"_id":"public/tags/Excel/index.html","hash":"23c9d098d7abdc2c179f3c95f1aba550fc4d62f7","modified":1644576085316},{"_id":"public/tags/Hexo-Theme-LiveMyLife/index.html","hash":"65bf7d470e6c0cd6fec5349259e65170f1205bd5","modified":1644576085316},{"_id":"public/tags/Hexo/index.html","hash":"c69d2e9385016aff0e92919a683533aaa22745da","modified":1644576085316},{"_id":"public/tags/Tutorials/index.html","hash":"4af0218bb5d51f1cc3c384fea6f4bd34d1adf7a5","modified":1644576085316},{"_id":"public/tags/Unity/index.html","hash":"848d384c3c80004a9a083350a96f320949964446","modified":1644576085316},{"_id":"public/tags/markdown/index.html","hash":"f060bd638937de9ef682bd7043ff72265996bef9","modified":1644576085316},{"_id":"public/tags/Blog/index.html","hash":"e4eb4b07598b3379cc66b3278b4b3c43f394f126","modified":1644576085316},{"_id":"public/tags/Python/index.html","hash":"a0fb0f11e2ad68805ba0395e5fcb5257e8d8bb67","modified":1644576085316},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1644576085316},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1644576085316},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1644576085316},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1644576085316},{"_id":"public/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1644576085316},{"_id":"public/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1644576085316},{"_id":"public/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1644576085316},{"_id":"public/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1644576085316},{"_id":"public/CNAME","hash":"d9b12b2da32914f4311e7a37bf986c79c8903e26","modified":1644576085316},{"_id":"public/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1644576085316},{"_id":"public/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1644576085316},{"_id":"public/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1644576085316},{"_id":"public/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1644576085316},{"_id":"public/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1644576085316},{"_id":"public/cn/Python-Note/if-1.png","hash":"58f020a3434e82f1763053012e5c9772e4cc96ee","modified":1644576085316},{"_id":"public/cn/Python-Note/function-1.png","hash":"95c90eadd8bbfc252bb17f695f251e13a8e9a4d3","modified":1644576085316},{"_id":"public/cn/Python-Note/if-2.png","hash":"f8458dedf361a5a7551edfaf9d794859b2e39bb4","modified":1644576085316},{"_id":"public/cn/Python-Note/loop-1.jpg","hash":"302acef8a0d975adc5b0c41b5b63a2a5c96cfb8d","modified":1644576085316},{"_id":"public/cn/Python-Note/module-1.png","hash":"6e223869b3ec267929ec1ad18672a377f59b80be","modified":1644576085316},{"_id":"public/cn/Python-Note/rw-problem.png","hash":"e02f9a8b20127e7b95d81b58f01bb84fddfcf9f1","modified":1644576085316},{"_id":"public/cn/Python-Note/rw_test_2.png","hash":"f53edef8d76dfa95a7e71aed4815bbeed5a37406","modified":1644576085316},{"_id":"public/cn/Python-Note/rw_test_1.png","hash":"683fef1be2681c7a18aaae9bc3d5dae8b678d7fe","modified":1644576085316},{"_id":"public/cn/Python-Note/vscode-2.png","hash":"d3fe40552bf0f09139a0bfe9e9ec292cc4690e74","modified":1644576085316},{"_id":"public/cn/Python-Note/solute.png","hash":"340a8c0dcbbf69f4111c652a7567b2c081228591","modified":1644576085316},{"_id":"public/cn/Python-Note/vscode-3.png","hash":"a850c8189de1ca80b7c8efb13ab88a730e370ed3","modified":1644576085316},{"_id":"public/cn/Python-Note/vscode.png","hash":"ce3d3f996dbc5ebb5a7d53ab780e284c87862296","modified":1644576085316},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1644576085316},{"_id":"public/cn/Python-Note/break-continue.jpg","hash":"cd0ebebf29284fed29dfe884d31201eef3755017","modified":1644576085316},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1644576085316},{"_id":"public/css/catalog.css","hash":"6e63e8902ec9ba5ef6256a0c2ef93934c56d612c","modified":1644576085316},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1644576085316},{"_id":"public/css/livemylife.css","hash":"07f90cf42f19b7b86361d202b24918ee0c626211","modified":1644576085316},{"_id":"public/css/rocket.css","hash":"1aa31deaf2c434e883a7b4d096d187244eb964d0","modified":1644576085316},{"_id":"public/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1644576085316},{"_id":"public/css/search.css","hash":"c633ff24b9126676013197280b18bb79ea4abb6c","modified":1644576085316},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1644576085316},{"_id":"public/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1644576085316},{"_id":"public/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1644576085316},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1644576085316},{"_id":"public/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1644576085316},{"_id":"public/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1644576085316},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1644576085316},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1644576085316},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1644576085316},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1644576085316},{"_id":"public/js/langselect.js","hash":"52ca6e30814272bc329868944f528f89630404e4","modified":1644576085316},{"_id":"public/js/line.js","hash":"d69576bfe75048345a137c148ffca1d9985811dc","modified":1644576085316},{"_id":"public/js/mouseclick.js","hash":"b27fb5ae779a855a93b85c923f1ac927ba52dc86","modified":1644576085316},{"_id":"public/js/ribbonDynamic.js","hash":"576f0ce237c87738277868489af30b6538681201","modified":1644576085316},{"_id":"public/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1644576085316},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1644576085316},{"_id":"public/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1644576085316},{"_id":"public/css/beantech.min.css","hash":"52f8485f36e94a35de73b9cf1eb49b6237fbedc5","modified":1644576085316},{"_id":"public/css/beantech.css","hash":"c192d3170301f774fa4c2185dc125cb3d6ec4929","modified":1644576085316},{"_id":"public/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1644576085316},{"_id":"public/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1644576085316},{"_id":"public/css/bootstrap.min.css","hash":"03a1eabfd0b6d2328418723ebe28df6e0847ac1b","modified":1644576085316},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1644576085316},{"_id":"public/css/themecolor.css","hash":"4497f60bcd6d2ac8df59656edbddd307f869d0fb","modified":1644576085316},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1644576085316},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1644576085316},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1644576085316},{"_id":"public/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1644576085316},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1644576085316},{"_id":"public/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1644576085316},{"_id":"public/cn/Python-Note/rwa-1.png","hash":"a04a957ead000b95f588c76030f6fff7272b43c4","modified":1644576085316},{"_id":"public/js/comment/gitalk.js","hash":"e5c1b7f8a2803765cff831793af377a9f81fb385","modified":1644576085316},{"_id":"public/js/comment/gitalk_.js","hash":"9256bc4b8f7341f60083da291d5c7c9f0fe5f1bd","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1644576085316},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1644576085316},{"_id":"public/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1644576085316},{"_id":"public/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1644576085316},{"_id":"public/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1644576085316},{"_id":"public/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1644576085316},{"_id":"public/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1644576085316},{"_id":"public/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1644576085316},{"_id":"public/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1644576085316},{"_id":"public/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1644576085316},{"_id":"public/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1644576085316},{"_id":"public/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1644576085316},{"_id":"public/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1644576085316},{"_id":"public/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1644576085316},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-1.png","hash":"b8dff998289c507c41c6c04752fc2eea7fad7c9b","modified":1644654968276},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-1.png","hash":"02dbac1d2059f374048e596be3b67d6dad8487b6","modified":1644676512451},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-1.png","hash":"cd5ea8154d884cec1cfd1fd3c9209eaa27f783f5","modified":1644657305912},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-2.png","hash":"5c2da234543e4c04b66ebbdbec4bffac2a0603cd","modified":1644675141767},{"_id":"source/_posts/cn/Data-Analysis-Note/ABC分析法.png","hash":"dc68024892cc5895b053c9701f804575e26178e2","modified":1644675663266},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-2.png","hash":"f32dc80c7725672c2e7633b170c0e7b1d20e4154","modified":1644677100820},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-2.png","hash":"ac972ff009c5a308ca34b672c3454e93ce9bb3c5","modified":1644655506667},{"_id":"source/_posts/cn/Data-Analysis-Note/制造业-1.png","hash":"9998ab0c741f23289766bd639a243200ccb6bc58","modified":1644735251550},{"_id":"source/_posts/cn/Data-Analysis-Note/power_query.png","hash":"c3d4ec5539d8b44f5d665199388c5c09acf99a54","modified":1644815814131},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-5.png","hash":"6387435651122b01705ec74d37d564b3b64c6cc3","modified":1644734630420},{"_id":"source/_posts/cn/Data-Analysis-Note/物流业-1.png","hash":"04e96ffda4a579d0c763cf4ba14f8ed589ad19eb","modified":1644735417482},{"_id":"source/_posts/cn/Data-Analysis-Note/表格概述.png","hash":"5760d8acea0a4c5c7d3c8536039f3f3d684ad642","modified":1644815362670},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-4.png","hash":"09c0f9258e3707620cebdbf4997a944bee1fbb34","modified":1644734547933},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-6.png","hash":"c1f63cc766fb1ef90291544b683540c4c6e82f0f","modified":1644735095420},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-2.png","hash":"f65ece1d1b276e0fe42a6bd7294b4434574a8bbe","modified":1644734043348},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-1.png","hash":"504bb65212e023aee7f8008242e39f5d221df988","modified":1644733766486},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-3.png","hash":"d10ad2dd87424bff20330eac9d2c8751002407dd","modified":1644734196043},{"_id":"source/_posts/cn/Data-Analysis-Note/power_pivot.png","hash":"dbd5f3158e235002b2a8c59a857fb6785d5a0a0d","modified":1644816217609}],"Category":[{"name":"Note","_id":"ckzia53hz0004owvo2neb1i4t"},{"name":"Algorithm","parent":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53ia000howvo9eol3she"},{"name":"Tutorials","_id":"ckzia53ie000mowvog0lpbvb7"},{"name":"etc.","_id":"ckzia53ig000wowvo67bpb19m"},{"name":"Hexo","parent":"ckzia53ie000mowvog0lpbvb7","_id":"ckzia53ih0011owvo1j7bbija"},{"name":"Hexo","parent":"ckzia53ig000wowvo67bpb19m","_id":"ckzia53ij0014owvod3oja4jw"}],"Data":[],"Page":[{"layout":"404","description":"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...\"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.862Z","updated":"2021-11-01T07:13:04.862Z","path":"404.html","title":"","comments":1,"_id":"ckzia53ho0000owvo25aicyx8","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2022-01-19T20:48:33.000Z","description":"爱编程更爱游戏","header-img":"img/header_img/nier.png","_content":"\n## Talk To Me\n\n\n## Just Me\n\n\n\n## The Longest Way ...\n\n\n## Follow With Interest Blogs\n\n## Contact me\n\n> Email：lgh1598@126.com\n\n## Treat me to coffee\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2022-01-20 04:48:33\ndescription: \"爱编程更爱游戏\"\nheader-img: \"img/header_img/nier.png\"\n---\n\n## Talk To Me\n\n\n## Just Me\n\n\n\n## The Longest Way ...\n\n\n## Follow With Interest Blogs\n\n## Contact me\n\n> Email：lgh1598@126.com\n\n## Treat me to coffee\n\n","updated":"2022-01-19T20:48:33.000Z","path":"about/index.html","comments":1,"_id":"ckzia53hw0002owvo0kxwdw5y","content":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<h2 id=\"Just-Me\">Just Me</h2>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：lgh1598@126.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<h2 id=\"Just-Me\">Just Me</h2>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：lgh1598@126.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive_bg.jpg","date":"2022-01-20T12:49:56.000Z","description":"Don't rush and never settle...... If it's meant to be, it will be......","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive_bg.jpg\"\ndate: 2022-01-20 20:49:56\ndescription: \"Don't rush and never settle...... If it's meant to be, it will be......\"\n---\n","updated":"2022-01-20T12:49:56.000Z","path":"archive/index.html","comments":1,"_id":"ckzia53i10006owvo3gz2hv79","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"I don’t know where I am going, but I am on my way......","header-img":"img/header_img/tag_bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"I don’t know where I am going, but I am on my way......\"\nheader-img: \"img/header_img/tag_bg.jpg\"\n---\n","date":"2021-11-01T07:13:05.517Z","updated":"2021-11-01T07:13:05.517Z","path":"tags/index.html","comments":1,"_id":"ckzia53i20008owvo1ykjaygc","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"categories","title":"Categories","description":"Hi , here is Categories ....","header-img":"img/header_img/categories_bg.jpg","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\ndescription: \"Hi , here is Categories ....\"\nheader-img: \"img/header_img/categories_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.975Z","updated":"2021-11-01T07:13:04.975Z","path":"categories/index.html","comments":1,"_id":"ckzia53i4000aowvo86i0hu3n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"算法笔记","catalog":true,"lang":"cn","date":"2021-11-12T02:09:37.000Z","subtitle":"Algorithm Note","header-img":"/img/header_img/nier.png","sticky":999,"_content":"## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","source":"_posts/cn/Algorithm-Note.md","raw":"---\ntitle: 算法笔记\ncatalog: true\nlang: cn\ndate: 2021-11-12 10:09:37\nsubtitle: Algorithm Note\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\ncategories:\n- Note\n- Algorithm\nsticky: 999\n---\n## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","slug":"Algorithm-Note","published":1,"updated":"2021-11-12T02:09:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53ht0001owvo9hng3xi3","content":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n"},{"title":"ACGN推荐","catalog":true,"lang":"cn","date":"2022-01-22T02:55:13.000Z","subtitle":"ACGN Recommendation","header-img":null,"_content":"","source":"_posts/cn/ACGN-Recommendation.md","raw":"---\ntitle: ACGN推荐\ncatalog: true\nlang: cn\ndate: 2022-01-22 10:55:13\nsubtitle: ACGN Recommendation\nheader-img:\ntags:\ncategories:\n---\n","slug":"ACGN-Recommendation","published":1,"updated":"2022-01-22T02:55:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53hx0003owvo2ekg4sl0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"算法题库","catalog":true,"lang":"cn","date":"2021-11-08T03:04:24.000Z","subtitle":"力扣每日一题","header-img":"/img/header_img/nier.png","sticky":999,"_content":"\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n","source":"_posts/cn/Algorithm.md","raw":"---\ntitle: 算法题库\ncatalog: true\nlang: cn\ndate: 2021-11-08 11:04:24\nsubtitle: 力扣每日一题\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\n- Leetcode\ncategories:\n- Note\n- Algorithm\nsticky: 999\n---\n\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n","slug":"Algorithm","published":1,"updated":"2021-11-08T03:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53i10007owvo1tl29fq0","content":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"存在主义","catalog":true,"lang":"cn","date":"2022-01-22T02:52:32.000Z","subtitle":"Existentialism","header-img":null,"_content":"","source":"_posts/cn/Existentialism.md","raw":"---\ntitle: 存在主义\ncatalog: true\nlang: cn\ndate: 2022-01-22 10:52:32\nsubtitle: Existentialism\nheader-img:\ntags:\ncategories:\n---\n","slug":"Existentialism","published":1,"updated":"2022-01-22T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53i30009owvohipxcnd7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据分析笔记","catalog":true,"lang":"cn","date":"2022-01-21T05:09:45.000Z","subtitle":"Data Analysis Note","header-img":"/img/header_img/nier.png","sticky":999,"_content":"\n# 数据分析思维和方法\n\n## 职业认知\n\n### 数据分析概述与职业操守\n\n#### 概述\n\n数据分析是将数据转变成`有效信息`的过程。  \n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。\n\n> 数据给运营的作用\n> + 运营方向更清晰\n> + 决策更精准\n> + 成功率更高\n\n数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。\n\n数据分析标准流程：  \n1. 明确目标\n2. 明确分析维度和指标\n3. 数据采集\n4. 数据清洗\n5. 数据整理\n6. 数据分析\n7. 数据可视化\n8. 数据报告\n\n#### 职业操守\n\n+ 对于数据产权，用户的利益和机构的利益`置于个人利益之上`。\n+ 保护数据资产的`安全性、真实性、可靠性`（要说明使用了什么科学的方法）。\n+ `不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。`\n+ 应`全面`了解业务背景、痛点、需求。`获取符合要求的源数据`。\n+ 根据`业务需要`，选择`合理`的工具、平台、系统及算法。\n+ `不断迭代`并优化业务指标与数据模型。\n+ 做出具有`商业价值的建议`，并使其`可视化`。\n+ `按时按质完整交付`，并对相关数据和代码`保密`。\n+ 履行`后期`义务和责任，给出指导意见。\n\n#### 大数据的相关法律法规\n\n在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的`法律法规以及道德标准`。\n\n***数据采集的法律问题***\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。\n\n***数据应用的法律问题***\n应用收集到的数据必须遵循以下原则：  \n1. 明示同意\n2. 用途确定\n3. 安全保密\n4. 境内存储\n\n***相关罪刑的法律规定***\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。\n1. 非法获取计算机系统数据罪\n2. 侵犯商业秘密罪\n3. 非法侵入计算机信息系统罪\n4. 网络安全法\n5. 民法总则\n6. 侵犯公民个人信息罪\n\n## 数据分析概念与思维\n\n### 数据分析概念\n数据分析是指用`适当的统计分析方法`对收集来的`大量数据`进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而`对数据加以详细研究和概括总结的过程`。  \n其中，数据也称为观测值，是实验、测量、观察、调查的结果。\n\n数据分为两种：`定性数据`和`定量数据`\n\n定性数据是对特定情况或事物作`特别`的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。\n\n定性数据又被称为品质数据，它分为`定类数据`和`定序数据`两类。\n定量数据又被称为数量数据，它分为`定距数据`和`定比数据`两类。\n> 区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。\n\n### 数据分析思维\n\n在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。\n\n`对比/对照`\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。\n\n`拆分/细分`\n由大变小的过程，将问题拆解成若干部分。\n\n`降维`\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。\n\n`增维`\n增加分析的指标，一般要看具体情况需要换算出新的指标。\n\n`假说`\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。\n\n## 数据分析方法论\n\n### 基本方法论\n\n常用的基本方法如下：  \n\n| 分析方法 | 使用场景 |\n| :---: | :--------- |\n| 对比法 | 发现问题 |\n| 拆分法 | 寻找问题的原因 |\n| 排序法 | 找到分析的重点 |\n| 分组法 | 洞察事物特征 |\n| 交叉法 | 将两个及以上的维度进行比较，并通过交叉的方式分析数据 |\n| 降维法 | 解决复杂问题 |\n| 增维法 | 解决信息量过少的问题 |\n| 指标法 | 基本方法，可支持多字段 |\n| 图形法 | 基本方法，对分析字段有数量限制 |\n\n在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。\n\n我们先学习其中四种：  \n\n#### 漏斗分析法\n\n漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。  \n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。  \n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。  \n![漏斗分析法](漏斗分析法-1.png)\n\n漏斗分析法实例:\n\n1. 确定业务流程，各个环节的量纲必须一致。\n2. 确定数据。\n3. 画图\n\n![漏斗分析法实例](漏斗分析法-2.png)\n\n#### 矩阵分析法\n\n矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。  \n\n![工程管理矩阵分析](矩阵分析法-1.png)\n\n矩阵分析法实例：\n1. 分别计算出支付金额和访客平均价值的平均值。\n2. 选中支付金额和访客平均价值，创建散点图。\n3. 根据两个指标的均值设置X轴和Y轴的交点。\n\n![矩阵分析法实例](矩阵分析法-2.png)\n\n#### ABC分析法\n\nABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。  \nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。\n\n在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。  \n1. A类因素:发生累计频率为0%~80%，是主要影响因素。\n2. B类因素:发生累计频率为80%~90%，是次要影响因素。\n3. c类因素:发生累计频率为90%~100%，是一般影响因素。\n\nABC分析法实例：  \n![ABC分析法实例](ABC分析法.png)\n\n#### 杜邦分析法\n\n杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。\n\n![杜邦分析法](杜邦分析法-1.png)\n\n杜邦分析法实例：\n\n销售额=预售金额+直售金额  \n推广费用=CPC推广费+CPM推广费+CPS推广费  \n成本=推广费用+货物成本+物流成本+人工成本+场地成本  \n毛利润=销售额-成本  \n\n![杜邦分析法实例](杜邦分析法-2.png)\n\n## 商业方法论\n\n### 零售业\n\n零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。\n\n![零售业](零售业-1.png)\n\n传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。  \n\n![零售业-2](零售业-2.png)\n\n从人的维度进行分析：  \n\n![人的分析维度](零售业-3.png)\n\n从货的维度进行分析：  \n\n![货的分析维度](零售业-4.png)\n\n从场的维度进行分析：  \n\n![场的分析维度](零售业-5.png)\n\n从人货场三个维度分析：  \n\n![零售业实例](零售业-6.png)\n\nA\\C\\D\\E：针对具体受众人群，属于人的需求\nB：场给用户带来不好的体验，属于场维度出现的问题\nF：存货/预计存货方面的问题\n\n### 制造业\n\n在制造业，`人机料法环`是对全面质量管理理论中的五个影响产品质量的主要因素的简称。\n\n+ 人，指制造产品的人员\n+ 机，制造产品所用的设备\n+ 料，指制造产品所使用的原材料\n+ 法，指制造产品所使用的方法\n+ 环，指产品制造过程中所处的环境\n\n![人机料法环](制造业-1.png)\n\n### 物流业\n\n物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。\n\n![物流业](物流业-1.png)\n\n**************************************\n\n# 数据分析技能\n\n## 数据库\n\n### 概述\n\n`数据库`\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。\n\n`数据库管理系统`\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。\n\n`结构化查询语言`\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。\n\n数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。\n\n+ 关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等\n+ 非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)\n\n### 使用Navicate操作终端数据库\n\n### MySQL语言\n<!-- TODO：SQL文章 -->\n\n#### 数据定义语言(DLL)\n\nDDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:\n\n+ CREATE TABLE:创建数据库表\n+ ALTER TABLE:更改表结构、添加、删除、修改列长度\n+ DROP TABLE:删除表\n\n#### 数据操纵语言(DML)\n\nDML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:\n\n+ INSERT:添加数据到数据库中\n+ UPDATE:修改数据库中的数据\n+ DELETE:删除数据库中的数据\n+ SELECT:选择(查询)数据\n\n#### 数据查询语言(DQL)\n\nSQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。\n\n+ 查询表数据: SELECT 列名1,列名2,... FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)\n+ 去除重复值: SELECT DISTINCT 列名1 FROM表名;\n+ 排序查询: SELECT 列名1,列名2 ... FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)\n\n## Excel\n\n### 表格概述\n\n表格是数据表达的一种形式。\n\n![表格概述](表格概述.png)\n\n### Excel概述\n\nOffice的电子报表软件。\n\n用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。\n\n### Excel相关组件及工具认知\n\nPower Query简介：  \nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。\n\n![power_query.png](power_query.png)\n\nPower Pivot简介:  \nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级\"两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。\n\n![power_pivot.png](power_pivot.png)\n\n### 公式、函数与制表\n\n#### Excel常用公式、函数\n\n`IF条件公式`\n\nIF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。  \n\n```\nIF (logical_test,value_if_true,value_if_false)  \n```\n\n判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.  \n\n+ Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;\n+ Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;\n+ Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。\n\nIF函数常见问题如下：  \n\n| 问题 | 哪里出了问题 |\n| :--: | :----- |\n| 单元格中的0 | value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。|\n| #NAME? (显示在单元格中) | 这通常意味着公式存在拼写错误 |\n\n`IFS条件公式`\n\nIFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。  \n\n```\nIFS (logical_test, value_if_true,...)\n```\n\n检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.  \n\n请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。\n\n`SUMIF条件公式`\n\n```\nSUMIF (range, criteria,[sum_range])\n```\n\n对满足条件的单元格求和\n\n+ range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。\n+ criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:`问号`(?)以匹配任意单个字符，`星号`(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(\")括起来。如果条件为数字，则无需使用双引号。\n+ sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。\n\n`SUMIFS条件公式`\n\n```\nSUMIFS (sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ..)\n```\n\n| 参数名称 | 说明 |\n| :--: | :------- |\n| sum_range(必需) | 要求和的单元格区域 |\n| criteria_range1(必需) | 使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。 |\n| criteria1(必需) | 定义将计算criteria_range1中的哪些单元格的和的条件。 |\n| criteria_range2, criteria2,...(可选) | 附加的区域及其关联条件。s最多可以输入127个区域/条件对 |\n\n> $ 加上区域表示绝对引用\n\n`VLOOKUP查询公式`\n\n```\nVLOOKUP (lookup_value，table_array，col_index_num,range_lookup)\n```\n\n需要四条信息才可构建VLOOKUP语法:  \n+ 要查找的值，也被称为查阅值。\n+ 查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。\n+ 区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。\n+ (可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。\n\n上述内容集合，如下所示:  \n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)\n\n`INDEX查询公式`\n\n```\nINDEX (array，row_num,[column_num])\n```\n\n在给定的单元格区域中，返回特定行列交叉处单元格的值或引用  \n+ array (必需)。单元格区域或数组常量。\n  - 如果数组仅包含一行或一列，则相应的row_num或\ncolumn_num参数是可选的。\n  - 如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。\n+ row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。\n+ column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数\n\n`MATCH查询公式`\n\n```\nMATCH (lookup_value，lookup_array，match_type)\n```\n\n返回符合特定值特定顺序的项在数组中的相对位置\n\n+ lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。\n+ lookup_array (必需)。要搜索的单元格区域。\n+ match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。\n\nmatch_type行为：\n\n| match_type值 | 说明 |\n| :--: | :----- |\n| 1或者省略 | MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:...-2,-1,0,1, 2,...,A-Z,FALSE,TRUE。 |\n| 0 |MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。 |\n| -1 | MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,...2,1,o,-1,-2,...等等。 |","source":"_posts/cn/Data-Analysis-Note.md","raw":"---\ntitle: 数据分析笔记\ncatalog: true\nlang: cn\ndate: 2022-01-21 13:09:45\nsubtitle: Data Analysis Note\nheader-img: /img/header_img/nier.png\ntags:\n- Date Analysis\n- Excel\ncategories:\n- Note\nsticky: 999\n---\n\n# 数据分析思维和方法\n\n## 职业认知\n\n### 数据分析概述与职业操守\n\n#### 概述\n\n数据分析是将数据转变成`有效信息`的过程。  \n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。\n\n> 数据给运营的作用\n> + 运营方向更清晰\n> + 决策更精准\n> + 成功率更高\n\n数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。\n\n数据分析标准流程：  \n1. 明确目标\n2. 明确分析维度和指标\n3. 数据采集\n4. 数据清洗\n5. 数据整理\n6. 数据分析\n7. 数据可视化\n8. 数据报告\n\n#### 职业操守\n\n+ 对于数据产权，用户的利益和机构的利益`置于个人利益之上`。\n+ 保护数据资产的`安全性、真实性、可靠性`（要说明使用了什么科学的方法）。\n+ `不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。`\n+ 应`全面`了解业务背景、痛点、需求。`获取符合要求的源数据`。\n+ 根据`业务需要`，选择`合理`的工具、平台、系统及算法。\n+ `不断迭代`并优化业务指标与数据模型。\n+ 做出具有`商业价值的建议`，并使其`可视化`。\n+ `按时按质完整交付`，并对相关数据和代码`保密`。\n+ 履行`后期`义务和责任，给出指导意见。\n\n#### 大数据的相关法律法规\n\n在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的`法律法规以及道德标准`。\n\n***数据采集的法律问题***\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。\n\n***数据应用的法律问题***\n应用收集到的数据必须遵循以下原则：  \n1. 明示同意\n2. 用途确定\n3. 安全保密\n4. 境内存储\n\n***相关罪刑的法律规定***\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。\n1. 非法获取计算机系统数据罪\n2. 侵犯商业秘密罪\n3. 非法侵入计算机信息系统罪\n4. 网络安全法\n5. 民法总则\n6. 侵犯公民个人信息罪\n\n## 数据分析概念与思维\n\n### 数据分析概念\n数据分析是指用`适当的统计分析方法`对收集来的`大量数据`进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而`对数据加以详细研究和概括总结的过程`。  \n其中，数据也称为观测值，是实验、测量、观察、调查的结果。\n\n数据分为两种：`定性数据`和`定量数据`\n\n定性数据是对特定情况或事物作`特别`的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。\n\n定性数据又被称为品质数据，它分为`定类数据`和`定序数据`两类。\n定量数据又被称为数量数据，它分为`定距数据`和`定比数据`两类。\n> 区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。\n\n### 数据分析思维\n\n在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。\n\n`对比/对照`\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。\n\n`拆分/细分`\n由大变小的过程，将问题拆解成若干部分。\n\n`降维`\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。\n\n`增维`\n增加分析的指标，一般要看具体情况需要换算出新的指标。\n\n`假说`\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。\n\n## 数据分析方法论\n\n### 基本方法论\n\n常用的基本方法如下：  \n\n| 分析方法 | 使用场景 |\n| :---: | :--------- |\n| 对比法 | 发现问题 |\n| 拆分法 | 寻找问题的原因 |\n| 排序法 | 找到分析的重点 |\n| 分组法 | 洞察事物特征 |\n| 交叉法 | 将两个及以上的维度进行比较，并通过交叉的方式分析数据 |\n| 降维法 | 解决复杂问题 |\n| 增维法 | 解决信息量过少的问题 |\n| 指标法 | 基本方法，可支持多字段 |\n| 图形法 | 基本方法，对分析字段有数量限制 |\n\n在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。\n\n我们先学习其中四种：  \n\n#### 漏斗分析法\n\n漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。  \n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。  \n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。  \n![漏斗分析法](漏斗分析法-1.png)\n\n漏斗分析法实例:\n\n1. 确定业务流程，各个环节的量纲必须一致。\n2. 确定数据。\n3. 画图\n\n![漏斗分析法实例](漏斗分析法-2.png)\n\n#### 矩阵分析法\n\n矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。  \n\n![工程管理矩阵分析](矩阵分析法-1.png)\n\n矩阵分析法实例：\n1. 分别计算出支付金额和访客平均价值的平均值。\n2. 选中支付金额和访客平均价值，创建散点图。\n3. 根据两个指标的均值设置X轴和Y轴的交点。\n\n![矩阵分析法实例](矩阵分析法-2.png)\n\n#### ABC分析法\n\nABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。  \nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。\n\n在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。  \n1. A类因素:发生累计频率为0%~80%，是主要影响因素。\n2. B类因素:发生累计频率为80%~90%，是次要影响因素。\n3. c类因素:发生累计频率为90%~100%，是一般影响因素。\n\nABC分析法实例：  \n![ABC分析法实例](ABC分析法.png)\n\n#### 杜邦分析法\n\n杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。\n\n![杜邦分析法](杜邦分析法-1.png)\n\n杜邦分析法实例：\n\n销售额=预售金额+直售金额  \n推广费用=CPC推广费+CPM推广费+CPS推广费  \n成本=推广费用+货物成本+物流成本+人工成本+场地成本  \n毛利润=销售额-成本  \n\n![杜邦分析法实例](杜邦分析法-2.png)\n\n## 商业方法论\n\n### 零售业\n\n零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。\n\n![零售业](零售业-1.png)\n\n传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。  \n\n![零售业-2](零售业-2.png)\n\n从人的维度进行分析：  \n\n![人的分析维度](零售业-3.png)\n\n从货的维度进行分析：  \n\n![货的分析维度](零售业-4.png)\n\n从场的维度进行分析：  \n\n![场的分析维度](零售业-5.png)\n\n从人货场三个维度分析：  \n\n![零售业实例](零售业-6.png)\n\nA\\C\\D\\E：针对具体受众人群，属于人的需求\nB：场给用户带来不好的体验，属于场维度出现的问题\nF：存货/预计存货方面的问题\n\n### 制造业\n\n在制造业，`人机料法环`是对全面质量管理理论中的五个影响产品质量的主要因素的简称。\n\n+ 人，指制造产品的人员\n+ 机，制造产品所用的设备\n+ 料，指制造产品所使用的原材料\n+ 法，指制造产品所使用的方法\n+ 环，指产品制造过程中所处的环境\n\n![人机料法环](制造业-1.png)\n\n### 物流业\n\n物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。\n\n![物流业](物流业-1.png)\n\n**************************************\n\n# 数据分析技能\n\n## 数据库\n\n### 概述\n\n`数据库`\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。\n\n`数据库管理系统`\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。\n\n`结构化查询语言`\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。\n\n数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。\n\n+ 关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等\n+ 非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)\n\n### 使用Navicate操作终端数据库\n\n### MySQL语言\n<!-- TODO：SQL文章 -->\n\n#### 数据定义语言(DLL)\n\nDDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:\n\n+ CREATE TABLE:创建数据库表\n+ ALTER TABLE:更改表结构、添加、删除、修改列长度\n+ DROP TABLE:删除表\n\n#### 数据操纵语言(DML)\n\nDML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:\n\n+ INSERT:添加数据到数据库中\n+ UPDATE:修改数据库中的数据\n+ DELETE:删除数据库中的数据\n+ SELECT:选择(查询)数据\n\n#### 数据查询语言(DQL)\n\nSQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。\n\n+ 查询表数据: SELECT 列名1,列名2,... FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)\n+ 去除重复值: SELECT DISTINCT 列名1 FROM表名;\n+ 排序查询: SELECT 列名1,列名2 ... FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)\n\n## Excel\n\n### 表格概述\n\n表格是数据表达的一种形式。\n\n![表格概述](表格概述.png)\n\n### Excel概述\n\nOffice的电子报表软件。\n\n用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。\n\n### Excel相关组件及工具认知\n\nPower Query简介：  \nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。\n\n![power_query.png](power_query.png)\n\nPower Pivot简介:  \nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级\"两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。\n\n![power_pivot.png](power_pivot.png)\n\n### 公式、函数与制表\n\n#### Excel常用公式、函数\n\n`IF条件公式`\n\nIF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。  \n\n```\nIF (logical_test,value_if_true,value_if_false)  \n```\n\n判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.  \n\n+ Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;\n+ Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;\n+ Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。\n\nIF函数常见问题如下：  \n\n| 问题 | 哪里出了问题 |\n| :--: | :----- |\n| 单元格中的0 | value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。|\n| #NAME? (显示在单元格中) | 这通常意味着公式存在拼写错误 |\n\n`IFS条件公式`\n\nIFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。  \n\n```\nIFS (logical_test, value_if_true,...)\n```\n\n检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.  \n\n请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。\n\n`SUMIF条件公式`\n\n```\nSUMIF (range, criteria,[sum_range])\n```\n\n对满足条件的单元格求和\n\n+ range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。\n+ criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:`问号`(?)以匹配任意单个字符，`星号`(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(\")括起来。如果条件为数字，则无需使用双引号。\n+ sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。\n\n`SUMIFS条件公式`\n\n```\nSUMIFS (sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ..)\n```\n\n| 参数名称 | 说明 |\n| :--: | :------- |\n| sum_range(必需) | 要求和的单元格区域 |\n| criteria_range1(必需) | 使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。 |\n| criteria1(必需) | 定义将计算criteria_range1中的哪些单元格的和的条件。 |\n| criteria_range2, criteria2,...(可选) | 附加的区域及其关联条件。s最多可以输入127个区域/条件对 |\n\n> $ 加上区域表示绝对引用\n\n`VLOOKUP查询公式`\n\n```\nVLOOKUP (lookup_value，table_array，col_index_num,range_lookup)\n```\n\n需要四条信息才可构建VLOOKUP语法:  \n+ 要查找的值，也被称为查阅值。\n+ 查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。\n+ 区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。\n+ (可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。\n\n上述内容集合，如下所示:  \n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)\n\n`INDEX查询公式`\n\n```\nINDEX (array，row_num,[column_num])\n```\n\n在给定的单元格区域中，返回特定行列交叉处单元格的值或引用  \n+ array (必需)。单元格区域或数组常量。\n  - 如果数组仅包含一行或一列，则相应的row_num或\ncolumn_num参数是可选的。\n  - 如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。\n+ row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。\n+ column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数\n\n`MATCH查询公式`\n\n```\nMATCH (lookup_value，lookup_array，match_type)\n```\n\n返回符合特定值特定顺序的项在数组中的相对位置\n\n+ lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。\n+ lookup_array (必需)。要搜索的单元格区域。\n+ match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。\n\nmatch_type行为：\n\n| match_type值 | 说明 |\n| :--: | :----- |\n| 1或者省略 | MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:...-2,-1,0,1, 2,...,A-Z,FALSE,TRUE。 |\n| 0 |MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。 |\n| -1 | MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,...2,1,o,-1,-2,...等等。 |","slug":"Data-Analysis-Note","published":1,"updated":"2022-01-21T05:09:45.000Z","_id":"ckzia53i4000bowvo2ysi7e4q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>数据分析思维和方法</h1>\n<h2 id=\"职业认知\">职业认知</h2>\n<h3 id=\"数据分析概述与职业操守\">数据分析概述与职业操守</h3>\n<h4 id=\"概述\">概述</h4>\n<p>数据分析是将数据转变成<code>有效信息</code>的过程。<br>\n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。</p>\n<blockquote>\n<p>数据给运营的作用</p>\n<ul>\n<li>运营方向更清晰</li>\n<li>决策更精准</li>\n<li>成功率更高</li>\n</ul>\n</blockquote>\n<p>数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。</p>\n<p>数据分析标准流程：</p>\n<ol>\n<li>明确目标</li>\n<li>明确分析维度和指标</li>\n<li>数据采集</li>\n<li>数据清洗</li>\n<li>数据整理</li>\n<li>数据分析</li>\n<li>数据可视化</li>\n<li>数据报告</li>\n</ol>\n<h4 id=\"职业操守\">职业操守</h4>\n<ul>\n<li>对于数据产权，用户的利益和机构的利益<code>置于个人利益之上</code>。</li>\n<li>保护数据资产的<code>安全性、真实性、可靠性</code>（要说明使用了什么科学的方法）。</li>\n<li><code>不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。</code></li>\n<li>应<code>全面</code>了解业务背景、痛点、需求。<code>获取符合要求的源数据</code>。</li>\n<li>根据<code>业务需要</code>，选择<code>合理</code>的工具、平台、系统及算法。</li>\n<li><code>不断迭代</code>并优化业务指标与数据模型。</li>\n<li>做出具有<code>商业价值的建议</code>，并使其<code>可视化</code>。</li>\n<li><code>按时按质完整交付</code>，并对相关数据和代码<code>保密</code>。</li>\n<li>履行<code>后期</code>义务和责任，给出指导意见。</li>\n</ul>\n<h4 id=\"大数据的相关法律法规\">大数据的相关法律法规</h4>\n<p>在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的<code>法律法规以及道德标准</code>。</p>\n<p><em><strong>数据采集的法律问题</strong></em><br>\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。</p>\n<p><em><strong>数据应用的法律问题</strong></em><br>\n应用收集到的数据必须遵循以下原则：</p>\n<ol>\n<li>明示同意</li>\n<li>用途确定</li>\n<li>安全保密</li>\n<li>境内存储</li>\n</ol>\n<p><em><strong>相关罪刑的法律规定</strong></em><br>\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。</p>\n<ol>\n<li>非法获取计算机系统数据罪</li>\n<li>侵犯商业秘密罪</li>\n<li>非法侵入计算机信息系统罪</li>\n<li>网络安全法</li>\n<li>民法总则</li>\n<li>侵犯公民个人信息罪</li>\n</ol>\n<h2 id=\"数据分析概念与思维\">数据分析概念与思维</h2>\n<h3 id=\"数据分析概念\">数据分析概念</h3>\n<p>数据分析是指用<code>适当的统计分析方法</code>对收集来的<code>大量数据</code>进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而<code>对数据加以详细研究和概括总结的过程</code>。<br>\n其中，数据也称为观测值，是实验、测量、观察、调查的结果。</p>\n<p>数据分为两种：<code>定性数据</code>和<code>定量数据</code></p>\n<p>定性数据是对特定情况或事物作<code>特别</code>的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。</p>\n<p>定性数据又被称为品质数据，它分为<code>定类数据</code>和<code>定序数据</code>两类。<br>\n定量数据又被称为数量数据，它分为<code>定距数据</code>和<code>定比数据</code>两类。</p>\n<blockquote>\n<p>区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。</p>\n</blockquote>\n<h3 id=\"数据分析思维\">数据分析思维</h3>\n<p>在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。</p>\n<p><code>对比/对照</code><br>\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。</p>\n<p><code>拆分/细分</code><br>\n由大变小的过程，将问题拆解成若干部分。</p>\n<p><code>降维</code><br>\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。</p>\n<p><code>增维</code><br>\n增加分析的指标，一般要看具体情况需要换算出新的指标。</p>\n<p><code>假说</code><br>\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。</p>\n<h2 id=\"数据分析方法论\">数据分析方法论</h2>\n<h3 id=\"基本方法论\">基本方法论</h3>\n<p>常用的基本方法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分析方法</th>\n<th style=\"text-align:left\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对比法</td>\n<td style=\"text-align:left\">发现问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拆分法</td>\n<td style=\"text-align:left\">寻找问题的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">排序法</td>\n<td style=\"text-align:left\">找到分析的重点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分组法</td>\n<td style=\"text-align:left\">洞察事物特征</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交叉法</td>\n<td style=\"text-align:left\">将两个及以上的维度进行比较，并通过交叉的方式分析数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">降维法</td>\n<td style=\"text-align:left\">解决复杂问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增维法</td>\n<td style=\"text-align:left\">解决信息量过少的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指标法</td>\n<td style=\"text-align:left\">基本方法，可支持多字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">图形法</td>\n<td style=\"text-align:left\">基本方法，对分析字段有数量限制</td>\n</tr>\n</tbody>\n</table>\n<p>在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。</p>\n<p>我们先学习其中四种：</p>\n<h4 id=\"漏斗分析法\">漏斗分析法</h4>\n<p>漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。<br>\n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。<br>\n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。<br>\n<img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"漏斗分析法\"></p>\n<p>漏斗分析法实例:</p>\n<ol>\n<li>确定业务流程，各个环节的量纲必须一致。</li>\n<li>确定数据。</li>\n<li>画图</li>\n</ol>\n<p><img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"漏斗分析法实例\"></p>\n<h4 id=\"矩阵分析法\">矩阵分析法</h4>\n<p>矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。</p>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"工程管理矩阵分析\"></p>\n<p>矩阵分析法实例：</p>\n<ol>\n<li>分别计算出支付金额和访客平均价值的平均值。</li>\n<li>选中支付金额和访客平均价值，创建散点图。</li>\n<li>根据两个指标的均值设置X轴和Y轴的交点。</li>\n</ol>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"矩阵分析法实例\"></p>\n<h4 id=\"ABC分析法\">ABC分析法</h4>\n<p>ABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。<br>\nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。</p>\n<p>在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。</p>\n<ol>\n<li>A类因素:发生累计频率为0%~80%，是主要影响因素。</li>\n<li>B类因素:发生累计频率为80%~90%，是次要影响因素。</li>\n<li>c类因素:发生累计频率为90%~100%，是一般影响因素。</li>\n</ol>\n<p>ABC分析法实例：<br>\n<img src=\"ABC%E5%88%86%E6%9E%90%E6%B3%95.png\" alt=\"ABC分析法实例\"></p>\n<h4 id=\"杜邦分析法\">杜邦分析法</h4>\n<p>杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"杜邦分析法\"></p>\n<p>杜邦分析法实例：</p>\n<p>销售额=预售金额+直售金额<br>\n推广费用=CPC推广费+CPM推广费+CPS推广费<br>\n成本=推广费用+货物成本+物流成本+人工成本+场地成本<br>\n毛利润=销售额-成本</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"杜邦分析法实例\"></p>\n<h2 id=\"商业方法论\">商业方法论</h2>\n<h3 id=\"零售业\">零售业</h3>\n<p>零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-1.png\" alt=\"零售业\"></p>\n<p>传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-2.png\" alt=\"零售业-2\"></p>\n<p>从人的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-3.png\" alt=\"人的分析维度\"></p>\n<p>从货的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-4.png\" alt=\"货的分析维度\"></p>\n<p>从场的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-5.png\" alt=\"场的分析维度\"></p>\n<p>从人货场三个维度分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-6.png\" alt=\"零售业实例\"></p>\n<p>A\\C\\D\\E：针对具体受众人群，属于人的需求<br>\nB：场给用户带来不好的体验，属于场维度出现的问题<br>\nF：存货/预计存货方面的问题</p>\n<h3 id=\"制造业\">制造业</h3>\n<p>在制造业，<code>人机料法环</code>是对全面质量管理理论中的五个影响产品质量的主要因素的简称。</p>\n<ul>\n<li>人，指制造产品的人员</li>\n<li>机，制造产品所用的设备</li>\n<li>料，指制造产品所使用的原材料</li>\n<li>法，指制造产品所使用的方法</li>\n<li>环，指产品制造过程中所处的环境</li>\n</ul>\n<p><img src=\"%E5%88%B6%E9%80%A0%E4%B8%9A-1.png\" alt=\"人机料法环\"></p>\n<h3 id=\"物流业\">物流业</h3>\n<p>物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。</p>\n<p><img src=\"%E7%89%A9%E6%B5%81%E4%B8%9A-1.png\" alt=\"物流业\"></p>\n<hr>\n<h1>数据分析技能</h1>\n<h2 id=\"数据库\">数据库</h2>\n<h3 id=\"概述-2\">概述</h3>\n<p><code>数据库</code><br>\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>\n<p><code>数据库管理系统</code><br>\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。</p>\n<p><code>结构化查询语言</code><br>\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>\n<p>数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。</p>\n<ul>\n<li>关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等</li>\n<li>非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)</li>\n</ul>\n<h3 id=\"使用Navicate操作终端数据库\">使用Navicate操作终端数据库</h3>\n<h3 id=\"MySQL语言\">MySQL语言</h3>\n<!-- TODO：SQL文章 -->\n<h4 id=\"数据定义语言-DLL\">数据定义语言(DLL)</h4>\n<p>DDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:</p>\n<ul>\n<li>CREATE TABLE:创建数据库表</li>\n<li>ALTER TABLE:更改表结构、添加、删除、修改列长度</li>\n<li>DROP TABLE:删除表</li>\n</ul>\n<h4 id=\"数据操纵语言-DML\">数据操纵语言(DML)</h4>\n<p>DML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:</p>\n<ul>\n<li>INSERT:添加数据到数据库中</li>\n<li>UPDATE:修改数据库中的数据</li>\n<li>DELETE:删除数据库中的数据</li>\n<li>SELECT:选择(查询)数据</li>\n</ul>\n<h4 id=\"数据查询语言-DQL\">数据查询语言(DQL)</h4>\n<p>SQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。</p>\n<ul>\n<li>查询表数据: SELECT 列名1,列名2,… FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)</li>\n<li>去除重复值: SELECT DISTINCT 列名1 FROM表名;</li>\n<li>排序查询: SELECT 列名1,列名2 … FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)</li>\n</ul>\n<h2 id=\"Excel\">Excel</h2>\n<h3 id=\"表格概述\">表格概述</h3>\n<p>表格是数据表达的一种形式。</p>\n<p><img src=\"%E8%A1%A8%E6%A0%BC%E6%A6%82%E8%BF%B0.png\" alt=\"表格概述\"></p>\n<h3 id=\"Excel概述\">Excel概述</h3>\n<p>Office的电子报表软件。</p>\n<p>用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。</p>\n<h3 id=\"Excel相关组件及工具认知\">Excel相关组件及工具认知</h3>\n<p>Power Query简介：<br>\nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。</p>\n<p><img src=\"power_query.png\" alt=\"power_query.png\"></p>\n<p>Power Pivot简介:<br>\nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级&quot;两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。</p>\n<p><img src=\"power_pivot.png\" alt=\"power_pivot.png\"></p>\n<h3 id=\"公式、函数与制表\">公式、函数与制表</h3>\n<h4 id=\"Excel常用公式、函数\">Excel常用公式、函数</h4>\n<p><code>IF条件公式</code></p>\n<p>IF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> <span class=\"comment\">(logical_test,value_if_true,value_if_false)</span>  </span><br></pre></td></tr></table></figure>\n<p>判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.</p>\n<ul>\n<li>Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;</li>\n<li>Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;</li>\n<li>Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。</li>\n</ul>\n<p>IF函数常见问题如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">问题</th>\n<th style=\"text-align:left\">哪里出了问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">单元格中的0</td>\n<td style=\"text-align:left\">value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#NAME? (显示在单元格中)</td>\n<td style=\"text-align:left\">这通常意味着公式存在拼写错误</td>\n</tr>\n</tbody>\n</table>\n<p><code>IFS条件公式</code></p>\n<p>IFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">IFS</span></span> (logical_test, value_if_true,...)</span><br></pre></td></tr></table></figure>\n<p>检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.</p>\n<p>请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。</p>\n<p><code>SUMIF条件公式</code></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMIF (<span class=\"keyword\">range</span>, criteria,[sum_range])</span><br></pre></td></tr></table></figure>\n<p>对满足条件的单元格求和</p>\n<ul>\n<li>range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。</li>\n<li>criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:<code>问号</code>(?)以匹配任意单个字符，<code>星号</code>(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(&quot;)括起来。如果条件为数字，则无需使用双引号。</li>\n<li>sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。</li>\n</ul>\n<p><code>SUMIFS条件公式</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">SUMIFS</span> (sum_range, criteria_range<span class=\"number\">1</span>, criteria<span class=\"number\">1</span>,<span class=\"meta\"> [criteria_range2, criteria2], ..)</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum_range(必需)</td>\n<td style=\"text-align:left\">要求和的单元格区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range1(必需)</td>\n<td style=\"text-align:left\">使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria1(必需)</td>\n<td style=\"text-align:left\">定义将计算criteria_range1中的哪些单元格的和的条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range2, criteria2,…(可选)</td>\n<td style=\"text-align:left\">附加的区域及其关联条件。s最多可以输入127个区域/条件对</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>$ 加上区域表示绝对引用</p>\n</blockquote>\n<p><code>VLOOKUP查询公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VLOOKUP</span> (lookup_value，table_array，col_index_num,range_lookup)</span><br></pre></td></tr></table></figure>\n<p>需要四条信息才可构建VLOOKUP语法:</p>\n<ul>\n<li>要查找的值，也被称为查阅值。</li>\n<li>查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。</li>\n<li>区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。</li>\n<li>(可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。</li>\n</ul>\n<p>上述内容集合，如下所示:<br>\n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)</p>\n<p><code>INDEX查询公式</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INDEX</span> (<span class=\"keyword\">array</span>，row_num,[column_num])</span><br></pre></td></tr></table></figure>\n<p>在给定的单元格区域中，返回特定行列交叉处单元格的值或引用</p>\n<ul>\n<li>array (必需)。单元格区域或数组常量。\n<ul>\n<li>如果数组仅包含一行或一列，则相应的row_num或<br>\ncolumn_num参数是可选的。</li>\n<li>如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。</li>\n</ul>\n</li>\n<li>row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。</li>\n<li>column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数</li>\n</ul>\n<p><code>MATCH查询公式</code></p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MATCH</span> (lookup_value，lookup_array，match_<span class=\"keyword\">type</span>)</span><br></pre></td></tr></table></figure>\n<p>返回符合特定值特定顺序的项在数组中的相对位置</p>\n<ul>\n<li>lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</li>\n<li>lookup_array (必需)。要搜索的单元格区域。</li>\n<li>match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。</li>\n</ul>\n<p>match_type行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">match_type值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1或者省略</td>\n<td style=\"text-align:left\">MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:…-2,-1,0,1, 2,…,A-Z,FALSE,TRUE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:left\">MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,…2,1,o,-1,-2,…等等。</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1>数据分析思维和方法</h1>\n<h2 id=\"职业认知\">职业认知</h2>\n<h3 id=\"数据分析概述与职业操守\">数据分析概述与职业操守</h3>\n<h4 id=\"概述\">概述</h4>\n<p>数据分析是将数据转变成<code>有效信息</code>的过程。<br>\n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。</p>\n<blockquote>\n<p>数据给运营的作用</p>\n<ul>\n<li>运营方向更清晰</li>\n<li>决策更精准</li>\n<li>成功率更高</li>\n</ul>\n</blockquote>\n<p>数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。</p>\n<p>数据分析标准流程：</p>\n<ol>\n<li>明确目标</li>\n<li>明确分析维度和指标</li>\n<li>数据采集</li>\n<li>数据清洗</li>\n<li>数据整理</li>\n<li>数据分析</li>\n<li>数据可视化</li>\n<li>数据报告</li>\n</ol>\n<h4 id=\"职业操守\">职业操守</h4>\n<ul>\n<li>对于数据产权，用户的利益和机构的利益<code>置于个人利益之上</code>。</li>\n<li>保护数据资产的<code>安全性、真实性、可靠性</code>（要说明使用了什么科学的方法）。</li>\n<li><code>不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。</code></li>\n<li>应<code>全面</code>了解业务背景、痛点、需求。<code>获取符合要求的源数据</code>。</li>\n<li>根据<code>业务需要</code>，选择<code>合理</code>的工具、平台、系统及算法。</li>\n<li><code>不断迭代</code>并优化业务指标与数据模型。</li>\n<li>做出具有<code>商业价值的建议</code>，并使其<code>可视化</code>。</li>\n<li><code>按时按质完整交付</code>，并对相关数据和代码<code>保密</code>。</li>\n<li>履行<code>后期</code>义务和责任，给出指导意见。</li>\n</ul>\n<h4 id=\"大数据的相关法律法规\">大数据的相关法律法规</h4>\n<p>在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的<code>法律法规以及道德标准</code>。</p>\n<p><em><strong>数据采集的法律问题</strong></em><br>\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。</p>\n<p><em><strong>数据应用的法律问题</strong></em><br>\n应用收集到的数据必须遵循以下原则：</p>\n<ol>\n<li>明示同意</li>\n<li>用途确定</li>\n<li>安全保密</li>\n<li>境内存储</li>\n</ol>\n<p><em><strong>相关罪刑的法律规定</strong></em><br>\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。</p>\n<ol>\n<li>非法获取计算机系统数据罪</li>\n<li>侵犯商业秘密罪</li>\n<li>非法侵入计算机信息系统罪</li>\n<li>网络安全法</li>\n<li>民法总则</li>\n<li>侵犯公民个人信息罪</li>\n</ol>\n<h2 id=\"数据分析概念与思维\">数据分析概念与思维</h2>\n<h3 id=\"数据分析概念\">数据分析概念</h3>\n<p>数据分析是指用<code>适当的统计分析方法</code>对收集来的<code>大量数据</code>进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而<code>对数据加以详细研究和概括总结的过程</code>。<br>\n其中，数据也称为观测值，是实验、测量、观察、调查的结果。</p>\n<p>数据分为两种：<code>定性数据</code>和<code>定量数据</code></p>\n<p>定性数据是对特定情况或事物作<code>特别</code>的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。</p>\n<p>定性数据又被称为品质数据，它分为<code>定类数据</code>和<code>定序数据</code>两类。<br>\n定量数据又被称为数量数据，它分为<code>定距数据</code>和<code>定比数据</code>两类。</p>\n<blockquote>\n<p>区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。</p>\n</blockquote>\n<h3 id=\"数据分析思维\">数据分析思维</h3>\n<p>在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。</p>\n<p><code>对比/对照</code><br>\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。</p>\n<p><code>拆分/细分</code><br>\n由大变小的过程，将问题拆解成若干部分。</p>\n<p><code>降维</code><br>\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。</p>\n<p><code>增维</code><br>\n增加分析的指标，一般要看具体情况需要换算出新的指标。</p>\n<p><code>假说</code><br>\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。</p>\n<h2 id=\"数据分析方法论\">数据分析方法论</h2>\n<h3 id=\"基本方法论\">基本方法论</h3>\n<p>常用的基本方法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分析方法</th>\n<th style=\"text-align:left\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对比法</td>\n<td style=\"text-align:left\">发现问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拆分法</td>\n<td style=\"text-align:left\">寻找问题的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">排序法</td>\n<td style=\"text-align:left\">找到分析的重点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分组法</td>\n<td style=\"text-align:left\">洞察事物特征</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交叉法</td>\n<td style=\"text-align:left\">将两个及以上的维度进行比较，并通过交叉的方式分析数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">降维法</td>\n<td style=\"text-align:left\">解决复杂问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增维法</td>\n<td style=\"text-align:left\">解决信息量过少的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指标法</td>\n<td style=\"text-align:left\">基本方法，可支持多字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">图形法</td>\n<td style=\"text-align:left\">基本方法，对分析字段有数量限制</td>\n</tr>\n</tbody>\n</table>\n<p>在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。</p>\n<p>我们先学习其中四种：</p>\n<h4 id=\"漏斗分析法\">漏斗分析法</h4>\n<p>漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。<br>\n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。<br>\n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。<br>\n<img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"漏斗分析法\"></p>\n<p>漏斗分析法实例:</p>\n<ol>\n<li>确定业务流程，各个环节的量纲必须一致。</li>\n<li>确定数据。</li>\n<li>画图</li>\n</ol>\n<p><img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"漏斗分析法实例\"></p>\n<h4 id=\"矩阵分析法\">矩阵分析法</h4>\n<p>矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。</p>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"工程管理矩阵分析\"></p>\n<p>矩阵分析法实例：</p>\n<ol>\n<li>分别计算出支付金额和访客平均价值的平均值。</li>\n<li>选中支付金额和访客平均价值，创建散点图。</li>\n<li>根据两个指标的均值设置X轴和Y轴的交点。</li>\n</ol>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"矩阵分析法实例\"></p>\n<h4 id=\"ABC分析法\">ABC分析法</h4>\n<p>ABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。<br>\nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。</p>\n<p>在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。</p>\n<ol>\n<li>A类因素:发生累计频率为0%~80%，是主要影响因素。</li>\n<li>B类因素:发生累计频率为80%~90%，是次要影响因素。</li>\n<li>c类因素:发生累计频率为90%~100%，是一般影响因素。</li>\n</ol>\n<p>ABC分析法实例：<br>\n<img src=\"ABC%E5%88%86%E6%9E%90%E6%B3%95.png\" alt=\"ABC分析法实例\"></p>\n<h4 id=\"杜邦分析法\">杜邦分析法</h4>\n<p>杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"杜邦分析法\"></p>\n<p>杜邦分析法实例：</p>\n<p>销售额=预售金额+直售金额<br>\n推广费用=CPC推广费+CPM推广费+CPS推广费<br>\n成本=推广费用+货物成本+物流成本+人工成本+场地成本<br>\n毛利润=销售额-成本</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"杜邦分析法实例\"></p>\n<h2 id=\"商业方法论\">商业方法论</h2>\n<h3 id=\"零售业\">零售业</h3>\n<p>零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-1.png\" alt=\"零售业\"></p>\n<p>传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-2.png\" alt=\"零售业-2\"></p>\n<p>从人的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-3.png\" alt=\"人的分析维度\"></p>\n<p>从货的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-4.png\" alt=\"货的分析维度\"></p>\n<p>从场的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-5.png\" alt=\"场的分析维度\"></p>\n<p>从人货场三个维度分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-6.png\" alt=\"零售业实例\"></p>\n<p>A\\C\\D\\E：针对具体受众人群，属于人的需求<br>\nB：场给用户带来不好的体验，属于场维度出现的问题<br>\nF：存货/预计存货方面的问题</p>\n<h3 id=\"制造业\">制造业</h3>\n<p>在制造业，<code>人机料法环</code>是对全面质量管理理论中的五个影响产品质量的主要因素的简称。</p>\n<ul>\n<li>人，指制造产品的人员</li>\n<li>机，制造产品所用的设备</li>\n<li>料，指制造产品所使用的原材料</li>\n<li>法，指制造产品所使用的方法</li>\n<li>环，指产品制造过程中所处的环境</li>\n</ul>\n<p><img src=\"%E5%88%B6%E9%80%A0%E4%B8%9A-1.png\" alt=\"人机料法环\"></p>\n<h3 id=\"物流业\">物流业</h3>\n<p>物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。</p>\n<p><img src=\"%E7%89%A9%E6%B5%81%E4%B8%9A-1.png\" alt=\"物流业\"></p>\n<hr>\n<h1>数据分析技能</h1>\n<h2 id=\"数据库\">数据库</h2>\n<h3 id=\"概述-2\">概述</h3>\n<p><code>数据库</code><br>\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>\n<p><code>数据库管理系统</code><br>\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。</p>\n<p><code>结构化查询语言</code><br>\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>\n<p>数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。</p>\n<ul>\n<li>关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等</li>\n<li>非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)</li>\n</ul>\n<h3 id=\"使用Navicate操作终端数据库\">使用Navicate操作终端数据库</h3>\n<h3 id=\"MySQL语言\">MySQL语言</h3>\n<!-- TODO：SQL文章 -->\n<h4 id=\"数据定义语言-DLL\">数据定义语言(DLL)</h4>\n<p>DDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:</p>\n<ul>\n<li>CREATE TABLE:创建数据库表</li>\n<li>ALTER TABLE:更改表结构、添加、删除、修改列长度</li>\n<li>DROP TABLE:删除表</li>\n</ul>\n<h4 id=\"数据操纵语言-DML\">数据操纵语言(DML)</h4>\n<p>DML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:</p>\n<ul>\n<li>INSERT:添加数据到数据库中</li>\n<li>UPDATE:修改数据库中的数据</li>\n<li>DELETE:删除数据库中的数据</li>\n<li>SELECT:选择(查询)数据</li>\n</ul>\n<h4 id=\"数据查询语言-DQL\">数据查询语言(DQL)</h4>\n<p>SQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。</p>\n<ul>\n<li>查询表数据: SELECT 列名1,列名2,… FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)</li>\n<li>去除重复值: SELECT DISTINCT 列名1 FROM表名;</li>\n<li>排序查询: SELECT 列名1,列名2 … FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)</li>\n</ul>\n<h2 id=\"Excel\">Excel</h2>\n<h3 id=\"表格概述\">表格概述</h3>\n<p>表格是数据表达的一种形式。</p>\n<p><img src=\"%E8%A1%A8%E6%A0%BC%E6%A6%82%E8%BF%B0.png\" alt=\"表格概述\"></p>\n<h3 id=\"Excel概述\">Excel概述</h3>\n<p>Office的电子报表软件。</p>\n<p>用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。</p>\n<h3 id=\"Excel相关组件及工具认知\">Excel相关组件及工具认知</h3>\n<p>Power Query简介：<br>\nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。</p>\n<p><img src=\"power_query.png\" alt=\"power_query.png\"></p>\n<p>Power Pivot简介:<br>\nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级&quot;两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。</p>\n<p><img src=\"power_pivot.png\" alt=\"power_pivot.png\"></p>\n<h3 id=\"公式、函数与制表\">公式、函数与制表</h3>\n<h4 id=\"Excel常用公式、函数\">Excel常用公式、函数</h4>\n<p><code>IF条件公式</code></p>\n<p>IF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> <span class=\"comment\">(logical_test,value_if_true,value_if_false)</span>  </span><br></pre></td></tr></table></figure>\n<p>判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.</p>\n<ul>\n<li>Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;</li>\n<li>Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;</li>\n<li>Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。</li>\n</ul>\n<p>IF函数常见问题如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">问题</th>\n<th style=\"text-align:left\">哪里出了问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">单元格中的0</td>\n<td style=\"text-align:left\">value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#NAME? (显示在单元格中)</td>\n<td style=\"text-align:left\">这通常意味着公式存在拼写错误</td>\n</tr>\n</tbody>\n</table>\n<p><code>IFS条件公式</code></p>\n<p>IFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">IFS</span></span> (logical_test, value_if_true,...)</span><br></pre></td></tr></table></figure>\n<p>检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.</p>\n<p>请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。</p>\n<p><code>SUMIF条件公式</code></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMIF (<span class=\"keyword\">range</span>, criteria,[sum_range])</span><br></pre></td></tr></table></figure>\n<p>对满足条件的单元格求和</p>\n<ul>\n<li>range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。</li>\n<li>criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:<code>问号</code>(?)以匹配任意单个字符，<code>星号</code>(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(&quot;)括起来。如果条件为数字，则无需使用双引号。</li>\n<li>sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。</li>\n</ul>\n<p><code>SUMIFS条件公式</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">SUMIFS</span> (sum_range, criteria_range<span class=\"number\">1</span>, criteria<span class=\"number\">1</span>,<span class=\"meta\"> [criteria_range2, criteria2], ..)</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum_range(必需)</td>\n<td style=\"text-align:left\">要求和的单元格区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range1(必需)</td>\n<td style=\"text-align:left\">使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria1(必需)</td>\n<td style=\"text-align:left\">定义将计算criteria_range1中的哪些单元格的和的条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range2, criteria2,…(可选)</td>\n<td style=\"text-align:left\">附加的区域及其关联条件。s最多可以输入127个区域/条件对</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>$ 加上区域表示绝对引用</p>\n</blockquote>\n<p><code>VLOOKUP查询公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VLOOKUP</span> (lookup_value，table_array，col_index_num,range_lookup)</span><br></pre></td></tr></table></figure>\n<p>需要四条信息才可构建VLOOKUP语法:</p>\n<ul>\n<li>要查找的值，也被称为查阅值。</li>\n<li>查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。</li>\n<li>区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。</li>\n<li>(可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。</li>\n</ul>\n<p>上述内容集合，如下所示:<br>\n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)</p>\n<p><code>INDEX查询公式</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INDEX</span> (<span class=\"keyword\">array</span>，row_num,[column_num])</span><br></pre></td></tr></table></figure>\n<p>在给定的单元格区域中，返回特定行列交叉处单元格的值或引用</p>\n<ul>\n<li>array (必需)。单元格区域或数组常量。\n<ul>\n<li>如果数组仅包含一行或一列，则相应的row_num或<br>\ncolumn_num参数是可选的。</li>\n<li>如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。</li>\n</ul>\n</li>\n<li>row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。</li>\n<li>column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数</li>\n</ul>\n<p><code>MATCH查询公式</code></p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MATCH</span> (lookup_value，lookup_array，match_<span class=\"keyword\">type</span>)</span><br></pre></td></tr></table></figure>\n<p>返回符合特定值特定顺序的项在数组中的相对位置</p>\n<ul>\n<li>lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</li>\n<li>lookup_array (必需)。要搜索的单元格区域。</li>\n<li>match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。</li>\n</ul>\n<p>match_type行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">match_type值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1或者省略</td>\n<td style=\"text-align:left\">MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:…-2,-1,0,1, 2,…,A-Z,FALSE,TRUE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:left\">MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,…2,1,o,-1,-2,…等等。</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Hexo-Theme-LiveMyLife","catalog":true,"date":"2020-04-16T18:34:17.000Z","subtitle":"A succinct hexo theme...","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","source":"_posts/cn/Hexo-Theme-LiveMyLife.md","raw":"---\ntitle: Hexo-Theme-LiveMyLife\ncatalog: true\ndate: 2020-04-17 02:34:17\nsubtitle: A succinct hexo theme...\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n- Hexo-Theme-LiveMyLife\n- Hexo\n- Tutorials\ncategories:\n- [Tutorials,Hexo]\n---\n\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","slug":"Hexo-Theme-LiveMyLife","published":1,"updated":"2020-04-16T18:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53i8000fowvodm9z6w3q","content":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n"},{"title":"MarkDown基础","catalog":true,"lang":"cn","date":"2021-11-02T06:36:17.000Z","subtitle":"markdown的基本语法","header-img":"/img/header_img/nier.png","sticky":999,"_content":"<!-- TODO: \\ 和 & < 的使用 -->\n\n## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","source":"_posts/cn/MarkDown-Base.md","raw":"---\ntitle: MarkDown基础\ncatalog: true\nlang: cn\ndate: 2021-11-02 14:36:17\nsubtitle: markdown的基本语法\nheader-img: /img/header_img/nier.png\ntags:\n- markdown\ncategories:\n- Note\nsticky: 999\n---\n<!-- TODO: \\ 和 & < 的使用 -->\n\n## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","slug":"MarkDown-Base","published":1,"updated":"2021-11-02T06:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53i9000gowvo0mfg2iws","content":"<!-- TODO: \\ 和 & < 的使用 -->\n<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<!-- TODO: \\ 和 & < 的使用 -->\n<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n"},{"title":"Unity学习笔记","catalog":true,"lang":"cn","date":"2021-11-08T02:57:50.000Z","subtitle":"learn with MStudio","header-img":"/img/header_img/nier.png","sticky":999,"_content":"待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","source":"_posts/cn/Unity-Study-Note.md","raw":"---\ntitle: Unity学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-08 10:57:50\nsubtitle: learn with MStudio\nheader-img: /img/header_img/nier.png\ntags:\n- Unity\ncategories:\n- Note\nsticky: 999\n---\n待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","slug":"Unity-Study-Note","published":1,"updated":"2021-11-08T02:57:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53ib000jowvohy63343p","content":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n","site":{"data":{}},"excerpt":"","more":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n"},{"title":"使用Hexo搭建博客","catalog":true,"lang":"cn","date":"2021-11-02T05:00:23.000Z","subtitle":null,"header-img":"/img/header_img/nier.png","_content":"> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","source":"_posts/cn/hexo-for-building-blog.md","raw":"---\ntitle: 使用Hexo搭建博客\ncatalog: true\nlang: cn\ndate: 2021-11-02 13:00:23\nsubtitle: \nheader-img: /img/header_img/nier.png\ntags:\n- Hexo\n- Blog\ncategories:\n- [etc.,Hexo]\n---\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","slug":"hexo-for-building-blog","published":1,"updated":"2021-11-02T05:00:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzia53id000lowvo074d99l2","content":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Python学习笔记","catalog":true,"lang":"cn","date":"2021-11-04T07:25:13.000Z","subtitle":"Python学习笔记","header-img":"/img/header_img/nier.png","sticky":999,"_content":"> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python基本语法\n\n### 编码\n<!-- TODO: 编码 -->\n\n### 标识符\n\n+ 第一个字符必须是字母表中字母或下划线 _ 。\n+ 标识符的其他的部分由字母、数字和下划线组成。\n+ 标识符对大小写敏感。\n+ 非关键字\n\n> 在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\n\n***********************************\n\n### 语句\n\nPython中通常一行表示一个语句，末尾不需加上分号\";\".\n\n```python\nprint(\"hello world\")\n```\n\n***`多行语句`***\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠` \\ `来实现多行语句，例如：\n```py\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n\n但在 [], {}, 或 () 中的多行语句，`不需要使用反斜杠 \\` ，例如：\n```py\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```\n\n***`空行`***\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。  \n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  \n\n> 空行也是程序代码的一部分。\n\n***`同行多条语句`***\n\nPython 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：\n\n```py\nc = 5; print(\"a\"); print(\"b\"); print(c)\n```\n\n***`pass语句`***\nPython pass是空语句，是为了保持程序结构的完整性。  \npass 不做任何事情，一般用做占位语句，如下实例：  \n```Python\nwhile True: \n    pass # 等待键盘中断 (Ctrl+C)\n```\n\n**********************************\n\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 同时分别赋值\n```\n\n在Python中，类型属于对象，变量是没有类型的：  \n```Python\na = 'str'\n```\n\n在以上代码中，'str'是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向'str'这个String类型对象。\n\n***********************************\n\n### 关键字\n\n关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  \n\n```python \nimport keyword\n\nprint(keyword.kwlist)\n```\n\n以上代码的输出结果为（版本Python 3.9.8）：  \n> ['False', 'None', 'True', '\\_\\_peg\\_parser\\_\\_', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n***********************************\n\n### 注释\n\n***`单行注释`***\nPython的单行注释使用`#`号：  \n```python\n# 单行注释\na = 1  # 注释\n```\n\n***`多行注释`***\nPython的多行注释使用` ''' ` 或 ` \"\"\" `:  \n```python\n'''\n多行\n注释\n1\n'''\n\n\"\"\"\n多行注释\n2\n\"\"\"\n\n```\n\n*************************\n\n### 代码块\n\n和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。  \n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n```\n\n如果同一代码块的缩进空格数不一致，会导致运行错误：  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n  print(\"error\")\n```\n\n以上代码的输出结果为：  \n>   File \"&lt;tokenize>\", line 5\n>     print(\"error\")\n>     ^\n> IndentationError: unindent does not match any outer indentation level\n\n***********************************\n\n### 输入输出\n\nPython的内置函数[input()](#input)和[print()](#print)分别表示输入和输出:  \n\n```python\ninput(\"\\n\\n按下 enter 键后退出。\")\n\nprint(\"输出\")\nprint(\"print默认是换行的，如果不需要换行需要在后面参数加上end=''\",end = '')\n```\n\n*******************************\n\n### 导入import\n在 python 用 `import` 或者 `from...import` 来导入相应的模块。\n将整个模块(somemodule)导入，格式为： `import somemodule`\n从某个模块中导入某个函数,格式为： `from somemodule import somefunction`\n从某个模块中导入多个函数,格式为： `from somemodule import firstfunc, secondfunc, thirdfunc`\n将某个模块中的全部函数导入，格式为： `from somemodule import *`\n\n***************************\n\n### 解释器\n<!-- TODO: 解释器 -->\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`immutable的数据类型为： `Number`、`Tuple`、`String`  \n`可变`mutable的数据类型为： `List`、`Set`、`Dictionary`\n\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> &lt;class '\\_\\_main__.A'>  \n> &lt;class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块方法)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块方法)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n\n以上代码的输出结果为：  \n> &lt;class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### 级联\n\nPython按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。\n```python\nprint(\"this \" \"is \" \"string\")\n```\n\n以上代码的输出结果为：  \n> this is string\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] &lt;class 'list'>\n> [] &lt;class 'list'>\n> [1, 5, 9, '7'] &lt;class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的嵌套\n\n列表是可以嵌套的：  \n```python\nmatrix = [\n    [1,2,5],\n    [2,7,8],\n    [4,5,6,7,9],\n    [2,9,7,11]\n]\n```\n\n若要访问该列表的元素只需逐层访问即可：  \n```python\nprint(matrix[2][0])\n\nfor row in matrix:\n    for e in row:\n        print(e, end=\" \")\n    print()\n```\n\n以上代码的输出结果为：  \n> 4  \n> 1 2 5  \n> 2 7 8   \n> 4 5 6 7 9   \n> 2 9 7 11 \n\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n\n使用del可以根据索引删除一个元素或者一个切割\n\n```python\nlst = [1,4,5,9,8,3,1,2,0,11]\ndel lst[0]\nprint(lst)\n\ndel lst[1:-3:2]\nprint(lst)\n\ndel lst[:]\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [4, 5, 9, 8, 3, 1, 2, 0, 11]  \n> [4, 9, 3, 2, 0, 11]  \n> []\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 列表遍历\n\n列表遍历将使用[循环语句](#Python循环语句).\n\n<!--TODO: enumerate()  -->\n\n> 使用[enumerate()](#enumerate)函数可以得到索引和对应值\n\n```py\nlst = [1,2,7,3,6,4]\n\nfor i in lst:\n    print(i,end=\" \")\n\nfor i,value in enumerate(lst):\n    print(i,value)\n```\n\n以上代码的运行结果为：  \n> 1 2 7 3 6 4\n> 1 2\n> 2 7\n> 3 3\n> 4 6\n> 5 4\n\n<!--TODO: zip()  -->\n如果要同时遍历多个列表，可以使用[zip()](#zip)函数：  \n```python\nquestions = ['name', 'quest', 'favorite color']\nanswers = ['lancelot', 'the holy grail', 'blue']\nfor q, a in zip(questions, answers):\n    print('What is your {0}?  It is {1}.'.format(q, a))\n```\n\n以上代码的输出结果为：  \n> What is your name?  It is lancelot.  \n> What is your quest?  It is the holy grail.  \n> What is your favorite color?  It is blue.\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> test.py in &lt;module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in &lt;module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in &lt;module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n****************************************************\n\n## Python运算符\n\nPython的运算符可以分为以下几类：  \n\n+ [算术运算符](#算术运算符)\n+ [比较(关系)运算符](#比较(关系)运算符)\n+ [赋值运算符](#赋值运算符)\n+ [逻辑运算符](#逻辑运算符)\n+ [位运算符](#位运算符)\n+ [成员运算符](#成员运算符)\n+ [身份运算符](#身份运算符)\n\n> [运算符优先级](#运算符优先级)\n\n### 算术运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| + | 加 |\n| - | 减 |\n| * | 乘 |\n| / | 除 |\n| % | 取模 |\n| ** | 幂 |\n| // | 整除 |\n\n### 比较(关系)运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| == | 等于 |\n| > | 大于 |\n| < | 小于 |\n| != | 不等于 |\n| >= | 大于等于 |\n| <= | 小于等于 |\n\n### 赋值运算符\n| 运算符 | 描述 | 说明 |\n| :--: | :----- | :--- |\n| = | 简单的赋值运算符 | 将运算符右侧的值赋予左侧 |\n| += | 加法赋值运算符 | a+=b等价于a=a+b |\n| -= | 减法赋值运算符 | a-=b等价于a=a-b |\n| *= | 乘法赋值运算符 | a*=b等价于a=a*b |\n| /= | 除法赋值运算符 | a/=b等价于a=a/b |\n| %= | 取模赋值运算符 | a%=b等价于a=a%b |\n| **= | 幂赋值运算符 | a**=b等价于a=a**b |\n| //= | 取整赋值运算符 | a//=b等价于a=a//b |\n| := | 海象运算符 | `Python3.8`版本新增运算符。可在表达式内部为变量赋值。|\n\n> 海象运算符的使用：  \n> ```python\n> if (n := len(a)) > 10:  \n>    print(f\"List is too long ({n} elements, expected <= 10)\")\n> ```\n\n\n### 逻辑运算符\n\n| 运算符 | 逻辑表达式 | 描述 |\n| :--: | :----- | :----- | \n| and | x and y\t| 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。|\n| or | x or y | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。|\n| not | not x | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 |\n\n### 位运算符\n按位运算符是把数字看作二进制来进行计算的。\n\n| 运算符 | 描述 | 实例 |\n| :--: | :---| :---- |\n| `&` | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100 |\n| `|` | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0  | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101 |\n| `^` | 按位异或运算符：当两对应的二进位相异时，结果为1，否则为0  | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001 |\n| `~` | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 | `(~a )` 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。|\n| `<<` | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。| `a << 2` 输出结果 240 ，二进制解释： 1111 0000 |\n| `>>` | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111 |\n\n\n### 成员运算符\n\n| 运算符 | 描述 |\n| :--: | :------- |\n| in | 如果在指定的序列中找到值返回 True，否则返回 False。|\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。|\n\n### 身份运算符\n身份运算符用于比较两个对象的存储单元\n\n| 运算符 | 描述 | 实例 |\n| :---: | :----- | :----- |\n| is | is 是判断两个标识符是不是引用自一个对象 | x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象 | x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。|\n\n### 运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符 | 描述 |\n| :--: | :------ |\n| `**` | 指数 (最高优先级) |\n| `~ + -` | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //` | 乘，除，求余数和取整除 |\n| `+ -` | 加法减法 |\n| `>> <<` | 右移，左移运算符 |\n| `&` | 位 'AND' |\n| `^ |` | 位运算符 |\n| `<= < > >=`\t | 比较运算符 |\n| `== !=` | 等于运算符 |\n| `= %= /= //= -= += *= **=` | 赋值运算符 |\n| `is is not` | 身份运算符 |\n| `in not in` | 成员运算符 |\n| `not and or` | 逻辑运算符 |\n\n**************************************\n\n## Python条件控制\n\nPython条件控制使用if、elif和else关键字,一般流程图如下： \n![if流程图](if-1.png)\n\n共有三种模式：  \n\n***if***\n```python\nif (<condition_expr>) :\n    # statement_block_1\n# statement_block_other\n```\n***if-else***\n```python\nif (<condition_expr>) :\n    # statement_block_1\nelse :\n    # statement_block_else\n# statement_block_other\n```\n***if-elif-else***\n```python\nif (<condition_expr_1>) :\n    # statement_block_1\nelif (<condition_expr_2>) :\n    # statement_block_2\n# ……\nelse :\n    # statement_block_else\n# statement_block_other\n```\n上述代码的流程如下：  \n![if-elif-else](if-2.png)\n\nPython条件控制还支持if条件的`嵌套`：  \n```python\nif (<expr>):\n    if (<expr_2>):\n        # statement_block_1\n    else:\n        # statement_block_2\n    # statement_block_3\nelse:\n    # ……\n```\n\n*************************************\n\n## Python循环语句\n\n循环语句将在条件成立时循环执行。流程图如下：  \n![loop-1](loop-1.jpg)\nPython的循环语句有两种形式：  \n\n***`while`***\n> 循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  \n\n```python\nwhile (<condition_expr>):\n    # loop_statement_block\nelse:\n    # false_statement\n```\n\n> 可以使用`while True`来实现无限循环\n\n***`for`***\nPython for 循环可以遍历任何可迭代对象([序列](#Python序列sequence))\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n经常和for配合的一个函数为[range()](#range):  \nrange()函数会生成一个数字序列：  \n```python\n>>>for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n```\n\n\n如果要提前结束循环，需要使用关键字`break`跳出当前循环:  \n```python\nx = 10\nwhile x >= 3 :\n    print(x, end=\" \")\n    if x == 6 :\n        break\n    x -= 1\n```\n以上代码循环到x==6时就会停止:  \n> 10 9 8 7 6  \n\n如果只是跳过一次循环，使用关键字`continue`可以跳过本次循环，进入下次循环:  \n```python\nx = 10\nwhile x >= 3:\n    x -= 1\n    if x == 6:\n        continue\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 9 8 7 5 4 3 2\n\nbreak和continue在循环中的作用如下图：  \n![break-continue](break-continue.jpg)\n> break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。  \n> continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。\n\n*****************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n***************************************\n\n## Python迭代器与生成器\n\n### 迭代器iterator\n迭代是访问集合元素的一种方式。  \n迭代器是一个可以记住遍历的位置的对象。 \n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前`不会后退`。   \n\n迭代器有两个基本的方法：`iter()` 和 `next()`。  \niter()用于创建迭代器对象，next()用于控制迭代器前进。  \n字符串，列表或元组对象都可用于创建迭代器：  \n```python\nlst = [1,5,6,4,7,8]\nit = iter(lst)   # 创建迭代器对象\nprint(type(it))\nprint(next(it))  # 输出迭代器的下一个元素\nprint(next(it))\n```\n以上代码的输出结果为：  \n> &lt;class 'list_iterator'>\n> 1\n> 5\n\n迭代器对象可以使用常规for语句进行遍历：  \n```python\nlst = [1,2,3,4,5]\nit = iter(lst)\nfor i in it:\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 1 2 3 4 5 \n\n#### 自定义迭代器\n把一个类作为一个迭代器使用需要在类中实现两个方法 \\_\\_iter\\_\\_() 与 \\_\\_next\\_\\_() 。  \n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 \\_\\_init\\_\\_(), 它会在对象初始化的时候执行。有关面向对象编程请看：[Python面向对象](#Python面向对象)  \n`__iter__()` 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 \\_\\_next\\_\\_() 方法并通过 StopIteration 异常标识迭代的完成。  \n`__next__()` 方法会返回下一个迭代器对象。  \n\n> ***`StopIteration`***\n> StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 \\_\\_next\\_\\_() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 \n\n以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：  \n```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:    # 设置循环上限\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x, end=\" \")\n```\n执行输出结果为：  \n> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n\n****************************\n\n### 生成器generator\n\n在Python中，使用了`yield`的函数被称为生成器。  \n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。  \n在调用生成器运行的过程中，每次遇到 yield 时函数会`暂停并保存当前所有的运行信息`，***返回 yield 的值***, 并在下一次执行 next() 方法时从当前位置继续运行。  \n\n以下实例使用生成器实现斐波那契数列：  \n```python\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        break\n```\n以上代码的输出结果为：  \n> 0 1 1 2 3 5 8 13 21 34 55\n\n*****************************************************\n\n## Python函数\n\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。  \n函数能提高应用的模块性，和代码的重复利用率。  \n\n除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。\n\n### 定义一个函数\n\n函数的组成有以下几条规则:  \n+ 函数以`def`关键字开头，后接`函数标识符`名称和`参数列表`\n+ 函数内容以冒号`:`开始，下面的函数体缩进\n+ 以`return [表达式]`结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None\n\n下图是一个简单的函数形式说明:  \n![函数说明](function-1.png)\n总结来说，Python的函数语法格式如下：  \n```Python\ndef 函数名(参数列表):\n    函数体\n```\n\n### 参数\n\n在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的`参数传递`来说也对应着两种：  \n+ **可变类型**：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  \n+ **不可变类型**：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。\n\n> python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\nPython的函数`参数`共有下面四种类型：  \n+ 必需参数\n+ 关键字参数\n+ 默认参数\n+ 不定长参数\n\n***`必需参数`***\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。  \n***`关键字参数`***\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。  \n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。  \n***`默认参数`***\n调用函数时，如果没有传递参数，则会使用默认参数。\n***`不定长参数`***\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：  \n```py\ndef functionname([formal_args,] [*var_args_tuple,] [**var_args_dict] ):\n   function_suite\n   return [expression]\n```\n加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。  \n加了两个星号 ** 的参数会以字典的形式导入。\n\n下面结合函数的使用来理解这四种参数类型：  \n\n### 函数的使用\n使用函数只需要直接使用函数名并传入对应参数就可以调用了。\n\n```python\ndef function1(a,b,c):\n    print(a,b,c)\n    return\n    \nfunction1(1,2,3)  # 必需参数的使用，参数按顺序对应传入\nfunction1(1, c = \"5\", b = 2)  # 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入\n\ndef function2(a,b,c = 5):   # 默认参数，在函数声明时指定其默认值\n    print(a,b,c)\n    return\n\nfunction2(2,3)       # 默认参数在调用时不指定则使用默认值\n\ndef function3(a,b,*args_tuple):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_tuple)\n    return\n\nfunction3(1,2,3,4,5,6)\n\ndef function4(a,b,**args_dict):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_dict)\n    return\n\nfunction4(1,2,c = 3,d = 4,e = 5,f = 6)\n```\n\n以上代码的输出结果为：  \n> 1 2 3  \n> 1 2 5  \n> 2 3 5  \n> 1 2 (3, 4, 5, 6)  \n> 1 2 {'c': 3, 'd': 4, 'e': 5, 'f': 6}  \n\n声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数`必须用关键字`传入。\n```Python\ndef function1(a,b,*,c):\n    print(a,b,c)\n    return\n\nfunction1(1,2,c=5)\n```\n\n以上代码的输出结果为：  \n> 1 2 5\n\n### 匿名函数\n\nPython使用lambda关键字来创建匿名函数。  \n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。  \nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  \n\nlambda 函数的语法只包含一个语句，如下：  \n```Python\nlambda [arg1 [,arg2,.....argn]]:expression\n```\n\n使用实例来增进理解：  \n```python\nsum = lambda arg1,arg2:arg1+arg2    # 一个简单的匿名函数使用\n\nprint(sum(1,2))\n```\n\n以上代码的输出结果为：  \n> 3\n\n### return语句\nreturn作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。  \n```python\ndef function1(a,b):\n    return a+b\n\nc = function1(1,2)\nprint(c)\n```\n\n以上代码的输出结果为：  \n> 3\n\n### 强制位置参数\nPython3.8 新增了一个函数形参语法` / `用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:  \n```python\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\nf(10, 20, 30, d=40, e=50, f=60)  # 这种使用方式是正确的\n# 下面两种是错误的使用\nf(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n```\n****************************************\n\n## Python推导式\n\nPython的推导式应用于简化规律的列表或元组等序列的创建：  \n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  \n> 需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。\n\n\n简单语法是：  \n```Python\nnew_lst = [var for var in varrange if varexpr]\n```\n\n比如我们想得到一个偶数数列：  \n```python\nlst = [x for x in range(20) if x % 2 == 0]\n\nprint(lst)\n\ntup = (x*2 for x in range(10))   # 括号生成的是生成器对象\n\nprint(type(tup))\nprint(tuple(tup))\n```\n\n以上代码的输出结果为：  \n> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n> &lt;class 'generator'>\n> (0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\n\n推导式的更多使用建议自己上手尝试一下：  \n```python \nlst = [y for y in (x * 3 for x in range(10)) if y % 2 == 1]\n\nprint(lst)\n\nlst = [[x, y] for x in range(5) for y in range(5)]\n\nprint(lst)\n\nve = [\"x\",\"xx\",\"xxx\",\"xxxx\"]\nlst = [len(v) for v in ve]  # 推导式还可以对匿名变量使用函数\n\nprint(lst)\n\nlst = [str(round(355/113, i)) for i in range(1, 6)]   # 使用复杂表达式和嵌套函数\n\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [3, 9, 15, 21, 27]\n> [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]\n> [1, 2, 3, 4]\n> ['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n***********************\n\n## Python模块\n\n模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。  \n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。\n\n下面是一个使用 python 标准库中模块的例子。\n```python \nimport sys\n \nprint('命令行参数如下:')\nfor i in sys.argv:\n   print(i)\n\nprint('\\n\\nPython 路径为：', sys.path, '\\n')\n```\n\n> + import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  \n> + sys.argv 是一个包含命令行参数的列表。  \n> + sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  \n\n### import语句\n\n想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：  \n```python\nimport module1[,module2...]\n```\n\n当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  \n\n下面是自定义模块的使用:  \n这里先定义一个模块  \n```python\n# file_name:  test_module.py\n\ndef function(a,b):\n    return a+b\n\nprint('file_name: test_module.py')\n```\n然后再其他文件里导入\n```python\n# file_name:  test.py\n\nimport test_module\n\nprint('file_name: test.py')\n\nprint(test_module.function(1,2))     # 使用模块定义的方法\n```\n\n以上代码的运行结果为：    \n> file_name: test_module.py\n> file_name: test.py\n> 3\n\n可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  \n\n并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。  \n![模块只会被导入一次，执行一次](module-1.png)\n\n> 当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？  \n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。    \n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。  \n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。  \n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：  \n```python\nimport sys\n\nprint(sys.path)\n```\n\n以上代码的输出结果为：  \n> ['g:\\\\Codes\\\\Python\\\\testpy', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles\\\\lib\\\\python', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\DLLs', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39', '', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\Pythonwin', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Administrator\\\\.ipython']\n\nsys.path 输出是一个列表，其中第一项是当前目录。  \n\n如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：  \n```python\nimport test_module\n\nfun = test_module.function\n\nprint(fun(1,2))\n```\n\n### from...import语句\n\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：  \n```Python\nfrom modname import name1[, name2[, ... nameN]]\n```\n这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 \n \n而如果要把一个模块所有成员导入当前的命名空间中，语法如下：  \n```python\nfrom modname import *\n```\n\n这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如'\\_a'此类。\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。\n\n### 深入模块\n\n前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。  \n我们一般使用这些可执行代码来初始化模块。  \n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。  \n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。  \n从另一个方面，当你确实知道你在做什么的话，你也可以通过 `modname.itemname` 这样的表示法来访问模块内的函数。  \n\n但是需要注意：  \n> 在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  \n\n### __name__属性\n\n一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用\\_\\_name\\_\\_属性来使该程序块仅在该模块自身运行时执行。  \n> 注意是前后`两个下划线`\n\n```python\n# file_name:  test_module.py\nif __name__ == '__main__':\n    print('test_module_main')\nelse:\n    print('file_name: test_module.py')\n```\n\n每个模块都有一个\\_\\_name\\_\\_属性，当其值是'\\_\\_main\\_\\_'时，表明该模块自身在运行，否则是被引入。\n\n### dir()函数\n\n内置的函数 [`dir()`](#dir) 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:  \n```python\nimport test_module,sys\nprint(dir(test_module))\nprint(dir(sys))\n```\n\n以上代码的输出结果为：  \n> ['\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'function']  \n> ['\\_\\_breakpointhook\\_\\_', '\\_\\_displayhook\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_excepthook\\_\\_', '\\_\\_interactivehook\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', '\\_\\_stderr\\_\\_', '\\_\\_stdin\\_\\_', '\\_\\_stdout\\_\\_', '\\_\\_unraisablehook\\_\\_', '\\_base\\_executable', '\\_clear\\_type\\_cache', '\\_current\\_frames', '\\_debugmallocstats', '\\_enablelegacywindowsfsencoding', '\\_framework', '\\_getframe', '\\_git', '\\_home', '\\_xoptions', 'addaudithook', 'api\\_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'platlibdir', 'prefix', 'ps1', 'ps2', 'ps3', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions', 'winver']\n\n如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:\n```Python\nprint(dir())\n```\n\n> ['\\_\\_annotations\\_\\_', '\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_']\n\n### 其他模块\n\n除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看[Python库参考文档](#Python库参考文档)。  \n\n有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。  \n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。  \n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:  \n```python\nimport sys\nprint(sys.ps1)\nprint(sys.ps2)\n```\n\n### 包\n\n包是一种管理 Python 模块命名空间的形式，采用\"点模块名称\"。  \n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。  \n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  \n\n在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。  \n目录只有包含一个叫做 \\_\\_init\\_\\_.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。\n最简单的情况，放一个空的 :file:\\_\\_init\\_\\_.py就可以了。  \n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。  \n\n注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。  \nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。  \n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  \n\n如果我们使用 from sound.effects import * 会发生什么呢？  \nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。  \n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。  \n在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。  \n为了解决这个问题，我们只需要提供一个精确包的索引。  \n导入语句遵循如下规则：如果包定义文件 \\_\\_init\\_\\_.py 存在一个叫做 \\_\\_all\\_\\_ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。  \n作为包的作者，可别忘了在更新包之后保证 \\_\\_all\\_\\_ 也更新了啊。  \n\\_\\_all\\_\\_是一个存储模块名字符串的列表。  \n\n*************************************\n\n## Python输入输出\n\n再前面我们已经接触过Python的输入[input()](#input)和输出[print()](#print)了，本章主要是介绍输入输出的进阶技巧。  \n\n### 输出格式美化\n\nPython两种输出值的方式: 表达式语句和 print() 函数。  \n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。  \n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。  \n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  \n> + str()： 函数返回一个用户易读的表达形式。\n> + repr()： 产生一个解释器易读的表达形式。\n\n下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：  \n```Python\n>>> a = '1' \n>>> str(a)\n'1'\n>>> repr(a)\n\"'1'\"\n>>> print(a)\n1\n>>> print(str(a))\n1\n>>> print(repr(a))\n'1'\n>>> s = f'{str(a)},{repr(a)}'\n>>> print(s)\n1,'1'\n>>> #  repr() 函数可以保留转义字符串中的特殊字符\n>>> hello = 'hello, world\\n'      \n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> hellos_1 = str(hello)\n>>> print(hellos_1)\nhello, world\n\n>>> repr((x, y, ('Go','Python')))      \n\"(32.5, 40000, ('Go', 'Python'))\"\n```\n\n关于str()和repr()的更多区别请参见[str()和repr()的区别](str()和repr()的区别)\n\n其他关于字符串格式化内容请参见: [字符串格式化](#字符串格式化)\n\n### 读取输入\n\nPython 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。\n\n***********************************************\n\n## Python文件读写操作\n\n### 读和写文件\n\n[open()](#open)函数将会返回一个file对象，其基本语法如下：  \n```python\nopen(filename, mode)\n```\n\n+ filename : 包含了你要访问的文件的字符串值。\n+ mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n不同模式打开文件的完全列表：  \n\n| 模式 | 描述 |\n| :-: | :----- |\n| r | 以`只读`方式打开文件。文件的指针将会放在文件的`开头`。这是`默认`模式。 |\n| rb | 以`二进制`格式打开一个文件用于`只读`。文件指针将会放在文件的`开头`。 |\n| r+ | 打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| rb+ | 以`二进制`格式打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| w | 打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb | 以`二进制`格式打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| w+ | 打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb+ | 以`二进制`格式打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| a | 打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| ab | 以`二进制`格式打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| a+ | 打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。文件打开时会是追加模式。如果该文件`不存在则创建`新文件用于读写。 |\n| ab+ | 以`二进制格式`打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。如果该文件`不存在则创建`新文件用于读写。 |\n\n总结来说模式的情况有三种：  \n+ 基础模式： 也就是 `r` `w` `a` (read、write、append)\n+ 二进制模式：  在基础模式上加上`b`表示以二进制格式打开文件(byte)\n+ 读写模式：  在以上两种模式上加上`+`表示打开的文件可读写\n\n| 模式 | r | r+ | w | w+ | a | a+ |\n| :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n| 读 | √ | √ |   | √ |   | √ |\n| 写 |   | √ | √ | √ | √ | √ |\n| 创建 |   |   | √ | √ | √ | √ |\n| 覆盖 |   |   | √ | √ |   |   |\n| 指针在开始 | √ | √ | √ | √ |   |   |\n| 指针在结尾 |   |   |   |   | √ | √ |\n\n![读写模式](rwa-1.png)\n\n下面是一个读写文件的实例:  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a\")\n    f.write(\"a模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式再写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> Traceback (most recent call last):\n>   File \"\\\\testpy\\\\quick.py\", line 6, in &lt;module>\n>     f = open(r\"testpy\\\\test.txt\", \"r\")\n> FileNotFoundError: [Errno 2] No such file or directory: 'testpy\\\\test.txt'\n> w模式写入\n> w模式写入a模式写入\n> w模式再写入\n\n可以看到下图文件结构的改变\n![读写测试-前](rw_test_1.png)\n![读写测试-后](rw_test_2.png)\n\n以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。\n\n> 这里有几个需要注意的点: \n> + 文件的路径，由于带有反斜杠\\\\，会被转义，所以需要使用r-string\n> + 打开的文件需要使用f.close()关闭或者使用[with...as...](#with关键字)代码块\n> + 读写文件通常需要在try...except里进行\n\n如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：  \n![文字乱码](rw-problem.png)\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：  \nvscode选择右下角的编码格式改变：\n![vscode选择编码](vscode.png)\n![vscode选择编码-2](vscode-2.png)\n![vscode选择编码-3](vscode-3.png)\n![文字乱码解决](solute.png)\n\n还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：  \n```python\nf = open(r\"testpy\\test.txt\", \"w\", encoding=\"utf-8\")\n# ...\nf.close()\n```\n\n\n关于上面实例使用的文件对象的方法，请看下节。  \n\n### 文件对象的方法\n<!-- TODO: 文件对象方法 -->\n\n#### [`f.read()`](#read)\n\n为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。  \nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  \n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read(2))\n    print(f.read(1))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n以上代码的输出结果为：  \n> 写入  \n> 字\n\n可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  \n> 这是因为read()同时会向后移动指针size个字符.\n\n但是这时候有人又有问题了：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a+\")\n    print(f.read(2))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？\n> 这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。\n\n如果你打开文件的方式没有读的权限，那么会报出以下的错误：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n> Traceback (most recent call last): \n>   File \"\\\\testpy\\\\quick.py\", line 18, in &lt;module>  \n>     print(f.read())\n> `io.UnsupportedOperation: not readable`\n\n#### [`f.readline()`](#readline)\nf.readline() 会从文件中读取单独的一行。换行符为 '\\n'。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"a\", encoding=\"utf-8\")\n    f.write(\"写入字符串1\\n\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(repr(f.readline()))\n    print(repr(f.readline()))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> '写入字符串\\n'  \n> '写入字符串1\\n'  \n\n可以看到调用readline()和read()一样都会向后移动指针\n\n还可以使用迭代文件对象的方式遍历每一行：  \n```python\nimport traceback\n\ntry:\n    # 使用with...as在代码块结束时会自动关闭文件对象\n    with open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            print(line, end=\"\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入字符串  \n> 写入字符串1\n\n#### [`f.readlines()`](#readlines)\n\nf.readlines() 将返回该文件中包含的所有行。  \n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(f.readlines())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> ['写入字符串\\n', '写入字符串1']\n\n#### [`f.write()`](#write)\n\nf.write(string) 将 string 写入到文件中, 然后返回写入的字符数。\n```Python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符\n\n#### [`f.tell()`](#tell)\n\nf.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f'当前游标处于第{f.tell()}字节处')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处\n\n一些常用编码一个字符所占的字节数：  \n| 编码 | 中文 | 英文 | 其他说明 |\n| :--: | :--: | :--: | :-- |\n| ASCII | 2 | 1 |  |\n| Unicode | 2 | 2 | 英文符号只占1个字节 |\n| GB2312 | 2 | 2 | |\n| GBK | 2 | 1 | |\n| ISO-8859-1 | 1 | 1 | |\n| UTF-8 | 3 | 1 | |\n| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |\n| UTF-32 | 4 | 4 |  |\n\n#### [`f.seek()`](#seek)\n\n如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。\n\noffset 是偏移量；\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：\n\n+ seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符\n+ seek(x,1) ： 表示从当前位置往后移动x个字符\n+ seek(-x,2)：表示从文件的结尾往前移动x个字符\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0))\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0, 2))\n        print(f\"当前游标处于第{f.tell()}字节处\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处  \n> 0  \n> 当前游标处于第0字节处  \n> 12  \n> 当前游标处于第12字节处\n\n#### [`f.close()`](#close)\n\n在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。  \n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。\n\n\n### pickle模块\n\npython的pickle模块实现了基本的数据序列和反序列化。  \n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。  \n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  \n\n下面通过一个简单实例来说明pickle模块：  \n```python\nimport pickle\n\n# 使用pickle模块将数据对象保存到文件\ndata1 = {\"a\": [1, 2.0, 3, 4 + 6j], \"b\": (\"string\", u\"Unicode string\"), \"c\": None}\n\noutput = open(\"data.pkl\", \"wb\")\n\nselfref_list = [1, 2, 3]\nselfref_list.append(selfref_list)\n\n# Pickle dictionary using protocol 0.\npickle.dump(data1, output)\n\n# Pickle the list using the highest protocol available.\npickle.dump(selfref_list, output, 1)\n\noutput.close()\n```\n\n上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：  \n```python\npickle.dump(obj, file, [,protocol])\n```\n\n它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。\n\n```python\nimport pickle\n\npkl_file = open(\"data.pkl\", \"rb\")\n\n# 使用pickle模块从文件中重构python对象\ndata1 = pickle.load(pkl_file)\nprint(data1)\ndata2 = pickle.load(pkl_file)\nprint(data2)\n\npkl_file.close()\n```\n\n以上代码的输出结果为：  \n> {'a': [1, 2.0, 3, (4+6j)], 'b': ('string', 'Unicode string'), 'c': None}  \n> [1, 2, 3]\n\n上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：  \n```python\nany_x = pickle.load(file)\n```\n\n*************************\n\n## Python os模块\n<!-- TODO: os模块方法 -->\n\n### os模块常用方法\n\n[os模块](#Python-os模块方法)提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.access(\"./testpy/test.txt\", os.F_OK))\nprint(os.access(\"./testpy/test.txt1111\", os.F_OK))\nprint(os.access(\"./testpy/data.pkl\", os.R_OK))\nprint(os.access(\"./testpy/test.pkl\", os.W_OK))\nprint(os.access(\"./testpy/test.pkl\", os.X_OK))\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\nTrue\nFalse\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n# 返回你的当前工作目录\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.getcwd())\nos.chdir(\"../\")\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\ng:\\Codes\\Python\\\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os, stat\n\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\nos.chmod(\"./testpy/data.pkl\", stat.S_IREAD)\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfd = os.open(\"./testpy/test3.txt\", os.O_CREAT | os.O_RDWR)\nos.write(fd, str.encode(\"This is test\\n\"))\nos.close(fd)\n\nfd = os.open(\"./testpy/test3.txt\", os.O_RDONLY)\nprint(os.read(fd, 10))\nos.close(fd)\n```\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nb'This is te'\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nfd = os.open(\"./test.txt\",os.O_RDONLY)\nos.closerange(fd,fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 打开文件\nfd = os.open(\"foo.txt\", os.O_RDWR | os.O_CREAT)\n# 复制文件描述符\nd_fd = os.dup(fd)\n# 使用复制的文件描述符写入文件\nos.write(d_fd, \"This is test\".encode())\n# 关闭文件\nos.closerange(fd, d_fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n# os.fdopen()\n# 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。\n# 该方法是内置函数 open() 的别名;\n# 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nimport os\n\npath = \"./testpy/test.txt\"\n\nprint(os.stat(path))\n\ninfo = os.lstat(path)\n\nprint(info)\nprint(f\"st_uid = {info.st_uid}\")\n\nfd = os.open(path, os.O_RDWR)\ninfo = os.fstat(fd)\n\nprint(info)\nos.close(fd)\n```\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nst_uid = 0\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nos.link(src, dst)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\npath = \"./\"\nprint(os.listdir(path))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/\"\n\nos.makedirs(path, 0o777)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/test_mkdir\"\n\nos.mkdir(path)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nr,w = os.pipe()\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nwith os.popen(\"mkdir test_popen\",\"r\",1) as f:\n    print(f)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n<os._wrap_close object at 0x000001D8FC929430>\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.system(r\"adb devices\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n\nos.remove(\"./testpy/test.txt\")\n\n# 移除后列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test.txt', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.removedirs(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.rmdir(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.listdir())\n\nos.rename(\"test_pack\", \"test_rename\")\n\nprint(os.listdir())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'test_popen', 'unable', 'workspace.code-workspace', '__pycache__']\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_popen', 'test_rename', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nprint (\"当前目录为: %s\" %os.getcwd())\n\n# 列出目录\nprint (\"目录为: %s\"%os.listdir(os.getcwd()))\n\n# 重命名 \"aa1.txt\"\nos.renames(\"aa1.txt\",\"newdir/aanew.txt\")\n\nprint (\"重命名成功。\")\n\n# 列出重命名的文件 \"aa1.txt\"\nprint (\"目录为: %s\" %os.listdir(os.getcwd()))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n当前目录为: /tmp\n目录为:\n [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','newdir','amrood.admin' ]\n重命名成功。\n目录为:\n [  'a1.txt','resume.doc','a3.py','Administrator','newdir','amrood.admin' ]\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfor root, dirs, files in os.walk(\".\", topdown=False):\n    for name in files:\n        print(os.path.join(root, name))\n    for name in dirs:\n        print(os.path.join(root, name))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n.\\.vscode\\settings.json\n.\\testpy\\data.pkl\n.\\testpy\\quick.py\n.\\testpy\\quick2.py\n.\\testpy\\test1.txt\n.\\testpy\\test2.txt\n.\\testpy\\test3.txt\n.\\testpy\\test_unicode.txt\n.\\test_pack\\test_py.py\n.\\test_pack\\__init__.py\n.\\unable\\__pycache__\\un_test.cpython-39.pyc\n.\\unable\\un_test.py\n.\\unable\\__pycache__\n.\\__pycache__\\test_module.cpython-39.pyc\n.\\auto.py\n.\\data.pkl\n.\\dp1.py\n.\\foo.txt\n.\\test.py\n.\\test.txt\n.\\test_module.py\n.\\workspace.code-workspace\n.\\.vscode\n.\\testpy\n.\\test_pack\n.\\test_popen\n.\\unable\n.\\__pycache__\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n \n# 输出默认值 ..\nprint(os.pardir)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n### path模块\n\nos.path 模块主要用于获取文件的属性。  \n以下是 os.path 模块的几种常用方法：  \n\n| 方法 | 说明 |\n| :--: | :------------------- |\n| os.path.`abspath`(path) | 返回绝对路径 |\n| os.path.`basename`(path) | 返回文件名 |\n| os.path.`commonprefix`(list) | 返回list(多个路径)中，所有path共有的最长的路径 |\n| os.path.`dirname`(path) | 返回文件路径 |\n| os.path.`exists`(path) | 路径存在则返回True,路径损坏返回False |\n| os.path.`expanduser`(path) | 把path中包含的\"~\"和\"~user\"转换成用户目录 |\n| os.path.`expandvars`(path) | 根据环境变量的值替换path中包含的\"$name\"和\"${name}\" |\n| os.path.`getatime`(path) | 返回最近访问时间（浮点型秒数） |\n| os.path.`getmtime`(path) | 返回最近文件修改时间 |\n| os.path.`getctime`(path) | 返回文件 path 创建时间 |\n| os.path.`getsize`(path) | 返回文件大小，如果文件不存在就返回错误 |\n| os.path.`isabs`(path) | 判断是否为绝对路径 |\n| os.path.`isfile`(path) | 判断路径是否为文件 |\n| os.path.`isdir`(path) | 判断路径是否为目录 |\n| os.path.`islink`(path) | 判断路径是否为链接 |\n| os.path.`ismount`(path) | 判断路径是否为挂载点 |\n| os.path.`join`(path1[, path2[, ...]]) | 把目录和文件名合成一个路径 |\n| os.path.`normcase`(path) | 转换path的大小写和斜杠 |\n| os.path.`normpath`(path) | 规范path字符串形式 |\n| os.path.`realpath`(path) | 返回path的真实路径 |\n| os.path.`relpath`(path[, start]) | 从start开始计算相对路径 |\n| os.path.`samefile`(path1, path2) | 判断目录或文件是否相同 |\n| os.path.`sameopenfile`(fp1, fp2) | 判断fp1和fp2是否指向同一文件 |\n| os.path.`samestat`(stat1, stat2) | 判断stat tuple stat1和stat2是否指向同一个文件 |\n| os.path.`split`(path) | 把路径分割成 dirname 和 basename，返回一个元组 |\n| os.path.`splitdrive`(path) | 一般用在 windows 下，返回驱动器名和路径组成的元组 |\n| os.path.`splitext`(path) | 分割路径中的文件名与拓展名 |\n| os.path.`walk`(path, visit, arg) | 遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数 |\n| os.path.`supports_unicode_filenames` | 设置是否支持unicode路径名 |\n\n<!--TODO: ### os.open()与open()的区别 -->\n\n<!--TODO: ### os.popen()与os.system()的区别 -->\n\n***************************\n\n## Python错误与异常处理\n\nPython有两种错误：语法错误和异常。  \nPython [assert](#assert-断言)（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。\n\n### 语法错误\nPython 的语法错误或者称之为解析错，会报出以下的错误：  \n\n```python\nprint('a)\n\n```\n\n```python\nline 1\n    print('a)\n             ^\nSyntaxError: EOL while scanning string literal\n```\n\n```python\nprint('a') print('b')\n```\n\n```python\nline 1\n    print('a') print('b')\n               ^\nSyntaxError: invalid syntax\n```\n\n如上，程序会报出语法错误`SyntaxError`，后面跟着的是错误的提示信息。  \n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。\n\n### 异常\n\n即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。  \n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  \n\n```Python\n>>> 10 * (1/0)             # 0 不能作为除数，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nZeroDivisionError: division by zero\n>>> 4 + spam*3             # spam 未定义，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nNameError: name 'spam' is not defined\n>>> '2' + 2               # int 不能与 str 相加，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n异常类型和异常信息会显示出来，例子中的异常类型有：`ZeroDivisionError`、`NameError`、`TypeError`  \n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。\n\n### 异常处理\n\n异常处理的格式是：  \n```python\ntry:\n    <code_segment>\nexcept [ErrorType]:\n    <solute_segment>\n[...\nexcept:\n    <solute_segment>\n]\n[else:\n    <code_segment>]\n[finally:\n    <code_segment>]\n```\n\n异常处理的工作流程如下：\n+ try代码块为要执行的代码，被先执行;\n+ 如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;\n+ 如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;\n+ 如果try代码块没有产生异常则执行else代码块(如果有);\n+ 最后执行finally代码块, finally 语句无论异常是否发生都会执行。\n\n> 一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:\n> ```python\n> except (RuntimeError, TypeError, NameError):\n>     pass\n> ```\n\n### 抛出异常\n\npython使用raise关键字向上层抛出异常:  \n\n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise ValueError\nexcept ValueError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。 \nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。  \nraise后面如果不跟具体异常，这样会向上抛出`RuntimeError`:  \n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise\nexcept RuntimeError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n异常输出：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\" , line 4, in <module>\n    raise\nRuntimeError: No active exception to reraise\n```\n\n### 自定义异常\n\n用户可以通过[继承](#继承)Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:  \n```Python\nclass MyError(Exception):\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ntry:\n    raise MyError(0)\nexcept MyError as e:\n    print(\"error code:\", e.value)\n\nraise MyError(\"MyError\")\n```\n\n以上代码的输出结果为：  \n> error code: 0\n> Traceback (most recent call last):\n  File \"&lt;stdin>\", line 14, in &lt;module>\n    raise MyError(\"MyError\")\n> \\_\\_main\\_\\_.MyError: 'MyError'  \n\n\n> 大多数的异常的名字都以\"Error\"结尾，就跟标准的异常命名一样。\n\n### assert(断言)\n\nPython assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。  \n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  \n\n语法格式为：  \n```python\nassert expression\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError\n```\n\nassert 后面也可以紧跟参数:  \n```python\nassert expression [, arguments]\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError(arguments)\n```\n\n下面是实例：  \n```python\nassert True\nprint(\"正常运行\")\nassert False\n```\n\n输出结果为：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert False\nAssertionError\n```\n\n带参数的实例：  \n```python\nassert 1>2, \"1大于2是错误的\"\n```\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert 1 > 2, \"1大于2是错误的\"\nAssertionError: 1大于2是错误的\n```\n\n以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：\n```python\nimport sys\nassert ('linux' in sys.platform), \"该代码只能在 Linux 下执行\"\n\n# 接下来要执行的代码\n```\n\n### with关键字\n\nPython 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。  \nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。  \n在处理文件对象时使用 with 关键字是一种很好的做法。  \n我们可以看下以下几种代码实例：  \n不使用 with，也不使用 try…except…finally\n```python\nfile = open('./test.txt', 'w')\nfile.write('hello world !')\nfile.close()\n```\n\n以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  \n\n```python\nfile = open('./test.txt', 'w')\ntry:\n    file.write('hello world')\nfinally:\n    file.close()\n```\n\n以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。\n\n使用 with 关键字：\n```python\nwith open('./test.txt', 'w') as file:\n    file.write('hello world !')\n```\n\n使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。  \n我们可以在执行 with 关键字后检验文件是否关闭：\n```python\nwith open(\"./test.txt\") as f:\n    print(f.closed)\nprint(f.closed)\n```\n\n以上代码输出结果为：  \n> False  \n> True\n\nwith 语句实现原理建立在上下文管理器之上。  \n上下文管理器是一个实现 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法的类。  \n使用 with 语句确保在嵌套块的末尾调用 \\_\\_exit\\_\\_ 方法。  \n这个概念类似于 try...finally 块的使用。\n\n> 在文件对象中定义了 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法，即文件对象也实现了上下文管理器，首先调用 \\_\\_enter\\_\\_ 方法，然后执行 with 语句中的代码，最后调用 \\_\\_exit\\_\\_ 方法。 即使出现错误，也会调用 \\_\\_exit\\_\\_ 方法，也就是会关闭文件流。\n\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n\n*****************************\n\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n\n******************************\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n## Python os模块方法\n\n********************************\n\n## Python math模块方法\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块方法\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>\n\n*************************************\n\n### str()和repr()的区别","source":"_posts/cn/Python-Note.md","raw":"---\ntitle: Python学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-04 15:25:13\nsubtitle: Python学习笔记\nheader-img: /img/header_img/nier.png\ntags:\n- Python\ncategories:\n- Note\nsticky: 999\n---\n> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python基本语法\n\n### 编码\n<!-- TODO: 编码 -->\n\n### 标识符\n\n+ 第一个字符必须是字母表中字母或下划线 _ 。\n+ 标识符的其他的部分由字母、数字和下划线组成。\n+ 标识符对大小写敏感。\n+ 非关键字\n\n> 在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\n\n***********************************\n\n### 语句\n\nPython中通常一行表示一个语句，末尾不需加上分号\";\".\n\n```python\nprint(\"hello world\")\n```\n\n***`多行语句`***\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠` \\ `来实现多行语句，例如：\n```py\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n\n但在 [], {}, 或 () 中的多行语句，`不需要使用反斜杠 \\` ，例如：\n```py\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```\n\n***`空行`***\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。  \n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  \n\n> 空行也是程序代码的一部分。\n\n***`同行多条语句`***\n\nPython 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：\n\n```py\nc = 5; print(\"a\"); print(\"b\"); print(c)\n```\n\n***`pass语句`***\nPython pass是空语句，是为了保持程序结构的完整性。  \npass 不做任何事情，一般用做占位语句，如下实例：  \n```Python\nwhile True: \n    pass # 等待键盘中断 (Ctrl+C)\n```\n\n**********************************\n\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 同时分别赋值\n```\n\n在Python中，类型属于对象，变量是没有类型的：  \n```Python\na = 'str'\n```\n\n在以上代码中，'str'是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向'str'这个String类型对象。\n\n***********************************\n\n### 关键字\n\n关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  \n\n```python \nimport keyword\n\nprint(keyword.kwlist)\n```\n\n以上代码的输出结果为（版本Python 3.9.8）：  \n> ['False', 'None', 'True', '\\_\\_peg\\_parser\\_\\_', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n***********************************\n\n### 注释\n\n***`单行注释`***\nPython的单行注释使用`#`号：  \n```python\n# 单行注释\na = 1  # 注释\n```\n\n***`多行注释`***\nPython的多行注释使用` ''' ` 或 ` \"\"\" `:  \n```python\n'''\n多行\n注释\n1\n'''\n\n\"\"\"\n多行注释\n2\n\"\"\"\n\n```\n\n*************************\n\n### 代码块\n\n和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。  \n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n```\n\n如果同一代码块的缩进空格数不一致，会导致运行错误：  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n  print(\"error\")\n```\n\n以上代码的输出结果为：  \n>   File \"&lt;tokenize>\", line 5\n>     print(\"error\")\n>     ^\n> IndentationError: unindent does not match any outer indentation level\n\n***********************************\n\n### 输入输出\n\nPython的内置函数[input()](#input)和[print()](#print)分别表示输入和输出:  \n\n```python\ninput(\"\\n\\n按下 enter 键后退出。\")\n\nprint(\"输出\")\nprint(\"print默认是换行的，如果不需要换行需要在后面参数加上end=''\",end = '')\n```\n\n*******************************\n\n### 导入import\n在 python 用 `import` 或者 `from...import` 来导入相应的模块。\n将整个模块(somemodule)导入，格式为： `import somemodule`\n从某个模块中导入某个函数,格式为： `from somemodule import somefunction`\n从某个模块中导入多个函数,格式为： `from somemodule import firstfunc, secondfunc, thirdfunc`\n将某个模块中的全部函数导入，格式为： `from somemodule import *`\n\n***************************\n\n### 解释器\n<!-- TODO: 解释器 -->\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`immutable的数据类型为： `Number`、`Tuple`、`String`  \n`可变`mutable的数据类型为： `List`、`Set`、`Dictionary`\n\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> &lt;class '\\_\\_main__.A'>  \n> &lt;class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块方法)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块方法)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n\n以上代码的输出结果为：  \n> &lt;class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### 级联\n\nPython按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。\n```python\nprint(\"this \" \"is \" \"string\")\n```\n\n以上代码的输出结果为：  \n> this is string\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] &lt;class 'list'>\n> [] &lt;class 'list'>\n> [1, 5, 9, '7'] &lt;class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的嵌套\n\n列表是可以嵌套的：  \n```python\nmatrix = [\n    [1,2,5],\n    [2,7,8],\n    [4,5,6,7,9],\n    [2,9,7,11]\n]\n```\n\n若要访问该列表的元素只需逐层访问即可：  \n```python\nprint(matrix[2][0])\n\nfor row in matrix:\n    for e in row:\n        print(e, end=\" \")\n    print()\n```\n\n以上代码的输出结果为：  \n> 4  \n> 1 2 5  \n> 2 7 8   \n> 4 5 6 7 9   \n> 2 9 7 11 \n\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n\n使用del可以根据索引删除一个元素或者一个切割\n\n```python\nlst = [1,4,5,9,8,3,1,2,0,11]\ndel lst[0]\nprint(lst)\n\ndel lst[1:-3:2]\nprint(lst)\n\ndel lst[:]\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [4, 5, 9, 8, 3, 1, 2, 0, 11]  \n> [4, 9, 3, 2, 0, 11]  \n> []\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 列表遍历\n\n列表遍历将使用[循环语句](#Python循环语句).\n\n<!--TODO: enumerate()  -->\n\n> 使用[enumerate()](#enumerate)函数可以得到索引和对应值\n\n```py\nlst = [1,2,7,3,6,4]\n\nfor i in lst:\n    print(i,end=\" \")\n\nfor i,value in enumerate(lst):\n    print(i,value)\n```\n\n以上代码的运行结果为：  \n> 1 2 7 3 6 4\n> 1 2\n> 2 7\n> 3 3\n> 4 6\n> 5 4\n\n<!--TODO: zip()  -->\n如果要同时遍历多个列表，可以使用[zip()](#zip)函数：  \n```python\nquestions = ['name', 'quest', 'favorite color']\nanswers = ['lancelot', 'the holy grail', 'blue']\nfor q, a in zip(questions, answers):\n    print('What is your {0}?  It is {1}.'.format(q, a))\n```\n\n以上代码的输出结果为：  \n> What is your name?  It is lancelot.  \n> What is your quest?  It is the holy grail.  \n> What is your favorite color?  It is blue.\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> test.py in &lt;module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in &lt;module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in &lt;module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n****************************************************\n\n## Python运算符\n\nPython的运算符可以分为以下几类：  \n\n+ [算术运算符](#算术运算符)\n+ [比较(关系)运算符](#比较(关系)运算符)\n+ [赋值运算符](#赋值运算符)\n+ [逻辑运算符](#逻辑运算符)\n+ [位运算符](#位运算符)\n+ [成员运算符](#成员运算符)\n+ [身份运算符](#身份运算符)\n\n> [运算符优先级](#运算符优先级)\n\n### 算术运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| + | 加 |\n| - | 减 |\n| * | 乘 |\n| / | 除 |\n| % | 取模 |\n| ** | 幂 |\n| // | 整除 |\n\n### 比较(关系)运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| == | 等于 |\n| > | 大于 |\n| < | 小于 |\n| != | 不等于 |\n| >= | 大于等于 |\n| <= | 小于等于 |\n\n### 赋值运算符\n| 运算符 | 描述 | 说明 |\n| :--: | :----- | :--- |\n| = | 简单的赋值运算符 | 将运算符右侧的值赋予左侧 |\n| += | 加法赋值运算符 | a+=b等价于a=a+b |\n| -= | 减法赋值运算符 | a-=b等价于a=a-b |\n| *= | 乘法赋值运算符 | a*=b等价于a=a*b |\n| /= | 除法赋值运算符 | a/=b等价于a=a/b |\n| %= | 取模赋值运算符 | a%=b等价于a=a%b |\n| **= | 幂赋值运算符 | a**=b等价于a=a**b |\n| //= | 取整赋值运算符 | a//=b等价于a=a//b |\n| := | 海象运算符 | `Python3.8`版本新增运算符。可在表达式内部为变量赋值。|\n\n> 海象运算符的使用：  \n> ```python\n> if (n := len(a)) > 10:  \n>    print(f\"List is too long ({n} elements, expected <= 10)\")\n> ```\n\n\n### 逻辑运算符\n\n| 运算符 | 逻辑表达式 | 描述 |\n| :--: | :----- | :----- | \n| and | x and y\t| 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。|\n| or | x or y | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。|\n| not | not x | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 |\n\n### 位运算符\n按位运算符是把数字看作二进制来进行计算的。\n\n| 运算符 | 描述 | 实例 |\n| :--: | :---| :---- |\n| `&` | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100 |\n| `|` | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0  | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101 |\n| `^` | 按位异或运算符：当两对应的二进位相异时，结果为1，否则为0  | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001 |\n| `~` | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 | `(~a )` 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。|\n| `<<` | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。| `a << 2` 输出结果 240 ，二进制解释： 1111 0000 |\n| `>>` | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111 |\n\n\n### 成员运算符\n\n| 运算符 | 描述 |\n| :--: | :------- |\n| in | 如果在指定的序列中找到值返回 True，否则返回 False。|\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。|\n\n### 身份运算符\n身份运算符用于比较两个对象的存储单元\n\n| 运算符 | 描述 | 实例 |\n| :---: | :----- | :----- |\n| is | is 是判断两个标识符是不是引用自一个对象 | x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象 | x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。|\n\n### 运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符 | 描述 |\n| :--: | :------ |\n| `**` | 指数 (最高优先级) |\n| `~ + -` | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //` | 乘，除，求余数和取整除 |\n| `+ -` | 加法减法 |\n| `>> <<` | 右移，左移运算符 |\n| `&` | 位 'AND' |\n| `^ |` | 位运算符 |\n| `<= < > >=`\t | 比较运算符 |\n| `== !=` | 等于运算符 |\n| `= %= /= //= -= += *= **=` | 赋值运算符 |\n| `is is not` | 身份运算符 |\n| `in not in` | 成员运算符 |\n| `not and or` | 逻辑运算符 |\n\n**************************************\n\n## Python条件控制\n\nPython条件控制使用if、elif和else关键字,一般流程图如下： \n![if流程图](if-1.png)\n\n共有三种模式：  \n\n***if***\n```python\nif (<condition_expr>) :\n    # statement_block_1\n# statement_block_other\n```\n***if-else***\n```python\nif (<condition_expr>) :\n    # statement_block_1\nelse :\n    # statement_block_else\n# statement_block_other\n```\n***if-elif-else***\n```python\nif (<condition_expr_1>) :\n    # statement_block_1\nelif (<condition_expr_2>) :\n    # statement_block_2\n# ……\nelse :\n    # statement_block_else\n# statement_block_other\n```\n上述代码的流程如下：  \n![if-elif-else](if-2.png)\n\nPython条件控制还支持if条件的`嵌套`：  \n```python\nif (<expr>):\n    if (<expr_2>):\n        # statement_block_1\n    else:\n        # statement_block_2\n    # statement_block_3\nelse:\n    # ……\n```\n\n*************************************\n\n## Python循环语句\n\n循环语句将在条件成立时循环执行。流程图如下：  \n![loop-1](loop-1.jpg)\nPython的循环语句有两种形式：  \n\n***`while`***\n> 循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  \n\n```python\nwhile (<condition_expr>):\n    # loop_statement_block\nelse:\n    # false_statement\n```\n\n> 可以使用`while True`来实现无限循环\n\n***`for`***\nPython for 循环可以遍历任何可迭代对象([序列](#Python序列sequence))\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n经常和for配合的一个函数为[range()](#range):  \nrange()函数会生成一个数字序列：  \n```python\n>>>for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n```\n\n\n如果要提前结束循环，需要使用关键字`break`跳出当前循环:  \n```python\nx = 10\nwhile x >= 3 :\n    print(x, end=\" \")\n    if x == 6 :\n        break\n    x -= 1\n```\n以上代码循环到x==6时就会停止:  \n> 10 9 8 7 6  \n\n如果只是跳过一次循环，使用关键字`continue`可以跳过本次循环，进入下次循环:  \n```python\nx = 10\nwhile x >= 3:\n    x -= 1\n    if x == 6:\n        continue\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 9 8 7 5 4 3 2\n\nbreak和continue在循环中的作用如下图：  \n![break-continue](break-continue.jpg)\n> break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。  \n> continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。\n\n*****************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n***************************************\n\n## Python迭代器与生成器\n\n### 迭代器iterator\n迭代是访问集合元素的一种方式。  \n迭代器是一个可以记住遍历的位置的对象。 \n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前`不会后退`。   \n\n迭代器有两个基本的方法：`iter()` 和 `next()`。  \niter()用于创建迭代器对象，next()用于控制迭代器前进。  \n字符串，列表或元组对象都可用于创建迭代器：  \n```python\nlst = [1,5,6,4,7,8]\nit = iter(lst)   # 创建迭代器对象\nprint(type(it))\nprint(next(it))  # 输出迭代器的下一个元素\nprint(next(it))\n```\n以上代码的输出结果为：  \n> &lt;class 'list_iterator'>\n> 1\n> 5\n\n迭代器对象可以使用常规for语句进行遍历：  \n```python\nlst = [1,2,3,4,5]\nit = iter(lst)\nfor i in it:\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 1 2 3 4 5 \n\n#### 自定义迭代器\n把一个类作为一个迭代器使用需要在类中实现两个方法 \\_\\_iter\\_\\_() 与 \\_\\_next\\_\\_() 。  \n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 \\_\\_init\\_\\_(), 它会在对象初始化的时候执行。有关面向对象编程请看：[Python面向对象](#Python面向对象)  \n`__iter__()` 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 \\_\\_next\\_\\_() 方法并通过 StopIteration 异常标识迭代的完成。  \n`__next__()` 方法会返回下一个迭代器对象。  \n\n> ***`StopIteration`***\n> StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 \\_\\_next\\_\\_() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 \n\n以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：  \n```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:    # 设置循环上限\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x, end=\" \")\n```\n执行输出结果为：  \n> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n\n****************************\n\n### 生成器generator\n\n在Python中，使用了`yield`的函数被称为生成器。  \n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。  \n在调用生成器运行的过程中，每次遇到 yield 时函数会`暂停并保存当前所有的运行信息`，***返回 yield 的值***, 并在下一次执行 next() 方法时从当前位置继续运行。  \n\n以下实例使用生成器实现斐波那契数列：  \n```python\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        break\n```\n以上代码的输出结果为：  \n> 0 1 1 2 3 5 8 13 21 34 55\n\n*****************************************************\n\n## Python函数\n\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。  \n函数能提高应用的模块性，和代码的重复利用率。  \n\n除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。\n\n### 定义一个函数\n\n函数的组成有以下几条规则:  \n+ 函数以`def`关键字开头，后接`函数标识符`名称和`参数列表`\n+ 函数内容以冒号`:`开始，下面的函数体缩进\n+ 以`return [表达式]`结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None\n\n下图是一个简单的函数形式说明:  \n![函数说明](function-1.png)\n总结来说，Python的函数语法格式如下：  \n```Python\ndef 函数名(参数列表):\n    函数体\n```\n\n### 参数\n\n在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的`参数传递`来说也对应着两种：  \n+ **可变类型**：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  \n+ **不可变类型**：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。\n\n> python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\nPython的函数`参数`共有下面四种类型：  \n+ 必需参数\n+ 关键字参数\n+ 默认参数\n+ 不定长参数\n\n***`必需参数`***\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。  \n***`关键字参数`***\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。  \n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。  \n***`默认参数`***\n调用函数时，如果没有传递参数，则会使用默认参数。\n***`不定长参数`***\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：  \n```py\ndef functionname([formal_args,] [*var_args_tuple,] [**var_args_dict] ):\n   function_suite\n   return [expression]\n```\n加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。  \n加了两个星号 ** 的参数会以字典的形式导入。\n\n下面结合函数的使用来理解这四种参数类型：  \n\n### 函数的使用\n使用函数只需要直接使用函数名并传入对应参数就可以调用了。\n\n```python\ndef function1(a,b,c):\n    print(a,b,c)\n    return\n    \nfunction1(1,2,3)  # 必需参数的使用，参数按顺序对应传入\nfunction1(1, c = \"5\", b = 2)  # 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入\n\ndef function2(a,b,c = 5):   # 默认参数，在函数声明时指定其默认值\n    print(a,b,c)\n    return\n\nfunction2(2,3)       # 默认参数在调用时不指定则使用默认值\n\ndef function3(a,b,*args_tuple):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_tuple)\n    return\n\nfunction3(1,2,3,4,5,6)\n\ndef function4(a,b,**args_dict):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_dict)\n    return\n\nfunction4(1,2,c = 3,d = 4,e = 5,f = 6)\n```\n\n以上代码的输出结果为：  \n> 1 2 3  \n> 1 2 5  \n> 2 3 5  \n> 1 2 (3, 4, 5, 6)  \n> 1 2 {'c': 3, 'd': 4, 'e': 5, 'f': 6}  \n\n声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数`必须用关键字`传入。\n```Python\ndef function1(a,b,*,c):\n    print(a,b,c)\n    return\n\nfunction1(1,2,c=5)\n```\n\n以上代码的输出结果为：  \n> 1 2 5\n\n### 匿名函数\n\nPython使用lambda关键字来创建匿名函数。  \n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。  \nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  \n\nlambda 函数的语法只包含一个语句，如下：  \n```Python\nlambda [arg1 [,arg2,.....argn]]:expression\n```\n\n使用实例来增进理解：  \n```python\nsum = lambda arg1,arg2:arg1+arg2    # 一个简单的匿名函数使用\n\nprint(sum(1,2))\n```\n\n以上代码的输出结果为：  \n> 3\n\n### return语句\nreturn作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。  \n```python\ndef function1(a,b):\n    return a+b\n\nc = function1(1,2)\nprint(c)\n```\n\n以上代码的输出结果为：  \n> 3\n\n### 强制位置参数\nPython3.8 新增了一个函数形参语法` / `用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:  \n```python\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\nf(10, 20, 30, d=40, e=50, f=60)  # 这种使用方式是正确的\n# 下面两种是错误的使用\nf(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n```\n****************************************\n\n## Python推导式\n\nPython的推导式应用于简化规律的列表或元组等序列的创建：  \n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  \n> 需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。\n\n\n简单语法是：  \n```Python\nnew_lst = [var for var in varrange if varexpr]\n```\n\n比如我们想得到一个偶数数列：  \n```python\nlst = [x for x in range(20) if x % 2 == 0]\n\nprint(lst)\n\ntup = (x*2 for x in range(10))   # 括号生成的是生成器对象\n\nprint(type(tup))\nprint(tuple(tup))\n```\n\n以上代码的输出结果为：  \n> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n> &lt;class 'generator'>\n> (0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\n\n推导式的更多使用建议自己上手尝试一下：  \n```python \nlst = [y for y in (x * 3 for x in range(10)) if y % 2 == 1]\n\nprint(lst)\n\nlst = [[x, y] for x in range(5) for y in range(5)]\n\nprint(lst)\n\nve = [\"x\",\"xx\",\"xxx\",\"xxxx\"]\nlst = [len(v) for v in ve]  # 推导式还可以对匿名变量使用函数\n\nprint(lst)\n\nlst = [str(round(355/113, i)) for i in range(1, 6)]   # 使用复杂表达式和嵌套函数\n\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [3, 9, 15, 21, 27]\n> [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]\n> [1, 2, 3, 4]\n> ['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n***********************\n\n## Python模块\n\n模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。  \n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。\n\n下面是一个使用 python 标准库中模块的例子。\n```python \nimport sys\n \nprint('命令行参数如下:')\nfor i in sys.argv:\n   print(i)\n\nprint('\\n\\nPython 路径为：', sys.path, '\\n')\n```\n\n> + import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  \n> + sys.argv 是一个包含命令行参数的列表。  \n> + sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  \n\n### import语句\n\n想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：  \n```python\nimport module1[,module2...]\n```\n\n当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  \n\n下面是自定义模块的使用:  \n这里先定义一个模块  \n```python\n# file_name:  test_module.py\n\ndef function(a,b):\n    return a+b\n\nprint('file_name: test_module.py')\n```\n然后再其他文件里导入\n```python\n# file_name:  test.py\n\nimport test_module\n\nprint('file_name: test.py')\n\nprint(test_module.function(1,2))     # 使用模块定义的方法\n```\n\n以上代码的运行结果为：    \n> file_name: test_module.py\n> file_name: test.py\n> 3\n\n可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  \n\n并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。  \n![模块只会被导入一次，执行一次](module-1.png)\n\n> 当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？  \n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。    \n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。  \n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。  \n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：  \n```python\nimport sys\n\nprint(sys.path)\n```\n\n以上代码的输出结果为：  \n> ['g:\\\\Codes\\\\Python\\\\testpy', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles\\\\lib\\\\python', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\DLLs', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39', '', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\Pythonwin', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Administrator\\\\.ipython']\n\nsys.path 输出是一个列表，其中第一项是当前目录。  \n\n如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：  \n```python\nimport test_module\n\nfun = test_module.function\n\nprint(fun(1,2))\n```\n\n### from...import语句\n\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：  \n```Python\nfrom modname import name1[, name2[, ... nameN]]\n```\n这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 \n \n而如果要把一个模块所有成员导入当前的命名空间中，语法如下：  \n```python\nfrom modname import *\n```\n\n这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如'\\_a'此类。\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。\n\n### 深入模块\n\n前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。  \n我们一般使用这些可执行代码来初始化模块。  \n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。  \n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。  \n从另一个方面，当你确实知道你在做什么的话，你也可以通过 `modname.itemname` 这样的表示法来访问模块内的函数。  \n\n但是需要注意：  \n> 在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  \n\n### __name__属性\n\n一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用\\_\\_name\\_\\_属性来使该程序块仅在该模块自身运行时执行。  \n> 注意是前后`两个下划线`\n\n```python\n# file_name:  test_module.py\nif __name__ == '__main__':\n    print('test_module_main')\nelse:\n    print('file_name: test_module.py')\n```\n\n每个模块都有一个\\_\\_name\\_\\_属性，当其值是'\\_\\_main\\_\\_'时，表明该模块自身在运行，否则是被引入。\n\n### dir()函数\n\n内置的函数 [`dir()`](#dir) 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:  \n```python\nimport test_module,sys\nprint(dir(test_module))\nprint(dir(sys))\n```\n\n以上代码的输出结果为：  \n> ['\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'function']  \n> ['\\_\\_breakpointhook\\_\\_', '\\_\\_displayhook\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_excepthook\\_\\_', '\\_\\_interactivehook\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', '\\_\\_stderr\\_\\_', '\\_\\_stdin\\_\\_', '\\_\\_stdout\\_\\_', '\\_\\_unraisablehook\\_\\_', '\\_base\\_executable', '\\_clear\\_type\\_cache', '\\_current\\_frames', '\\_debugmallocstats', '\\_enablelegacywindowsfsencoding', '\\_framework', '\\_getframe', '\\_git', '\\_home', '\\_xoptions', 'addaudithook', 'api\\_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'platlibdir', 'prefix', 'ps1', 'ps2', 'ps3', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions', 'winver']\n\n如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:\n```Python\nprint(dir())\n```\n\n> ['\\_\\_annotations\\_\\_', '\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_']\n\n### 其他模块\n\n除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看[Python库参考文档](#Python库参考文档)。  \n\n有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。  \n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。  \n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:  \n```python\nimport sys\nprint(sys.ps1)\nprint(sys.ps2)\n```\n\n### 包\n\n包是一种管理 Python 模块命名空间的形式，采用\"点模块名称\"。  \n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。  \n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  \n\n在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。  \n目录只有包含一个叫做 \\_\\_init\\_\\_.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。\n最简单的情况，放一个空的 :file:\\_\\_init\\_\\_.py就可以了。  \n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。  \n\n注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。  \nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。  \n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  \n\n如果我们使用 from sound.effects import * 会发生什么呢？  \nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。  \n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。  \n在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。  \n为了解决这个问题，我们只需要提供一个精确包的索引。  \n导入语句遵循如下规则：如果包定义文件 \\_\\_init\\_\\_.py 存在一个叫做 \\_\\_all\\_\\_ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。  \n作为包的作者，可别忘了在更新包之后保证 \\_\\_all\\_\\_ 也更新了啊。  \n\\_\\_all\\_\\_是一个存储模块名字符串的列表。  \n\n*************************************\n\n## Python输入输出\n\n再前面我们已经接触过Python的输入[input()](#input)和输出[print()](#print)了，本章主要是介绍输入输出的进阶技巧。  \n\n### 输出格式美化\n\nPython两种输出值的方式: 表达式语句和 print() 函数。  \n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。  \n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。  \n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  \n> + str()： 函数返回一个用户易读的表达形式。\n> + repr()： 产生一个解释器易读的表达形式。\n\n下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：  \n```Python\n>>> a = '1' \n>>> str(a)\n'1'\n>>> repr(a)\n\"'1'\"\n>>> print(a)\n1\n>>> print(str(a))\n1\n>>> print(repr(a))\n'1'\n>>> s = f'{str(a)},{repr(a)}'\n>>> print(s)\n1,'1'\n>>> #  repr() 函数可以保留转义字符串中的特殊字符\n>>> hello = 'hello, world\\n'      \n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> hellos_1 = str(hello)\n>>> print(hellos_1)\nhello, world\n\n>>> repr((x, y, ('Go','Python')))      \n\"(32.5, 40000, ('Go', 'Python'))\"\n```\n\n关于str()和repr()的更多区别请参见[str()和repr()的区别](str()和repr()的区别)\n\n其他关于字符串格式化内容请参见: [字符串格式化](#字符串格式化)\n\n### 读取输入\n\nPython 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。\n\n***********************************************\n\n## Python文件读写操作\n\n### 读和写文件\n\n[open()](#open)函数将会返回一个file对象，其基本语法如下：  \n```python\nopen(filename, mode)\n```\n\n+ filename : 包含了你要访问的文件的字符串值。\n+ mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n不同模式打开文件的完全列表：  \n\n| 模式 | 描述 |\n| :-: | :----- |\n| r | 以`只读`方式打开文件。文件的指针将会放在文件的`开头`。这是`默认`模式。 |\n| rb | 以`二进制`格式打开一个文件用于`只读`。文件指针将会放在文件的`开头`。 |\n| r+ | 打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| rb+ | 以`二进制`格式打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| w | 打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb | 以`二进制`格式打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| w+ | 打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb+ | 以`二进制`格式打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| a | 打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| ab | 以`二进制`格式打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| a+ | 打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。文件打开时会是追加模式。如果该文件`不存在则创建`新文件用于读写。 |\n| ab+ | 以`二进制格式`打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。如果该文件`不存在则创建`新文件用于读写。 |\n\n总结来说模式的情况有三种：  \n+ 基础模式： 也就是 `r` `w` `a` (read、write、append)\n+ 二进制模式：  在基础模式上加上`b`表示以二进制格式打开文件(byte)\n+ 读写模式：  在以上两种模式上加上`+`表示打开的文件可读写\n\n| 模式 | r | r+ | w | w+ | a | a+ |\n| :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n| 读 | √ | √ |   | √ |   | √ |\n| 写 |   | √ | √ | √ | √ | √ |\n| 创建 |   |   | √ | √ | √ | √ |\n| 覆盖 |   |   | √ | √ |   |   |\n| 指针在开始 | √ | √ | √ | √ |   |   |\n| 指针在结尾 |   |   |   |   | √ | √ |\n\n![读写模式](rwa-1.png)\n\n下面是一个读写文件的实例:  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a\")\n    f.write(\"a模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式再写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> Traceback (most recent call last):\n>   File \"\\\\testpy\\\\quick.py\", line 6, in &lt;module>\n>     f = open(r\"testpy\\\\test.txt\", \"r\")\n> FileNotFoundError: [Errno 2] No such file or directory: 'testpy\\\\test.txt'\n> w模式写入\n> w模式写入a模式写入\n> w模式再写入\n\n可以看到下图文件结构的改变\n![读写测试-前](rw_test_1.png)\n![读写测试-后](rw_test_2.png)\n\n以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。\n\n> 这里有几个需要注意的点: \n> + 文件的路径，由于带有反斜杠\\\\，会被转义，所以需要使用r-string\n> + 打开的文件需要使用f.close()关闭或者使用[with...as...](#with关键字)代码块\n> + 读写文件通常需要在try...except里进行\n\n如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：  \n![文字乱码](rw-problem.png)\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：  \nvscode选择右下角的编码格式改变：\n![vscode选择编码](vscode.png)\n![vscode选择编码-2](vscode-2.png)\n![vscode选择编码-3](vscode-3.png)\n![文字乱码解决](solute.png)\n\n还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：  \n```python\nf = open(r\"testpy\\test.txt\", \"w\", encoding=\"utf-8\")\n# ...\nf.close()\n```\n\n\n关于上面实例使用的文件对象的方法，请看下节。  \n\n### 文件对象的方法\n<!-- TODO: 文件对象方法 -->\n\n#### [`f.read()`](#read)\n\n为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。  \nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  \n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read(2))\n    print(f.read(1))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n以上代码的输出结果为：  \n> 写入  \n> 字\n\n可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  \n> 这是因为read()同时会向后移动指针size个字符.\n\n但是这时候有人又有问题了：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a+\")\n    print(f.read(2))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？\n> 这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。\n\n如果你打开文件的方式没有读的权限，那么会报出以下的错误：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n> Traceback (most recent call last): \n>   File \"\\\\testpy\\\\quick.py\", line 18, in &lt;module>  \n>     print(f.read())\n> `io.UnsupportedOperation: not readable`\n\n#### [`f.readline()`](#readline)\nf.readline() 会从文件中读取单独的一行。换行符为 '\\n'。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"a\", encoding=\"utf-8\")\n    f.write(\"写入字符串1\\n\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(repr(f.readline()))\n    print(repr(f.readline()))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> '写入字符串\\n'  \n> '写入字符串1\\n'  \n\n可以看到调用readline()和read()一样都会向后移动指针\n\n还可以使用迭代文件对象的方式遍历每一行：  \n```python\nimport traceback\n\ntry:\n    # 使用with...as在代码块结束时会自动关闭文件对象\n    with open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            print(line, end=\"\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入字符串  \n> 写入字符串1\n\n#### [`f.readlines()`](#readlines)\n\nf.readlines() 将返回该文件中包含的所有行。  \n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(f.readlines())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> ['写入字符串\\n', '写入字符串1']\n\n#### [`f.write()`](#write)\n\nf.write(string) 将 string 写入到文件中, 然后返回写入的字符数。\n```Python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符\n\n#### [`f.tell()`](#tell)\n\nf.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f'当前游标处于第{f.tell()}字节处')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处\n\n一些常用编码一个字符所占的字节数：  \n| 编码 | 中文 | 英文 | 其他说明 |\n| :--: | :--: | :--: | :-- |\n| ASCII | 2 | 1 |  |\n| Unicode | 2 | 2 | 英文符号只占1个字节 |\n| GB2312 | 2 | 2 | |\n| GBK | 2 | 1 | |\n| ISO-8859-1 | 1 | 1 | |\n| UTF-8 | 3 | 1 | |\n| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |\n| UTF-32 | 4 | 4 |  |\n\n#### [`f.seek()`](#seek)\n\n如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。\n\noffset 是偏移量；\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：\n\n+ seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符\n+ seek(x,1) ： 表示从当前位置往后移动x个字符\n+ seek(-x,2)：表示从文件的结尾往前移动x个字符\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0))\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0, 2))\n        print(f\"当前游标处于第{f.tell()}字节处\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处  \n> 0  \n> 当前游标处于第0字节处  \n> 12  \n> 当前游标处于第12字节处\n\n#### [`f.close()`](#close)\n\n在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。  \n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。\n\n\n### pickle模块\n\npython的pickle模块实现了基本的数据序列和反序列化。  \n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。  \n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  \n\n下面通过一个简单实例来说明pickle模块：  \n```python\nimport pickle\n\n# 使用pickle模块将数据对象保存到文件\ndata1 = {\"a\": [1, 2.0, 3, 4 + 6j], \"b\": (\"string\", u\"Unicode string\"), \"c\": None}\n\noutput = open(\"data.pkl\", \"wb\")\n\nselfref_list = [1, 2, 3]\nselfref_list.append(selfref_list)\n\n# Pickle dictionary using protocol 0.\npickle.dump(data1, output)\n\n# Pickle the list using the highest protocol available.\npickle.dump(selfref_list, output, 1)\n\noutput.close()\n```\n\n上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：  \n```python\npickle.dump(obj, file, [,protocol])\n```\n\n它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。\n\n```python\nimport pickle\n\npkl_file = open(\"data.pkl\", \"rb\")\n\n# 使用pickle模块从文件中重构python对象\ndata1 = pickle.load(pkl_file)\nprint(data1)\ndata2 = pickle.load(pkl_file)\nprint(data2)\n\npkl_file.close()\n```\n\n以上代码的输出结果为：  \n> {'a': [1, 2.0, 3, (4+6j)], 'b': ('string', 'Unicode string'), 'c': None}  \n> [1, 2, 3]\n\n上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：  \n```python\nany_x = pickle.load(file)\n```\n\n*************************\n\n## Python os模块\n<!-- TODO: os模块方法 -->\n\n### os模块常用方法\n\n[os模块](#Python-os模块方法)提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.access(\"./testpy/test.txt\", os.F_OK))\nprint(os.access(\"./testpy/test.txt1111\", os.F_OK))\nprint(os.access(\"./testpy/data.pkl\", os.R_OK))\nprint(os.access(\"./testpy/test.pkl\", os.W_OK))\nprint(os.access(\"./testpy/test.pkl\", os.X_OK))\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\nTrue\nFalse\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n# 返回你的当前工作目录\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.getcwd())\nos.chdir(\"../\")\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\ng:\\Codes\\Python\\\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os, stat\n\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\nos.chmod(\"./testpy/data.pkl\", stat.S_IREAD)\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfd = os.open(\"./testpy/test3.txt\", os.O_CREAT | os.O_RDWR)\nos.write(fd, str.encode(\"This is test\\n\"))\nos.close(fd)\n\nfd = os.open(\"./testpy/test3.txt\", os.O_RDONLY)\nprint(os.read(fd, 10))\nos.close(fd)\n```\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nb'This is te'\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nfd = os.open(\"./test.txt\",os.O_RDONLY)\nos.closerange(fd,fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 打开文件\nfd = os.open(\"foo.txt\", os.O_RDWR | os.O_CREAT)\n# 复制文件描述符\nd_fd = os.dup(fd)\n# 使用复制的文件描述符写入文件\nos.write(d_fd, \"This is test\".encode())\n# 关闭文件\nos.closerange(fd, d_fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n# os.fdopen()\n# 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。\n# 该方法是内置函数 open() 的别名;\n# 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nimport os\n\npath = \"./testpy/test.txt\"\n\nprint(os.stat(path))\n\ninfo = os.lstat(path)\n\nprint(info)\nprint(f\"st_uid = {info.st_uid}\")\n\nfd = os.open(path, os.O_RDWR)\ninfo = os.fstat(fd)\n\nprint(info)\nos.close(fd)\n```\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nst_uid = 0\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nos.link(src, dst)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\npath = \"./\"\nprint(os.listdir(path))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/\"\n\nos.makedirs(path, 0o777)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/test_mkdir\"\n\nos.mkdir(path)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nr,w = os.pipe()\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nwith os.popen(\"mkdir test_popen\",\"r\",1) as f:\n    print(f)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n<os._wrap_close object at 0x000001D8FC929430>\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.system(r\"adb devices\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n\nos.remove(\"./testpy/test.txt\")\n\n# 移除后列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test.txt', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.removedirs(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.rmdir(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.listdir())\n\nos.rename(\"test_pack\", \"test_rename\")\n\nprint(os.listdir())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'test_popen', 'unable', 'workspace.code-workspace', '__pycache__']\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_popen', 'test_rename', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nprint (\"当前目录为: %s\" %os.getcwd())\n\n# 列出目录\nprint (\"目录为: %s\"%os.listdir(os.getcwd()))\n\n# 重命名 \"aa1.txt\"\nos.renames(\"aa1.txt\",\"newdir/aanew.txt\")\n\nprint (\"重命名成功。\")\n\n# 列出重命名的文件 \"aa1.txt\"\nprint (\"目录为: %s\" %os.listdir(os.getcwd()))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n当前目录为: /tmp\n目录为:\n [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','newdir','amrood.admin' ]\n重命名成功。\n目录为:\n [  'a1.txt','resume.doc','a3.py','Administrator','newdir','amrood.admin' ]\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfor root, dirs, files in os.walk(\".\", topdown=False):\n    for name in files:\n        print(os.path.join(root, name))\n    for name in dirs:\n        print(os.path.join(root, name))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n.\\.vscode\\settings.json\n.\\testpy\\data.pkl\n.\\testpy\\quick.py\n.\\testpy\\quick2.py\n.\\testpy\\test1.txt\n.\\testpy\\test2.txt\n.\\testpy\\test3.txt\n.\\testpy\\test_unicode.txt\n.\\test_pack\\test_py.py\n.\\test_pack\\__init__.py\n.\\unable\\__pycache__\\un_test.cpython-39.pyc\n.\\unable\\un_test.py\n.\\unable\\__pycache__\n.\\__pycache__\\test_module.cpython-39.pyc\n.\\auto.py\n.\\data.pkl\n.\\dp1.py\n.\\foo.txt\n.\\test.py\n.\\test.txt\n.\\test_module.py\n.\\workspace.code-workspace\n.\\.vscode\n.\\testpy\n.\\test_pack\n.\\test_popen\n.\\unable\n.\\__pycache__\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n \n# 输出默认值 ..\nprint(os.pardir)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n### path模块\n\nos.path 模块主要用于获取文件的属性。  \n以下是 os.path 模块的几种常用方法：  \n\n| 方法 | 说明 |\n| :--: | :------------------- |\n| os.path.`abspath`(path) | 返回绝对路径 |\n| os.path.`basename`(path) | 返回文件名 |\n| os.path.`commonprefix`(list) | 返回list(多个路径)中，所有path共有的最长的路径 |\n| os.path.`dirname`(path) | 返回文件路径 |\n| os.path.`exists`(path) | 路径存在则返回True,路径损坏返回False |\n| os.path.`expanduser`(path) | 把path中包含的\"~\"和\"~user\"转换成用户目录 |\n| os.path.`expandvars`(path) | 根据环境变量的值替换path中包含的\"$name\"和\"${name}\" |\n| os.path.`getatime`(path) | 返回最近访问时间（浮点型秒数） |\n| os.path.`getmtime`(path) | 返回最近文件修改时间 |\n| os.path.`getctime`(path) | 返回文件 path 创建时间 |\n| os.path.`getsize`(path) | 返回文件大小，如果文件不存在就返回错误 |\n| os.path.`isabs`(path) | 判断是否为绝对路径 |\n| os.path.`isfile`(path) | 判断路径是否为文件 |\n| os.path.`isdir`(path) | 判断路径是否为目录 |\n| os.path.`islink`(path) | 判断路径是否为链接 |\n| os.path.`ismount`(path) | 判断路径是否为挂载点 |\n| os.path.`join`(path1[, path2[, ...]]) | 把目录和文件名合成一个路径 |\n| os.path.`normcase`(path) | 转换path的大小写和斜杠 |\n| os.path.`normpath`(path) | 规范path字符串形式 |\n| os.path.`realpath`(path) | 返回path的真实路径 |\n| os.path.`relpath`(path[, start]) | 从start开始计算相对路径 |\n| os.path.`samefile`(path1, path2) | 判断目录或文件是否相同 |\n| os.path.`sameopenfile`(fp1, fp2) | 判断fp1和fp2是否指向同一文件 |\n| os.path.`samestat`(stat1, stat2) | 判断stat tuple stat1和stat2是否指向同一个文件 |\n| os.path.`split`(path) | 把路径分割成 dirname 和 basename，返回一个元组 |\n| os.path.`splitdrive`(path) | 一般用在 windows 下，返回驱动器名和路径组成的元组 |\n| os.path.`splitext`(path) | 分割路径中的文件名与拓展名 |\n| os.path.`walk`(path, visit, arg) | 遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数 |\n| os.path.`supports_unicode_filenames` | 设置是否支持unicode路径名 |\n\n<!--TODO: ### os.open()与open()的区别 -->\n\n<!--TODO: ### os.popen()与os.system()的区别 -->\n\n***************************\n\n## Python错误与异常处理\n\nPython有两种错误：语法错误和异常。  \nPython [assert](#assert-断言)（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。\n\n### 语法错误\nPython 的语法错误或者称之为解析错，会报出以下的错误：  \n\n```python\nprint('a)\n\n```\n\n```python\nline 1\n    print('a)\n             ^\nSyntaxError: EOL while scanning string literal\n```\n\n```python\nprint('a') print('b')\n```\n\n```python\nline 1\n    print('a') print('b')\n               ^\nSyntaxError: invalid syntax\n```\n\n如上，程序会报出语法错误`SyntaxError`，后面跟着的是错误的提示信息。  \n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。\n\n### 异常\n\n即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。  \n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  \n\n```Python\n>>> 10 * (1/0)             # 0 不能作为除数，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nZeroDivisionError: division by zero\n>>> 4 + spam*3             # spam 未定义，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nNameError: name 'spam' is not defined\n>>> '2' + 2               # int 不能与 str 相加，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n异常类型和异常信息会显示出来，例子中的异常类型有：`ZeroDivisionError`、`NameError`、`TypeError`  \n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。\n\n### 异常处理\n\n异常处理的格式是：  \n```python\ntry:\n    <code_segment>\nexcept [ErrorType]:\n    <solute_segment>\n[...\nexcept:\n    <solute_segment>\n]\n[else:\n    <code_segment>]\n[finally:\n    <code_segment>]\n```\n\n异常处理的工作流程如下：\n+ try代码块为要执行的代码，被先执行;\n+ 如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;\n+ 如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;\n+ 如果try代码块没有产生异常则执行else代码块(如果有);\n+ 最后执行finally代码块, finally 语句无论异常是否发生都会执行。\n\n> 一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:\n> ```python\n> except (RuntimeError, TypeError, NameError):\n>     pass\n> ```\n\n### 抛出异常\n\npython使用raise关键字向上层抛出异常:  \n\n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise ValueError\nexcept ValueError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。 \nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。  \nraise后面如果不跟具体异常，这样会向上抛出`RuntimeError`:  \n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise\nexcept RuntimeError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n异常输出：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\" , line 4, in <module>\n    raise\nRuntimeError: No active exception to reraise\n```\n\n### 自定义异常\n\n用户可以通过[继承](#继承)Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:  \n```Python\nclass MyError(Exception):\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ntry:\n    raise MyError(0)\nexcept MyError as e:\n    print(\"error code:\", e.value)\n\nraise MyError(\"MyError\")\n```\n\n以上代码的输出结果为：  \n> error code: 0\n> Traceback (most recent call last):\n  File \"&lt;stdin>\", line 14, in &lt;module>\n    raise MyError(\"MyError\")\n> \\_\\_main\\_\\_.MyError: 'MyError'  \n\n\n> 大多数的异常的名字都以\"Error\"结尾，就跟标准的异常命名一样。\n\n### assert(断言)\n\nPython assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。  \n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  \n\n语法格式为：  \n```python\nassert expression\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError\n```\n\nassert 后面也可以紧跟参数:  \n```python\nassert expression [, arguments]\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError(arguments)\n```\n\n下面是实例：  \n```python\nassert True\nprint(\"正常运行\")\nassert False\n```\n\n输出结果为：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert False\nAssertionError\n```\n\n带参数的实例：  \n```python\nassert 1>2, \"1大于2是错误的\"\n```\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert 1 > 2, \"1大于2是错误的\"\nAssertionError: 1大于2是错误的\n```\n\n以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：\n```python\nimport sys\nassert ('linux' in sys.platform), \"该代码只能在 Linux 下执行\"\n\n# 接下来要执行的代码\n```\n\n### with关键字\n\nPython 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。  \nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。  \n在处理文件对象时使用 with 关键字是一种很好的做法。  \n我们可以看下以下几种代码实例：  \n不使用 with，也不使用 try…except…finally\n```python\nfile = open('./test.txt', 'w')\nfile.write('hello world !')\nfile.close()\n```\n\n以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  \n\n```python\nfile = open('./test.txt', 'w')\ntry:\n    file.write('hello world')\nfinally:\n    file.close()\n```\n\n以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。\n\n使用 with 关键字：\n```python\nwith open('./test.txt', 'w') as file:\n    file.write('hello world !')\n```\n\n使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。  \n我们可以在执行 with 关键字后检验文件是否关闭：\n```python\nwith open(\"./test.txt\") as f:\n    print(f.closed)\nprint(f.closed)\n```\n\n以上代码输出结果为：  \n> False  \n> True\n\nwith 语句实现原理建立在上下文管理器之上。  \n上下文管理器是一个实现 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法的类。  \n使用 with 语句确保在嵌套块的末尾调用 \\_\\_exit\\_\\_ 方法。  \n这个概念类似于 try...finally 块的使用。\n\n> 在文件对象中定义了 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法，即文件对象也实现了上下文管理器，首先调用 \\_\\_enter\\_\\_ 方法，然后执行 with 语句中的代码，最后调用 \\_\\_exit\\_\\_ 方法。 即使出现错误，也会调用 \\_\\_exit\\_\\_ 方法，也就是会关闭文件流。\n\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n\n*****************************\n\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n\n******************************\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n## Python os模块方法\n\n********************************\n\n## Python math模块方法\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块方法\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>\n\n*************************************\n\n### str()和repr()的区别","slug":"Python-Note","published":1,"updated":"2021-11-04T07:25:13.000Z","_id":"ckzia53iu001lowvogfzyc66b","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h2><ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>windows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。  </li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode  <ul>\n<li>Pycharm</li>\n<li>Rider </li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python基本语法\"><a href=\"#python基本语法\" class=\"headerlink\" title=\"python基本语法\"></a>python基本语法</h2><h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><!-- TODO: 编码 -->\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>第一个字符必须是字母表中字母或下划线 _ 。</li>\n<li>标识符的其他的部分由字母、数字和下划线组成。</li>\n<li>标识符对大小写敏感。</li>\n<li>非关键字</li>\n</ul>\n<blockquote>\n<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>\n</blockquote>\n<hr>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>Python中通常一行表示一个语句，末尾不需加上分号”;”.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><em><code>多行语句</code></em></strong></p>\n<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠<code>\\</code>来实现多行语句，例如：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure></p>\n<p>但在 [], {}, 或 () 中的多行语句，<code>不需要使用反斜杠 \\</code> ，例如：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = [<span class=\"string\">&#x27;item_one&#x27;</span>, <span class=\"string\">&#x27;item_two&#x27;</span>, <span class=\"string\">&#x27;item_three&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;item_four&#x27;</span>, <span class=\"string\">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em><code>空行</code></em></strong><br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  </p>\n<blockquote>\n<p>空行也是程序代码的一部分。</p>\n</blockquote>\n<p><strong><em><code>同行多条语句</code></em></strong></p>\n<p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = <span class=\"number\">5</span>; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"built_in\">print</span>(<span class=\"string\">&quot;b&quot;</span>); <span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p><strong><em><code>pass语句</code></em></strong><br>Python pass是空语句，是为了保持程序结构的完整性。<br>pass 不做任何事情，一般用做占位语句，如下实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 同时分别赋值</span></span><br></pre></td></tr></table></figure>\n<p>在Python中，类型属于对象，变量是没有类型的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>在以上代码中，’str’是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向’str’这个String类型对象。</p>\n<hr>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为（版本Python 3.9.8）：  </p>\n<blockquote>\n<p>[‘False’, ‘None’, ‘True’, ‘__peg_parser__‘, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p>\n</blockquote>\n<hr>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p><strong><em><code>单行注释</code></em></strong><br>Python的单行注释使用<code>#</code>号：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\">a = <span class=\"number\">1</span>  <span class=\"comment\"># 注释</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em><code>多行注释</code></em></strong><br>Python的多行注释使用<code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">注释</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">多行注释</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。<br>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>如果同一代码块的缩进空格数不一致，会导致运行错误：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>  File “&lt;tokenize&gt;”, line 5<br>    print(“error”)<br>    ^<br>IndentationError: unindent does not match any outer indentation level</p>\n</blockquote>\n<hr>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>Python的内置函数<a href=\"#input\">input()</a>和<a href=\"#print\">print()</a>分别表示输入和输出:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">input</span>(<span class=\"string\">&quot;\\n\\n按下 enter 键后退出。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输出&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;print默认是换行的，如果不需要换行需要在后面参数加上end=&#x27;&#x27;&quot;</span>,end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"导入import\"><a href=\"#导入import\" class=\"headerlink\" title=\"导入import\"></a>导入import</h3><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为： <code>import somemodule</code><br>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code><br>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p>\n<hr>\n<h3 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h3><!-- TODO: 解释器 -->\n<hr>\n<h2 id=\"Python基本数据类型\"><a href=\"#Python基本数据类型\" class=\"headerlink\" title=\"Python基本数据类型\"></a>Python基本数据类型</h2><p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 </p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number数字\">Number</a></li>\n<li><a href=\"#Tuple元组\">Tuple</a></li>\n<li><a href=\"#String字符串\">String</a></li>\n<li><a href=\"#List列表\">List</a></li>\n<li><a href=\"#Set集合\">Set</a></li>\n<li><a href=\"#Dictionary字典\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>immutable的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br><code>可变</code>mutable的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><a href=\"#type-和-isinstance\" class=\"headerlink\" title=\"type() 和 isinstance()\"></a><code>type()</code> 和 <code>isinstance()</code></h3><p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>type()函数有两个重载方法：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  </p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象  </li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\"><a href=\"#isinstance-与-type-区别：\" class=\"headerlink\" title=\"isinstance() 与 type() 区别：\"></a>isinstance() 与 type() 区别：</h4><p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>isinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>&lt;class ‘__main<strong>.A’&gt;<br>&lt;class ‘__main</strong>.B’&gt;<br>True<br>False  </p>\n</blockquote>\n<h3 id=\"Number数字\"><a href=\"#Number数字\" class=\"headerlink\" title=\"Number数字\"></a>Number数字</h3><p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。  </p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\"><a href=\"#具体类型\" class=\"headerlink\" title=\"具体类型\"></a>具体类型</h4><h5 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int\"></a>int</h5><p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h5><p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个临界点是<code>1e+16</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure></p>\n<p>float的正常最多位为16位小数，比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure></p>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float精度问题\">python float 精度问题</a>  </p>\n</blockquote>\n<h5 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool\"></a>bool</h5><p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>Python3中，bool是int的<code>子类</code>；  </p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<strong><em>True</em></strong>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>True<br>2<br>1<br>False<br>False</p>\n<p>注意：从Python3.8开始，使用<strong><em>is</em></strong>和<strong><em>is not</em></strong>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\"><a href=\"#complex\" class=\"headerlink\" title=\"complex\"></a>complex</h5><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\"><a href=\"#数值运算\" class=\"headerlink\" title=\"数值运算\"></a>数值运算</h4><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\"><a href=\"#数字类型转换\" class=\"headerlink\" title=\"数字类型转换\"></a>数字类型转换</h4><p>Python各数字类型间支持互相转换。<br>Python的数字类型转化和创建都可以直接将<strong><em>数据类型作为函数名</em></strong>即可。  </p>\n<p>注意强制类型转换可能会导致<strong><em>数据损失</em></strong>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><h5 id=\"Python的内置函数\"><a href=\"#Python的内置函数\" class=\"headerlink\" title=\"Python的内置函数\"></a><a href=\"#Python内置函数\">Python的内置函数</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的math模块\"><a href=\"#Python的math模块\" class=\"headerlink\" title=\"Python的math模块\"></a><a href=\"#Python-math模块方法\">Python的math模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的random模块\"><a href=\"#Python的random模块\" class=\"headerlink\" title=\"Python的random模块\"></a><a href=\"#Python-random模块方法\">Python的random模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"相关常量\"><a href=\"#相关常量\" class=\"headerlink\" title=\"相关常量\"></a>相关常量</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"Tuple元组\"><a href=\"#Tuple元组\" class=\"headerlink\" title=\"Tuple元组\"></a>Tuple元组</h3><p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。  </p>\n<h4 id=\"元组的创建\"><a href=\"#元组的创建\" class=\"headerlink\" title=\"元组的创建\"></a>元组的创建</h4><p>元组的创建方式有两种：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<strong><em>空元组</em></strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"元组的索引和截取\"><a href=\"#元组的索引和截取\" class=\"headerlink\" title=\"元组的索引和截取\"></a>元组的索引和截取</h4><p>因为元组也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9)<br>(8, 9, 7, 2, 23, 1, 1)<br>(8, 7, 23, 1)<br>()<br>(13, 1, 1, 23, 2, 7, 9)  </p>\n</blockquote>\n<h4 id=\"元组运算\"><a href=\"#元组运算\" class=\"headerlink\" title=\"元组运算\"></a>元组运算</h4><p>元组运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#元组的索引和截取\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-1\"><a href=\"#常用函数-1\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p><br></p>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h3><p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\"><a href=\"#字符串创建\" class=\"headerlink\" title=\"字符串创建\"></a>字符串创建</h4><p>我们使用引号<code>( &#39; 或 &quot; )</code>来创建字符串。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>&lt;class ‘str’&gt;</p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 &#39;&#39;&#39;  )</code>来创建多行字符串<br>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的结果为：  </p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>多行字符串可以使用制表符<br>TAB (      )。<br>也可以使用换行符 [<br> ]。   </p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串访问\"><a href=\"#字符串访问\" class=\"headerlink\" title=\"字符串访问\"></a>字符串访问</h4><p>字符串的访问和元组类似，使用切片运算和索引定位。   </p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘j’<br>‘5’</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>hello world<br>ello world<br>el<br>hello worl<br>ello worl<br>el ol  </p>\n<p>dlrow oll<br>dlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h4><p>字符串运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#字符串访问\">字符串访问</a></p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h5><p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>更多请见下文<a href=\"#Python转义字符\">Python转义字符</a></p>\n<h5 id=\"r-string\"><a href=\"#r-string\" class=\"headerlink\" title=\"r-string\"></a>r-string</h5><p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>使用方法是在字符串引号前加上 <code>r/R</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>row string<br>\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"级联\"><a href=\"#级联\" class=\"headerlink\" title=\"级联\"></a>级联</h5><p>Python按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;this &quot;</span> <span class=\"string\">&quot;is &quot;</span> <span class=\"string\">&quot;string&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>this is string</p>\n</blockquote>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"%格式\"></a>%格式</h5><p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><strong><em>python字符串格式化符号</em></strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong><em>格式化操作符辅助指令</em></strong><br>格式化操作符位于%和格式化符号字母中间。    ex. %.2f<br>| 符号 | 功能 |<br>| :—: | :——- |<br>| * | 定义宽度或者小数点精度 |<br>| - | 用做左对齐 |<br>| + | 在正数前面显示加号( + ) |<br>| <sp> |     在正数前面显示空格 |<br>| #    | 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) |<br>| 0    | 显示的数字前面填充’0’而不是默认的空格 |<br>| % |    ‘%%’输出一个单一的’%’ |<br>| (var)    | 映射变量(字典参数) |<br>| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |</p>\n<h5 id=\"format函数\"><a href=\"#format函数\" class=\"headerlink\" title=\"format函数\"></a>format函数</h5><p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\"><a href=\"#f-string\" class=\"headerlink\" title=\"f-string\"></a>f-string</h5><p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:  </p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-2\"><a href=\"#常用函数-2\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>检查\\检测 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>字符串操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,’0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\"><a href=\"#Python转义字符\" class=\"headerlink\" title=\"Python转义字符\"></a>Python转义字符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\‘</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\“</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"List列表\"><a href=\"#List列表\" class=\"headerlink\" title=\"List列表\"></a>List列表</h3><p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>列表是可变的数据类型，即其内的数据可以被改变。  </p>\n<h4 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h4><p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] &lt;class ‘list’&gt;<br>[] &lt;class ‘list’&gt;<br>[1, 5, 9, ‘7’] &lt;class ‘list’&gt;<br>[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的嵌套\"><a href=\"#列表的嵌套\" class=\"headerlink\" title=\"列表的嵌套\"></a>列表的嵌套</h4><p>列表是可以嵌套的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>若要访问该列表的元素只需逐层访问即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(matrix[<span class=\"number\">2</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> row:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>4<br>1 2 5<br>2 7 8<br>4 5 6 7 9<br>2 9 7 11 </p>\n</blockquote>\n<h4 id=\"列表的索引和截取\"><a href=\"#列表的索引和截取\" class=\"headerlink\" title=\"列表的索引和截取\"></a>列表的索引和截取</h4><p>因为列表也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9]<br>[8, 9, 7, 2, 23, 1, 1]<br>[8, 7, 23, 1]<br>[]<br>[13, 1, 1, 23, 2, 7, 9]<br>[13, 1, 1, 23, 2, 7, 9, 8, 6]   </p>\n</blockquote>\n<h4 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h4><p>因为列表属于可变的数据类型，所以其元素可以修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><strong><em>使用del</em></strong>删除列表元素：  </p>\n<p>使用del可以根据索引删除一个元素或者一个切割</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">1</span>:-<span class=\"number\">3</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[4, 5, 9, 8, 3, 1, 2, 0, 11]<br>[4, 9, 3, 2, 0, 11]<br>[]</p>\n</blockquote>\n<h4 id=\"列表运算\"><a href=\"#列表运算\" class=\"headerlink\" title=\"列表运算\"></a>列表运算</h4><p>列表运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#列表的索引和截取\">列表的索引和截取</a></p>\n<h4 id=\"列表遍历\"><a href=\"#列表遍历\" class=\"headerlink\" title=\"列表遍历\"></a>列表遍历</h4><p>列表遍历将使用<a href=\"#Python循环语句\">循环语句</a>.</p>\n<!--TODO: enumerate()  -->\n<blockquote>\n<p>使用<a href=\"#enumerate\">enumerate()</a>函数可以得到索引和对应值</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(lst):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,value)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>1 2 7 3 6 4<br>1 2<br>2 7<br>3 3<br>4 6<br>5 4</p>\n</blockquote>\n<!--TODO: zip()  -->\n<p>如果要同时遍历多个列表，可以使用<a href=\"#zip\">zip()</a>函数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;quest&#x27;</span>, <span class=\"string\">&#x27;favorite color&#x27;</span>]</span><br><span class=\"line\">answers = [<span class=\"string\">&#x27;lancelot&#x27;</span>, <span class=\"string\">&#x27;the holy grail&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q, a <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(questions, answers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(q, a))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>What is your name?  It is lancelot.<br>What is your quest?  It is the holy grail.<br>What is your favorite color?  It is blue.</p>\n</blockquote>\n<h4 id=\"常用函数-3\"><a href=\"#常用函数-3\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>列表操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\"><a href=\"#Set集合\" class=\"headerlink\" title=\"Set集合\"></a>Set集合</h3><p>集合（set）是一个无序的不重复元素序列。<br>在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h4><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合  </p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{1, 5, 6}<br>{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\"><a href=\"#操作集合\" class=\"headerlink\" title=\"操作集合\"></a>操作集合</h4><h5 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9, 11, 13}<br>{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}  </p>\n</blockquote>\n<h5 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>{2, 6, 7, 8, 9}<br>2<br>{6, 7, 8, 9}<br>Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>——&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><p><strong><em><code>数学集合运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘r’, ‘d’, ‘b’}<br>a-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘c’, ‘a’}<br>a-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-4\"><a href=\"#常用函数-4\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\"><a href=\"#Dictionary字典\" class=\"headerlink\" title=\"Dictionary字典\"></a>Dictionary字典</h3><blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\"><a href=\"#创建字典\" class=\"headerlink\" title=\"创建字典\"></a>创建字典</h4><p>创建字典的方法有三种：  </p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{2: 4, 4: 16, 6: 36}<br>{}<br>{}  </p>\n</blockquote>\n<h4 id=\"字典操作\"><a href=\"#字典操作\" class=\"headerlink\" title=\"字典操作\"></a>字典操作</h4><p><strong><em><code>访问值</code></em></strong><br>要访问字典的值只需要将键值填入字典后的方括号中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>      1 dict1 = {‘a’:1,’b’:2}<br>——&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><strong><em><code>修改/创建值</code></em></strong><br>要修改字典的值，直接将对应的键值修改即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3  </p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><strong><em><code>删除值</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>{}<br>-—————————————————————————-<br>NameError                                 Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>     11 # 删除字典<br>     12 del dict1<br>—-&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br>判断key是否在字典中已存在.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为： </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-5\"><a href=\"#常用函数-5\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h2 id=\"Python运算符\"><a href=\"#Python运算符\" class=\"headerlink\" title=\"Python运算符\"></a>Python运算符</h2><p>Python的运算符可以分为以下几类：  </p>\n<ul>\n<li><a href=\"#算术运算符\">算术运算符</a></li>\n<li><a href=\"#比较(关系\">比较(关系)运算符</a>运算符)</li>\n<li><a href=\"#赋值运算符\">赋值运算符</a></li>\n<li><a href=\"#逻辑运算符\">逻辑运算符</a></li>\n<li><a href=\"#位运算符\">位运算符</a></li>\n<li><a href=\"#成员运算符\">成员运算符</a></li>\n<li><a href=\"#身份运算符\">身份运算符</a></li>\n</ul>\n<blockquote>\n<p><a href=\"#运算符优先级\">运算符优先级</a></p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">取模</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:left\">幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:left\">整除</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"比较-关系-运算符\"><a href=\"#比较-关系-运算符\" class=\"headerlink\" title=\"比较(关系)运算符\"></a>比较(关系)运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">小于等于</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\">将运算符右侧的值赋予左侧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\">a+=b等价于a=a+b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\">a-=b等价于a=a-b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\">a<em>=b等价于a=a</em>b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\">a/=b等价于a=a/b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\">a%=b等价于a=a%b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\">a<strong>=b等价于a=a</strong>b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:left\">取整赋值运算符</td>\n<td style=\"text-align:left\">a//=b等价于a=a//b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:=</td>\n<td style=\"text-align:left\">海象运算符</td>\n<td style=\"text-align:left\"><code>Python3.8</code>版本新增运算符。可在表达式内部为变量赋值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>海象运算符的使用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n := <span class=\"built_in\">len</span>(a)) &gt; <span class=\"number\">10</span>:  </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;List is too long (<span class=\"subst\">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:left\">x and y</td>\n<td style=\"text-align:left\">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:left\">x or y</td>\n<td style=\"text-align:left\">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:left\">not x</td>\n<td style=\"text-align:left\">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0</td>\n<td>`(a</td>\n<td>b)` 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为1，否则为0</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>\n<td style=\"text-align:left\"><code>(~a )</code> 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"成员运算符\"><a href=\"#成员运算符\" class=\"headerlink\" title=\"成员运算符\"></a>成员运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"身份运算符\"><a href=\"#身份运算符\" class=\"headerlink\" title=\"身份运算符\"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is not</td>\n<td style=\"text-align:left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`^</td>\n<td style=\"text-align:left\">`</td>\n<td>位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>== !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h2 id=\"Python条件控制\"><a href=\"#Python条件控制\" class=\"headerlink\" title=\"Python条件控制\"></a>Python条件控制</h2><p>Python条件控制使用if、elif和else关键字,一般流程图如下：<br><img src=\"if-1.png\" alt=\"if流程图\"></p>\n<p>共有三种模式：  </p>\n<p><strong><em>if</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br><strong><em>if-else</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br><strong><em>if-elif-else</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr_1&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (&lt;condition_expr_2&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\"><span class=\"comment\"># ……</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br>上述代码的流程如下：<br><img src=\"if-2.png\" alt=\"if-elif-else\"></p>\n<p>Python条件控制还支持if条件的<code>嵌套</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;expr&gt;):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (&lt;expr_2&gt;):</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\">    <span class=\"comment\"># statement_block_3</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># ……</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python循环语句\"><a href=\"#Python循环语句\" class=\"headerlink\" title=\"Python循环语句\"></a>Python循环语句</h2><p>循环语句将在条件成立时循环执行。流程图如下：<br><img src=\"loop-1.jpg\" alt=\"loop-1\"><br>Python的循环语句有两种形式：  </p>\n<p><strong><em><code>while</code></em></strong></p>\n<blockquote>\n<p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;condition_expr&gt;):</span><br><span class=\"line\">    <span class=\"comment\"># loop_statement_block</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># false_statement</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用<code>while True</code>来实现无限循环</p>\n</blockquote>\n<p><strong><em><code>for</code></em></strong><br>Python for 循环可以遍历任何可迭代对象(<a href=\"#Python序列sequence\">序列</a>)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &lt;variable&gt; <span class=\"keyword\">in</span> &lt;sequence&gt;:</span><br><span class=\"line\">    &lt;statements&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><br>经常和for配合的一个函数为<a href=\"#range\">range()</a>:<br>range()函数会生成一个数字序列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要提前结束循环，需要使用关键字<code>break</code>跳出当前循环:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span> :</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br>以上代码循环到x==6时就会停止:  </p>\n<blockquote>\n<p>10 9 8 7 6  </p>\n</blockquote>\n<p>如果只是跳过一次循环，使用关键字<code>continue</code>可以跳过本次循环，进入下次循环:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>9 8 7 5 4 3 2</p>\n</blockquote>\n<p>break和continue在循环中的作用如下图：<br><img src=\"break-continue.jpg\" alt=\"break-continue\"></p>\n<blockquote>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。<br>continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n</blockquote>\n<hr>\n<h2 id=\"Python序列sequence\"><a href=\"#Python序列sequence\" class=\"headerlink\" title=\"Python序列sequence\"></a>Python序列sequence</h2><h3 id=\"序列运算\"><a href=\"#序列运算\" class=\"headerlink\" title=\"序列运算\"></a>序列运算</h3><!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\"><a href=\"#运算-拼接\" class=\"headerlink\" title=\"+运算/拼接\"></a>+运算/拼接</h4><h4 id=\"运算-复制\"><a href=\"#运算-复制\" class=\"headerlink\" title=\"*运算/复制\"></a>*运算/复制</h4><h4 id=\"in运算\"><a href=\"#in运算\" class=\"headerlink\" title=\"in运算\"></a>in运算</h4><h4 id=\"切片运算符\"><a href=\"#切片运算符\" class=\"headerlink\" title=\"切片运算符\"></a>切片运算符</h4><hr>\n<h2 id=\"Python迭代器与生成器\"><a href=\"#Python迭代器与生成器\" class=\"headerlink\" title=\"Python迭代器与生成器\"></a>Python迭代器与生成器</h2><h3 id=\"迭代器iterator\"><a href=\"#迭代器iterator\" class=\"headerlink\" title=\"迭代器iterator\"></a>迭代器iterator</h3><p>迭代是访问集合元素的一种方式。<br>迭代器是一个可以记住遍历的位置的对象。<br>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前<code>不会后退</code>。   </p>\n<p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br>iter()用于创建迭代器对象，next()用于控制迭代器前进。<br>字符串，列表或元组对象都可用于创建迭代器：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)   <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(it))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))  <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>&lt;class ‘list_iterator’&gt;<br>1<br>5</p>\n</blockquote>\n<p>迭代器对象可以使用常规for语句进行遍历：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 3 4 5 </p>\n</blockquote>\n<h4 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h4><p>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。<br>如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。有关面向对象编程请看：<a href=\"#Python面向对象\">Python面向对象</a><br><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。<br><code>__next__()</code> 方法会返回下一个迭代器对象。  </p>\n<blockquote>\n<p><strong><em><code>StopIteration</code></em></strong><br>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 </p>\n</blockquote>\n<p>以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">20</span>:    <span class=\"comment\"># 设置循环上限</span></span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"> </span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = <span class=\"built_in\">iter</span>(myclass)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>执行输出结果为：  </p>\n<blockquote>\n<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 </p>\n</blockquote>\n<hr>\n<h3 id=\"生成器generator\"><a href=\"#生成器generator\" class=\"headerlink\" title=\"生成器generator\"></a>生成器generator</h3><p>在Python中，使用了<code>yield</code>的函数被称为生成器。<br>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br>在调用生成器运行的过程中，每次遇到 yield 时函数会<code>暂停并保存当前所有的运行信息</code>，<strong><em>返回 yield 的值</em></strong>, 并在下一次执行 next() 方法时从当前位置继续运行。  </p>\n<p>以下实例使用生成器实现斐波那契数列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>):</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(f), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n</blockquote>\n<hr>\n<h2 id=\"Python函数\"><a href=\"#Python函数\" class=\"headerlink\" title=\"Python函数\"></a>Python函数</h2><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>函数能提高应用的模块性，和代码的重复利用率。  </p>\n<p>除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。</p>\n<h3 id=\"定义一个函数\"><a href=\"#定义一个函数\" class=\"headerlink\" title=\"定义一个函数\"></a>定义一个函数</h3><p>函数的组成有以下几条规则:  </p>\n<ul>\n<li>函数以<code>def</code>关键字开头，后接<code>函数标识符</code>名称和<code>参数列表</code></li>\n<li>函数内容以冒号<code>:</code>开始，下面的函数体缩进</li>\n<li>以<code>return [表达式]</code>结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None</li>\n</ul>\n<p>下图是一个简单的函数形式说明:<br><img src=\"function-1.png\" alt=\"函数说明\"><br>总结来说，Python的函数语法格式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名(<span class=\"params\">参数列表</span>):</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的<code>参数传递</code>来说也对应着两种：  </p>\n<ul>\n<li><strong>可变类型</strong>：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  </li>\n<li><strong>不可变类型</strong>：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。</li>\n</ul>\n<blockquote>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n</blockquote>\n<p>Python的函数<code>参数</code>共有下面四种类型：  </p>\n<ul>\n<li>必需参数</li>\n<li>关键字参数</li>\n<li>默认参数</li>\n<li>不定长参数</li>\n</ul>\n<p><strong><em><code>必需参数</code></em></strong><br>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br><strong><em><code>关键字参数</code></em></strong><br>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。<br>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br><strong><em><code>默认参数</code></em></strong><br>调用函数时，如果没有传递参数，则会使用默认参数。<br><strong><em><code>不定长参数</code></em></strong><br>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span>(<span class=\"params\">[formal_args,] [*var_args_tuple,] [**var_args_dict] </span>):</span></span><br><span class=\"line\">   function_suite</span><br><span class=\"line\">   <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure><br>加了星号 <em> 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。<br>加了两个星号 *</em> 的参数会以字典的形式导入。</p>\n<p>下面结合函数的使用来理解这四种参数类型：  </p>\n<h3 id=\"函数的使用\"><a href=\"#函数的使用\" class=\"headerlink\" title=\"函数的使用\"></a>函数的使用</h3><p>使用函数只需要直接使用函数名并传入对应参数就可以调用了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  <span class=\"comment\"># 必需参数的使用，参数按顺序对应传入</span></span><br><span class=\"line\">function1(<span class=\"number\">1</span>, c = <span class=\"string\">&quot;5&quot;</span>, b = <span class=\"number\">2</span>)  <span class=\"comment\"># 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function2</span>(<span class=\"params\">a,b,c = <span class=\"number\">5</span></span>):</span>   <span class=\"comment\"># 默认参数，在函数声明时指定其默认值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)       <span class=\"comment\"># 默认参数在调用时不指定则使用默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function3</span>(<span class=\"params\">a,b,*args_tuple</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function4</span>(<span class=\"params\">a,b,**args_dict</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_dict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function4(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c = <span class=\"number\">3</span>,d = <span class=\"number\">4</span>,e = <span class=\"number\">5</span>,f = <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 3<br>1 2 5<br>2 3 5<br>1 2 (3, 4, 5, 6)<br>1 2 {‘c’: 3, ‘d’: 4, ‘e’: 5, ‘f’: 6}  </p>\n</blockquote>\n<p>声明函数时，参数中星号 <em> 可以单独出现，如果单独出现星号 </em> 后的参数<code>必须用关键字</code>传入。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,*,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 5</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>Python使用lambda关键字来创建匿名函数。<br>匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。<br>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  </p>\n<p>lambda 函数的语法只包含一个语句，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure></p>\n<p>使用实例来增进理解：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2    <span class=\"comment\"># 一个简单的匿名函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><p>return作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\">c = function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"强制位置参数\"><a href=\"#强制位置参数\" class=\"headerlink\" title=\"强制位置参数\"></a>强制位置参数</h3><p>Python3.8 新增了一个函数形参语法<code>/</code>用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。<br>在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">a, b, /, c, d, *, e, f</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b, c, d, e, f)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)  <span class=\"comment\"># 这种使用方式是正确的</span></span><br><span class=\"line\"><span class=\"comment\"># 下面两种是错误的使用</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, b=<span class=\"number\">20</span>, c=<span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)   <span class=\"comment\"># b 不能使用关键字参数的形式</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, f=<span class=\"number\">60</span>)           <span class=\"comment\"># e 必须使用关键字参数的形式</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python推导式\"><a href=\"#Python推导式\" class=\"headerlink\" title=\"Python推导式\"></a>Python推导式</h2><p>Python的推导式应用于简化规律的列表或元组等序列的创建：<br>每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  </p>\n<blockquote>\n<p>需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。</p>\n</blockquote>\n<p>简单语法是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_lst = [var <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> varrange <span class=\"keyword\">if</span> varexpr]</span><br></pre></td></tr></table></figure></p>\n<p>比如我们想得到一个偶数数列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">tup = (x*<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))   <span class=\"comment\"># 括号生成的是生成器对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tup))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>(tup))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]<br>&lt;class ‘generator’&gt;<br>(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)</p>\n</blockquote>\n<p>推导式的更多使用建议自己上手尝试一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> (x * <span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)) <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [[x, y] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">ve = [<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;xx&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;xxxx&quot;</span>]</span><br><span class=\"line\">lst = [<span class=\"built_in\">len</span>(v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> ve]  <span class=\"comment\"># 推导式还可以对匿名变量使用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [<span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(<span class=\"number\">355</span>/<span class=\"number\">113</span>, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]   <span class=\"comment\"># 使用复杂表达式和嵌套函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[3, 9, 15, 21, 27]<br>[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]<br>[1, 2, 3, 4]<br>[‘3.1’, ‘3.14’, ‘3.142’, ‘3.1416’, ‘3.14159’]</p>\n</blockquote>\n<hr>\n<h2 id=\"Python模块\"><a href=\"#Python模块\" class=\"headerlink\" title=\"Python模块\"></a>Python模块</h2><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。<br>模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p>\n<p>下面是一个使用 python 标准库中模块的例子。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\nPython 路径为：&#x27;</span>, sys.path, <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  </li>\n<li>sys.argv 是一个包含命令行参数的列表。  </li>\n<li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  </li>\n</ul>\n</blockquote>\n<h3 id=\"import语句\"><a href=\"#import语句\" class=\"headerlink\" title=\"import语句\"></a>import语句</h3><p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> module1[,module2...]</span><br></pre></td></tr></table></figure></p>\n<p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  </p>\n<p>下面是自定义模块的使用:<br>这里先定义一个模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure><br>然后再其他文件里导入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test.py&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test_module.function(<span class=\"number\">1</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 使用模块定义的方法</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：    </p>\n<blockquote>\n<p>file_name: test_module.py<br>file_name: test.py<br>3</p>\n</blockquote>\n<p>可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  </p>\n<p>并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。<br><img src=\"module-1.png\" alt=\"模块只会被导入一次，执行一次\"></p>\n<blockquote>\n<p>当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？<br>这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。<br>这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。<br>搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。<br>搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘g:\\Codes\\Python\\testpy’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles\\lib\\python’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\python39.zip’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\DLLs’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39’, ‘’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\Pythonwin’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\extensions’, ‘C:\\Users\\Administrator\\.ipython’]</p>\n</blockquote>\n<p>sys.path 输出是一个列表，其中第一项是当前目录。  </p>\n<p>如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\">fun = test_module.function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"from…import语句\"><a href=\"#from…import语句\" class=\"headerlink\" title=\"from…import语句\"></a>from…import语句</h3><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><br>这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 </p>\n<p>而如果要把一个模块所有成员导入当前的命名空间中，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure></p>\n<p>这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如’_a’此类。<br>然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n<h3 id=\"深入模块\"><a href=\"#深入模块\" class=\"headerlink\" title=\"深入模块\"></a>深入模块</h3><p>前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。<br>我们一般使用这些可执行代码来初始化模块。<br>每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。<br>所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。<br>从另一个方面，当你确实知道你在做什么的话，你也可以通过 <code>modname.itemname</code> 这样的表示法来访问模块内的函数。  </p>\n<p>但是需要注意：  </p>\n<blockquote>\n<p>在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  </p>\n</blockquote>\n<h3 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a><strong>name</strong>属性</h3><p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。  </p>\n<blockquote>\n<p>注意是前后<code>两个下划线</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;test_module_main&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>每个模块都有一个__name__属性，当其值是’__main__‘时，表明该模块自身在运行，否则是被引入。</p>\n<h3 id=\"dir-函数\"><a href=\"#dir-函数\" class=\"headerlink\" title=\"dir()函数\"></a>dir()函数</h3><p>内置的函数 <a href=\"#dir\"><code>dir()</code></a> 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module,sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(test_module))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(sys))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘__builtins__‘, ‘__cached__‘, ‘__doc__‘, ‘__file__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘, ‘function’]<br>[‘__breakpointhook__‘, ‘__displayhook__‘, ‘__doc__‘, ‘__excepthook__‘, ‘__interactivehook__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘, ‘__stderr__‘, ‘__stdin__‘, ‘__stdout__‘, ‘__unraisablehook__‘, ‘_base_executable’, ‘_clear_type_cache’, ‘_current_frames’, ‘_debugmallocstats’, ‘_enablelegacywindowsfsencoding’, ‘_framework’, ‘_getframe’, ‘_git’, ‘_home’, ‘_xoptions’, ‘addaudithook’, ‘api_version’, ‘argv’, ‘audit’, ‘base_exec_prefix’, ‘base_prefix’, ‘breakpointhook’, ‘builtin_module_names’, ‘byteorder’, ‘call_tracing’, ‘copyright’, ‘displayhook’, ‘dllhandle’, ‘dont_write_bytecode’, ‘exc_info’, ‘excepthook’, ‘exec_prefix’, ‘executable’, ‘exit’, ‘flags’, ‘float_info’, ‘float_repr_style’, ‘get_asyncgen_hooks’, ‘get_coroutine_origin_tracking_depth’, ‘getallocatedblocks’, ‘getdefaultencoding’, ‘getfilesystemencodeerrors’, ‘getfilesystemencoding’, ‘getprofile’, ‘getrecursionlimit’, ‘getrefcount’, ‘getsizeof’, ‘getswitchinterval’, ‘gettrace’, ‘getwindowsversion’, ‘hash_info’, ‘hexversion’, ‘implementation’, ‘int_info’, ‘intern’, ‘is_finalizing’, ‘maxsize’, ‘maxunicode’, ‘meta_path’, ‘modules’, ‘path’, ‘path_hooks’, ‘path_importer_cache’, ‘platform’, ‘platlibdir’, ‘prefix’, ‘ps1’, ‘ps2’, ‘ps3’, ‘pycache_prefix’, ‘set_asyncgen_hooks’, ‘set_coroutine_origin_tracking_depth’, ‘setprofile’, ‘setrecursionlimit’, ‘setswitchinterval’, ‘settrace’, ‘stderr’, ‘stdin’, ‘stdout’, ‘thread_info’, ‘unraisablehook’, ‘version’, ‘version_info’, ‘warnoptions’, ‘winver’]</p>\n</blockquote>\n<p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>[‘__annotations__‘, ‘__builtins__‘, ‘__cached__‘, ‘__doc__‘, ‘__file__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘]</p>\n</blockquote>\n<h3 id=\"其他模块\"><a href=\"#其他模块\" class=\"headerlink\" title=\"其他模块\"></a>其他模块</h3><p>除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看<a href=\"#Python库参考文档\">Python库参考文档</a>。  </p>\n<p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。<br>这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。<br>应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。<br>比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。<br>就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  </p>\n<p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。<br>目录只有包含一个叫做 __init__.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。<br>最简单的情况，放一个空的 :file:__init__.py就可以了。<br>当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <strong>all</strong>变量赋值。  </p>\n<p>注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。<br>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。<br>反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  </p>\n<p>如果我们使用 from sound.effects import <em> 会发生什么呢？<br>Python 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。<br>但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。<br>在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。<br>为了解决这个问题，我们只需要提供一个精确包的索引。<br>导入语句遵循如下规则：如果包定义文件 __init__.py 存在一个叫做 __all__ 的列表变量，那么在使用 from package import </em> 的时候就把这个列表中的所有名字作为包内容导入。<br>作为包的作者，可别忘了在更新包之后保证 __all__ 也更新了啊。<br>__all__是一个存储模块名字符串的列表。  </p>\n<hr>\n<h2 id=\"Python输入输出\"><a href=\"#Python输入输出\" class=\"headerlink\" title=\"Python输入输出\"></a>Python输入输出</h2><p>再前面我们已经接触过Python的输入<a href=\"#input\">input()</a>和输出<a href=\"#print\">print()</a>了，本章主要是介绍输入输出的进阶技巧。  </p>\n<h3 id=\"输出格式美化\"><a href=\"#输出格式美化\" class=\"headerlink\" title=\"输出格式美化\"></a>输出格式美化</h3><p>Python两种输出值的方式: 表达式语句和 print() 函数。<br>第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。<br>如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。<br>如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  </p>\n<blockquote>\n<ul>\n<li>str()： 函数返回一个用户易读的表达形式。</li>\n<li>repr()： 产生一个解释器易读的表达形式。</li>\n</ul>\n</blockquote>\n<p>下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(a)</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>(a)</span><br><span class=\"line\"><span class=\"string\">&quot;&#x27;1&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(a))</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(a)&#125;</span>,<span class=\"subst\">&#123;<span class=\"built_in\">repr</span>(a)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#  repr() 函数可以保留转义字符串中的特殊字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">&#x27;hello, world\\n&#x27;</span>      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos = <span class=\"built_in\">repr</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos)</span><br><span class=\"line\"><span class=\"string\">&#x27;hello, world\\n&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos_1 = <span class=\"built_in\">str</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos_1)</span><br><span class=\"line\">hello, world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>((x, y, (<span class=\"string\">&#x27;Go&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>)))      </span><br><span class=\"line\"><span class=\"string\">&quot;(32.5, 40000, (&#x27;Go&#x27;, &#x27;Python&#x27;))&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>关于str()和repr()的更多区别请参见<a href=\"str(\">str()和repr()的区别</a>和repr()的区别)</p>\n<p>其他关于字符串格式化内容请参见: <a href=\"#字符串格式化\">字符串格式化</a></p>\n<h3 id=\"读取输入\"><a href=\"#读取输入\" class=\"headerlink\" title=\"读取输入\"></a>读取输入</h3><p>Python 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p>\n<hr>\n<h2 id=\"Python文件读写操作\"><a href=\"#Python文件读写操作\" class=\"headerlink\" title=\"Python文件读写操作\"></a>Python文件读写操作</h2><h3 id=\"读和写文件\"><a href=\"#读和写文件\" class=\"headerlink\" title=\"读和写文件\"></a>读和写文件</h3><p><a href=\"#open\">open()</a>函数将会返回一个file对象，其基本语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(filename, mode)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>filename : 包含了你要访问的文件的字符串值。</li>\n<li>mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li>\n</ul>\n<p>不同模式打开文件的完全列表：  </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">以<code>只读</code>方式打开文件。文件的指针将会放在文件的<code>开头</code>。这是<code>默认</code>模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>只读</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。文件打开时会是追加模式。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab+</td>\n<td style=\"text-align:left\">以<code>二进制格式</code>打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>总结来说模式的情况有三种：  </p>\n<ul>\n<li>基础模式： 也就是 <code>r</code> <code>w</code> <code>a</code> (read、write、append)</li>\n<li>二进制模式：  在基础模式上加上<code>b</code>表示以二进制格式打开文件(byte)</li>\n<li>读写模式：  在以上两种模式上加上<code>+</code>表示打开的文件可读写</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">r</th>\n<th style=\"text-align:center\">r+</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:center\">w+</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">a+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">覆盖</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在开始</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在结尾</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"rwa-1.png\" alt=\"读写模式\"></p>\n<p>下面是一个读写文件的实例:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;a模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式再写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>Traceback (most recent call last):<br>  File “\\testpy\\quick.py”, line 6, in &lt;module&gt;<br>    f = open(r”testpy\\test.txt”, “r”)<br>FileNotFoundError: [Errno 2] No such file or directory: ‘testpy\\test.txt’<br>w模式写入<br>w模式写入a模式写入<br>w模式再写入</p>\n</blockquote>\n<p>可以看到下图文件结构的改变<br><img src=\"rw_test_1.png\" alt=\"读写测试-前\"><br><img src=\"rw_test_2.png\" alt=\"读写测试-后\"></p>\n<p>以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。</p>\n<blockquote>\n<p>这里有几个需要注意的点: </p>\n<ul>\n<li>文件的路径，由于带有反斜杠\\，会被转义，所以需要使用r-string</li>\n<li>打开的文件需要使用f.close()关闭或者使用<a href=\"#with关键字\">with…as…</a>代码块</li>\n<li>读写文件通常需要在try…except里进行</li>\n</ul>\n</blockquote>\n<p>如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：<br><img src=\"rw-problem.png\" alt=\"文字乱码\"><br>文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：<br>vscode选择右下角的编码格式改变：<br><img src=\"vscode.png\" alt=\"vscode选择编码\"><br><img src=\"vscode-2.png\" alt=\"vscode选择编码-2\"><br><img src=\"vscode-3.png\" alt=\"vscode选择编码-3\"><br><img src=\"solute.png\" alt=\"文字乱码解决\"></p>\n<p>还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure></p>\n<p>关于上面实例使用的文件对象的方法，请看下节。  </p>\n<h3 id=\"文件对象的方法\"><a href=\"#文件对象的方法\" class=\"headerlink\" title=\"文件对象的方法\"></a>文件对象的方法</h3><!-- TODO: 文件对象方法 -->\n<h4 id=\"f-read\"><a href=\"#f-read\" class=\"headerlink\" title=\"f.read()\"></a><a href=\"#read\"><code>f.read()</code></a></h4><p>为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。<br>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入<br>字</p>\n</blockquote>\n<p>可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  </p>\n<blockquote>\n<p>这是因为read()同时会向后移动指针size个字符.</p>\n</blockquote>\n<p>但是这时候有人又有问题了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？</p>\n<blockquote>\n<p>这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。</p>\n</blockquote>\n<p>如果你打开文件的方式没有读的权限，那么会报出以下的错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Traceback (most recent call last):<br>  File “\\testpy\\quick.py”, line 18, in &lt;module&gt;<br>    print(f.read())<br><code>io.UnsupportedOperation: not readable</code></p>\n</blockquote>\n<h4 id=\"f-readline\"><a href=\"#f-readline\" class=\"headerlink\" title=\"f.readline()\"></a><a href=\"#readline\"><code>f.readline()</code></a></h4><p>f.readline() 会从文件中读取单独的一行。换行符为 ‘\\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串1\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘写入字符串\\n’<br>‘写入字符串1\\n’  </p>\n</blockquote>\n<p>可以看到调用readline()和read()一样都会向后移动指针</p>\n<p>还可以使用迭代文件对象的方式遍历每一行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 使用with...as在代码块结束时会自动关闭文件对象</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入字符串<br>写入字符串1</p>\n</blockquote>\n<h4 id=\"f-readlines\"><a href=\"#f-readlines\" class=\"headerlink\" title=\"f.readlines()\"></a><a href=\"#readlines\"><code>f.readlines()</code></a></h4><p>f.readlines() 将返回该文件中包含的所有行。<br>如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.readlines())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘写入字符串\\n’, ‘写入字符串1’]</p>\n</blockquote>\n<h4 id=\"f-write\"><a href=\"#f-write\" class=\"headerlink\" title=\"f.write()\"></a><a href=\"#write\"><code>f.write()</code></a></h4><p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符</p>\n</blockquote>\n<h4 id=\"f-tell\"><a href=\"#f-tell\" class=\"headerlink\" title=\"f.tell()\"></a><a href=\"#tell\"><code>f.tell()</code></a></h4><p>f.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符<br>当前游标处于第12字节处</p>\n</blockquote>\n<p>一些常用编码一个字符所占的字节数：<br>| 编码 | 中文 | 英文 | 其他说明 |<br>| :—: | :—: | :—: | :— |<br>| ASCII | 2 | 1 |  |<br>| Unicode | 2 | 2 | 英文符号只占1个字节 |<br>| GB2312 | 2 | 2 | |<br>| GBK | 2 | 1 | |<br>| ISO-8859-1 | 1 | 1 | |<br>| UTF-8 | 3 | 1 | |<br>| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |<br>| UTF-32 | 4 | 4 |  |</p>\n<h4 id=\"f-seek\"><a href=\"#f-seek\" class=\"headerlink\" title=\"f.seek()\"></a><a href=\"#seek\"><code>f.seek()</code></a></h4><p>如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>\n<p>offset 是偏移量；<br>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：</p>\n<ul>\n<li>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符</li>\n<li>seek(x,1) ： 表示从当前位置往后移动x个字符</li>\n<li>seek(-x,2)：表示从文件的结尾往前移动x个字符<br>from_what 值默认为0，即文件开头。下面给出一个完整的例子：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符<br>当前游标处于第12字节处<br>0<br>当前游标处于第0字节处<br>12<br>当前游标处于第12字节处</p>\n</blockquote>\n<h4 id=\"f-close\"><a href=\"#f-close\" class=\"headerlink\" title=\"f.close()\"></a><a href=\"#close\"><code>f.close()</code></a></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。<br>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</p>\n<h3 id=\"pickle模块\"><a href=\"#pickle模块\" class=\"headerlink\" title=\"pickle模块\"></a>pickle模块</h3><p>python的pickle模块实现了基本的数据序列和反序列化。<br>通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。<br>通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  </p>\n<p>下面通过一个简单实例来说明pickle模块：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块将数据对象保存到文件</span></span><br><span class=\"line\">data1 = &#123;<span class=\"string\">&quot;a&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">6j</span>], <span class=\"string\">&quot;b&quot;</span>: (<span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">u&quot;Unicode string&quot;</span>), <span class=\"string\">&quot;c&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">selfref_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">selfref_list.append(selfref_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle dictionary using protocol 0.</span></span><br><span class=\"line\">pickle.dump(data1, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle the list using the highest protocol available.</span></span><br><span class=\"line\">pickle.dump(selfref_list, output, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">output.close()</span><br></pre></td></tr></table></figure></p>\n<p>上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickle.dump(obj, file, [,protocol])</span><br></pre></td></tr></table></figure></p>\n<p>它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块从文件中重构python对象</span></span><br><span class=\"line\">data1 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data1)</span><br><span class=\"line\">data2 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data2)</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: [1, 2.0, 3, (4+6j)], ‘b’: (‘string’, ‘Unicode string’), ‘c’: None}<br>[1, 2, 3]</p>\n</blockquote>\n<p>上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">any_x = pickle.load(file)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python-os模块\"><a href=\"#Python-os模块\" class=\"headerlink\" title=\"Python os模块\"></a>Python os模块</h2><!-- TODO: os模块方法 -->\n<h3 id=\"os模块常用方法\"><a href=\"#os模块常用方法\" class=\"headerlink\" title=\"os模块常用方法\"></a>os模块常用方法</h3><p><a href=\"#Python-os模块方法\">os模块</a>提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  </p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt1111&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.R_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.X_OK))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 返回你的当前工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br><span class=\"line\">os.chdir(<span class=\"string\">&quot;../&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br><span class=\"line\">g:\\Codes\\Python\\</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os, stat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\">os.chmod(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, stat.S_IREAD)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_CREAT | os.O_RDWR)</span><br><span class=\"line\">os.write(fd, <span class=\"built_in\">str</span>.encode(<span class=\"string\">&quot;This is test\\n&quot;</span>))</span><br><span class=\"line\">os.close(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_RDONLY)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.read(fd, <span class=\"number\">10</span>))</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;This is te&#x27;</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>,os.O_RDONLY)</span><br><span class=\"line\">os.closerange(fd,fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;foo.txt&quot;</span>, os.O_RDWR | os.O_CREAT)</span><br><span class=\"line\"><span class=\"comment\"># 复制文件描述符</span></span><br><span class=\"line\">d_fd = os.dup(fd)</span><br><span class=\"line\"><span class=\"comment\"># 使用复制的文件描述符写入文件</span></span><br><span class=\"line\">os.write(d_fd, <span class=\"string\">&quot;This is test&quot;</span>.encode())</span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">os.closerange(fd, d_fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># os.fdopen()</span></span><br><span class=\"line\"><span class=\"comment\"># 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法是内置函数 open() 的别名;</span></span><br><span class=\"line\"><span class=\"comment\"># 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.stat(path))</span><br><span class=\"line\"></span><br><span class=\"line\">info = os.lstat(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;st_uid = <span class=\"subst\">&#123;info.st_uid&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(path, os.O_RDWR)</span><br><span class=\"line\">info = os.fstat(fd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">st_uid = <span class=\"number\">0</span></span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.link(src, dst)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">path = <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir(path))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(path, <span class=\"number\">0o777</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.mkdir(path)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">r,w = os.pipe()</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> os.popen(<span class=\"string\">&quot;mkdir test_popen&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;os._wrap_close <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D8FC929430</span>&gt;</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.system(<span class=\"string\">r&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">os.remove(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除后列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.removedirs(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.rmdir(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br><span class=\"line\"></span><br><span class=\"line\">os.rename(<span class=\"string\">&quot;test_pack&quot;</span>, <span class=\"string\">&quot;test_rename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;test_rename&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;当前目录为: %s&quot;</span> %os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span>%os.listdir(os.getcwd()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重命名 &quot;aa1.txt&quot;</span></span><br><span class=\"line\">os.renames(<span class=\"string\">&quot;aa1.txt&quot;</span>,<span class=\"string\">&quot;newdir/aanew.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;重命名成功。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出重命名的文件 &quot;aa1.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span> %os.listdir(os.getcwd()))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前目录为: /tmp</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;aa1.txt&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br><span class=\"line\">重命名成功。</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>, topdown=<span class=\"literal\">False</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\.vscode\\settings.json</span><br><span class=\"line\">.\\testpy\\data.pkl</span><br><span class=\"line\">.\\testpy\\quick.py</span><br><span class=\"line\">.\\testpy\\quick2.py</span><br><span class=\"line\">.\\testpy\\test1.txt</span><br><span class=\"line\">.\\testpy\\test2.txt</span><br><span class=\"line\">.\\testpy\\test3.txt</span><br><span class=\"line\">.\\testpy\\test_unicode.txt</span><br><span class=\"line\">.\\test_pack\\test_py.py</span><br><span class=\"line\">.\\test_pack\\__init__.py</span><br><span class=\"line\">.\\unable\\__pycache__\\un_test.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\unable\\un_test.py</span><br><span class=\"line\">.\\unable\\__pycache__</span><br><span class=\"line\">.\\__pycache__\\test_module.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\auto.py</span><br><span class=\"line\">.\\data.pkl</span><br><span class=\"line\">.\\dp1.py</span><br><span class=\"line\">.\\foo.txt</span><br><span class=\"line\">.\\test.py</span><br><span class=\"line\">.\\test.txt</span><br><span class=\"line\">.\\test_module.py</span><br><span class=\"line\">.\\workspace.code-workspace</span><br><span class=\"line\">.\\.vscode</span><br><span class=\"line\">.\\testpy</span><br><span class=\"line\">.\\test_pack</span><br><span class=\"line\">.\\test_popen</span><br><span class=\"line\">.\\unable</span><br><span class=\"line\">.\\__pycache__</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 输出默认值 ..</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.pardir)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n<h3 id=\"path模块\"><a href=\"#path模块\" class=\"headerlink\" title=\"path模块\"></a>path模块</h3><p>os.path 模块主要用于获取文件的属性。<br>以下是 os.path 模块的几种常用方法：  </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">os.path.<code>abspath</code>(path)</td>\n<td style=\"text-align:left\">返回绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>basename</code>(path)</td>\n<td style=\"text-align:left\">返回文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>commonprefix</code>(list)</td>\n<td style=\"text-align:left\">返回list(多个路径)中，所有path共有的最长的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>dirname</code>(path)</td>\n<td style=\"text-align:left\">返回文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>exists</code>(path)</td>\n<td style=\"text-align:left\">路径存在则返回True,路径损坏返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expanduser</code>(path)</td>\n<td style=\"text-align:left\">把path中包含的”~”和”~user”转换成用户目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expandvars</code>(path)</td>\n<td style=\"text-align:left\">根据环境变量的值替换path中包含的”$name”和”${name}”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getatime</code>(path)</td>\n<td style=\"text-align:left\">返回最近访问时间（浮点型秒数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getmtime</code>(path)</td>\n<td style=\"text-align:left\">返回最近文件修改时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getctime</code>(path)</td>\n<td style=\"text-align:left\">返回文件 path 创建时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getsize</code>(path)</td>\n<td style=\"text-align:left\">返回文件大小，如果文件不存在就返回错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isabs</code>(path)</td>\n<td style=\"text-align:left\">判断是否为绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isfile</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isdir</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>islink</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>ismount</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为挂载点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>join</code>(path1[, path2[, …]])</td>\n<td style=\"text-align:left\">把目录和文件名合成一个路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normcase</code>(path)</td>\n<td style=\"text-align:left\">转换path的大小写和斜杠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normpath</code>(path)</td>\n<td style=\"text-align:left\">规范path字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>realpath</code>(path)</td>\n<td style=\"text-align:left\">返回path的真实路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>relpath</code>(path[, start])</td>\n<td style=\"text-align:left\">从start开始计算相对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samefile</code>(path1, path2)</td>\n<td style=\"text-align:left\">判断目录或文件是否相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>sameopenfile</code>(fp1, fp2)</td>\n<td style=\"text-align:left\">判断fp1和fp2是否指向同一文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samestat</code>(stat1, stat2)</td>\n<td style=\"text-align:left\">判断stat tuple stat1和stat2是否指向同一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>split</code>(path)</td>\n<td style=\"text-align:left\">把路径分割成 dirname 和 basename，返回一个元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitdrive</code>(path)</td>\n<td style=\"text-align:left\">一般用在 windows 下，返回驱动器名和路径组成的元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitext</code>(path)</td>\n<td style=\"text-align:left\">分割路径中的文件名与拓展名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>walk</code>(path, visit, arg)</td>\n<td style=\"text-align:left\">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>supports_unicode_filenames</code></td>\n<td style=\"text-align:left\">设置是否支持unicode路径名</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!--TODO: ### os.open()与open()的区别 -->\n<!--TODO: ### os.popen()与os.system()的区别 -->\n<hr>\n<h2 id=\"Python错误与异常处理\"><a href=\"#Python错误与异常处理\" class=\"headerlink\" title=\"Python错误与异常处理\"></a>Python错误与异常处理</h2><p>Python有两种错误：语法错误和异常。<br>Python <a href=\"#assert-断言\">assert</a>（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。</p>\n<h3 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h3><p>Python 的语法错误或者称之为解析错，会报出以下的错误：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\">             ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">               ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p>如上，程序会报出语法错误<code>SyntaxError</code>，后面跟着的是错误的提示信息。<br>语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。<br>大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * (<span class=\"number\">1</span>/<span class=\"number\">0</span>)             <span class=\"comment\"># 0 不能作为除数，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4</span> + spam*<span class=\"number\">3</span>             <span class=\"comment\"># spam 未定义，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;spam&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;2&#x27;</span> + <span class=\"number\">2</span>               <span class=\"comment\"># int 不能与 str 相加，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n<p>异常类型和异常信息会显示出来，例子中的异常类型有：<code>ZeroDivisionError</code>、<code>NameError</code>、<code>TypeError</code><br>程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。<br>程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>异常处理的格式是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;</span><br><span class=\"line\"><span class=\"keyword\">except</span> [ErrorType]:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">[...</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">]</span><br><span class=\"line\">[<span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>异常处理的工作流程如下：</p>\n<ul>\n<li>try代码块为要执行的代码，被先执行;</li>\n<li>如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;</li>\n<li>如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;</li>\n<li>如果try代码块没有产生异常则执行else代码块(如果有);</li>\n<li>最后执行finally代码块, finally 语句无论异常是否发生都会执行。</li>\n</ul>\n<blockquote>\n<p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">except</span> (RuntimeError, TypeError, NameError):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p>python使用raise关键字向上层抛出异常:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。<br>raise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。<br>raise后面如果不跟具体异常，这样会向上抛出<code>RuntimeError</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>异常输出：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span> , line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">raise</span></span><br><span class=\"line\">RuntimeError: No active exception to reraise</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h3><p>用户可以通过<a href=\"#继承\">继承</a>Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span>(<span class=\"params\">Exception</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">repr</span>(self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> MyError(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> MyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error code:&quot;</span>, e.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> MyError(<span class=\"string\">&quot;MyError&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>error code: 0<br>Traceback (most recent call last):<br>  File “&lt;stdin&gt;”, line 14, in &lt;module&gt;<br>    raise MyError(“MyError”)<br>__main__.MyError: ‘MyError’  </p>\n<p>大多数的异常的名字都以”Error”结尾，就跟标准的异常命名一样。</p>\n</blockquote>\n<h3 id=\"assert-断言\"><a href=\"#assert-断言\" class=\"headerlink\" title=\"assert(断言)\"></a>assert(断言)</h3><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。<br>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  </p>\n<p>语法格式为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>assert 后面也可以紧跟参数:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression [, arguments]</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure></p>\n<p>下面是实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正常运行&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>带参数的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br><span class=\"line\">AssertionError: <span class=\"number\">1</span>大于<span class=\"number\">2</span>是错误的</span><br></pre></td></tr></table></figure>\n<p>以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">assert</span> (<span class=\"string\">&#x27;linux&#x27;</span> <span class=\"keyword\">in</span> sys.platform), <span class=\"string\">&quot;该代码只能在 Linux 下执行&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来要执行的代码</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"with关键字\"><a href=\"#with关键字\" class=\"headerlink\" title=\"with关键字\"></a>with关键字</h3><p>Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。<br>with 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。<br>在处理文件对象时使用 with 关键字是一种很好的做法。<br>我们可以看下以下几种代码实例：<br>不使用 with，也不使用 try…except…finally<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure></p>\n<p>以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。</p>\n<p>使用 with 关键字：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。<br>我们可以在执行 with 关键字后检验文件是否关闭：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.closed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.closed)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码输出结果为：  </p>\n<blockquote>\n<p>False<br>True</p>\n</blockquote>\n<p>with 语句实现原理建立在上下文管理器之上。<br>上下文管理器是一个实现 __enter__ 和 __exit__ 方法的类。<br>使用 with 语句确保在嵌套块的末尾调用 __exit__ 方法。<br>这个概念类似于 try…finally 块的使用。</p>\n<blockquote>\n<p>在文件对象中定义了 __enter__ 和 __exit__ 方法，即文件对象也实现了上下文管理器，首先调用 __enter__ 方法，然后执行 with 语句中的代码，最后调用 __exit__ 方法。 即使出现错误，也会调用 __exit__ 方法，也就是会关闭文件流。</p>\n</blockquote>\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n<hr>\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<hr>\n<h2 id=\"Python内置函数\"><a href=\"#Python内置函数\" class=\"headerlink\" title=\"Python内置函数\"></a>Python内置函数</h2><!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n<h3 id=\"abs\"><a href=\"#abs\" class=\"headerlink\" title=\"abs()\"></a>abs()</h3><p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>1.0<br>5.0<br>0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>format 基本语法是通过 {} 和 : 来代替以前的 % 。 </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li><em>args/*</em>kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>返回格式化后的字符串</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>hello<br>world hello world<br>网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>value 为: 13<br>value 为: 13<br>a 元素对应的位置是 {0}  </p>\n</blockquote>\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n<p><strong><em>还可以使用format函数进行数字格式化</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"len()\"></a>len()</h3><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对象长度。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>0<br>9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max()\"></a>max()</h3><p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>6<br>s<br>6<br>[1, 3, 4]<br>[2, 1, 9, 4]<br>babc</p>\n<p>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min()\"></a>min()</h3><p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>-1<br>a<br>1<br>[1, 2, 6]<br>[1, 2, 6, 5, 3]<br>abcd<br>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\"><a href=\"#pow\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8<br>15.625<br>0</p>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>精度要求高的，不建议使用该函数。    </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>10<br>11<br>1.53<br>1.6<br>1.32<br>0<br>-1.24<br>-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple()\"></a>tuple()</h3><p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-os模块方法\"><a href=\"#Python-os模块方法\" class=\"headerlink\" title=\"Python os模块方法\"></a>Python os模块方法</h2><hr>\n<h2 id=\"Python-math模块方法\"><a href=\"#Python-math模块方法\" class=\"headerlink\" title=\"Python math模块方法\"></a>Python math模块方法</h2><!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"acos\"><a href=\"#acos\" class=\"headerlink\" title=\"acos()\"></a>acos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"asin\"><a href=\"#asin\" class=\"headerlink\" title=\"asin()\"></a>asin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"atan\"><a href=\"#atan\" class=\"headerlink\" title=\"atan()\"></a>atan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h3><p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回上入整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\"><a href=\"#cos\" class=\"headerlink\" title=\"cos()\"></a>cos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"degress\"><a href=\"#degress\" class=\"headerlink\" title=\"degress()\"></a>degress()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp()\"></a>exp()</h3><p>exp()方法返回x的指数,e^x。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的指数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>2.718281828459045<br>23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\"><a href=\"#fabs\" class=\"headerlink\" title=\"fabs()\"></a>fabs()</h3><p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1.2<br>1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回下舍整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>4<br>-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log()\"></a>log()</h3><p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>0.0<br>1.0<br>2.0<br>1.892789260714372</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\"><a href=\"#log10\" class=\"headerlink\" title=\"log10()\"></a>log10()</h3><p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\"><a href=\"#modf\" class=\"headerlink\" title=\"modf()\"></a>modf()</h3><p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>(-0.52, -1.0)<br>(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-1\"><a href=\"#pow-1\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的y次方值</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8.0<br>15.625</p>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\"><a href=\"#radians\" class=\"headerlink\" title=\"radians()\"></a>radians()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sin\"><a href=\"#sin\" class=\"headerlink\" title=\"sin()\"></a>sin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sqrt\"><a href=\"#sqrt\" class=\"headerlink\" title=\"sqrt()\"></a>sqrt()</h3><p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字x的平方根。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\"><a href=\"#tan\" class=\"headerlink\" title=\"tan()\"></a>tan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h2 id=\"Python-random模块方法\"><a href=\"#Python-random模块方法\" class=\"headerlink\" title=\"Python random模块方法\"></a>Python random模块方法</h2><blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"choice\"><a href=\"#choice\" class=\"headerlink\" title=\"choice()\"></a>choice()</h3><p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个随机项</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random()\"></a>random()</h3><p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>无  </p>\n<p><strong>返回值：</strong><br>返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"randrange\"><a href=\"#randrange\" class=\"headerlink\" title=\"randrange()\"></a>randrange()</h3><p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"seed\"><a href=\"#seed\" class=\"headerlink\" title=\"seed()\"></a>seed()</h3><p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>无</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>使用默认种子生成随机数： 0.20706442655860602<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle()\"></a>shuffle()</h3><p>将序列的所有元素随机排序</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>lst :  列表 </li>\n</ul>\n<p><strong>返回值：</strong><br>返回None</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\"><a href=\"#uniform\" class=\"headerlink\" title=\"uniform()\"></a>uniform()</h3><p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\"><a href=\"#Python常见问题\" class=\"headerlink\" title=\"Python常见问题\"></a>Python常见问题</h2><h3 id=\"float精度问题\"><a href=\"#float精度问题\" class=\"headerlink\" title=\"float精度问题\"></a>float精度问题</h3><p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\"><a href=\"#round-关于四舍五入不成功的问题\" class=\"headerlink\" title=\"round()关于四舍五入不成功的问题\"></a>round()关于四舍五入不成功的问题</h3><p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。<br> <!-- TODO:round精度问题补全  --><br>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n<hr>\n<h3 id=\"str-和repr-的区别\"><a href=\"#str-和repr-的区别\" class=\"headerlink\" title=\"str()和repr()的区别\"></a>str()和repr()的区别</h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\"><a href=\"#python安装\" class=\"headerlink\" title=\"python安装\"></a>python安装</h2><ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>windows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。  </li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode  <ul>\n<li>Pycharm</li>\n<li>Rider </li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python基本语法\"><a href=\"#python基本语法\" class=\"headerlink\" title=\"python基本语法\"></a>python基本语法</h2><h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><!-- TODO: 编码 -->\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>第一个字符必须是字母表中字母或下划线 _ 。</li>\n<li>标识符的其他的部分由字母、数字和下划线组成。</li>\n<li>标识符对大小写敏感。</li>\n<li>非关键字</li>\n</ul>\n<blockquote>\n<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>\n</blockquote>\n<hr>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><p>Python中通常一行表示一个语句，末尾不需加上分号”;”.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong><em><code>多行语句</code></em></strong></p>\n<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠<code>\\</code>来实现多行语句，例如：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure></p>\n<p>但在 [], {}, 或 () 中的多行语句，<code>不需要使用反斜杠 \\</code> ，例如：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = [<span class=\"string\">&#x27;item_one&#x27;</span>, <span class=\"string\">&#x27;item_two&#x27;</span>, <span class=\"string\">&#x27;item_three&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;item_four&#x27;</span>, <span class=\"string\">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em><code>空行</code></em></strong><br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  </p>\n<blockquote>\n<p>空行也是程序代码的一部分。</p>\n</blockquote>\n<p><strong><em><code>同行多条语句</code></em></strong></p>\n<p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = <span class=\"number\">5</span>; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"built_in\">print</span>(<span class=\"string\">&quot;b&quot;</span>); <span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p><strong><em><code>pass语句</code></em></strong><br>Python pass是空语句，是为了保持程序结构的完整性。<br>pass 不做任何事情，一般用做占位语句，如下实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 同时分别赋值</span></span><br></pre></td></tr></table></figure>\n<p>在Python中，类型属于对象，变量是没有类型的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>在以上代码中，’str’是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向’str’这个String类型对象。</p>\n<hr>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为（版本Python 3.9.8）：  </p>\n<blockquote>\n<p>[‘False’, ‘None’, ‘True’, ‘__peg_parser__‘, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p>\n</blockquote>\n<hr>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p><strong><em><code>单行注释</code></em></strong><br>Python的单行注释使用<code>#</code>号：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\">a = <span class=\"number\">1</span>  <span class=\"comment\"># 注释</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em><code>多行注释</code></em></strong><br>Python的多行注释使用<code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">注释</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">多行注释</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。<br>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>如果同一代码块的缩进空格数不一致，会导致运行错误：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>  File “&lt;tokenize&gt;”, line 5<br>    print(“error”)<br>    ^<br>IndentationError: unindent does not match any outer indentation level</p>\n</blockquote>\n<hr>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>Python的内置函数<a href=\"#input\">input()</a>和<a href=\"#print\">print()</a>分别表示输入和输出:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">input</span>(<span class=\"string\">&quot;\\n\\n按下 enter 键后退出。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输出&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;print默认是换行的，如果不需要换行需要在后面参数加上end=&#x27;&#x27;&quot;</span>,end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"导入import\"><a href=\"#导入import\" class=\"headerlink\" title=\"导入import\"></a>导入import</h3><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为： <code>import somemodule</code><br>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code><br>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p>\n<hr>\n<h3 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h3><!-- TODO: 解释器 -->\n<hr>\n<h2 id=\"Python基本数据类型\"><a href=\"#Python基本数据类型\" class=\"headerlink\" title=\"Python基本数据类型\"></a>Python基本数据类型</h2><p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 </p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number数字\">Number</a></li>\n<li><a href=\"#Tuple元组\">Tuple</a></li>\n<li><a href=\"#String字符串\">String</a></li>\n<li><a href=\"#List列表\">List</a></li>\n<li><a href=\"#Set集合\">Set</a></li>\n<li><a href=\"#Dictionary字典\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>immutable的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br><code>可变</code>mutable的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><a href=\"#type-和-isinstance\" class=\"headerlink\" title=\"type() 和 isinstance()\"></a><code>type()</code> 和 <code>isinstance()</code></h3><p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>type()函数有两个重载方法：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  </p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象  </li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\"><a href=\"#isinstance-与-type-区别：\" class=\"headerlink\" title=\"isinstance() 与 type() 区别：\"></a>isinstance() 与 type() 区别：</h4><p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>isinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>&lt;class ‘__main<strong>.A’&gt;<br>&lt;class ‘__main</strong>.B’&gt;<br>True<br>False  </p>\n</blockquote>\n<h3 id=\"Number数字\"><a href=\"#Number数字\" class=\"headerlink\" title=\"Number数字\"></a>Number数字</h3><p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。  </p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\"><a href=\"#具体类型\" class=\"headerlink\" title=\"具体类型\"></a>具体类型</h4><h5 id=\"int\"><a href=\"#int\" class=\"headerlink\" title=\"int\"></a>int</h5><p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h5><p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个临界点是<code>1e+16</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure></p>\n<p>float的正常最多位为16位小数，比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure></p>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float精度问题\">python float 精度问题</a>  </p>\n</blockquote>\n<h5 id=\"bool\"><a href=\"#bool\" class=\"headerlink\" title=\"bool\"></a>bool</h5><p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>Python3中，bool是int的<code>子类</code>；  </p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<strong><em>True</em></strong>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True<br>True<br>True<br>2<br>1<br>False<br>False</p>\n<p>注意：从Python3.8开始，使用<strong><em>is</em></strong>和<strong><em>is not</em></strong>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\"><a href=\"#complex\" class=\"headerlink\" title=\"complex\"></a>complex</h5><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\"><a href=\"#数值运算\" class=\"headerlink\" title=\"数值运算\"></a>数值运算</h4><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\"><a href=\"#数字类型转换\" class=\"headerlink\" title=\"数字类型转换\"></a>数字类型转换</h4><p>Python各数字类型间支持互相转换。<br>Python的数字类型转化和创建都可以直接将<strong><em>数据类型作为函数名</em></strong>即可。  </p>\n<p>注意强制类型转换可能会导致<strong><em>数据损失</em></strong>。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><h5 id=\"Python的内置函数\"><a href=\"#Python的内置函数\" class=\"headerlink\" title=\"Python的内置函数\"></a><a href=\"#Python内置函数\">Python的内置函数</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的math模块\"><a href=\"#Python的math模块\" class=\"headerlink\" title=\"Python的math模块\"></a><a href=\"#Python-math模块方法\">Python的math模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Python的random模块\"><a href=\"#Python的random模块\" class=\"headerlink\" title=\"Python的random模块\"></a><a href=\"#Python-random模块方法\">Python的random模块</a></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"相关常量\"><a href=\"#相关常量\" class=\"headerlink\" title=\"相关常量\"></a>相关常量</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"Tuple元组\"><a href=\"#Tuple元组\" class=\"headerlink\" title=\"Tuple元组\"></a>Tuple元组</h3><p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。  </p>\n<h4 id=\"元组的创建\"><a href=\"#元组的创建\" class=\"headerlink\" title=\"元组的创建\"></a>元组的创建</h4><p>元组的创建方式有两种：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<strong><em>空元组</em></strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"元组的索引和截取\"><a href=\"#元组的索引和截取\" class=\"headerlink\" title=\"元组的索引和截取\"></a>元组的索引和截取</h4><p>因为元组也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9, 7, 2, 23, 1, 1, 13)<br>(8, 9)<br>(8, 9, 7, 2, 23, 1, 1)<br>(8, 7, 23, 1)<br>()<br>(13, 1, 1, 23, 2, 7, 9)  </p>\n</blockquote>\n<h4 id=\"元组运算\"><a href=\"#元组运算\" class=\"headerlink\" title=\"元组运算\"></a>元组运算</h4><p>元组运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#元组的索引和截取\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-1\"><a href=\"#常用函数-1\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p><br></p>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h3><p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\"><a href=\"#字符串创建\" class=\"headerlink\" title=\"字符串创建\"></a>字符串创建</h4><p>我们使用引号<code>( &#39; 或 &quot; )</code>来创建字符串。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>&lt;class ‘str’&gt;</p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 &#39;&#39;&#39;  )</code>来创建多行字符串<br>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的结果为：  </p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>多行字符串可以使用制表符<br>TAB (      )。<br>也可以使用换行符 [<br> ]。   </p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"字符串访问\"><a href=\"#字符串访问\" class=\"headerlink\" title=\"字符串访问\"></a>字符串访问</h4><p>字符串的访问和元组类似，使用切片运算和索引定位。   </p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘j’<br>‘5’</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>hello world<br>ello world<br>el<br>hello worl<br>ello worl<br>el ol  </p>\n<p>dlrow oll<br>dlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h4><p>字符串运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#字符串访问\">字符串访问</a></p>\n<h4 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h4><h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h5><p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>更多请见下文<a href=\"#Python转义字符\">Python转义字符</a></p>\n<h5 id=\"r-string\"><a href=\"#r-string\" class=\"headerlink\" title=\"r-string\"></a>r-string</h5><p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>使用方法是在字符串引号前加上 <code>r/R</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>row string<br>\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"级联\"><a href=\"#级联\" class=\"headerlink\" title=\"级联\"></a>级联</h5><p>Python按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;this &quot;</span> <span class=\"string\">&quot;is &quot;</span> <span class=\"string\">&quot;string&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>this is string</p>\n</blockquote>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"%格式\"></a>%格式</h5><p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><strong><em>python字符串格式化符号</em></strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong><em>格式化操作符辅助指令</em></strong><br>格式化操作符位于%和格式化符号字母中间。    ex. %.2f<br>| 符号 | 功能 |<br>| :—: | :——- |<br>| * | 定义宽度或者小数点精度 |<br>| - | 用做左对齐 |<br>| + | 在正数前面显示加号( + ) |<br>| <sp> |     在正数前面显示空格 |<br>| #    | 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) |<br>| 0    | 显示的数字前面填充’0’而不是默认的空格 |<br>| % |    ‘%%’输出一个单一的’%’ |<br>| (var)    | 映射变量(字典参数) |<br>| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |</p>\n<h5 id=\"format函数\"><a href=\"#format函数\" class=\"headerlink\" title=\"format函数\"></a>format函数</h5><p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\"><a href=\"#f-string\" class=\"headerlink\" title=\"f-string\"></a>f-string</h5><p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:  </p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-2\"><a href=\"#常用函数-2\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>检查\\检测 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>字符串操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,’0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\"><a href=\"#Python转义字符\" class=\"headerlink\" title=\"Python转义字符\"></a>Python转义字符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\‘</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\“</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"List列表\"><a href=\"#List列表\" class=\"headerlink\" title=\"List列表\"></a>List列表</h3><p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>列表是可变的数据类型，即其内的数据可以被改变。  </p>\n<h4 id=\"创建列表\"><a href=\"#创建列表\" class=\"headerlink\" title=\"创建列表\"></a>创建列表</h4><p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] &lt;class ‘list’&gt;<br>[] &lt;class ‘list’&gt;<br>[1, 5, 9, ‘7’] &lt;class ‘list’&gt;<br>[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的嵌套\"><a href=\"#列表的嵌套\" class=\"headerlink\" title=\"列表的嵌套\"></a>列表的嵌套</h4><p>列表是可以嵌套的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>若要访问该列表的元素只需逐层访问即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(matrix[<span class=\"number\">2</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> row:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>4<br>1 2 5<br>2 7 8<br>4 5 6 7 9<br>2 9 7 11 </p>\n</blockquote>\n<h4 id=\"列表的索引和截取\"><a href=\"#列表的索引和截取\" class=\"headerlink\" title=\"列表的索引和截取\"></a>列表的索引和截取</h4><p>因为列表也是一个序列，所以我们可以使用<a href=\"#切片运算符\"><code>切片运算符</code></a>来进行索引和截取：  </p>\n<p><strong><em>索引</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>6<br>3</p>\n</blockquote>\n<p><strong><em>截取</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9, 7, 2, 23, 1, 1, 13]<br>[8, 9]<br>[8, 9, 7, 2, 23, 1, 1]<br>[8, 7, 23, 1]<br>[]<br>[13, 1, 1, 23, 2, 7, 9]<br>[13, 1, 1, 23, 2, 7, 9, 8, 6]   </p>\n</blockquote>\n<h4 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h4><p>因为列表属于可变的数据类型，所以其元素可以修改：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><strong><em>使用del</em></strong>删除列表元素：  </p>\n<p>使用del可以根据索引删除一个元素或者一个切割</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">1</span>:-<span class=\"number\">3</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[4, 5, 9, 8, 3, 1, 2, 0, 11]<br>[4, 9, 3, 2, 0, 11]<br>[]</p>\n</blockquote>\n<h4 id=\"列表运算\"><a href=\"#列表运算\" class=\"headerlink\" title=\"列表运算\"></a>列表运算</h4><p>列表运算满足<a href=\"#序列运算\">序列运算规则</a>：  </p>\n<p><strong><em><code>+运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><strong><em>`</em>运算`*</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><strong><em><code>切片运算</code></em></strong><br>见上文的<a href=\"#列表的索引和截取\">列表的索引和截取</a></p>\n<h4 id=\"列表遍历\"><a href=\"#列表遍历\" class=\"headerlink\" title=\"列表遍历\"></a>列表遍历</h4><p>列表遍历将使用<a href=\"#Python循环语句\">循环语句</a>.</p>\n<!--TODO: enumerate()  -->\n<blockquote>\n<p>使用<a href=\"#enumerate\">enumerate()</a>函数可以得到索引和对应值</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(lst):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,value)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>1 2 7 3 6 4<br>1 2<br>2 7<br>3 3<br>4 6<br>5 4</p>\n</blockquote>\n<!--TODO: zip()  -->\n<p>如果要同时遍历多个列表，可以使用<a href=\"#zip\">zip()</a>函数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;quest&#x27;</span>, <span class=\"string\">&#x27;favorite color&#x27;</span>]</span><br><span class=\"line\">answers = [<span class=\"string\">&#x27;lancelot&#x27;</span>, <span class=\"string\">&#x27;the holy grail&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q, a <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(questions, answers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(q, a))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>What is your name?  It is lancelot.<br>What is your quest?  It is the holy grail.<br>What is your favorite color?  It is blue.</p>\n</blockquote>\n<h4 id=\"常用函数-3\"><a href=\"#常用函数-3\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">——-</td>\n<td style=\"text-align:left\"><strong><em>列表操作 方法</em></strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\"><a href=\"#Set集合\" class=\"headerlink\" title=\"Set集合\"></a>Set集合</h3><p>集合（set）是一个无序的不重复元素序列。<br>在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h4><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合  </p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{1, 5, 6}<br>{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python推导式\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\"><a href=\"#操作集合\" class=\"headerlink\" title=\"操作集合\"></a>操作集合</h4><h5 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：  </p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9}<br>{1, 2, 5, 8, 9, 11, 13}<br>{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}  </p>\n</blockquote>\n<h5 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>{2, 6, 7, 8, 9}<br>2<br>{6, 7, 8, 9}<br>Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>——&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><p><strong><em><code>数学集合运算</code></em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘r’, ‘d’, ‘b’}<br>a-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>a-b = {‘c’, ‘a’}<br>a-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-4\"><a href=\"#常用函数-4\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\"><a href=\"#Dictionary字典\" class=\"headerlink\" title=\"Dictionary字典\"></a>Dictionary字典</h3><blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\"><a href=\"#创建字典\" class=\"headerlink\" title=\"创建字典\"></a>创建字典</h4><p>创建字典的方法有三种：  </p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>{2: 4, 4: 16, 6: 36}<br>{}<br>{}  </p>\n</blockquote>\n<h4 id=\"字典操作\"><a href=\"#字典操作\" class=\"headerlink\" title=\"字典操作\"></a>字典操作</h4><p><strong><em><code>访问值</code></em></strong><br>要访问字典的值只需要将键值填入字典后的方括号中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>      1 dict1 = {‘a’:1,’b’:2}<br>——&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><strong><em><code>修改/创建值</code></em></strong><br>要修改字典的值，直接将对应的键值修改即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3  </p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><strong><em><code>删除值</code></em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>{}<br>-—————————————————————————-<br>NameError                                 Traceback (most recent call last)<br>test.py in &lt;module&gt;<br>     11 # 删除字典<br>     12 del dict1<br>—-&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><strong><em><code>in运算</code></em></strong><br>判断key是否在字典中已存在.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为： </p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-5\"><a href=\"#常用函数-5\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h2 id=\"Python运算符\"><a href=\"#Python运算符\" class=\"headerlink\" title=\"Python运算符\"></a>Python运算符</h2><p>Python的运算符可以分为以下几类：  </p>\n<ul>\n<li><a href=\"#算术运算符\">算术运算符</a></li>\n<li><a href=\"#比较(关系\">比较(关系)运算符</a>运算符)</li>\n<li><a href=\"#赋值运算符\">赋值运算符</a></li>\n<li><a href=\"#逻辑运算符\">逻辑运算符</a></li>\n<li><a href=\"#位运算符\">位运算符</a></li>\n<li><a href=\"#成员运算符\">成员运算符</a></li>\n<li><a href=\"#身份运算符\">身份运算符</a></li>\n</ul>\n<blockquote>\n<p><a href=\"#运算符优先级\">运算符优先级</a></p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">取模</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:left\">幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:left\">整除</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"比较-关系-运算符\"><a href=\"#比较-关系-运算符\" class=\"headerlink\" title=\"比较(关系)运算符\"></a>比较(关系)运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">小于等于</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\">将运算符右侧的值赋予左侧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\">a+=b等价于a=a+b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\">a-=b等价于a=a-b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\">a<em>=b等价于a=a</em>b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\">a/=b等价于a=a/b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\">a%=b等价于a=a%b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\">a<strong>=b等价于a=a</strong>b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:left\">取整赋值运算符</td>\n<td style=\"text-align:left\">a//=b等价于a=a//b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:=</td>\n<td style=\"text-align:left\">海象运算符</td>\n<td style=\"text-align:left\"><code>Python3.8</code>版本新增运算符。可在表达式内部为变量赋值。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>海象运算符的使用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n := <span class=\"built_in\">len</span>(a)) &gt; <span class=\"number\">10</span>:  </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;List is too long (<span class=\"subst\">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:left\">x and y</td>\n<td style=\"text-align:left\">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:left\">x or y</td>\n<td style=\"text-align:left\">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:left\">not x</td>\n<td style=\"text-align:left\">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:left\">`</td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0</td>\n<td>`(a</td>\n<td>b)` 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为1，否则为0</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>\n<td style=\"text-align:left\"><code>(~a )</code> 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"成员运算符\"><a href=\"#成员运算符\" class=\"headerlink\" title=\"成员运算符\"></a>成员运算符</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"身份运算符\"><a href=\"#身份运算符\" class=\"headerlink\" title=\"身份运算符\"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is not</td>\n<td style=\"text-align:left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`^</td>\n<td style=\"text-align:left\">`</td>\n<td>位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>== !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h2 id=\"Python条件控制\"><a href=\"#Python条件控制\" class=\"headerlink\" title=\"Python条件控制\"></a>Python条件控制</h2><p>Python条件控制使用if、elif和else关键字,一般流程图如下：<br><img src=\"if-1.png\" alt=\"if流程图\"></p>\n<p>共有三种模式：  </p>\n<p><strong><em>if</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br><strong><em>if-else</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br><strong><em>if-elif-else</em></strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr_1&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (&lt;condition_expr_2&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\"><span class=\"comment\"># ……</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure><br>上述代码的流程如下：<br><img src=\"if-2.png\" alt=\"if-elif-else\"></p>\n<p>Python条件控制还支持if条件的<code>嵌套</code>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;expr&gt;):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (&lt;expr_2&gt;):</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\">    <span class=\"comment\"># statement_block_3</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># ……</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python循环语句\"><a href=\"#Python循环语句\" class=\"headerlink\" title=\"Python循环语句\"></a>Python循环语句</h2><p>循环语句将在条件成立时循环执行。流程图如下：<br><img src=\"loop-1.jpg\" alt=\"loop-1\"><br>Python的循环语句有两种形式：  </p>\n<p><strong><em><code>while</code></em></strong></p>\n<blockquote>\n<p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  </p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;condition_expr&gt;):</span><br><span class=\"line\">    <span class=\"comment\"># loop_statement_block</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># false_statement</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用<code>while True</code>来实现无限循环</p>\n</blockquote>\n<p><strong><em><code>for</code></em></strong><br>Python for 循环可以遍历任何可迭代对象(<a href=\"#Python序列sequence\">序列</a>)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &lt;variable&gt; <span class=\"keyword\">in</span> &lt;sequence&gt;:</span><br><span class=\"line\">    &lt;statements&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><br>经常和for配合的一个函数为<a href=\"#range\">range()</a>:<br>range()函数会生成一个数字序列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要提前结束循环，需要使用关键字<code>break</code>跳出当前循环:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span> :</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br>以上代码循环到x==6时就会停止:  </p>\n<blockquote>\n<p>10 9 8 7 6  </p>\n</blockquote>\n<p>如果只是跳过一次循环，使用关键字<code>continue</code>可以跳过本次循环，进入下次循环:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>9 8 7 5 4 3 2</p>\n</blockquote>\n<p>break和continue在循环中的作用如下图：<br><img src=\"break-continue.jpg\" alt=\"break-continue\"></p>\n<blockquote>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。<br>continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n</blockquote>\n<hr>\n<h2 id=\"Python序列sequence\"><a href=\"#Python序列sequence\" class=\"headerlink\" title=\"Python序列sequence\"></a>Python序列sequence</h2><h3 id=\"序列运算\"><a href=\"#序列运算\" class=\"headerlink\" title=\"序列运算\"></a>序列运算</h3><!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\"><a href=\"#运算-拼接\" class=\"headerlink\" title=\"+运算/拼接\"></a>+运算/拼接</h4><h4 id=\"运算-复制\"><a href=\"#运算-复制\" class=\"headerlink\" title=\"*运算/复制\"></a>*运算/复制</h4><h4 id=\"in运算\"><a href=\"#in运算\" class=\"headerlink\" title=\"in运算\"></a>in运算</h4><h4 id=\"切片运算符\"><a href=\"#切片运算符\" class=\"headerlink\" title=\"切片运算符\"></a>切片运算符</h4><hr>\n<h2 id=\"Python迭代器与生成器\"><a href=\"#Python迭代器与生成器\" class=\"headerlink\" title=\"Python迭代器与生成器\"></a>Python迭代器与生成器</h2><h3 id=\"迭代器iterator\"><a href=\"#迭代器iterator\" class=\"headerlink\" title=\"迭代器iterator\"></a>迭代器iterator</h3><p>迭代是访问集合元素的一种方式。<br>迭代器是一个可以记住遍历的位置的对象。<br>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前<code>不会后退</code>。   </p>\n<p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br>iter()用于创建迭代器对象，next()用于控制迭代器前进。<br>字符串，列表或元组对象都可用于创建迭代器：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)   <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(it))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))  <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>&lt;class ‘list_iterator’&gt;<br>1<br>5</p>\n</blockquote>\n<p>迭代器对象可以使用常规for语句进行遍历：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 3 4 5 </p>\n</blockquote>\n<h4 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h4><p>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。<br>如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。有关面向对象编程请看：<a href=\"#Python面向对象\">Python面向对象</a><br><code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。<br><code>__next__()</code> 方法会返回下一个迭代器对象。  </p>\n<blockquote>\n<p><strong><em><code>StopIteration</code></em></strong><br>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 </p>\n</blockquote>\n<p>以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">20</span>:    <span class=\"comment\"># 设置循环上限</span></span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"> </span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = <span class=\"built_in\">iter</span>(myclass)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><br>执行输出结果为：  </p>\n<blockquote>\n<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 </p>\n</blockquote>\n<hr>\n<h3 id=\"生成器generator\"><a href=\"#生成器generator\" class=\"headerlink\" title=\"生成器generator\"></a>生成器generator</h3><p>在Python中，使用了<code>yield</code>的函数被称为生成器。<br>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br>在调用生成器运行的过程中，每次遇到 yield 时函数会<code>暂停并保存当前所有的运行信息</code>，<strong><em>返回 yield 的值</em></strong>, 并在下一次执行 next() 方法时从当前位置继续运行。  </p>\n<p>以下实例使用生成器实现斐波那契数列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>):</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(f), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure><br>以上代码的输出结果为：  </p>\n<blockquote>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n</blockquote>\n<hr>\n<h2 id=\"Python函数\"><a href=\"#Python函数\" class=\"headerlink\" title=\"Python函数\"></a>Python函数</h2><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>函数能提高应用的模块性，和代码的重复利用率。  </p>\n<p>除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。</p>\n<h3 id=\"定义一个函数\"><a href=\"#定义一个函数\" class=\"headerlink\" title=\"定义一个函数\"></a>定义一个函数</h3><p>函数的组成有以下几条规则:  </p>\n<ul>\n<li>函数以<code>def</code>关键字开头，后接<code>函数标识符</code>名称和<code>参数列表</code></li>\n<li>函数内容以冒号<code>:</code>开始，下面的函数体缩进</li>\n<li>以<code>return [表达式]</code>结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None</li>\n</ul>\n<p>下图是一个简单的函数形式说明:<br><img src=\"function-1.png\" alt=\"函数说明\"><br>总结来说，Python的函数语法格式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名(<span class=\"params\">参数列表</span>):</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的<code>参数传递</code>来说也对应着两种：  </p>\n<ul>\n<li><strong>可变类型</strong>：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  </li>\n<li><strong>不可变类型</strong>：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。</li>\n</ul>\n<blockquote>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n</blockquote>\n<p>Python的函数<code>参数</code>共有下面四种类型：  </p>\n<ul>\n<li>必需参数</li>\n<li>关键字参数</li>\n<li>默认参数</li>\n<li>不定长参数</li>\n</ul>\n<p><strong><em><code>必需参数</code></em></strong><br>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br><strong><em><code>关键字参数</code></em></strong><br>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。<br>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br><strong><em><code>默认参数</code></em></strong><br>调用函数时，如果没有传递参数，则会使用默认参数。<br><strong><em><code>不定长参数</code></em></strong><br>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span>(<span class=\"params\">[formal_args,] [*var_args_tuple,] [**var_args_dict] </span>):</span></span><br><span class=\"line\">   function_suite</span><br><span class=\"line\">   <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure><br>加了星号 <em> 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。<br>加了两个星号 *</em> 的参数会以字典的形式导入。</p>\n<p>下面结合函数的使用来理解这四种参数类型：  </p>\n<h3 id=\"函数的使用\"><a href=\"#函数的使用\" class=\"headerlink\" title=\"函数的使用\"></a>函数的使用</h3><p>使用函数只需要直接使用函数名并传入对应参数就可以调用了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  <span class=\"comment\"># 必需参数的使用，参数按顺序对应传入</span></span><br><span class=\"line\">function1(<span class=\"number\">1</span>, c = <span class=\"string\">&quot;5&quot;</span>, b = <span class=\"number\">2</span>)  <span class=\"comment\"># 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function2</span>(<span class=\"params\">a,b,c = <span class=\"number\">5</span></span>):</span>   <span class=\"comment\"># 默认参数，在函数声明时指定其默认值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)       <span class=\"comment\"># 默认参数在调用时不指定则使用默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function3</span>(<span class=\"params\">a,b,*args_tuple</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function4</span>(<span class=\"params\">a,b,**args_dict</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_dict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function4(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c = <span class=\"number\">3</span>,d = <span class=\"number\">4</span>,e = <span class=\"number\">5</span>,f = <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 3<br>1 2 5<br>2 3 5<br>1 2 (3, 4, 5, 6)<br>1 2 {‘c’: 3, ‘d’: 4, ‘e’: 5, ‘f’: 6}  </p>\n</blockquote>\n<p>声明函数时，参数中星号 <em> 可以单独出现，如果单独出现星号 </em> 后的参数<code>必须用关键字</code>传入。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,*,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>1 2 5</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>Python使用lambda关键字来创建匿名函数。<br>匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。<br>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  </p>\n<p>lambda 函数的语法只包含一个语句，如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure></p>\n<p>使用实例来增进理解：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2    <span class=\"comment\"># 一个简单的匿名函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"return语句\"><a href=\"#return语句\" class=\"headerlink\" title=\"return语句\"></a>return语句</h3><p>return作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\">c = function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"强制位置参数\"><a href=\"#强制位置参数\" class=\"headerlink\" title=\"强制位置参数\"></a>强制位置参数</h3><p>Python3.8 新增了一个函数形参语法<code>/</code>用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。<br>在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">a, b, /, c, d, *, e, f</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b, c, d, e, f)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)  <span class=\"comment\"># 这种使用方式是正确的</span></span><br><span class=\"line\"><span class=\"comment\"># 下面两种是错误的使用</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, b=<span class=\"number\">20</span>, c=<span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)   <span class=\"comment\"># b 不能使用关键字参数的形式</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, f=<span class=\"number\">60</span>)           <span class=\"comment\"># e 必须使用关键字参数的形式</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python推导式\"><a href=\"#Python推导式\" class=\"headerlink\" title=\"Python推导式\"></a>Python推导式</h2><p>Python的推导式应用于简化规律的列表或元组等序列的创建：<br>每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  </p>\n<blockquote>\n<p>需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。</p>\n</blockquote>\n<p>简单语法是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_lst = [var <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> varrange <span class=\"keyword\">if</span> varexpr]</span><br></pre></td></tr></table></figure></p>\n<p>比如我们想得到一个偶数数列：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">tup = (x*<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))   <span class=\"comment\"># 括号生成的是生成器对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tup))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>(tup))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]<br>&lt;class ‘generator’&gt;<br>(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)</p>\n</blockquote>\n<p>推导式的更多使用建议自己上手尝试一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> (x * <span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)) <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [[x, y] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">ve = [<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;xx&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;xxxx&quot;</span>]</span><br><span class=\"line\">lst = [<span class=\"built_in\">len</span>(v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> ve]  <span class=\"comment\"># 推导式还可以对匿名变量使用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [<span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(<span class=\"number\">355</span>/<span class=\"number\">113</span>, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]   <span class=\"comment\"># 使用复杂表达式和嵌套函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[3, 9, 15, 21, 27]<br>[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]<br>[1, 2, 3, 4]<br>[‘3.1’, ‘3.14’, ‘3.142’, ‘3.1416’, ‘3.14159’]</p>\n</blockquote>\n<hr>\n<h2 id=\"Python模块\"><a href=\"#Python模块\" class=\"headerlink\" title=\"Python模块\"></a>Python模块</h2><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。<br>模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p>\n<p>下面是一个使用 python 标准库中模块的例子。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\nPython 路径为：&#x27;</span>, sys.path, <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li>import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  </li>\n<li>sys.argv 是一个包含命令行参数的列表。  </li>\n<li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  </li>\n</ul>\n</blockquote>\n<h3 id=\"import语句\"><a href=\"#import语句\" class=\"headerlink\" title=\"import语句\"></a>import语句</h3><p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> module1[,module2...]</span><br></pre></td></tr></table></figure></p>\n<p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  </p>\n<p>下面是自定义模块的使用:<br>这里先定义一个模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure><br>然后再其他文件里导入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test.py&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test_module.function(<span class=\"number\">1</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 使用模块定义的方法</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的运行结果为：    </p>\n<blockquote>\n<p>file_name: test_module.py<br>file_name: test.py<br>3</p>\n</blockquote>\n<p>可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  </p>\n<p>并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。<br><img src=\"module-1.png\" alt=\"模块只会被导入一次，执行一次\"></p>\n<blockquote>\n<p>当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？<br>这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。<br>这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。<br>搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。<br>搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘g:\\Codes\\Python\\testpy’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles\\lib\\python’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\python39.zip’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\DLLs’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39’, ‘’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\Pythonwin’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\extensions’, ‘C:\\Users\\Administrator\\.ipython’]</p>\n</blockquote>\n<p>sys.path 输出是一个列表，其中第一项是当前目录。  </p>\n<p>如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\">fun = test_module.function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"from…import语句\"><a href=\"#from…import语句\" class=\"headerlink\" title=\"from…import语句\"></a>from…import语句</h3><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><br>这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 </p>\n<p>而如果要把一个模块所有成员导入当前的命名空间中，语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure></p>\n<p>这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如’_a’此类。<br>然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n<h3 id=\"深入模块\"><a href=\"#深入模块\" class=\"headerlink\" title=\"深入模块\"></a>深入模块</h3><p>前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。<br>我们一般使用这些可执行代码来初始化模块。<br>每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。<br>所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。<br>从另一个方面，当你确实知道你在做什么的话，你也可以通过 <code>modname.itemname</code> 这样的表示法来访问模块内的函数。  </p>\n<p>但是需要注意：  </p>\n<blockquote>\n<p>在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  </p>\n</blockquote>\n<h3 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a><strong>name</strong>属性</h3><p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。  </p>\n<blockquote>\n<p>注意是前后<code>两个下划线</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;test_module_main&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>每个模块都有一个__name__属性，当其值是’__main__‘时，表明该模块自身在运行，否则是被引入。</p>\n<h3 id=\"dir-函数\"><a href=\"#dir-函数\" class=\"headerlink\" title=\"dir()函数\"></a>dir()函数</h3><p>内置的函数 <a href=\"#dir\"><code>dir()</code></a> 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module,sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(test_module))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(sys))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘__builtins__‘, ‘__cached__‘, ‘__doc__‘, ‘__file__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘, ‘function’]<br>[‘__breakpointhook__‘, ‘__displayhook__‘, ‘__doc__‘, ‘__excepthook__‘, ‘__interactivehook__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘, ‘__stderr__‘, ‘__stdin__‘, ‘__stdout__‘, ‘__unraisablehook__‘, ‘_base_executable’, ‘_clear_type_cache’, ‘_current_frames’, ‘_debugmallocstats’, ‘_enablelegacywindowsfsencoding’, ‘_framework’, ‘_getframe’, ‘_git’, ‘_home’, ‘_xoptions’, ‘addaudithook’, ‘api_version’, ‘argv’, ‘audit’, ‘base_exec_prefix’, ‘base_prefix’, ‘breakpointhook’, ‘builtin_module_names’, ‘byteorder’, ‘call_tracing’, ‘copyright’, ‘displayhook’, ‘dllhandle’, ‘dont_write_bytecode’, ‘exc_info’, ‘excepthook’, ‘exec_prefix’, ‘executable’, ‘exit’, ‘flags’, ‘float_info’, ‘float_repr_style’, ‘get_asyncgen_hooks’, ‘get_coroutine_origin_tracking_depth’, ‘getallocatedblocks’, ‘getdefaultencoding’, ‘getfilesystemencodeerrors’, ‘getfilesystemencoding’, ‘getprofile’, ‘getrecursionlimit’, ‘getrefcount’, ‘getsizeof’, ‘getswitchinterval’, ‘gettrace’, ‘getwindowsversion’, ‘hash_info’, ‘hexversion’, ‘implementation’, ‘int_info’, ‘intern’, ‘is_finalizing’, ‘maxsize’, ‘maxunicode’, ‘meta_path’, ‘modules’, ‘path’, ‘path_hooks’, ‘path_importer_cache’, ‘platform’, ‘platlibdir’, ‘prefix’, ‘ps1’, ‘ps2’, ‘ps3’, ‘pycache_prefix’, ‘set_asyncgen_hooks’, ‘set_coroutine_origin_tracking_depth’, ‘setprofile’, ‘setrecursionlimit’, ‘setswitchinterval’, ‘settrace’, ‘stderr’, ‘stdin’, ‘stdout’, ‘thread_info’, ‘unraisablehook’, ‘version’, ‘version_info’, ‘warnoptions’, ‘winver’]</p>\n</blockquote>\n<p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>[‘__annotations__‘, ‘__builtins__‘, ‘__cached__‘, ‘__doc__‘, ‘__file__‘, ‘__loader__‘, ‘__name__‘, ‘__package__‘, ‘__spec__‘]</p>\n</blockquote>\n<h3 id=\"其他模块\"><a href=\"#其他模块\" class=\"headerlink\" title=\"其他模块\"></a>其他模块</h3><p>除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看<a href=\"#Python库参考文档\">Python库参考文档</a>。  </p>\n<p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。<br>这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。<br>应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。<br>比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。<br>就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  </p>\n<p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。<br>目录只有包含一个叫做 __init__.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。<br>最简单的情况，放一个空的 :file:__init__.py就可以了。<br>当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <strong>all</strong>变量赋值。  </p>\n<p>注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。<br>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。<br>反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  </p>\n<p>如果我们使用 from sound.effects import <em> 会发生什么呢？<br>Python 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。<br>但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。<br>在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。<br>为了解决这个问题，我们只需要提供一个精确包的索引。<br>导入语句遵循如下规则：如果包定义文件 __init__.py 存在一个叫做 __all__ 的列表变量，那么在使用 from package import </em> 的时候就把这个列表中的所有名字作为包内容导入。<br>作为包的作者，可别忘了在更新包之后保证 __all__ 也更新了啊。<br>__all__是一个存储模块名字符串的列表。  </p>\n<hr>\n<h2 id=\"Python输入输出\"><a href=\"#Python输入输出\" class=\"headerlink\" title=\"Python输入输出\"></a>Python输入输出</h2><p>再前面我们已经接触过Python的输入<a href=\"#input\">input()</a>和输出<a href=\"#print\">print()</a>了，本章主要是介绍输入输出的进阶技巧。  </p>\n<h3 id=\"输出格式美化\"><a href=\"#输出格式美化\" class=\"headerlink\" title=\"输出格式美化\"></a>输出格式美化</h3><p>Python两种输出值的方式: 表达式语句和 print() 函数。<br>第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。<br>如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。<br>如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  </p>\n<blockquote>\n<ul>\n<li>str()： 函数返回一个用户易读的表达形式。</li>\n<li>repr()： 产生一个解释器易读的表达形式。</li>\n</ul>\n</blockquote>\n<p>下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(a)</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>(a)</span><br><span class=\"line\"><span class=\"string\">&quot;&#x27;1&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(a))</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(a)&#125;</span>,<span class=\"subst\">&#123;<span class=\"built_in\">repr</span>(a)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#  repr() 函数可以保留转义字符串中的特殊字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">&#x27;hello, world\\n&#x27;</span>      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos = <span class=\"built_in\">repr</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos)</span><br><span class=\"line\"><span class=\"string\">&#x27;hello, world\\n&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos_1 = <span class=\"built_in\">str</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos_1)</span><br><span class=\"line\">hello, world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>((x, y, (<span class=\"string\">&#x27;Go&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>)))      </span><br><span class=\"line\"><span class=\"string\">&quot;(32.5, 40000, (&#x27;Go&#x27;, &#x27;Python&#x27;))&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>关于str()和repr()的更多区别请参见<a href=\"str(\">str()和repr()的区别</a>和repr()的区别)</p>\n<p>其他关于字符串格式化内容请参见: <a href=\"#字符串格式化\">字符串格式化</a></p>\n<h3 id=\"读取输入\"><a href=\"#读取输入\" class=\"headerlink\" title=\"读取输入\"></a>读取输入</h3><p>Python 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p>\n<hr>\n<h2 id=\"Python文件读写操作\"><a href=\"#Python文件读写操作\" class=\"headerlink\" title=\"Python文件读写操作\"></a>Python文件读写操作</h2><h3 id=\"读和写文件\"><a href=\"#读和写文件\" class=\"headerlink\" title=\"读和写文件\"></a>读和写文件</h3><p><a href=\"#open\">open()</a>函数将会返回一个file对象，其基本语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(filename, mode)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>filename : 包含了你要访问的文件的字符串值。</li>\n<li>mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li>\n</ul>\n<p>不同模式打开文件的完全列表：  </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">以<code>只读</code>方式打开文件。文件的指针将会放在文件的<code>开头</code>。这是<code>默认</code>模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>只读</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。文件打开时会是追加模式。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab+</td>\n<td style=\"text-align:left\">以<code>二进制格式</code>打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>总结来说模式的情况有三种：  </p>\n<ul>\n<li>基础模式： 也就是 <code>r</code> <code>w</code> <code>a</code> (read、write、append)</li>\n<li>二进制模式：  在基础模式上加上<code>b</code>表示以二进制格式打开文件(byte)</li>\n<li>读写模式：  在以上两种模式上加上<code>+</code>表示打开的文件可读写</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">r</th>\n<th style=\"text-align:center\">r+</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:center\">w+</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">a+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">覆盖</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在开始</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在结尾</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"rwa-1.png\" alt=\"读写模式\"></p>\n<p>下面是一个读写文件的实例:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;a模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式再写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>Traceback (most recent call last):<br>  File “\\testpy\\quick.py”, line 6, in &lt;module&gt;<br>    f = open(r”testpy\\test.txt”, “r”)<br>FileNotFoundError: [Errno 2] No such file or directory: ‘testpy\\test.txt’<br>w模式写入<br>w模式写入a模式写入<br>w模式再写入</p>\n</blockquote>\n<p>可以看到下图文件结构的改变<br><img src=\"rw_test_1.png\" alt=\"读写测试-前\"><br><img src=\"rw_test_2.png\" alt=\"读写测试-后\"></p>\n<p>以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。</p>\n<blockquote>\n<p>这里有几个需要注意的点: </p>\n<ul>\n<li>文件的路径，由于带有反斜杠\\，会被转义，所以需要使用r-string</li>\n<li>打开的文件需要使用f.close()关闭或者使用<a href=\"#with关键字\">with…as…</a>代码块</li>\n<li>读写文件通常需要在try…except里进行</li>\n</ul>\n</blockquote>\n<p>如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：<br><img src=\"rw-problem.png\" alt=\"文字乱码\"><br>文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：<br>vscode选择右下角的编码格式改变：<br><img src=\"vscode.png\" alt=\"vscode选择编码\"><br><img src=\"vscode-2.png\" alt=\"vscode选择编码-2\"><br><img src=\"vscode-3.png\" alt=\"vscode选择编码-3\"><br><img src=\"solute.png\" alt=\"文字乱码解决\"></p>\n<p>还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure></p>\n<p>关于上面实例使用的文件对象的方法，请看下节。  </p>\n<h3 id=\"文件对象的方法\"><a href=\"#文件对象的方法\" class=\"headerlink\" title=\"文件对象的方法\"></a>文件对象的方法</h3><!-- TODO: 文件对象方法 -->\n<h4 id=\"f-read\"><a href=\"#f-read\" class=\"headerlink\" title=\"f.read()\"></a><a href=\"#read\"><code>f.read()</code></a></h4><p>为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。<br>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入<br>字</p>\n</blockquote>\n<p>可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  </p>\n<blockquote>\n<p>这是因为read()同时会向后移动指针size个字符.</p>\n</blockquote>\n<p>但是这时候有人又有问题了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？</p>\n<blockquote>\n<p>这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。</p>\n</blockquote>\n<p>如果你打开文件的方式没有读的权限，那么会报出以下的错误：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Traceback (most recent call last):<br>  File “\\testpy\\quick.py”, line 18, in &lt;module&gt;<br>    print(f.read())<br><code>io.UnsupportedOperation: not readable</code></p>\n</blockquote>\n<h4 id=\"f-readline\"><a href=\"#f-readline\" class=\"headerlink\" title=\"f.readline()\"></a><a href=\"#readline\"><code>f.readline()</code></a></h4><p>f.readline() 会从文件中读取单独的一行。换行符为 ‘\\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串1\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>‘写入字符串\\n’<br>‘写入字符串1\\n’  </p>\n</blockquote>\n<p>可以看到调用readline()和read()一样都会向后移动指针</p>\n<p>还可以使用迭代文件对象的方式遍历每一行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 使用with...as在代码块结束时会自动关闭文件对象</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入字符串<br>写入字符串1</p>\n</blockquote>\n<h4 id=\"f-readlines\"><a href=\"#f-readlines\" class=\"headerlink\" title=\"f.readlines()\"></a><a href=\"#readlines\"><code>f.readlines()</code></a></h4><p>f.readlines() 将返回该文件中包含的所有行。<br>如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.readlines())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>[‘写入字符串\\n’, ‘写入字符串1’]</p>\n</blockquote>\n<h4 id=\"f-write\"><a href=\"#f-write\" class=\"headerlink\" title=\"f.write()\"></a><a href=\"#write\"><code>f.write()</code></a></h4><p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符</p>\n</blockquote>\n<h4 id=\"f-tell\"><a href=\"#f-tell\" class=\"headerlink\" title=\"f.tell()\"></a><a href=\"#tell\"><code>f.tell()</code></a></h4><p>f.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符<br>当前游标处于第12字节处</p>\n</blockquote>\n<p>一些常用编码一个字符所占的字节数：<br>| 编码 | 中文 | 英文 | 其他说明 |<br>| :—: | :—: | :—: | :— |<br>| ASCII | 2 | 1 |  |<br>| Unicode | 2 | 2 | 英文符号只占1个字节 |<br>| GB2312 | 2 | 2 | |<br>| GBK | 2 | 1 | |<br>| ISO-8859-1 | 1 | 1 | |<br>| UTF-8 | 3 | 1 | |<br>| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |<br>| UTF-32 | 4 | 4 |  |</p>\n<h4 id=\"f-seek\"><a href=\"#f-seek\" class=\"headerlink\" title=\"f.seek()\"></a><a href=\"#seek\"><code>f.seek()</code></a></h4><p>如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>\n<p>offset 是偏移量；<br>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：</p>\n<ul>\n<li>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符</li>\n<li>seek(x,1) ： 表示从当前位置往后移动x个字符</li>\n<li>seek(-x,2)：表示从文件的结尾往前移动x个字符<br>from_what 值默认为0，即文件开头。下面给出一个完整的例子：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>写入4个字符<br>当前游标处于第12字节处<br>0<br>当前游标处于第0字节处<br>12<br>当前游标处于第12字节处</p>\n</blockquote>\n<h4 id=\"f-close\"><a href=\"#f-close\" class=\"headerlink\" title=\"f.close()\"></a><a href=\"#close\"><code>f.close()</code></a></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。<br>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</p>\n<h3 id=\"pickle模块\"><a href=\"#pickle模块\" class=\"headerlink\" title=\"pickle模块\"></a>pickle模块</h3><p>python的pickle模块实现了基本的数据序列和反序列化。<br>通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。<br>通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  </p>\n<p>下面通过一个简单实例来说明pickle模块：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块将数据对象保存到文件</span></span><br><span class=\"line\">data1 = &#123;<span class=\"string\">&quot;a&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">6j</span>], <span class=\"string\">&quot;b&quot;</span>: (<span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">u&quot;Unicode string&quot;</span>), <span class=\"string\">&quot;c&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">selfref_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">selfref_list.append(selfref_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle dictionary using protocol 0.</span></span><br><span class=\"line\">pickle.dump(data1, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle the list using the highest protocol available.</span></span><br><span class=\"line\">pickle.dump(selfref_list, output, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">output.close()</span><br></pre></td></tr></table></figure></p>\n<p>上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickle.dump(obj, file, [,protocol])</span><br></pre></td></tr></table></figure></p>\n<p>它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块从文件中重构python对象</span></span><br><span class=\"line\">data1 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data1)</span><br><span class=\"line\">data2 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data2)</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>{‘a’: [1, 2.0, 3, (4+6j)], ‘b’: (‘string’, ‘Unicode string’), ‘c’: None}<br>[1, 2, 3]</p>\n</blockquote>\n<p>上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">any_x = pickle.load(file)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Python-os模块\"><a href=\"#Python-os模块\" class=\"headerlink\" title=\"Python os模块\"></a>Python os模块</h2><!-- TODO: os模块方法 -->\n<h3 id=\"os模块常用方法\"><a href=\"#os模块常用方法\" class=\"headerlink\" title=\"os模块常用方法\"></a>os模块常用方法</h3><p><a href=\"#Python-os模块方法\">os模块</a>提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  </p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt1111&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.R_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.X_OK))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 返回你的当前工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br><span class=\"line\">os.chdir(<span class=\"string\">&quot;../&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br><span class=\"line\">g:\\Codes\\Python\\</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os, stat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\">os.chmod(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, stat.S_IREAD)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_CREAT | os.O_RDWR)</span><br><span class=\"line\">os.write(fd, <span class=\"built_in\">str</span>.encode(<span class=\"string\">&quot;This is test\\n&quot;</span>))</span><br><span class=\"line\">os.close(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_RDONLY)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.read(fd, <span class=\"number\">10</span>))</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;This is te&#x27;</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>,os.O_RDONLY)</span><br><span class=\"line\">os.closerange(fd,fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;foo.txt&quot;</span>, os.O_RDWR | os.O_CREAT)</span><br><span class=\"line\"><span class=\"comment\"># 复制文件描述符</span></span><br><span class=\"line\">d_fd = os.dup(fd)</span><br><span class=\"line\"><span class=\"comment\"># 使用复制的文件描述符写入文件</span></span><br><span class=\"line\">os.write(d_fd, <span class=\"string\">&quot;This is test&quot;</span>.encode())</span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">os.closerange(fd, d_fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># os.fdopen()</span></span><br><span class=\"line\"><span class=\"comment\"># 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法是内置函数 open() 的别名;</span></span><br><span class=\"line\"><span class=\"comment\"># 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.stat(path))</span><br><span class=\"line\"></span><br><span class=\"line\">info = os.lstat(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;st_uid = <span class=\"subst\">&#123;info.st_uid&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(path, os.O_RDWR)</span><br><span class=\"line\">info = os.fstat(fd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">st_uid = <span class=\"number\">0</span></span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.link(src, dst)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">path = <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir(path))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(path, <span class=\"number\">0o777</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.mkdir(path)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">r,w = os.pipe()</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> os.popen(<span class=\"string\">&quot;mkdir test_popen&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;os._wrap_close <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D8FC929430</span>&gt;</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.system(<span class=\"string\">r&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">os.remove(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除后列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.removedirs(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.rmdir(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br><span class=\"line\"></span><br><span class=\"line\">os.rename(<span class=\"string\">&quot;test_pack&quot;</span>, <span class=\"string\">&quot;test_rename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;test_rename&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;当前目录为: %s&quot;</span> %os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span>%os.listdir(os.getcwd()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重命名 &quot;aa1.txt&quot;</span></span><br><span class=\"line\">os.renames(<span class=\"string\">&quot;aa1.txt&quot;</span>,<span class=\"string\">&quot;newdir/aanew.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;重命名成功。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出重命名的文件 &quot;aa1.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span> %os.listdir(os.getcwd()))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前目录为: /tmp</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;aa1.txt&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br><span class=\"line\">重命名成功。</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>, topdown=<span class=\"literal\">False</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\.vscode\\settings.json</span><br><span class=\"line\">.\\testpy\\data.pkl</span><br><span class=\"line\">.\\testpy\\quick.py</span><br><span class=\"line\">.\\testpy\\quick2.py</span><br><span class=\"line\">.\\testpy\\test1.txt</span><br><span class=\"line\">.\\testpy\\test2.txt</span><br><span class=\"line\">.\\testpy\\test3.txt</span><br><span class=\"line\">.\\testpy\\test_unicode.txt</span><br><span class=\"line\">.\\test_pack\\test_py.py</span><br><span class=\"line\">.\\test_pack\\__init__.py</span><br><span class=\"line\">.\\unable\\__pycache__\\un_test.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\unable\\un_test.py</span><br><span class=\"line\">.\\unable\\__pycache__</span><br><span class=\"line\">.\\__pycache__\\test_module.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\auto.py</span><br><span class=\"line\">.\\data.pkl</span><br><span class=\"line\">.\\dp1.py</span><br><span class=\"line\">.\\foo.txt</span><br><span class=\"line\">.\\test.py</span><br><span class=\"line\">.\\test.txt</span><br><span class=\"line\">.\\test_module.py</span><br><span class=\"line\">.\\workspace.code-workspace</span><br><span class=\"line\">.\\.vscode</span><br><span class=\"line\">.\\testpy</span><br><span class=\"line\">.\\test_pack</span><br><span class=\"line\">.\\test_popen</span><br><span class=\"line\">.\\unable</span><br><span class=\"line\">.\\__pycache__</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 输出默认值 ..</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.pardir)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n<h3 id=\"path模块\"><a href=\"#path模块\" class=\"headerlink\" title=\"path模块\"></a>path模块</h3><p>os.path 模块主要用于获取文件的属性。<br>以下是 os.path 模块的几种常用方法：  </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">os.path.<code>abspath</code>(path)</td>\n<td style=\"text-align:left\">返回绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>basename</code>(path)</td>\n<td style=\"text-align:left\">返回文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>commonprefix</code>(list)</td>\n<td style=\"text-align:left\">返回list(多个路径)中，所有path共有的最长的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>dirname</code>(path)</td>\n<td style=\"text-align:left\">返回文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>exists</code>(path)</td>\n<td style=\"text-align:left\">路径存在则返回True,路径损坏返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expanduser</code>(path)</td>\n<td style=\"text-align:left\">把path中包含的”~”和”~user”转换成用户目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expandvars</code>(path)</td>\n<td style=\"text-align:left\">根据环境变量的值替换path中包含的”$name”和”${name}”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getatime</code>(path)</td>\n<td style=\"text-align:left\">返回最近访问时间（浮点型秒数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getmtime</code>(path)</td>\n<td style=\"text-align:left\">返回最近文件修改时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getctime</code>(path)</td>\n<td style=\"text-align:left\">返回文件 path 创建时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getsize</code>(path)</td>\n<td style=\"text-align:left\">返回文件大小，如果文件不存在就返回错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isabs</code>(path)</td>\n<td style=\"text-align:left\">判断是否为绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isfile</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isdir</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>islink</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>ismount</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为挂载点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>join</code>(path1[, path2[, …]])</td>\n<td style=\"text-align:left\">把目录和文件名合成一个路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normcase</code>(path)</td>\n<td style=\"text-align:left\">转换path的大小写和斜杠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normpath</code>(path)</td>\n<td style=\"text-align:left\">规范path字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>realpath</code>(path)</td>\n<td style=\"text-align:left\">返回path的真实路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>relpath</code>(path[, start])</td>\n<td style=\"text-align:left\">从start开始计算相对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samefile</code>(path1, path2)</td>\n<td style=\"text-align:left\">判断目录或文件是否相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>sameopenfile</code>(fp1, fp2)</td>\n<td style=\"text-align:left\">判断fp1和fp2是否指向同一文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samestat</code>(stat1, stat2)</td>\n<td style=\"text-align:left\">判断stat tuple stat1和stat2是否指向同一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>split</code>(path)</td>\n<td style=\"text-align:left\">把路径分割成 dirname 和 basename，返回一个元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitdrive</code>(path)</td>\n<td style=\"text-align:left\">一般用在 windows 下，返回驱动器名和路径组成的元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitext</code>(path)</td>\n<td style=\"text-align:left\">分割路径中的文件名与拓展名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>walk</code>(path, visit, arg)</td>\n<td style=\"text-align:left\">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>supports_unicode_filenames</code></td>\n<td style=\"text-align:left\">设置是否支持unicode路径名</td>\n</tr>\n</tbody>\n</table>\n</div>\n<!--TODO: ### os.open()与open()的区别 -->\n<!--TODO: ### os.popen()与os.system()的区别 -->\n<hr>\n<h2 id=\"Python错误与异常处理\"><a href=\"#Python错误与异常处理\" class=\"headerlink\" title=\"Python错误与异常处理\"></a>Python错误与异常处理</h2><p>Python有两种错误：语法错误和异常。<br>Python <a href=\"#assert-断言\">assert</a>（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。</p>\n<h3 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h3><p>Python 的语法错误或者称之为解析错，会报出以下的错误：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\">             ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">               ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p>如上，程序会报出语法错误<code>SyntaxError</code>，后面跟着的是错误的提示信息。<br>语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。<br>大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * (<span class=\"number\">1</span>/<span class=\"number\">0</span>)             <span class=\"comment\"># 0 不能作为除数，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4</span> + spam*<span class=\"number\">3</span>             <span class=\"comment\"># spam 未定义，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;spam&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;2&#x27;</span> + <span class=\"number\">2</span>               <span class=\"comment\"># int 不能与 str 相加，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n<p>异常类型和异常信息会显示出来，例子中的异常类型有：<code>ZeroDivisionError</code>、<code>NameError</code>、<code>TypeError</code><br>程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。<br>程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>异常处理的格式是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;</span><br><span class=\"line\"><span class=\"keyword\">except</span> [ErrorType]:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">[...</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">]</span><br><span class=\"line\">[<span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>异常处理的工作流程如下：</p>\n<ul>\n<li>try代码块为要执行的代码，被先执行;</li>\n<li>如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;</li>\n<li>如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;</li>\n<li>如果try代码块没有产生异常则执行else代码块(如果有);</li>\n<li>最后执行finally代码块, finally 语句无论异常是否发生都会执行。</li>\n</ul>\n<blockquote>\n<p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">except</span> (RuntimeError, TypeError, NameError):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p>python使用raise关键字向上层抛出异常:  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。<br>raise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。<br>raise后面如果不跟具体异常，这样会向上抛出<code>RuntimeError</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>异常输出：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span> , line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">raise</span></span><br><span class=\"line\">RuntimeError: No active exception to reraise</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h3><p>用户可以通过<a href=\"#继承\">继承</a>Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span>(<span class=\"params\">Exception</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">repr</span>(self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> MyError(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> MyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error code:&quot;</span>, e.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> MyError(<span class=\"string\">&quot;MyError&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码的输出结果为：  </p>\n<blockquote>\n<p>error code: 0<br>Traceback (most recent call last):<br>  File “&lt;stdin&gt;”, line 14, in &lt;module&gt;<br>    raise MyError(“MyError”)<br>__main__.MyError: ‘MyError’  </p>\n<p>大多数的异常的名字都以”Error”结尾，就跟标准的异常命名一样。</p>\n</blockquote>\n<h3 id=\"assert-断言\"><a href=\"#assert-断言\" class=\"headerlink\" title=\"assert(断言)\"></a>assert(断言)</h3><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。<br>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  </p>\n<p>语法格式为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>assert 后面也可以紧跟参数:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression [, arguments]</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure></p>\n<p>下面是实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正常运行&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure></p>\n<p>带参数的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br><span class=\"line\">AssertionError: <span class=\"number\">1</span>大于<span class=\"number\">2</span>是错误的</span><br></pre></td></tr></table></figure>\n<p>以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">assert</span> (<span class=\"string\">&#x27;linux&#x27;</span> <span class=\"keyword\">in</span> sys.platform), <span class=\"string\">&quot;该代码只能在 Linux 下执行&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来要执行的代码</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"with关键字\"><a href=\"#with关键字\" class=\"headerlink\" title=\"with关键字\"></a>with关键字</h3><p>Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。<br>with 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。<br>在处理文件对象时使用 with 关键字是一种很好的做法。<br>我们可以看下以下几种代码实例：<br>不使用 with，也不使用 try…except…finally<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure></p>\n<p>以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。</p>\n<p>使用 with 关键字：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。<br>我们可以在执行 with 关键字后检验文件是否关闭：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.closed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.closed)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码输出结果为：  </p>\n<blockquote>\n<p>False<br>True</p>\n</blockquote>\n<p>with 语句实现原理建立在上下文管理器之上。<br>上下文管理器是一个实现 __enter__ 和 __exit__ 方法的类。<br>使用 with 语句确保在嵌套块的末尾调用 __exit__ 方法。<br>这个概念类似于 try…finally 块的使用。</p>\n<blockquote>\n<p>在文件对象中定义了 __enter__ 和 __exit__ 方法，即文件对象也实现了上下文管理器，首先调用 __enter__ 方法，然后执行 with 语句中的代码，最后调用 __exit__ 方法。 即使出现错误，也会调用 __exit__ 方法，也就是会关闭文件流。</p>\n</blockquote>\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n<hr>\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<hr>\n<h2 id=\"Python内置函数\"><a href=\"#Python内置函数\" class=\"headerlink\" title=\"Python内置函数\"></a>Python内置函数</h2><!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n<h3 id=\"abs\"><a href=\"#abs\" class=\"headerlink\" title=\"abs()\"></a>abs()</h3><p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>1.0<br>5.0<br>0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format()\"></a>format()</h3><p>format 基本语法是通过 {} 和 : 来代替以前的 % 。 </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li><em>args/*</em>kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>返回格式化后的字符串</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>hello<br>world hello world<br>网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>value 为: 13<br>value 为: 13<br>a 元素对应的位置是 {0}  </p>\n</blockquote>\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n<p><strong><em>还可以使用format函数进行数字格式化</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n<hr>\n<h3 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"len()\"></a>len()</h3><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>返回对象长度。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>0<br>9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max()\"></a>max()</h3><p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>6<br>s<br>6<br>[1, 3, 4]<br>[2, 1, 9, 4]<br>babc</p>\n<p>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"min()\"></a>min()</h3><p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列  </li>\n</ul>\n<p><strong>返回值：</strong><br>返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1<br>-1<br>a<br>1<br>[1, 2, 6]<br>[1, 2, 6, 5, 3]<br>abcd<br>True<br>1<br>False<br>0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  </p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。  </p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#数值比较\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\"><a href=\"#pow\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8<br>15.625<br>0</p>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>精度要求高的，不建议使用该函数。    </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>10<br>11<br>1.53<br>1.6<br>1.32<br>0<br>-1.24<br>-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple()\"></a>tuple()</h3><p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-os模块方法\"><a href=\"#Python-os模块方法\" class=\"headerlink\" title=\"Python os模块方法\"></a>Python os模块方法</h2><hr>\n<h2 id=\"Python-math模块方法\"><a href=\"#Python-math模块方法\" class=\"headerlink\" title=\"Python math模块方法\"></a>Python math模块方法</h2><!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"acos\"><a href=\"#acos\" class=\"headerlink\" title=\"acos()\"></a>acos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"asin\"><a href=\"#asin\" class=\"headerlink\" title=\"asin()\"></a>asin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"atan\"><a href=\"#atan\" class=\"headerlink\" title=\"atan()\"></a>atan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"ceil\"><a href=\"#ceil\" class=\"headerlink\" title=\"ceil()\"></a>ceil()</h3><p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回上入整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>5<br>-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\"><a href=\"#cos\" class=\"headerlink\" title=\"cos()\"></a>cos()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"degress\"><a href=\"#degress\" class=\"headerlink\" title=\"degress()\"></a>degress()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp()\"></a>exp()</h3><p>exp()方法返回x的指数,e^x。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的指数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>2.718281828459045<br>23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\"><a href=\"#fabs\" class=\"headerlink\" title=\"fabs()\"></a>fabs()</h3><p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>1.2<br>1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回下舍整数  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>4<br>-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log()\"></a>log()</h3><p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>0.0<br>1.0<br>2.0<br>1.892789260714372</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\"><a href=\"#log10\" class=\"headerlink\" title=\"log10()\"></a>log10()</h3><p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\"><a href=\"#modf\" class=\"headerlink\" title=\"modf()\"></a>modf()</h3><p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>(-0.52, -1.0)<br>(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-1\"><a href=\"#pow-1\" class=\"headerlink\" title=\"pow()\"></a>pow()</h3><p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回x的y次方值</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>8.0<br>15.625</p>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\"><a href=\"#radians\" class=\"headerlink\" title=\"radians()\"></a>radians()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sin\"><a href=\"#sin\" class=\"headerlink\" title=\"sin()\"></a>sin()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h3 id=\"sqrt\"><a href=\"#sqrt\" class=\"headerlink\" title=\"sqrt()\"></a>sqrt()</h3><p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>返回数字x的平方根。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\"><a href=\"#tan\" class=\"headerlink\" title=\"tan()\"></a>tan()</h3><p>xxxxxxxxxx</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  </li>\n</ul>\n<p><strong>返回值：</strong>  </p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n</blockquote>\n<hr>\n<h2 id=\"Python-random模块方法\"><a href=\"#Python-random模块方法\" class=\"headerlink\" title=\"Python random模块方法\"></a>Python random模块方法</h2><blockquote>\n<p>导入模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"choice\"><a href=\"#choice\" class=\"headerlink\" title=\"choice()\"></a>choice()</h3><p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个随机项</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random()\"></a>random()</h3><p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>无  </p>\n<p><strong>返回值：</strong><br>返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"randrange\"><a href=\"#randrange\" class=\"headerlink\" title=\"randrange()\"></a>randrange()</h3><p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"seed\"><a href=\"#seed\" class=\"headerlink\" title=\"seed()\"></a>seed()</h3><p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。  </p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>无</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>使用默认种子生成随机数： 0.20706442655860602<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用整数 10 种子生成随机数： 0.5714025946899135<br>使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle()\"></a>shuffle()</h3><p>将序列的所有元素随机排序</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>lst :  列表 </li>\n</ul>\n<p><strong>返回值：</strong><br>返回None</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行后的输出结果为：  </p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\"><a href=\"#uniform\" class=\"headerlink\" title=\"uniform()\"></a>uniform()</h3><p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：  </p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong>  </p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\"><a href=\"#Python常见问题\" class=\"headerlink\" title=\"Python常见问题\"></a>Python常见问题</h2><h3 id=\"float精度问题\"><a href=\"#float精度问题\" class=\"headerlink\" title=\"float精度问题\"></a>float精度问题</h3><p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\"><a href=\"#round-关于四舍五入不成功的问题\" class=\"headerlink\" title=\"round()关于四舍五入不成功的问题\"></a>round()关于四舍五入不成功的问题</h3><p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。<br> <!-- TODO:round精度问题补全  --><br>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n<hr>\n<h3 id=\"str-和repr-的区别\"><a href=\"#str-和repr-的区别\" class=\"headerlink\" title=\"str()和repr()的区别\"></a>str()和repr()的区别</h3>"}],"PostAsset":[{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","slug":"dp1.png","post":"ckzia53ht0001owvo9hng3xi3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","slug":"bulbswitcher.jpg","post":"ckzia53i10007owvo1tl29fq0","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","slug":"bglinecanvas.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","slug":"dark.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","slug":"langcn.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","slug":"langen.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","slug":"light.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","slug":"livemylife-desktop.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","slug":"mouseclick.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","slug":"ribbon.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","slug":"top.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","slug":"wave.png","post":"ckzia53i8000fowvodm9z6w3q","modified":0,"renderable":0},{"_id":"source/_posts/cn/MarkDown-Base/title.png","slug":"title.png","post":"ckzia53i9000gowvo0mfg2iws","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/break-continue.jpg","slug":"break-continue.jpg","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/function-1.png","slug":"function-1.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/if-1.png","slug":"if-1.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/if-2.png","slug":"if-2.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/loop-1.jpg","slug":"loop-1.jpg","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/module-1.png","slug":"module-1.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw-problem.png","slug":"rw-problem.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rwa-1.png","slug":"rwa-1.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw_test_1.png","slug":"rw_test_1.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw_test_2.png","slug":"rw_test_2.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/solute.png","slug":"solute.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode-2.png","slug":"vscode-2.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode-3.png","slug":"vscode-3.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode.png","slug":"vscode.png","post":"ckzia53iu001lowvogfzyc66b","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-1.png","slug":"漏斗分析法-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-2.png","slug":"漏斗分析法-2.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-1.png","slug":"矩阵分析法-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-2.png","slug":"矩阵分析法-2.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/ABC分析法.png","slug":"ABC分析法.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-1.png","slug":"杜邦分析法-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-2.png","slug":"杜邦分析法-2.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/power_query.png","slug":"power_query.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/制造业-1.png","slug":"制造业-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/物流业-1.png","slug":"物流业-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/表格概述.png","slug":"表格概述.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-2.png","slug":"零售业-2.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-1.png","slug":"零售业-1.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-3.png","slug":"零售业-3.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-4.png","slug":"零售业-4.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-5.png","slug":"零售业-5.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-6.png","slug":"零售业-6.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/power_pivot.png","slug":"power_pivot.png","post":"ckzia53i4000bowvo2ysi7e4q","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckzia53i4000bowvo2ysi7e4q","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53id000kowvo0khnaw0m"},{"post_id":"ckzia53i9000gowvo0mfg2iws","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53ie000oowvo3gu42ckb"},{"post_id":"ckzia53ib000jowvohy63343p","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53if000qowvo9lkbekwp"},{"post_id":"ckzia53ht0001owvo9hng3xi3","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53if000uowvo2f58b6a5"},{"post_id":"ckzia53ht0001owvo9hng3xi3","category_id":"ckzia53ia000howvo9eol3she","_id":"ckzia53ig000vowvog1w17ml9"},{"post_id":"ckzia53i10007owvo1tl29fq0","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53ih000zowvobhobbsd0"},{"post_id":"ckzia53i10007owvo1tl29fq0","category_id":"ckzia53ia000howvo9eol3she","_id":"ckzia53ij0013owvo6ya6huvz"},{"post_id":"ckzia53i8000fowvodm9z6w3q","category_id":"ckzia53ie000mowvog0lpbvb7","_id":"ckzia53im0017owvo5f2578zf"},{"post_id":"ckzia53i8000fowvodm9z6w3q","category_id":"ckzia53ih0011owvo1j7bbija","_id":"ckzia53io0019owvoc6lu5gpz"},{"post_id":"ckzia53id000lowvo074d99l2","category_id":"ckzia53ig000wowvo67bpb19m","_id":"ckzia53ip001cowvobh2o59tn"},{"post_id":"ckzia53id000lowvo074d99l2","category_id":"ckzia53ij0014owvod3oja4jw","_id":"ckzia53ip001eowvobbci5wge"},{"post_id":"ckzia53iu001lowvogfzyc66b","category_id":"ckzia53hz0004owvo2neb1i4t","_id":"ckzia53ix001nowvo3avte4qz"}],"PostTag":[{"post_id":"ckzia53ht0001owvo9hng3xi3","tag_id":"ckzia53i00005owvoaivwfrc7","_id":"ckzia53i8000eowvo8hq55r94"},{"post_id":"ckzia53i10007owvo1tl29fq0","tag_id":"ckzia53i00005owvoaivwfrc7","_id":"ckzia53ie000powvo40ye5ppi"},{"post_id":"ckzia53i10007owvo1tl29fq0","tag_id":"ckzia53ib000iowvo6ere6m0z","_id":"ckzia53if000rowvo97yf5s5h"},{"post_id":"ckzia53i4000bowvo2ysi7e4q","tag_id":"ckzia53ie000nowvo9xxt7mvf","_id":"ckzia53ig000yowvo9bv400at"},{"post_id":"ckzia53i4000bowvo2ysi7e4q","tag_id":"ckzia53if000towvo424nao4r","_id":"ckzia53ih0010owvo5j6l1ip2"},{"post_id":"ckzia53i8000fowvodm9z6w3q","tag_id":"ckzia53ig000xowvo3hipde1l","_id":"ckzia53im0018owvo9a6z09k4"},{"post_id":"ckzia53i8000fowvodm9z6w3q","tag_id":"ckzia53ii0012owvoe0zu79uo","_id":"ckzia53io001aowvo3pcvhdan"},{"post_id":"ckzia53i8000fowvodm9z6w3q","tag_id":"ckzia53ij0015owvodzys6f8a","_id":"ckzia53ip001dowvoe2meahk1"},{"post_id":"ckzia53i9000gowvo0mfg2iws","tag_id":"ckzia53ik0016owvob6za4bog","_id":"ckzia53ip001fowvoaehp5nhh"},{"post_id":"ckzia53ib000jowvohy63343p","tag_id":"ckzia53io001bowvode834bdm","_id":"ckzia53ip001howvo84de1wd3"},{"post_id":"ckzia53id000lowvo074d99l2","tag_id":"ckzia53ii0012owvoe0zu79uo","_id":"ckzia53iq001jowvo0tgjcptv"},{"post_id":"ckzia53id000lowvo074d99l2","tag_id":"ckzia53iq001iowvo84ts472n","_id":"ckzia53iq001kowvoa00v9jw3"},{"post_id":"ckzia53iu001lowvogfzyc66b","tag_id":"ckzia53iw001mowvohfi532kv","_id":"ckzia53ix001oowvocid0261i"}],"Tag":[{"name":"Algorithm","_id":"ckzia53i00005owvoaivwfrc7"},{"name":"Leetcode","_id":"ckzia53ib000iowvo6ere6m0z"},{"name":"Date Analysis","_id":"ckzia53ie000nowvo9xxt7mvf"},{"name":"Excel","_id":"ckzia53if000towvo424nao4r"},{"name":"Hexo-Theme-LiveMyLife","_id":"ckzia53ig000xowvo3hipde1l"},{"name":"Hexo","_id":"ckzia53ii0012owvoe0zu79uo"},{"name":"Tutorials","_id":"ckzia53ij0015owvodzys6f8a"},{"name":"markdown","_id":"ckzia53ik0016owvob6za4bog"},{"name":"Unity","_id":"ckzia53io001bowvode834bdm"},{"name":"Blog","_id":"ckzia53iq001iowvo84ts472n"},{"name":"Python","_id":"ckzia53iw001mowvohfi532kv"}]}}