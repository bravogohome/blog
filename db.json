{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/langselect.js","path":"js/langselect.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/mouseclick.js","path":"js/mouseclick.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","path":"js/comment/gitalk_.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/LICENSE","path":"LICENSE","modified":0,"renderable":0},{"_id":"source/img/avatar/maid.jpg","path":"img/avatar/maid.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/GRIS.png","path":"img/avatar/GRIS.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404_bg.jpg","path":"img/header_img/404_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg.jpg","path":"img/header_img/archive_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg2.jpg","path":"img/header_img/archive_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg3.jpg","path":"img/header_img/archive_bg3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/categories_bg.jpg","path":"img/header_img/categories_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg.jpg","path":"img/header_img/lml_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg8.jpg","path":"img/header_img/lml_bg8.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/newhome_bg.jpg","path":"img/header_img/newhome_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/nier.png","path":"img/header_img/nier.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag_bg.jpg","path":"img/header_img/tag_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/signature.png","path":"img/signature/signature.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"ec2d37d705a85fa3eaf6f32af4c8962f5c7ef230","modified":1635750784862},{"_id":"source/CNAME","hash":"12620253467e3de4d981ee37df67dc3902ceb005","modified":1650260464105},{"_id":"source/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1635750784863},{"_id":"source/about/index.md","hash":"ebcee64c6d2649570d9d5daba1384277359cb0bc","modified":1642647920993},{"_id":"source/categories/index.md","hash":"3d5db5dcead0a4f2f8605d1cd2db6df3e8e7e4db","modified":1635750784975},{"_id":"source/archive/index.md","hash":"8e6b2d065236ab2c87866faaedfc4b902a558752","modified":1642647934227},{"_id":"source/_posts/cn/ACGN-Recommendation.md","hash":"96ab50dadb8aae2319970e1686be85dd6977eadf","modified":1642820172547},{"_id":"source/tags/index.md","hash":"52e3cad1bc1fb97f9429d4b5053ab97dc6cf22e8","modified":1635750785517},{"_id":"source/_posts/cn/Algorithm.md","hash":"60190684772be96596d0fd7a400c515336813665","modified":1646283718040},{"_id":"source/_posts/cn/Algorithm-Note.md","hash":"404dba28820d52b33b4c37b0b2a9ec19b7da967c","modified":1645267508524},{"_id":"source/_posts/cn/Django-Note.md","hash":"a6c9517ddafd58ec8c9a6464f5e40b470749d4e8","modified":1653312155737},{"_id":"source/_posts/cn/Data-Analysis-Note.md","hash":"e28ac52c2f3d81c8aede1c0bf24c286615875222","modified":1645267529106},{"_id":"source/_posts/cn/Existentialism.md","hash":"6dc731c3dbc7d0aa247e0f8f428e51133cf9efed","modified":1642820135145},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife.md","hash":"782f71ed413216da1e54475cf175b48258940d9e","modified":1636340584138},{"_id":"source/_posts/cn/MarkDown-Base.md","hash":"57cdc7600050666f0b52790c7a432a2ca6f456e6","modified":1645267542617},{"_id":"source/_posts/cn/Microsoft-E5.md","hash":"71a608b25f23b201d2806921d160df0bb63bfe20","modified":1655481468090},{"_id":"source/_posts/cn/Unity-Study-Note.md","hash":"d1349a75ba73bd13e46ac42803077ca770d05056","modified":1645267550929},{"_id":"source/_posts/cn/hexo-for-building-blog.md","hash":"af56e9aef1337bdc73f760e6b051ff06a220127e","modified":1636340575048},{"_id":"source/_posts/cn/MongoDB.md","hash":"38b482074e2fb7ca20a0357156d9043b12ac31b5","modified":1648372293881},{"_id":"source/_posts/cn/regex.md","hash":"72b16c2a6f4a423eba4c7ce63dad3e95a82f4f21","modified":1645511675382},{"_id":"source/_posts/cn/mvc-and-mvt.md","hash":"39bbdd58df3ca2470ecafa5103144d60f7dd7ece","modified":1650263319466},{"_id":"source/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1635758222043},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1636952969235},{"_id":"source/_posts/cn/Django-Note/Django-env10.png","hash":"6f740e0572ccbe907bfe1b948a3e4c171a0445d4","modified":1650264017704},{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1636684773421},{"_id":"source/_posts/cn/Django-Note/django-orm1.png","hash":"7e66c4620c081c0ab1efc9cd25bc0e60cf878724","modified":1650364861373},{"_id":"source/_posts/cn/Django-Note/hello.png","hash":"c6669c0d087f607c8ecc8c3e0c4d3dc0f51d2d6e","modified":1650267490654},{"_id":"source/_posts/cn/Django-Note/orm-object.png","hash":"c272528558c72ef4a6f24a35289a0f4b5980767b","modified":1650468550343},{"_id":"source/_posts/cn/Django-Note/django_init.png","hash":"ee98db02ac26be1f9bbf6b5e65c6e82c7e010c4c","modified":1650265547160},{"_id":"source/_posts/cn/Django-Note/pycharm01.png","hash":"7982b3da2ffd34b0e84f1b50af2f257504611faf","modified":1650265094338},{"_id":"source/_posts/cn/Django-Note/startapp.png","hash":"322e85eedc5b3072815a60d88c983ab1934c3921","modified":1650264923831},{"_id":"source/_posts/cn/Data-Analysis-Note/power_query.png","hash":"c3d4ec5539d8b44f5d665199388c5c09acf99a54","modified":1644815814131},{"_id":"source/_posts/cn/Data-Analysis-Note/利润和价格的关系.png","hash":"49a85422e814c2b62a0e430837c0a28208480ed6","modified":1644909452222},{"_id":"source/_posts/cn/Data-Analysis-Note/市场运营节奏.png","hash":"1bd118632b594594062fde56a74dfeef78bcdd8f","modified":1644905712179},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-1.png","hash":"02dbac1d2059f374048e596be3b67d6dad8487b6","modified":1644676512451},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-1.png","hash":"cd5ea8154d884cec1cfd1fd3c9209eaa27f783f5","modified":1644657305912},{"_id":"source/_posts/cn/Data-Analysis-Note/组合图.png","hash":"8d718493ea4d9f2c50ede5b375d21f1a2a661962","modified":1644905977888},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-2.png","hash":"5c2da234543e4c04b66ebbdbec4bffac2a0603cd","modified":1644675141767},{"_id":"source/_posts/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1635860346064},{"_id":"source/_posts/cn/MongoDB/Figure-1-Mapping-Table-to-Collection-1.png","hash":"93ce5312fc7bfebd03305e601c613d1bd1b6acc9","modified":1647954120098},{"_id":"source/_posts/cn/MongoDB/ObjectId.jpeg","hash":"8de75bc8900e1357f1aac8f358569f0a38adff1c","modified":1648016913780},{"_id":"source/_posts/cn/MongoDB/mongodb分片集群结构分布.png","hash":"e8cf9a01d3bfd8335d60511f9cb5edaa5d54e031","modified":1648089223633},{"_id":"source/_posts/cn/MongoDB/mongodb复制原理.png","hash":"a7972fbaf81393df00ed7c69607eb7224e5c9ef6","modified":1648027654932},{"_id":"source/_posts/cn/Microsoft-E5/续期10.png","hash":"e2387a661277fa56ad747f39cb9d9e5b0784f2fd","modified":1655478845829},{"_id":"source/_posts/cn/Microsoft-E5/续期11.png","hash":"c9b1150e2317bafdf7b6ebe77864ff4778b1a58b","modified":1655478930082},{"_id":"source/_posts/cn/Microsoft-E5/续期12.png","hash":"752a95d8082eabc6a1931b2f92b3d441aa58e93b","modified":1655479009806},{"_id":"source/_posts/cn/Microsoft-E5/续期13.png","hash":"32c8c86956be5028e4512556f1774be84846228d","modified":1655479171078},{"_id":"source/_posts/cn/Microsoft-E5/续期9.png","hash":"70a5253342113bf562ac2f89daaf76552ac97d47","modified":1655478752638},{"_id":"source/_posts/cn/Microsoft-E5/设置沙盒域名.png","hash":"3ba95aec10a0a5d7a3e15e08496d29495d3b4508","modified":1655475647210},{"_id":"source/_posts/cn/Microsoft-E5/配置7.png","hash":"cc553fbb5808f6b10718dd77313464da4f1fcb73","modified":1655476755988},{"_id":"source/_posts/cn/Microsoft-E5/配置8.png","hash":"e330e709bcd6581f39a8ec349a6ae07a4d29fcf2","modified":1655476828105},{"_id":"source/_posts/cn/Python-Note/function-1.png","hash":"95c90eadd8bbfc252bb17f695f251e13a8e9a4d3","modified":1642653950982},{"_id":"source/_posts/cn/Python-Note/if-1.png","hash":"58f020a3434e82f1763053012e5c9772e4cc96ee","modified":1642560004679},{"_id":"source/_posts/cn/Python-Note/if-2.png","hash":"f8458dedf361a5a7551edfaf9d794859b2e39bb4","modified":1642561423740},{"_id":"source/_posts/cn/Python-Note/module-1.png","hash":"6e223869b3ec267929ec1ad18672a377f59b80be","modified":1642899507987},{"_id":"source/_posts/cn/Python-Note/loop-1.jpg","hash":"302acef8a0d975adc5b0c41b5b63a2a5c96cfb8d","modified":1642562446020},{"_id":"source/_posts/cn/Python-Note/rw-problem.png","hash":"e02f9a8b20127e7b95d81b58f01bb84fddfcf9f1","modified":1642926500892},{"_id":"source/_posts/cn/Python-Note/rw_test_1.png","hash":"683fef1be2681c7a18aaae9bc3d5dae8b678d7fe","modified":1642908746135},{"_id":"source/_posts/cn/Python-Note/rw_test_2.png","hash":"f53edef8d76dfa95a7e71aed4815bbeed5a37406","modified":1642908780387},{"_id":"source/_posts/cn/Python-Note/solute.png","hash":"340a8c0dcbbf69f4111c652a7567b2c081228591","modified":1642927466911},{"_id":"source/_posts/cn/Python-Note/vscode-2.png","hash":"d3fe40552bf0f09139a0bfe9e9ec292cc4690e74","modified":1642927020576},{"_id":"source/_posts/cn/Python-Note/vscode-3.png","hash":"a850c8189de1ca80b7c8efb13ab88a730e370ed3","modified":1642927375331},{"_id":"source/_posts/cn/Python-Note/vscode.png","hash":"ce3d3f996dbc5ebb5a7d53ab780e284c87862296","modified":1642926925446},{"_id":"source/_posts/cn/Python-Note/命名空间.png","hash":"2767711c67ccb639977c9cfcd983f117991fbc05","modified":1645404934912},{"_id":"source/_posts/cn/Python-Note/作用域.png","hash":"599f71c1c6800d9665910672a9bac35b3931d6e2","modified":1645406445783},{"_id":"source/_posts/cn/mvc-and-mvt/MTV-Diagram.png","hash":"42eef8575d6a35483983756dc4bb59066d7b9844","modified":1650263263134},{"_id":"source/_posts/cn/Python-Note/命名空间-2.png","hash":"49ab148deb94ce9031135d3d0f6e05d0dca82684","modified":1645405767547},{"_id":"source/_posts/cn/mvc-and-mvt/mvc.png","hash":"1e10ffdb86470c099ad6b89a9a5245abf1a9fbd9","modified":1650263035976},{"_id":"themes/livemylife/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1635750785518},{"_id":"themes/livemylife/_config.yml","hash":"cc81f0292e6d73b86b6722dafaf507cbb331d5d8","modified":1635759424354},{"_id":"themes/livemylife/languages/cn.yml","hash":"3f6dabd999e37bf792707c6defdce3cb4a552f70","modified":1635776423407},{"_id":"themes/livemylife/languages/default.yml","hash":"5bf3e178962cfd50f295753d64135278231bddb9","modified":1635757059893},{"_id":"themes/livemylife/languages/tw.yml","hash":"684153b0299e9cb68c13ddc545d36c140dcde107","modified":1635750785521},{"_id":"themes/livemylife/languages/en.yml","hash":"b43dba8933b68c4464f94ab94b4065e9955ce06b","modified":1635750785520},{"_id":"themes/livemylife/layout/404.ejs","hash":"053e99dad0f9810337b0a8f5037db2405683a83b","modified":1635750785522},{"_id":"themes/livemylife/layout/about.ejs","hash":"96eb2c91f8135302e1b0e2371a577ca5bdb5595b","modified":1635750785534},{"_id":"themes/livemylife/layout/archive.ejs","hash":"ca9f4f9e29e074ec0440b7dc02ebbc81dba9b2dd","modified":1635750785535},{"_id":"themes/livemylife/layout/index.ejs","hash":"3955abc1c16a14ad578957d9984c3798cdbcb64e","modified":1635750785536},{"_id":"themes/livemylife/layout/categories.ejs","hash":"fb7e7d769505f9185c4b1616343efa2d827e41c0","modified":1635750785535},{"_id":"themes/livemylife/layout/layout.ejs","hash":"5708ac135ff3d184eb37cb50c98184b715193021","modified":1635750785537},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"318a9826afd72fa68989cb79ba8cc96d0061afb0","modified":1635750785537},{"_id":"themes/livemylife/layout/post.ejs","hash":"3b31e4e200be31929ed09132d05a5a97e524f87c","modified":1635750785538},{"_id":"themes/livemylife/layout/page.ejs","hash":"333dce279f48b599b2f9d5928e882a36bf97b2e6","modified":1638186913164},{"_id":"themes/livemylife/layout/tags.ejs","hash":"cb6ee48772f4df9e1734a325248c7448f25cd7d0","modified":1636878735690},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"073df9003dc40e09af1c27438860c22d0bc8fe60","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"dd2336fddd77b83710aad3f3949328ea99438c25","modified":1635750785523},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"4598b83976fe15071b4a76d26dc499fe2a56dac0","modified":1635750785524},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"34c97132f17f3c31aabe6dfbc908f0650213e847","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"51f13e83031b2e14b4b6773b7f350bd34ac5807f","modified":1644577567649},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"a4ddbaf01edc3af4c10587b0c33cb07d43728628","modified":1635750785525},{"_id":"themes/livemylife/layout/_partial/langselect.ejs","hash":"e1e195de53d4b2a46dd9bdc163ba9174e06a3ad8","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"194a25ef321ea65578cf751db0b7677e0ee4ba42","modified":1635750785526},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"7a8256a4b43fb3726264bd5897fb861d02ef2418","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"d015b8ae6f5aebcd145a3b1bfa96744de66c86c1","modified":1635750785527},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"a827b1d5ffb695b80205bd1378234b9904c8308e","modified":1635750785529},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"b1e8ee7b9e5ae7c839edd3a41611bc743bc2092a","modified":1635750785528},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"d8915befc058d89a24320d72965c9bd2b4970a2c","modified":1635776405384},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"037cda2d5616ad5e62f8f668d6947cfe17f37a32","modified":1635776367303},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"1b50bdbc89731a0f04732aff9286ae945ecbe8b7","modified":1635750785529},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"ea9e5e50d32a80b25ba4323998e969a32b66b1d2","modified":1635750785532},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"0550c303a8e635408db9ae7175b63e940bd7055e","modified":1635750785530},{"_id":"themes/livemylife/layout/_partial/tip.ejs","hash":"62fc8b17f4661a2baa9357a311b4dd4bb792a138","modified":1635750785530},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"7b83d0287e467c11c8c9e434e9e4ce5c864b0980","modified":1635750785533},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"24671d81b25bce97245d8367c7e0c6b2d85955b6","modified":1635750785532},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"3a624aecb0c8893d8680d7bba81f9a9aa677ce4f","modified":1635750785534},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"a587f6a911ccd9e38335cb856a86bcc354e47b35","modified":1635750785534},{"_id":"themes/livemylife/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1635750785540},{"_id":"themes/livemylife/source/css/beantech.css","hash":"bce245c3c8de02a7fda56d2c3dfc4ac529fcfbba","modified":1635750785541},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"3e49635a4b5ba6bf3ca589113b87939a5ba8b4b3","modified":1636686823821},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"7db6da0d87a886cce86594e8c8566a0089ce4a7a","modified":1635750785545},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1635750785547},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1636686697768},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"646a634ac252896d9e9f4d322d782e69c66d65ae","modified":1635750785546},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"27c60a8f45ee2a31c2c6a096c513cdfb4a99a98a","modified":1635750785550},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ef16ea9eeb589e9334a0f071afb5f0cdaa34d69c","modified":1635750785551},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"678420a06065424080c22c2a9d2a7f501dac5ef2","modified":1635750785551},{"_id":"themes/livemylife/source/css/search.css","hash":"b8d680e4d9801774bf73784b31f372162d57e4e0","modified":1635750785552},{"_id":"themes/livemylife/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1635750785552},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"65d7309ed06fd6f7d6f24361742e89b35cbede81","modified":1636900539486},{"_id":"themes/livemylife/source/css/top.css","hash":"7fe7d9d4434fe2bb7178e0f43977b3869b5c0fdf","modified":1635750785553},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"bb52e4168e5b740d04bcabe3833f42e98f8037da","modified":1635750785554},{"_id":"themes/livemylife/source/css/wave.css","hash":"fb939f76dc9a48d3a7e7384f64943dac710ad452","modified":1635750785555},{"_id":"themes/livemylife/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1635750785555},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1635750785556},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1635750785558},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1635750785559},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1635750785559},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1635750785561},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1635750785572},{"_id":"themes/livemylife/source/js/catalog.js","hash":"4e34f47053ece8c1a4ab4a8441760a3d33ea9fb8","modified":1635750785562},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1635750785573},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1635750785577},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1635750785578},{"_id":"themes/livemylife/source/js/mouseclick.js","hash":"8353161e1cb3446f4647908441b8e2fc1e49aaac","modified":1635750785580},{"_id":"themes/livemylife/source/js/langselect.js","hash":"6438d00cd2d9770ec48ab453aba12fa5ace986ed","modified":1635750785578},{"_id":"themes/livemylife/source/js/line.js","hash":"ffccb7e8713746af8d1f10b1b194c69090429e21","modified":1635750785579},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","hash":"75449860641e0ca475b1e7b5595851cc6e640722","modified":1635750785580},{"_id":"themes/livemylife/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1635750785581},{"_id":"themes/livemylife/source/js/scroll.js","hash":"182250b3bee27de24099863f0973bb7971405464","modified":1635750785581},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"f61a11e60be24cf0c64019ca4dc4dc49c325ed71","modified":1635750785584},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1635750785548},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1635750785549},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1635750785550},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"3955cbca226b562f8dec96dc459ce22363affdde","modified":1635750785582},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"b09fff2aa41305e8975b9ef80514eb937ffa6866","modified":1635750785583},{"_id":"source/_posts/cn/Django-Note/Django-env6.png","hash":"cdafebf004273bd241afe10718d383b61eec5b59","modified":1650264346690},{"_id":"source/_posts/cn/Data-Analysis-Note/QuickBI-2.png","hash":"356a2937ba0062fde047757f93bd2512fee21db8","modified":1644901157538},{"_id":"source/_posts/cn/Django-Note/Django-env9.png","hash":"c00a0f2b25d6b37303684661024d1f7bd1bda029","modified":1650264085675},{"_id":"source/_posts/cn/Data-Analysis-Note/ABC分析法.png","hash":"dc68024892cc5895b053c9701f804575e26178e2","modified":1644675663266},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺商品分析.png","hash":"2a93187df1fbd411392778780bca4fec6f5f137d","modified":1644910495862},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺品类结构分析.png","hash":"56ca59899fec56ba3dd17dccf76fdf8aa7dd1b15","modified":1644910397321},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺推广分析.png","hash":"018e6794ae05915ea6f70fbd4589044739d84390","modified":1644910248529},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺销售额预测.png","hash":"618db45d4a3ac270adbb748a359c54cb41907849","modified":1644909927964},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-2.png","hash":"f32dc80c7725672c2e7633b170c0e7b1d20e4154","modified":1644677100820},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-2.png","hash":"ac972ff009c5a308ca34b672c3454e93ce9bb3c5","modified":1644655506667},{"_id":"source/_posts/cn/Data-Analysis-Note/盈亏平衡点.png","hash":"d93fbdcc10965d9d3b9b0f33fdf51bd6bed54221","modified":1644901600656},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺客群分析.png","hash":"d2d780a917a7041e047dc716d9ea2084c5ab617d","modified":1644910579696},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-2.png","hash":"f65ece1d1b276e0fe42a6bd7294b4434574a8bbe","modified":1644734043348},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1635750784875},{"_id":"source/_posts/cn/Data-Analysis-Note/盈亏预测计算.png","hash":"596ee71681436fd6a26c43607e326813205ec0a1","modified":1644902335919},{"_id":"source/_posts/cn/Microsoft-E5/加入1.png","hash":"aeb75ba937bbb7d5525af11371689dd150601479","modified":1655475119675},{"_id":"source/_posts/cn/Microsoft-E5/加入2.png","hash":"92b2aa74a56d9ae1e01fa4981fe04f9a012ada67","modified":1655475297443},{"_id":"source/_posts/cn/Microsoft-E5/加入3.png","hash":"18f03f5ad6dca1fcd33de12218592decf175b0bc","modified":1655475376778},{"_id":"source/_posts/cn/Microsoft-E5/续期3.png","hash":"e21cc84f63fd87a66dc05c0f64f70bb3c6e4732e","modified":1655477675822},{"_id":"source/_posts/cn/Microsoft-E5/续期4.png","hash":"ca0f9bf9523674876ecb600be4996fe1d8cac709","modified":1655477904618},{"_id":"source/_posts/cn/Microsoft-E5/订阅成功.png","hash":"c793b1c7a338095e49ff94bd2384cc688f1c6ce1","modified":1655475829838},{"_id":"source/_posts/cn/Microsoft-E5/配置1.png","hash":"10d3b493e2dd442f09f5971391e07f603afa2de1","modified":1655476067554},{"_id":"source/_posts/cn/Microsoft-E5/配置2.png","hash":"52fd170b010799cf37e2d5e1a5c554e75270bd11","modified":1655476179516},{"_id":"source/_posts/cn/Microsoft-E5/配置5.png","hash":"6a6382950cd295ce3a34ffab41d95fc601103449","modified":1655476491057},{"_id":"source/_posts/cn/Microsoft-E5/配置6.png","hash":"1d4e9b9863d2854fd03857e20fb469d043c04c8b","modified":1655476518505},{"_id":"source/_posts/cn/Microsoft-E5/配置4.png","hash":"6289a47b3bbf54e0b04f2b1ab0e306e3eb32956e","modified":1655476361158},{"_id":"source/_posts/cn/Python-Note/break-continue.jpg","hash":"cd0ebebf29284fed29dfe884d31201eef3755017","modified":1642563745140},{"_id":"source/_posts/cn/Python-Note/rwa-1.png","hash":"a04a957ead000b95f588c76030f6fff7272b43c4","modified":1642907140883},{"_id":"source/_posts/cn/Python-Note.md","hash":"ac9d7d463b0d6434051a62a576cba139bf618ed9","modified":1650255980035},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"c3d5b799e43c9b400ce8ca8831754da6c17c4126","modified":1636686912729},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1635750785557},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1635750785561},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1635750785577},{"_id":"source/_posts/cn/mvc-and-mvt/mvt.png","hash":"8377a186d789c015dd0594368667ca5543a91c7c","modified":1650263297096},{"_id":"source/_posts/cn/Data-Analysis-Note/power_pivot.png","hash":"dbd5f3158e235002b2a8c59a857fb6785d5a0a0d","modified":1644816217609},{"_id":"source/_posts/cn/Data-Analysis-Note/变动成本.png","hash":"fb3b90eb491787c4e6b4e2ba258c81042f47efbb","modified":1644902067846},{"_id":"source/_posts/cn/Data-Analysis-Note/制造业-1.png","hash":"9998ab0c741f23289766bd639a243200ccb6bc58","modified":1644735251550},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺流量分析.png","hash":"36022d645a1696a105dc38d87fc9d96b117028c8","modified":1644910052714},{"_id":"source/_posts/cn/Data-Analysis-Note/固定成本.png","hash":"976807649611a48637b1a2fb02ca4f6fbf3308b2","modified":1644901775162},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-1.png","hash":"b8dff998289c507c41c6c04752fc2eea7fad7c9b","modified":1644654968276},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺诊断指标拆解.png","hash":"0a4688c7f960f10af4c7220227ed6929ec3d6e35","modified":1644910752097},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-5.png","hash":"6387435651122b01705ec74d37d564b3b64c6cc3","modified":1644734630420},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-1.png","hash":"504bb65212e023aee7f8008242e39f5d221df988","modified":1644733766486},{"_id":"source/_posts/cn/Microsoft-E5/续期1.png","hash":"6cd423ae02e149fba64d72861d3347feb2cfc70c","modified":1655477407473},{"_id":"source/_posts/cn/Microsoft-E5/续期2.png","hash":"1b1a211d897d6e2354ab4055de2ecc77ff34bb1b","modified":1655477594689},{"_id":"source/_posts/cn/Microsoft-E5/续期8.png","hash":"30b6f8fee13f0d384967106caed0bbcb82989370","modified":1655478629013},{"_id":"source/_posts/cn/Microsoft-E5/配置3.png","hash":"757b025d75cfff1046f498e07104fa6678c2b697","modified":1655476249357},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1635750785543},{"_id":"source/_posts/cn/Data-Analysis-Note/物流业-1.png","hash":"04e96ffda4a579d0c763cf4ba14f8ed589ad19eb","modified":1644735417482},{"_id":"source/_posts/cn/Data-Analysis-Note/表格概述.png","hash":"5760d8acea0a4c5c7d3c8536039f3f3d684ad642","modified":1644815362670},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-3.png","hash":"d10ad2dd87424bff20330eac9d2c8751002407dd","modified":1644734196043},{"_id":"source/_posts/cn/Microsoft-E5/续期7.png","hash":"bde5c245955af20a9aa63ac6dcddf4bb3a50934e","modified":1655478445409},{"_id":"source/_posts/cn/Microsoft-E5/设置沙盒.png","hash":"156b3ad92306a865537da1d5a57a0e7865e8e421","modified":1655475421200},{"_id":"themes/livemylife/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1635750785576},{"_id":"source/_posts/cn/Data-Analysis-Note/QuickBI.png","hash":"fd164513ef3db4554b5101789020aa3badd46ce5","modified":1644900856129},{"_id":"source/_posts/cn/Data-Analysis-Note/数据透视表.png","hash":"83a817deb51faa7b0a34e1720f35c7b53251c328","modified":1644836897976},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-4.png","hash":"09c0f9258e3707620cebdbf4997a944bee1fbb34","modified":1644734547933},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-6.png","hash":"c1f63cc766fb1ef90291544b683540c4c6e82f0f","modified":1644735095420},{"_id":"source/_posts/cn/Data-Analysis-Note/市场容量可视化.png","hash":"bb6be3e67f95033c9e551d5aad0824dda932d494","modified":1644904295469},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1635750784868},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1635750784915},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1635750784910},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1635750784896},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1635750784873},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1635750784919},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1635750784906},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","hash":"9e326313656b821751f486e31be8418e1578668a","modified":1635750785571},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1635750784901},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"4ae45a4e2ee0769a337b65f8bd1d859bd9d3294b","modified":1635750785567},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1635750784891},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1635750784883},{"_id":"source/_posts/cn/Microsoft-E5/续期5.png","hash":"90e18845d35039fdabb1aea697ecb44d1b0e2a07","modified":1655478107429},{"_id":"source/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1635756780937},{"_id":"source/_posts/cn/Microsoft-E5/续期6.png","hash":"0545c7a964a2ad59fda2cba88cb143dc81798a2a","modified":1655478216622},{"_id":"source/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1635750785435},{"_id":"source/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1635755481619},{"_id":"source/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1635750785274},{"_id":"source/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1635759711255},{"_id":"source/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1635750785024},{"_id":"source/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1635750785237},{"_id":"source/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1635750785333},{"_id":"source/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1635750785503},{"_id":"source/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785410},{"_id":"source/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1635750785137},{"_id":"source/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1635750785199},{"_id":"public/baidusitemap.xml","hash":"cc8c55968e24421266f8055b52d3df2a1a747893","modified":1655479281123},{"_id":"public/sitemap.xml","hash":"3db9caa69c6b0fa6d78077a083ec37eb05f654b8","modified":1655479281123},{"_id":"public/searchVersion.json","hash":"78581d5473e3412ed98baa0ecb9eff58dd4efdb6","modified":1655481467718},{"_id":"public/404.html","hash":"511745db861423f3c0eefe1f401b9b1486ebdeab","modified":1655479281123},{"_id":"public/categories/index.html","hash":"1de627f49c1becc0e2fe34899f92f1e5234c23a5","modified":1655479281123},{"_id":"public/tags/index.html","hash":"0ad8b73305acdf3effae3281c0c87932207395dd","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/index.html","hash":"cb8ef592832b013c3db536ff99f2665fa7ca8e34","modified":1655481467718},{"_id":"public/cn/mvc-and-mvt/index.html","hash":"3a6bcd257cfc8432e342f0a6b79003e9261a390f","modified":1655479281123},{"_id":"public/cn/Django-Note/index.html","hash":"b0894ac8205a09baafc673e52e227dad262cc63c","modified":1655479281123},{"_id":"public/cn/MongoDB/index.html","hash":"d0afd4319cf1870b5d94fd6ab3ddf118f88c0aee","modified":1655479281123},{"_id":"public/cn/ACGN-Recommendation/index.html","hash":"ffe6ec333d93c464d40ba8ede2a413205292f75f","modified":1655479281123},{"_id":"public/cn/regex/index.html","hash":"db2912c9fdffade9ebe8446a349dcd25c9fddf6a","modified":1655479281123},{"_id":"public/cn/Existentialism/index.html","hash":"90f5db8950c4738e51de09a76b14b996ead7668e","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/index.html","hash":"696d9118aaea2be6db23027f598fa59283451a99","modified":1655479281123},{"_id":"public/cn/Algorithm-Note/index.html","hash":"a1743d74d330339cb9ea96a3f37d2f2d562b279d","modified":1655479281123},{"_id":"public/cn/Unity-Study-Note/index.html","hash":"720b8297ab495dc4e611907a925a062af9983c52","modified":1655479281123},{"_id":"public/cn/Algorithm/index.html","hash":"282bdd2d44762073bb268eb746e39c5d18fcf823","modified":1655479281123},{"_id":"public/cn/Python-Note/index.html","hash":"d9003c95db489ec3a738f11b1984f2c9ca1f964c","modified":1655479281123},{"_id":"public/cn/MarkDown-Base/index.html","hash":"a246abcfced05aa8a79b1294f0a57bca4d926f9b","modified":1655479281123},{"_id":"public/cn/hexo-for-building-blog/index.html","hash":"5048f23e9f2411dc43b94dac9843fe7c8d506645","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/index.html","hash":"46e5931da527c2fbf50185d1eb3a7f7fcf33e027","modified":1655479281123},{"_id":"public/archive/index.html","hash":"6289a3c6ccdd404bdbbf8af1a9fba4a33a5cf4c2","modified":1655479281123},{"_id":"public/about/index.html","hash":"f482e558eade73b1fea0192999316586ca51484f","modified":1655479281123},{"_id":"public/archives/index.html","hash":"70e7b99cba8a43698eb8ae87d2171ea35c2a4a46","modified":1655479281123},{"_id":"public/archives/archives/2/index.html","hash":"a3fe87ccf7232a4ef6aedd9bc072e7977cf853e9","modified":1655479281123},{"_id":"public/archives/2020/index.html","hash":"26df52081b7a88f9723c48c73979dd55ddb62a29","modified":1655479281123},{"_id":"public/archives/2020/04/index.html","hash":"d3bed39c46398380f08cb6041572b518b0d8e15e","modified":1655479281123},{"_id":"public/archives/2021/index.html","hash":"dba94d95ec1f856e722000f980a23fd5ad8ed247","modified":1655479281123},{"_id":"public/archives/2021/11/index.html","hash":"ee4dd159f36a65f49a119ac8d805063a7952bb7b","modified":1655479281123},{"_id":"public/archives/2022/index.html","hash":"f4f00ee7795a9e4da4685dca8205e1e0660f6084","modified":1655479281123},{"_id":"public/archives/2022/01/index.html","hash":"ba4617b0fbc33f2b541252094506c1539b61b900","modified":1655479281123},{"_id":"public/archives/2022/02/index.html","hash":"eb08aa99a89e324ad8b98699365d03ad1a3731d8","modified":1655479281123},{"_id":"public/archives/2022/03/index.html","hash":"896c0af85a499256efe2dbefc344bf163fb23aac","modified":1655479281123},{"_id":"public/archives/2022/04/index.html","hash":"1e00f268e2f95cfb34881c2618fb696703029d3f","modified":1655479281123},{"_id":"public/archives/2022/06/index.html","hash":"063f4319926dd649840ecec99f7842fc2f3a20a9","modified":1655479281123},{"_id":"public/cn/index.html","hash":"80e1ea90d4ec945fbcb5644e3b1ff5aabfbc928b","modified":1655479281123},{"_id":"public/cn/archives/2/index.html","hash":"b20921897f9c42a22e6f2b47fb763909dc6fb3f6","modified":1655479281123},{"_id":"public/categories/Note/Algorithm/index.html","hash":"dc30ba1b87cfd7cca6a4b78fe0c6d508c4bdca99","modified":1655479281123},{"_id":"public/categories/Note/index.html","hash":"19f12077c589dc686f11214e57512cca56746cd8","modified":1655479281123},{"_id":"public/categories/Tutorials/index.html","hash":"8cbc4a2d109adb9e3171fb0fad9cadc6b48818d9","modified":1655479281123},{"_id":"public/categories/etc/index.html","hash":"497b83b65f5c8805b0eee024d69a04f8d5d8c853","modified":1655479281123},{"_id":"public/categories/Tutorials/Hexo/index.html","hash":"086dd13202ab3d85cf5eee70d0b936ffc012c422","modified":1655479281123},{"_id":"public/categories/etc/Hexo/index.html","hash":"7d2a743573a3f0698365b52db70d95bdfe82a996","modified":1655479281123},{"_id":"public/tags/Algorithm/index.html","hash":"d964847bdd304763e0ce7daf5dd678bfa87ab6a1","modified":1655479281123},{"_id":"public/tags/Date-Analysis/index.html","hash":"7009fb480b4152926ef2531eb54ec818fc0413a4","modified":1655479281123},{"_id":"public/tags/Leetcode/index.html","hash":"8a52303e9a9877b9cb2312fe729023624d5059c9","modified":1655479281123},{"_id":"public/tags/Excel/index.html","hash":"bd11be4fd62714d475108408a44921511d74a24a","modified":1655479281123},{"_id":"public/tags/django/index.html","hash":"fea26d934bc257505683fff0417a147df99987d0","modified":1655479281123},{"_id":"public/tags/Hexo/index.html","hash":"6dd67ffe0a25e59d2d9bf601c4516766fe10a053","modified":1655479281123},{"_id":"public/tags/Hexo-Theme-LiveMyLife/index.html","hash":"9ca7d4dea95b2735d294192de5532922210be771","modified":1655479281123},{"_id":"public/tags/Tutorials/index.html","hash":"f3256cbd17b8e376ff917fc9bbacfd28cbe53adf","modified":1655479281123},{"_id":"public/tags/markdown/index.html","hash":"af12e8a6e272f6ca26c7a6a062876fa0c4ffa8ee","modified":1655479281123},{"_id":"public/tags/one-drive/index.html","hash":"d6900bed66f967e39e12c15e58d5830ecf116599","modified":1655479281123},{"_id":"public/tags/microsoft-365/index.html","hash":"7d2ad5d3f3e0c89e16a4e84f76b03165432c89f1","modified":1655479281123},{"_id":"public/tags/MongoDB/index.html","hash":"d8f7951bf9a630b40957a5a1b8528ee2f418ddc9","modified":1655479281123},{"_id":"public/tags/Unity/index.html","hash":"3c36b9ab4b2e570546644280c349ec1ae95b4861","modified":1655479281123},{"_id":"public/tags/Blog/index.html","hash":"5c8eb0c05216139de9a22b8a0358aef4bd229d71","modified":1655479281123},{"_id":"public/tags/MVT/index.html","hash":"4b733dd08ab46dfdf4d00ac686c056e057830864","modified":1655479281123},{"_id":"public/tags/MVC/index.html","hash":"0e2f9b5b631aa4252d40bd3dfb948bcf9db3e5ef","modified":1655479281123},{"_id":"public/tags/regex/index.html","hash":"635de56815c88e7ace5402d217fe1652b5776a17","modified":1655479281123},{"_id":"public/tags/Python/index.html","hash":"0b7dc9d8465554c72d3a400ba4b72e709ba4442d","modified":1655479281123},{"_id":"public/archives/2/index.html","hash":"526f42d728237d5481bab977a7b0224a3c20d422","modified":1655479281123},{"_id":"public/index.html","hash":"92912172d3f2996310e47136a99fbf734a3ed17c","modified":1655479281123},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1655479281123},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1655479281123},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1655479281123},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1655479281123},{"_id":"public/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1655479281123},{"_id":"public/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1655479281123},{"_id":"public/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1655479281123},{"_id":"public/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1655479281123},{"_id":"public/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1655479281123},{"_id":"public/CNAME","hash":"12620253467e3de4d981ee37df67dc3902ceb005","modified":1655479281123},{"_id":"public/img/signature/signature.png","hash":"2b2555032197a894df2b808097bc118342fe4958","modified":1655479281123},{"_id":"public/cn/Algorithm-Note/dp1.png","hash":"2c67c3e6405e4fa38cc3f19d3d75f9bec73fb121","modified":1655479281123},{"_id":"public/cn/Algorithm/bulbswitcher.jpg","hash":"0407477867b14db402c235fe8669a0154d2c9d88","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/power_query.png","hash":"c3d4ec5539d8b44f5d665199388c5c09acf99a54","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/利润和价格的关系.png","hash":"49a85422e814c2b62a0e430837c0a28208480ed6","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/市场运营节奏.png","hash":"1bd118632b594594062fde56a74dfeef78bcdd8f","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/杜邦分析法-1.png","hash":"02dbac1d2059f374048e596be3b67d6dad8487b6","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/矩阵分析法-1.png","hash":"cd5ea8154d884cec1cfd1fd3c9209eaa27f783f5","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/矩阵分析法-2.png","hash":"5c2da234543e4c04b66ebbdbec4bffac2a0603cd","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/组合图.png","hash":"8d718493ea4d9f2c50ede5b375d21f1a2a661962","modified":1655479281123},{"_id":"public/cn/Django-Note/Django-env10.png","hash":"6f740e0572ccbe907bfe1b948a3e4c171a0445d4","modified":1655479281123},{"_id":"public/cn/Django-Note/django-orm1.png","hash":"7e66c4620c081c0ab1efc9cd25bc0e60cf878724","modified":1655479281123},{"_id":"public/cn/Django-Note/django_init.png","hash":"ee98db02ac26be1f9bbf6b5e65c6e82c7e010c4c","modified":1655479281123},{"_id":"public/cn/Django-Note/pycharm01.png","hash":"7982b3da2ffd34b0e84f1b50af2f257504611faf","modified":1655479281123},{"_id":"public/cn/Django-Note/orm-object.png","hash":"c272528558c72ef4a6f24a35289a0f4b5980767b","modified":1655479281123},{"_id":"public/cn/Django-Note/hello.png","hash":"c6669c0d087f607c8ecc8c3e0c4d3dc0f51d2d6e","modified":1655479281123},{"_id":"public/cn/Django-Note/startapp.png","hash":"322e85eedc5b3072815a60d88c983ab1934c3921","modified":1655479281123},{"_id":"public/cn/MarkDown-Base/title.png","hash":"97fb8081ccee16033e78e6629d2d5ebb148b1ef0","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期10.png","hash":"e2387a661277fa56ad747f39cb9d9e5b0784f2fd","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期12.png","hash":"752a95d8082eabc6a1931b2f92b3d441aa58e93b","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期11.png","hash":"c9b1150e2317bafdf7b6ebe77864ff4778b1a58b","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期13.png","hash":"32c8c86956be5028e4512556f1774be84846228d","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期9.png","hash":"70a5253342113bf562ac2f89daaf76552ac97d47","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/设置沙盒域名.png","hash":"3ba95aec10a0a5d7a3e15e08496d29495d3b4508","modified":1655479281123},{"_id":"public/cn/MongoDB/Figure-1-Mapping-Table-to-Collection-1.png","hash":"93ce5312fc7bfebd03305e601c613d1bd1b6acc9","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置7.png","hash":"cc553fbb5808f6b10718dd77313464da4f1fcb73","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置8.png","hash":"e330e709bcd6581f39a8ec349a6ae07a4d29fcf2","modified":1655479281123},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1655479281123},{"_id":"public/cn/mvc-and-mvt/MTV-Diagram.png","hash":"42eef8575d6a35483983756dc4bb59066d7b9844","modified":1655479281123},{"_id":"public/cn/MongoDB/mongodb分片集群结构分布.png","hash":"e8cf9a01d3bfd8335d60511f9cb5edaa5d54e031","modified":1655479281123},{"_id":"public/cn/MongoDB/mongodb复制原理.png","hash":"a7972fbaf81393df00ed7c69607eb7224e5c9ef6","modified":1655479281123},{"_id":"public/cn/MongoDB/ObjectId.jpeg","hash":"8de75bc8900e1357f1aac8f358569f0a38adff1c","modified":1655479281123},{"_id":"public/cn/mvc-and-mvt/mvc.png","hash":"1e10ffdb86470c099ad6b89a9a5245abf1a9fbd9","modified":1655479281123},{"_id":"public/cn/Python-Note/function-1.png","hash":"95c90eadd8bbfc252bb17f695f251e13a8e9a4d3","modified":1655479281123},{"_id":"public/cn/Python-Note/if-1.png","hash":"58f020a3434e82f1763053012e5c9772e4cc96ee","modified":1655479281123},{"_id":"public/cn/Python-Note/loop-1.jpg","hash":"302acef8a0d975adc5b0c41b5b63a2a5c96cfb8d","modified":1655479281123},{"_id":"public/cn/Python-Note/if-2.png","hash":"f8458dedf361a5a7551edfaf9d794859b2e39bb4","modified":1655479281123},{"_id":"public/cn/Python-Note/module-1.png","hash":"6e223869b3ec267929ec1ad18672a377f59b80be","modified":1655479281123},{"_id":"public/cn/Python-Note/rw-problem.png","hash":"e02f9a8b20127e7b95d81b58f01bb84fddfcf9f1","modified":1655479281123},{"_id":"public/cn/Python-Note/rw_test_1.png","hash":"683fef1be2681c7a18aaae9bc3d5dae8b678d7fe","modified":1655479281123},{"_id":"public/cn/Python-Note/rw_test_2.png","hash":"f53edef8d76dfa95a7e71aed4815bbeed5a37406","modified":1655479281123},{"_id":"public/cn/Python-Note/solute.png","hash":"340a8c0dcbbf69f4111c652a7567b2c081228591","modified":1655479281123},{"_id":"public/cn/Python-Note/vscode-2.png","hash":"d3fe40552bf0f09139a0bfe9e9ec292cc4690e74","modified":1655479281123},{"_id":"public/cn/Python-Note/vscode-3.png","hash":"a850c8189de1ca80b7c8efb13ab88a730e370ed3","modified":1655479281123},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1655479281123},{"_id":"public/css/catalog.css","hash":"6e63e8902ec9ba5ef6256a0c2ef93934c56d612c","modified":1655479281123},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1655479281123},{"_id":"public/css/rocket.css","hash":"1aa31deaf2c434e883a7b4d096d187244eb964d0","modified":1655479281123},{"_id":"public/css/livemylife.css","hash":"07f90cf42f19b7b86361d202b24918ee0c626211","modified":1655479281123},{"_id":"public/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1655479281123},{"_id":"public/css/search.css","hash":"c633ff24b9126676013197280b18bb79ea4abb6c","modified":1655479281123},{"_id":"public/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1655479281123},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1655479281123},{"_id":"public/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1655479281123},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1655479281123},{"_id":"public/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1655479281123},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1655479281123},{"_id":"public/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1655479281123},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1655479281123},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1655479281123},{"_id":"public/js/langselect.js","hash":"52ca6e30814272bc329868944f528f89630404e4","modified":1655479281123},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1655479281123},{"_id":"public/js/mouseclick.js","hash":"b27fb5ae779a855a93b85c923f1ac927ba52dc86","modified":1655479281123},{"_id":"public/js/line.js","hash":"d69576bfe75048345a137c148ffca1d9985811dc","modified":1655479281123},{"_id":"public/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1655479281123},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1655479281123},{"_id":"public/js/ribbonDynamic.js","hash":"576f0ce237c87738277868489af30b6538681201","modified":1655479281123},{"_id":"public/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1655479281123},{"_id":"public/css/beantech.css","hash":"c192d3170301f774fa4c2185dc125cb3d6ec4929","modified":1655479281123},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1655479281123},{"_id":"public/css/beantech.min.css","hash":"52f8485f36e94a35de73b9cf1eb49b6237fbedc5","modified":1655479281123},{"_id":"public/css/bootstrap.min.css","hash":"03a1eabfd0b6d2328418723ebe28df6e0847ac1b","modified":1655479281123},{"_id":"public/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1655479281123},{"_id":"public/css/hux-blog.min.css","hash":"96e47dc6c3a06021a33faa3e6881f03279a213f9","modified":1655479281123},{"_id":"public/css/themecolor.css","hash":"4497f60bcd6d2ac8df59656edbddd307f869d0fb","modified":1655479281123},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1655479281123},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1655479281123},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1655479281123},{"_id":"public/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1655479281123},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1655479281123},{"_id":"public/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1655479281123},{"_id":"public/cn/Python-Note/vscode.png","hash":"ce3d3f996dbc5ebb5a7d53ab780e284c87862296","modified":1655479281123},{"_id":"public/cn/Python-Note/命名空间-2.png","hash":"49ab148deb94ce9031135d3d0f6e05d0dca82684","modified":1655479281123},{"_id":"public/cn/Python-Note/作用域.png","hash":"599f71c1c6800d9665910672a9bac35b3931d6e2","modified":1655479281123},{"_id":"public/cn/Python-Note/命名空间.png","hash":"2767711c67ccb639977c9cfcd983f117991fbc05","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/ABC分析法.png","hash":"dc68024892cc5895b053c9701f804575e26178e2","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/QuickBI-2.png","hash":"356a2937ba0062fde047757f93bd2512fee21db8","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺品类结构分析.png","hash":"56ca59899fec56ba3dd17dccf76fdf8aa7dd1b15","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺商品分析.png","hash":"2a93187df1fbd411392778780bca4fec6f5f137d","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺客群分析.png","hash":"d2d780a917a7041e047dc716d9ea2084c5ab617d","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺推广分析.png","hash":"018e6794ae05915ea6f70fbd4589044739d84390","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺销售额预测.png","hash":"618db45d4a3ac270adbb748a359c54cb41907849","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/杜邦分析法-2.png","hash":"f32dc80c7725672c2e7633b170c0e7b1d20e4154","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/漏斗分析法-2.png","hash":"ac972ff009c5a308ca34b672c3454e93ce9bb3c5","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/盈亏预测计算.png","hash":"596ee71681436fd6a26c43607e326813205ec0a1","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/盈亏平衡点.png","hash":"d93fbdcc10965d9d3b9b0f33fdf51bd6bed54221","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-2.png","hash":"f65ece1d1b276e0fe42a6bd7294b4434574a8bbe","modified":1655479281123},{"_id":"public/cn/Django-Note/Django-env6.png","hash":"cdafebf004273bd241afe10718d383b61eec5b59","modified":1655479281123},{"_id":"public/cn/Django-Note/Django-env9.png","hash":"c00a0f2b25d6b37303684661024d1f7bd1bda029","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/加入1.png","hash":"aeb75ba937bbb7d5525af11371689dd150601479","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/加入2.png","hash":"92b2aa74a56d9ae1e01fa4981fe04f9a012ada67","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/加入3.png","hash":"18f03f5ad6dca1fcd33de12218592decf175b0bc","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期3.png","hash":"e21cc84f63fd87a66dc05c0f64f70bb3c6e4732e","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期4.png","hash":"ca0f9bf9523674876ecb600be4996fe1d8cac709","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/订阅成功.png","hash":"c793b1c7a338095e49ff94bd2384cc688f1c6ce1","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置1.png","hash":"10d3b493e2dd442f09f5971391e07f603afa2de1","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置2.png","hash":"52fd170b010799cf37e2d5e1a5c554e75270bd11","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置4.png","hash":"6289a47b3bbf54e0b04f2b1ab0e306e3eb32956e","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置5.png","hash":"6a6382950cd295ce3a34ffab41d95fc601103449","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置6.png","hash":"1d4e9b9863d2854fd03857e20fb469d043c04c8b","modified":1655479281123},{"_id":"public/cn/mvc-and-mvt/mvt.png","hash":"8377a186d789c015dd0594368667ca5543a91c7c","modified":1655479281123},{"_id":"public/cn/Python-Note/break-continue.jpg","hash":"cd0ebebf29284fed29dfe884d31201eef3755017","modified":1655479281123},{"_id":"public/cn/Python-Note/rwa-1.png","hash":"a04a957ead000b95f588c76030f6fff7272b43c4","modified":1655479281123},{"_id":"public/js/comment/gitalk_.js","hash":"9256bc4b8f7341f60083da291d5c7c9f0fe5f1bd","modified":1655479281123},{"_id":"public/js/comment/gitalk.js","hash":"e5c1b7f8a2803765cff831793af377a9f81fb385","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/power_pivot.png","hash":"dbd5f3158e235002b2a8c59a857fb6785d5a0a0d","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/制造业-1.png","hash":"9998ab0c741f23289766bd639a243200ccb6bc58","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/变动成本.png","hash":"fb3b90eb491787c4e6b4e2ba258c81042f47efbb","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/固定成本.png","hash":"976807649611a48637b1a2fb02ca4f6fbf3308b2","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺流量分析.png","hash":"36022d645a1696a105dc38d87fc9d96b117028c8","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/店铺诊断指标拆解.png","hash":"0a4688c7f960f10af4c7220227ed6929ec3d6e35","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/漏斗分析法-1.png","hash":"b8dff998289c507c41c6c04752fc2eea7fad7c9b","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-1.png","hash":"504bb65212e023aee7f8008242e39f5d221df988","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-5.png","hash":"6387435651122b01705ec74d37d564b3b64c6cc3","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期1.png","hash":"6cd423ae02e149fba64d72861d3347feb2cfc70c","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期2.png","hash":"1b1a211d897d6e2354ab4055de2ecc77ff34bb1b","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期6.png","hash":"0545c7a964a2ad59fda2cba88cb143dc81798a2a","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期8.png","hash":"30b6f8fee13f0d384967106caed0bbcb82989370","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/配置3.png","hash":"757b025d75cfff1046f498e07104fa6678c2b697","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/物流业-1.png","hash":"04e96ffda4a579d0c763cf4ba14f8ed589ad19eb","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/表格概述.png","hash":"5760d8acea0a4c5c7d3c8536039f3f3d684ad642","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-3.png","hash":"d10ad2dd87424bff20330eac9d2c8751002407dd","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期5.png","hash":"90e18845d35039fdabb1aea697ecb44d1b0e2a07","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/续期7.png","hash":"bde5c245955af20a9aa63ac6dcddf4bb3a50934e","modified":1655479281123},{"_id":"public/cn/Microsoft-E5/设置沙盒.png","hash":"156b3ad92306a865537da1d5a57a0e7865e8e421","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/QuickBI.png","hash":"fd164513ef3db4554b5101789020aa3badd46ce5","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/数据透视表.png","hash":"83a817deb51faa7b0a34e1720f35c7b53251c328","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-6.png","hash":"c1f63cc766fb1ef90291544b683540c4c6e82f0f","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/零售业-4.png","hash":"09c0f9258e3707620cebdbf4997a944bee1fbb34","modified":1655479281123},{"_id":"public/cn/Data-Analysis-Note/市场容量可视化.png","hash":"bb6be3e67f95033c9e551d5aad0824dda932d494","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1655479281123},{"_id":"public/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1655479281123},{"_id":"public/img/avatar/GRIS.png","hash":"61c42cec1e75737925b532959432f8fecaf6ab42","modified":1655479281123},{"_id":"public/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1655479281123},{"_id":"public/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1655479281123},{"_id":"public/img/header_img/nier.png","hash":"156e5625050de6b7736b3f1cb9d414463b913246","modified":1655479281123},{"_id":"public/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1655479281123},{"_id":"public/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1655479281123},{"_id":"public/img/avatar/maid.jpg","hash":"f3796dc23547c22790d179132aef927787fc85a2","modified":1655479281123},{"_id":"public/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1655479281123},{"_id":"public/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1655479281123},{"_id":"public/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1655479281123},{"_id":"public/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1655479281123},{"_id":"public/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1655479281123},{"_id":"source/_posts/cn/Microsoft-E5/使用1.png","hash":"b02e9119e8fdde51c0c393fd64e199f61ff61158","modified":1655479583715},{"_id":"source/_posts/cn/Microsoft-E5/使用4.png","hash":"d6e60dde90009337aadc5e4f651ef58b838300dd","modified":1655480942614},{"_id":"source/_posts/cn/Microsoft-E5/使用3.png","hash":"87e864e7fecc86018608caee38393d210b29ed34","modified":1655479653806},{"_id":"source/_posts/cn/Microsoft-E5/使用2.png","hash":"3964d7009e5c76a03cbfc57d55de7347486bd3f9","modified":1655479514133},{"_id":"public/cn/Microsoft-E5/使用1.png","hash":"b02e9119e8fdde51c0c393fd64e199f61ff61158","modified":1655481467718},{"_id":"public/cn/Microsoft-E5/使用2.png","hash":"3964d7009e5c76a03cbfc57d55de7347486bd3f9","modified":1655481467718},{"_id":"public/cn/Microsoft-E5/使用3.png","hash":"87e864e7fecc86018608caee38393d210b29ed34","modified":1655481467718},{"_id":"public/cn/Microsoft-E5/使用4.png","hash":"d6e60dde90009337aadc5e4f651ef58b838300dd","modified":1655481467718}],"Category":[{"name":"Note","_id":"cl4ilmg0k0006wwvo54td88v4"},{"name":"Algorithm","parent":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg0x000nwwvo0ezjafyu"},{"name":"Tutorials","_id":"cl4ilmg10000vwwvo60o0gb1t"},{"name":"etc.","_id":"cl4ilmg160016wwvo66kzai9s"},{"name":"Hexo","parent":"cl4ilmg10000vwwvo60o0gb1t","_id":"cl4ilmg17001cwwvo1rh01649"},{"name":"Hexo","parent":"cl4ilmg160016wwvo66kzai9s","_id":"cl4ilmg18001iwwvo8yryda8f"}],"Data":[],"Page":[{"layout":"404","description":"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...\"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.862Z","updated":"2021-11-01T07:13:04.862Z","path":"404.html","title":"","comments":1,"_id":"cl4ilmg090000wwvo66821f3x","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive_bg.jpg","date":"2022-01-20T12:49:56.000Z","description":"Don't rush and never settle...... If it's meant to be, it will be......","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive_bg.jpg\"\ndate: 2022-01-20 20:49:56\ndescription: \"Don't rush and never settle...... If it's meant to be, it will be......\"\n---\n","updated":"2022-01-20T12:49:56.000Z","path":"archive/index.html","comments":1,"_id":"cl4ilmg0g0002wwvo0l4n3saz","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2022-01-19T20:48:33.000Z","description":"爱编程更爱游戏","header-img":"img/header_img/nier.png","_content":"\n## Talk To Me\n\n\n## Just Me\n\n\n\n## The Longest Way ...\n\n\n## Follow With Interest Blogs\n\n## Contact me\n\n> Email：lgh1598@126.com\n\n## Treat me to coffee\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2022-01-20 04:48:33\ndescription: \"爱编程更爱游戏\"\nheader-img: \"img/header_img/nier.png\"\n---\n\n## Talk To Me\n\n\n## Just Me\n\n\n\n## The Longest Way ...\n\n\n## Follow With Interest Blogs\n\n## Contact me\n\n> Email：lgh1598@126.com\n\n## Treat me to coffee\n\n","updated":"2022-01-19T20:48:33.000Z","path":"about/index.html","comments":1,"_id":"cl4ilmg0j0004wwvob88vc2xu","content":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<h2 id=\"Just-Me\">Just Me</h2>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：lgh1598@126.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<h2 id=\"Just-Me\">Just Me</h2>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：lgh1598@126.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n"},{"layout":"categories","title":"Categories","description":"Hi , here is Categories ....","header-img":"img/header_img/categories_bg.jpg","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\ndescription: \"Hi , here is Categories ....\"\nheader-img: \"img/header_img/categories_bg.jpg\"\n---\n","date":"2021-11-01T07:13:04.975Z","updated":"2021-11-01T07:13:04.975Z","path":"categories/index.html","comments":1,"_id":"cl4ilmg0m0008wwvoei16aohh","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"I don’t know where I am going, but I am on my way......","header-img":"img/header_img/tag_bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"I don’t know where I am going, but I am on my way......\"\nheader-img: \"img/header_img/tag_bg.jpg\"\n---\n","date":"2021-11-01T07:13:05.517Z","updated":"2021-11-01T07:13:05.517Z","path":"tags/index.html","comments":1,"_id":"cl4ilmg0o000awwvogwuaa9si","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ACGN推荐","catalog":true,"lang":"cn","date":"2022-01-22T02:55:13.000Z","subtitle":"ACGN Recommendation","header-img":null,"_content":"","source":"_posts/cn/ACGN-Recommendation.md","raw":"---\ntitle: ACGN推荐\ncatalog: true\nlang: cn\ndate: 2022-01-22 10:55:13\nsubtitle: ACGN Recommendation\nheader-img:\ntags:\ncategories:\n---\n","slug":"ACGN-Recommendation","published":1,"updated":"2022-01-22T02:55:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0d0001wwvo377r82h5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"算法笔记","catalog":true,"lang":"cn","date":"2021-11-12T02:09:37.000Z","subtitle":"Algorithm Note","header-img":"/img/header_img/nier.png","sticky":800,"_content":"## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","source":"_posts/cn/Algorithm-Note.md","raw":"---\ntitle: 算法笔记\ncatalog: true\nlang: cn\ndate: 2021-11-12 10:09:37\nsubtitle: Algorithm Note\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\ncategories:\n- Note\n- Algorithm\nsticky: 800\n---\n## 动态规划 Dynamic Programming，DP\n动态规划是计算机中解决最优化问题的一种方法\n\n### 理解一\n> 首先有一个经典的动态规划问题：  \n> 给一个无序的数组，` nums = [1, 5, 2, 4, 3] `，找出其中的` 最长的递增的子序列 `的长度。  \n> \n> 我们先使用` 暴力枚举/暴力搜索 ` 列出所有的可能性解：\n> > 举例：从1出发的遍历树\n> > ![暴力-树](dp1.png)\n> \n> > 代码：\n> > ```python\n> > # 递归\n> > def L(nums, i):  # nums为数组，i为开始的下标\n> >     if i == len(nums) - 1: # 最后一个数字\n> >         return 1\n> >     max_len = 1\n> >     for j in range(i + 1, len(nums)):\n> >         if nums[j] > nums[i]:\n> >             max_len = max(max_len, L(nums, j) + 1)\n> >     return max_len\n> >\n> > def length_of_LIS(nums):\n> >     return max(L(nums, i) for i in range(len(nums)))\n> > ``` \n> > 时间复杂度：` O(n*2^n) `\n> \n> 我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。  \n> 因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。  \n> 我们使用一个` 字典（哈希表） `来存放结果 :  \n> ```python\n> memo = {}\n> def L(nums, i):\n>     if i in memo:\n>         return memo[i]\n>     ...\n>     memo[i] = max_len\n>     return max_len\n> ...\n> ```\n> 由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；   \n> 也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”  \n> \n> 接下来尝试将它改成` 非递归（non-recursive）/ 迭代（iterative）`形式：\n> 这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销   \n> <!-- TODO: 递归转迭代  -->\n> 递归转换迭代的方式，可以查看这篇文章：[递归转迭代](/cn/Algorithm-Note/#递归转迭代)\n> 迭代的实现：\n> ```python\n> def length_of_LIS(nums):\n>     n = len(nums)\n>     L = [1] * n # 存放运算结果\n>     for i in reversed(range(n)):\n>         for j in range(i+1, n):\n>             if nums[j] > nums[i]:\n>                 L[i] = max(L[i], L[j]+1)\n>     return max(L)\n> ```\n> 时间复杂度：` O（N^2） `  \n> \n> 可以总结出动态规划的一般思路：  \n> 1. 可以简单粗暴的使用穷举法并画出递归树\n> 2. 发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来\n> 3. 最后可以把递归转化成迭代形式\n\n------------------------------------------------------------------------\n\n### 理解二\n\n\n### 练习\n> 给定一个数组nums，要求找出其中的连续子序列的最大和：  \n> > 输入：[3, -4, 2, -1, 2, 6, -5, 4]\n> > 输出：9\n> > 解释：连续子序列[2, -1, 2, 6]可得其最大和9  \n> \n> 题解：(python)\n> ```python\n>     def maxSubArray(self, nums) -> int:\n>        if len(nums) == 0:\n>            return 0\n>        dp = len(nums) * [0]\n>        dp[0] = nums[0]\n>        for i in range(1, len(nums)):\n>            dp[i] = max(dp[i - 1] + nums[i], nums[i])  # python 中 max 是函数\n>        return max(dp)\n> ```","slug":"Algorithm-Note","published":1,"updated":"2021-11-12T02:09:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0h0003wwvo4ap086w1","content":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动态规划-Dynamic-Programming，DP\">动态规划 Dynamic Programming，DP</h2>\n<p>动态规划是计算机中解决最优化问题的一种方法</p>\n<h3 id=\"理解一\">理解一</h3>\n<blockquote>\n<p>首先有一个经典的动态规划问题：<br>\n给一个无序的数组，<code>nums = [1, 5, 2, 4, 3]</code>，找出其中的<code>最长的递增的子序列</code>的长度。</p>\n<p>我们先使用<code>暴力枚举/暴力搜索</code> 列出所有的可能性解：</p>\n<blockquote>\n<p>举例：从1出发的遍历树<br>\n<img src=\"dp1.png\" alt=\"暴力-树\"></p>\n</blockquote>\n<blockquote>\n<p>代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span>  <span class=\"comment\"># nums为数组，i为开始的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>: <span class=\"comment\"># 最后一个数字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    max_len = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">            max_len = <span class=\"built_in\">max</span>(max_len, L(nums, j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L(nums, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O(n*2^n)</code></p>\n</blockquote>\n<p>我们发现这个方法中存在重复操作，比如在遍历1-2-4的时候已经计算过一次4的子序列，而之后在遍历1-4的时候又重复计算了一次。<br>\n因此我们可以在第一次计算的时候将结果保存下来，之后遍历到相同的节点就不需要重复计算直接将结果返回就可以了。<br>\n我们使用一个<code>字典（哈希表）</code>来存放结果 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memo = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">L</span>(<span class=\"params\">nums, i</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[i]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    memo[i] = max_len</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_len</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>由于用到了字典/哈希表来保存计算的中间结果，因此也称之为记忆化搜索（Recursion with Memoization），也就是常说的动态规划是“空间”换“时间”；<br>\n也有人叫它“带备忘录的递归”或者“递归树的剪枝（pruning）”</p>\n<p>接下来尝试将它改成<code> 非递归（non-recursive）/ 迭代（iterative）</code>形式：<br>\n这样可以更直观地去计算它的时间复杂度，并且避免了递归时候的函数调用开销</p>\n<!-- TODO: 递归转迭代  -->\n<p>递归转换迭代的方式，可以查看这篇文章：<a href=\"/cn/Algorithm-Note/#%E9%80%92%E5%BD%92%E8%BD%AC%E8%BF%AD%E4%BB%A3\">递归转迭代</a><br>\n迭代的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length_of_LIS</span>(<span class=\"params\">nums</span>):</span></span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    L = [<span class=\"number\">1</span>] * n <span class=\"comment\"># 存放运算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(n)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] &gt; nums[i]:</span><br><span class=\"line\">                L[i] = <span class=\"built_in\">max</span>(L[i], L[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：<code>O（N^2）</code></p>\n<p>可以总结出动态规划的一般思路：</p>\n<ol>\n<li>可以简单粗暴的使用穷举法并画出递归树</li>\n<li>发现其中存在重复操作，使用记忆化搜索/剪枝，尝试用哈希表将数据缓存下来</li>\n<li>最后可以把递归转化成迭代形式</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"理解二\">理解二</h3>\n<h3 id=\"练习\">练习</h3>\n<blockquote>\n<p>给定一个数组nums，要求找出其中的连续子序列的最大和：</p>\n<blockquote>\n<p>输入：[3, -4, 2, -1, 2, 6, -5, 4]<br>\n输出：9<br>\n解释：连续子序列[2, -1, 2, 6]可得其最大和9</p>\n</blockquote>\n<p>题解：(python)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span>(<span class=\"params\">self, nums</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">   dp = <span class=\"built_in\">len</span>(nums) * [<span class=\"number\">0</span>]</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">       dp[i] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i])  <span class=\"comment\"># python 中 max 是函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure></blockquote>\n"},{"title":"算法题库","catalog":true,"lang":"cn","date":"2021-11-08T03:04:24.000Z","subtitle":"力扣每日一题","header-img":"/img/header_img/nier.png","sticky":900,"_content":"\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n\n## 各位相加\nleetcode链接：<https://leetcode-cn.com/problems/add-digits/>\n\n> \n  \n示例：  \n> \n> \n> **输入**：num = 38\n> **输出**：2 \n> **解释**：  \n> 各位相加的过程为：   \n> 38 --> 3 + 8 --> 11   \n> 11 --> 1 + 1 --> 2   \n> 由于 2 是一位数，所以返回 2。  \n> \n\n\n### 解题思路\n\n#### 循环相加\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 数学\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        while num >= 10:\n            lst = list(map(int,str(num)))  # [int(x) for x in str(num)]\n            num = 0\n            for n in lst:\n                num += n\n        return num\n```\n\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        # 数学方法\n        if num==0 : return 0\n        if num%9==0 : return 9\n        else : return num%9\n```\n\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        # 数学方法2\n        if num==0 : return 0\n        return (num-1)%9+1\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************\n\n## 构造 K 个回文字符串\nleetcode链接：<https://leetcode-cn.com/problems/construct-k-palindrome-strings/>\n\n> 给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。   \n> 如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 True ，否则返回 False 。\n  \n示例：  \n> \n> \n> **输入**：s = \"annabelle\", k = 2   \n> **输出**：true  \n> **解释**：  \n> 一些可行的构造方案包括：\"anna\" + \"elble\"，\"anbna\" + \"elle\"，\"anellena\" + \"b\"  \n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if len(s)<k : return False\n        m = {x: s.count(x) for x in set(s)}\n        i = 0\n        for key in m:\n            if m[key] % 2 == 1:\n                i += 1\n        if i>k: return False\n        else : return True\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************","source":"_posts/cn/Algorithm.md","raw":"---\ntitle: 算法题库\ncatalog: true\nlang: cn\ndate: 2021-11-08 11:04:24\nsubtitle: 力扣每日一题\nheader-img: /img/header_img/nier.png\ntags:\n- Algorithm\n- Leetcode\ncategories:\n- Note\n- Algorithm\nsticky: 900\n---\n\n## 猜数字游戏\nleetcode链接：<https://leetcode-cn.com/problems/bulls-and-cows>\n\n> 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：  \n> 写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：  \n> + 猜测数字中有多少位属于数字和确切位置都猜对了（称为 \"Bulls\", 公牛），\n> + 有多少位属于数字猜对了但是位置不对（称为 \"Cows\", 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。\n>   \n> 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。  \n> 提示的格式为 \"xAyB\" ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。  \n>  请注意秘密数字和朋友猜测的数字都可能含有重复数字。\n\n### 解题思路\n#### 模拟\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历` secret `和` guess `，统计满足` secret[i]=guess[i] `的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在` guess[i] ≠ secret[i] `时，分别统计` secret `和` guess `的各个字符的出现次数，记在两个长度为` 10 `的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在` secret `和` guess `中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n##### 复杂度分析\n+ 时间复杂度：` O(N) `，其中` N `是字符串 ` secret ` 的长度。\n+ 空间复杂度：` O(C) `。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此` C=10 `。  \n\n### 题解\n#### `Python`\n```python\n# 使用两个数组两次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        secretCount, guessCount = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secretCount[int(s)] += 1\n                guessCount[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(secretCount, guessCount))\n        return f'{bulls}A{cows}B'\n```\n\n```python\n# 改进版：使用一个数组一次遍历\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls, cows = 0, 0\n        arr = [0] * 10\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                # 小于0说明之前guess中出现过相同的字符\n                if arr[int(secret[i])] < 0:\n                    cows += 1\n                arr[int(secret[i])] += 1\n                # 大于0说明之前secret中出现过相同的字符\n                if arr[int(guess[i])] > 0:\n                    cows += 1\n                arr[int(guess[i])] -= 1\n        return f'{bulls}A{cows}B'\n```\n\n#### `C#`\n```csharp\n// 使用两个数组两次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] secretCount = new int[10];\n        int[] guessCount = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++secretCount[secret[i] - '0'];\n                ++guessCount[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(secretCount[i], guessCount[i]);\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n```csharp\n// 改进版：使用一个数组一次遍历\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int cows = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < secret.Length; i++){\n            if (secret[i] == guess[i]) ++bulls;\n            else{\n                // 小于0说明之前guess中出现过相同的字符\n                if (arr[secret[i]-'0']++ < 0) cows++;\n                // 大于0说明之前secret中出现过相同的字符\n                if (arr[guess[i]-'0']-- > 0) cows++;\n            }\n        }\n        return $\"{bulls}A{cows}B\";\n    }\n}\n```\n\n-------------------------------------------------------------------\n\n## 猜数字大小Ⅱ\nleetcode链接：<https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/>\n\n> 我们正在玩一个猜数游戏，游戏规则如下：\n> + 我从 1 到 n 之间选择一个数字。\n> + 你来猜我选了哪个数字。\n> + 如果你猜到正确的数字，就会 赢得游戏 。\n> + 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。\n> + 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。\n> \n> 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。\n\n\n### 解题思路\n#### 动态规划\n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 检测大写字母\nleetcode链接：<https://leetcode-cn.com/problems/detect-capital/>\n\n> 我们定义，在以下情况时，单词的大写用法是正确的：\n> + 全部字母都是大写，比如 \"USA\" 。\n> + 单词中所有字母都不是大写，比如 \"leetcode\" 。\n> + 如果单词不只含有一个字母，只有首字母大写， 比如 \"Google\" 。\n> \n> 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        return word.islower() or word.isupper() or word.istitle()\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 键值映射\nleetcode链接：<https://leetcode-cn.com/problems/map-sum-pairs/>\n\n> 实现一个 MapSum 类，支持两个方法，insert 和 sum：\n> + MapSum() 初始化 MapSum 对象\n> + void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。\n> + int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。\n\n示例：\n> **输入**：  \n> [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]  \n> [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]  \n> **输出**：  \n> [null, null, 3, null, 5]  \n> **解释**：  \n> MapSum mapSum = new MapSum();   \n> mapSum.insert(\"apple\", 3);    \n> mapSum.sum(\"ap\");           // return 3 (apple = 3)    \n> mapSum.insert(\"app\", 2);      \n> mapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n### 解题思路\n#### 暴力扫描\n将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。\n\n##### 复杂度分析\n+ 时间复杂度： insert操作为`O(1)`。 sum操作为`O(NM)`，其中N是插入的key的数目，M是给定前缀prefix的长度。\n+ 空间复杂度： `O(NM)`，其中 NN 是插入的key的数目，MM是字符串key的最大长度。\n\n### 题解\n#### `Python`\n```python\nclass MapSum:\n    def __init__(self):\n        self.mapsum = {}\n\n    def insert(self, key: str, val: int) -> None:\n        self.mapsum[key] = val\n\n    def sum(self, prefix: str) -> int:\n        sum = 0\n        for key in self.mapsum.keys():\n            if key.find(prefix) == 0:\n            # 或者 key.startswith(prefix):\n                sum += self.mapsum[key]\n        return sum\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 灯泡开关\nleetcode链接：<https://leetcode-cn.com/problems/bulb-switcher/>\n\n> 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。  \n> 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。  \n> 找出并返回 n 轮后有多少个亮着的灯泡。\n  \n示例：  \n> ![灯泡开关示例](bulbswitcher.jpg)\n> \n> **输入**：n = 3\n> **输出**：1 \n> **解释**：\n> 初始时, 灯泡状态 [关闭, 关闭, 关闭].\n> 第一轮后, 灯泡状态 [开启, 开启, 开启].\n> 第二轮后, 灯泡状态 [开启, 关闭, 开启].\n> 第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n> \n> 你应该返回 1，因为只有一个灯泡还亮着。\n\n\n\n### 解题思路\n#### 数学\n如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：\n\n在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。\n\n因此，对于第 k 个灯泡，它被切换的次数恰好就是 `k 的约数个数`。\n\n如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。\n\n对于 k 而言，如果它有约数 x，那么一定有约数`x/k`。因此只要当 `x^2≠k` 时，约数都是「成对」出现的。这就说明，只有当 k 是「`完全平方数`」时，它才会有奇数个约数，否则一定有偶数个约数。\n\n因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为\"`n的平方根并向下取整`\".\n\n\n##### 复杂度分析\n+ 时间复杂度： `O(1)`\n+ 空间复杂度： `O(1)`\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    # 暴力、n = 10000时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = [1] * n\n    #     for i in range(1,n):\n    #         for j in range(len(stats)):\n    #             if (j+1)%(i+1)==0:\n    #                 stats[j]*=-1\n    #     return stats.count(1)\n    \n    # 模拟，n = 9999999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     stats = set()\n    #     for i in range(1,n):\n    #         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]\n    #         for j in dir:\n    #             if j in stats:\n    #                 stats.remove(j)\n    #             else:\n    #                 stats.add(j)\n    #     return n-len(stats)\n\n    # 计算变化次数，99999时超出时间限制\n    # def bulbSwitch(self, n: int) -> int:\n    #     if n < 1: return 0\n    #     count = 1\n    #     for i in range(1,n):\n    #         changetimes = 0  # 变化次数\n    #         for j in range(1,(i+1)//2+1):\n    #             if (i+1)%j==0:\n    #                 changetimes += 1\n    #         count += ((changetimes+1)%2)\n    #     return count\n\n\n    # 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\n```\n\n#### `C#`\n```csharp\n\n```\n\n-------------------------------------------------------------------\n\n## 最大单词长度乘积\nleetcode链接：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/>\n\n> 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。\n  \n示例：  \n> \n> **输入**：[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]  \n> **输出**：16   \n> **解释**：  \n> \"abcw\", \"xtfn\"  \n> 4 * 4 = 16   \n\n\n\n### 解题思路\n#### 暴力遍历\n遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 位运算\n详见力扣题解：<https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/>\n\n### 题解\n#### `Python`\n```python\ndef maxProduct(self, words: List[str]) -> int:\n    result = 0\n    for i in range(len(words)-1):\n        wordset = set(words[i])\n        # wordset = set()\n        # for x in words[i]:\n        #     wordset.add(x)\n        # 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。\n        for j in range(i + 1, len(words)):\n            flag = 0\n            for x in words[j]:\n                if x in wordset:  # 这一对字符含有公共字母\n                    flag = 1\n                    break\n            # 这一对字符不含有公共字母\n            if flag == 0 and len(words[i]) * len(words[j]) > result:  # 这一对不含有公共字母\n                result = len(words[i]) * len(words[j])\n    return result\n```\n\n#### `C#`\n```csharp\n\n```\n\n\n-------------------------------------------------------------------\n\n\n## 各位相加\nleetcode链接：<https://leetcode-cn.com/problems/add-digits/>\n\n> \n  \n示例：  \n> \n> \n> **输入**：num = 38\n> **输出**：2 \n> **解释**：  \n> 各位相加的过程为：   \n> 38 --> 3 + 8 --> 11   \n> 11 --> 1 + 1 --> 2   \n> 由于 2 是一位数，所以返回 2。  \n> \n\n\n### 解题思路\n\n#### 循环相加\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n#### 数学\n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n\n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        while num >= 10:\n            lst = list(map(int,str(num)))  # [int(x) for x in str(num)]\n            num = 0\n            for n in lst:\n                num += n\n        return num\n```\n\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        # 数学方法\n        if num==0 : return 0\n        if num%9==0 : return 9\n        else : return num%9\n```\n\n```python\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        # 数学方法2\n        if num==0 : return 0\n        return (num-1)%9+1\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************\n\n## 构造 K 个回文字符串\nleetcode链接：<https://leetcode-cn.com/problems/construct-k-palindrome-strings/>\n\n> 给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。   \n> 如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 True ，否则返回 False 。\n  \n示例：  \n> \n> \n> **输入**：s = \"annabelle\", k = 2   \n> **输出**：true  \n> **解释**：  \n> 一些可行的构造方案包括：\"anna\" + \"elble\"，\"anbna\" + \"elle\"，\"anellena\" + \"b\"  \n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if len(s)<k : return False\n        m = {x: s.count(x) for x in set(s)}\n        i = 0\n        for key in m:\n            if m[key] % 2 == 1:\n                i += 1\n        if i>k: return False\n        else : return True\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************\n\n## new problem\nleetcode链接：<>\n\n> \n  \n示例：  \n> \n> \n> **输入**：\n> **输出**：\n> **解释**：\n> \n> \n\n\n\n### 解题思路\n#### \n\n##### 复杂度分析\n+ 时间复杂度： \n+ 空间复杂度： \n\n### 题解\n#### `Python`\n```python\n\n```\n\n#### `C#`\n```csharp\n\n```\n\n**********************************","slug":"Algorithm","published":1,"updated":"2021-11-08T03:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0j0005wwvo2quch3nb","content":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"各位相加\">各位相加</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/add-digits/\">https://leetcode-cn.com/problems/add-digits/</a></p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：num = 38<br>\n<strong>输出</strong>：2<br>\n<strong>解释</strong>：<br>\n各位相加的过程为：<br>\n38 --&gt; 3 + 8 --&gt; 11<br>\n11 --&gt; 1 + 1 --&gt; 2<br>\n由于 2 是一位数，所以返回 2。</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"循环相加\">循环相加</h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"数学-2\">数学</h4>\n<h5 id=\"复杂度分析-8\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> num &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            lst = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">str</span>(num)))  <span class=\"comment\"># [int(x) for x in str(num)]</span></span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">                num += n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数学方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num%<span class=\"number\">9</span>==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">9</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> num%<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数学方法2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (num-<span class=\"number\">1</span>)%<span class=\"number\">9</span>+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"构造-K-个回文字符串\">构造 K 个回文字符串</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/construct-k-palindrome-strings/\">https://leetcode-cn.com/problems/construct-k-palindrome-strings/</a></p>\n<blockquote>\n<p>给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。<br>\n如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 True ，否则返回 False 。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：s = “annabelle”, k = 2<br>\n<strong>输出</strong>：true<br>\n<strong>解释</strong>：<br>\n一些可行的构造方案包括：“anna” + “elble”，“anbna” + “elle”，“anellena” + “b”</p>\n</blockquote>\n<h3 id=\"解题思路-8\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-9\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-8\">题解</h3>\n<h4 id=\"Python-8\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canConstruct</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s)&lt;k : <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        m = &#123;x: s.count(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(s)&#125;</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> m[key] % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&gt;k: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-8\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-9\">解题思路</h3>\n<h4 id=\"-3\"></h4>\n<h5 id=\"复杂度分析-10\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-9\">题解</h3>\n<h4 id=\"Python-9\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-9\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"猜数字游戏\">猜数字游戏</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulls-and-cows\">https://leetcode-cn.com/problems/bulls-and-cows</a></p>\n<blockquote>\n<p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：<br>\n写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p>\n<ul>\n<li>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”, 公牛），</li>\n<li>有多少位属于数字猜对了但是位置不对（称为 “Cows”, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。</li>\n</ul>\n<p>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。<br>\n提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。<br>\n请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p>\n</blockquote>\n<h3 id=\"解题思路\">解题思路</h3>\n<h4 id=\"模拟\">模拟</h4>\n<p>根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历<code>secret</code>和<code>guess</code>，统计满足<code>secret[i]=guess[i]</code>的下标个数，即为公牛的个数。</p>\n<p>对于奶牛，需要满足数字猜对但是位置不对。我们可以在<code>guess[i] ≠ secret[i]</code>时，分别统计<code>secret</code>和<code>guess</code>的各个字符的出现次数，记在两个长度为<code>10</code>的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于0到9的每位数字，应取其在<code>secret</code>和<code>guess</code>中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。</p>\n<h5 id=\"复杂度分析\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：<code>O(N)</code>，其中<code>N</code>是字符串 <code>secret</code> 的长度。</li>\n<li>空间复杂度：<code>O(C)</code>。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此<code>C=10</code>。</li>\n</ul>\n<h3 id=\"题解\">题解</h3>\n<h4 id=\"Python\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls = <span class=\"number\">0</span></span><br><span class=\"line\">        secretCount, guessCount = [<span class=\"number\">0</span>] * <span class=\"number\">10</span>, [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secret, guess):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s == g:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                secretCount[<span class=\"built_in\">int</span>(s)] += <span class=\"number\">1</span></span><br><span class=\"line\">                guessCount[<span class=\"built_in\">int</span>(g)] += <span class=\"number\">1</span></span><br><span class=\"line\">        cows = <span class=\"built_in\">sum</span>(<span class=\"built_in\">min</span>(s, g) <span class=\"keyword\">for</span> s, g <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(secretCount, guessCount))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHint</span>(<span class=\"params\">self, secret: <span class=\"built_in\">str</span>, guess: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span></span><br><span class=\"line\">        bulls, cows = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(secret)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> secret[i] == guess[i]:</span><br><span class=\"line\">                bulls += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(secret[i])] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(secret[i])] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> arr[<span class=\"built_in\">int</span>(guess[i])] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    cows += <span class=\"number\">1</span></span><br><span class=\"line\">                arr[<span class=\"built_in\">int</span>(guess[i])] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">f&#x27;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用两个数组两次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] secretCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] guessCount = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) &#123;</span><br><span class=\"line\">                ++bulls;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++secretCount[secret[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">                ++guessCount[guess[i] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            cows += Math.Min(secretCount[i], guessCount[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改进版：使用一个数组一次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetHint</span>(<span class=\"params\"><span class=\"built_in\">string</span> secret, <span class=\"built_in\">string</span> guess</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> bulls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> cows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.Length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secret[i] == guess[i]) ++bulls;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 小于0说明之前guess中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[secret[i]-<span class=\"string\">&#x27;0&#x27;</span>]++ &lt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">                <span class=\"comment\">// 大于0说明之前secret中出现过相同的字符</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[guess[i]-<span class=\"string\">&#x27;0&#x27;</span>]-- &gt; <span class=\"number\">0</span>) cows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;bulls&#125;</span>A<span class=\"subst\">&#123;cows&#125;</span>B&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"猜数字大小Ⅱ\">猜数字大小Ⅱ</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></p>\n<blockquote>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ul>\n<li>我从 1 到 n 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 赢得游戏 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏。</li>\n</ul>\n<p>给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。</p>\n</blockquote>\n<h3 id=\"解题思路-2\">解题思路</h3>\n<h4 id=\"动态规划\">动态规划</h4>\n<h5 id=\"复杂度分析-2\">复杂度分析</h5>\n<h3 id=\"题解-2\">题解</h3>\n<h4 id=\"Python-2\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-2\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"检测大写字母\">检测大写字母</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/detect-capital/\">https://leetcode-cn.com/problems/detect-capital/</a></p>\n<blockquote>\n<p>我们定义，在以下情况时，单词的大写用法是正确的：</p>\n<ul>\n<li>全部字母都是大写，比如 “USA” 。</li>\n<li>单词中所有字母都不是大写，比如 “leetcode” 。</li>\n<li>如果单词不只含有一个字母，只有首字母大写， 比如 “Google” 。</li>\n</ul>\n<p>给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。</p>\n</blockquote>\n<h3 id=\"解题思路-3\">解题思路</h3>\n<h4 id=\"\"></h4>\n<h5 id=\"复杂度分析-3\">复杂度分析</h5>\n<h3 id=\"题解-3\">题解</h3>\n<h4 id=\"Python-3\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCapitalUse</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word.islower() <span class=\"keyword\">or</span> word.isupper() <span class=\"keyword\">or</span> word.istitle()</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-3\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"键值映射\">键值映射</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/map-sum-pairs/\">https://leetcode-cn.com/problems/map-sum-pairs/</a></p>\n<blockquote>\n<p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<ul>\n<li>MapSum() 初始化 MapSum 对象</li>\n<li>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。</li>\n<li>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</li>\n</ul>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n[“MapSum”, “insert”, “sum”, “insert”, “sum”]<br>\n[[], [“apple”, 3], [“ap”], [“app”, 2], [“ap”]]<br>\n<strong>输出</strong>：<br>\n[null, null, 3, null, 5]<br>\n<strong>解释</strong>：<br>\nMapSum mapSum = new MapSum();<br>\nmapSum.insert(“apple”, 3);<br>\nmapSum.sum(“ap”);           // return 3 (apple = 3)<br>\nmapSum.insert(“app”, 2);<br>\nmapSum.sum(“ap”);           // return 5 (apple + app = 3 + 2 = 5)</p>\n</blockquote>\n<h3 id=\"解题思路-4\">解题思路</h3>\n<h4 id=\"暴力扫描\">暴力扫描</h4>\n<p>将所有的key-val键值存储，在需要搜索给定前缀的和时，依次搜索所有键值，如果key以prefix为前缀，把对应的val累加并返回。</p>\n<h5 id=\"复杂度分析-4\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： insert操作为<code>O(1)</code>。 sum操作为<code>O(NM)</code>，其中N是插入的key的数目，M是给定前缀prefix的长度。</li>\n<li>空间复杂度： <code>O(NM)</code>，其中 NN 是插入的key的数目，MM是字符串key的最大长度。</li>\n</ul>\n<h3 id=\"题解-4\">题解</h3>\n<h4 id=\"Python-4\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.mapsum = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, key: <span class=\"built_in\">str</span>, val: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.mapsum[key] = val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\">self, prefix: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.mapsum.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key.find(prefix) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 或者 key.startswith(prefix):</span></span><br><span class=\"line\">                <span class=\"built_in\">sum</span> += self.mapsum[key]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-4\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"灯泡开关\">灯泡开关</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/bulb-switcher/\">https://leetcode-cn.com/problems/bulb-switcher/</a></p>\n<blockquote>\n<p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。<br>\n第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。<br>\n找出并返回 n 轮后有多少个亮着的灯泡。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><img src=\"bulbswitcher.jpg\" alt=\"灯泡开关示例\"></p>\n<p><strong>输入</strong>：n = 3<br>\n<strong>输出</strong>：1<br>\n<strong>解释</strong>：<br>\n初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>\n第一轮后, 灯泡状态 [开启, 开启, 开启].<br>\n第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>\n第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p>\n<p>你应该返回 1，因为只有一个灯泡还亮着。</p>\n</blockquote>\n<h3 id=\"解题思路-5\">解题思路</h3>\n<h4 id=\"数学\">数学</h4>\n<p>如果我们将所有的灯泡从左到右依次编号为 1,2,⋯,n，那么可以发现：</p>\n<p>在第 i 轮时，我们会将所有编号为 i 的倍数的灯泡进行切换。</p>\n<p>因此，对于第 k 个灯泡，它被切换的次数恰好就是 <code>k 的约数个数</code>。</p>\n<p>如果 k 有偶数个约数，那么最终第 k 个灯泡的状态为暗；如果 k 有奇数个约数，那么最终第 k 个灯泡的状态为亮。</p>\n<p>对于 k 而言，如果它有约数 x，那么一定有约数<code>x/k</code>。因此只要当 <code>x^2≠k</code> 时，约数都是「成对」出现的。这就说明，只有当 k 是「<code>完全平方数</code>」时，它才会有奇数个约数，否则一定有偶数个约数。</p>\n<p>因此我们只需要找出 1,2,⋯,n 中的完全平方数的个数即可，答案即为&quot;<code>n的平方根并向下取整</code>&quot;.</p>\n<h5 id=\"复杂度分析-5\">复杂度分析</h5>\n<ul>\n<li>时间复杂度： <code>O(1)</code></li>\n<li>空间复杂度： <code>O(1)</code></li>\n</ul>\n<h3 id=\"题解-5\">题解</h3>\n<h4 id=\"Python-5\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 暴力、n = 10000时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = [1] * n</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(len(stats)):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (j+1)%(i+1)==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats[j]*=-1</span></span><br><span class=\"line\">    <span class=\"comment\">#     return stats.count(1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 模拟，n = 9999999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     stats = set()</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         dir = [(i + 1) * x for x in range(1, n // (i + 1) + 1)]</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in dir:</span></span><br><span class=\"line\">    <span class=\"comment\">#             if j in stats:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.remove(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#             else:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 stats.add(j)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return n-len(stats)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算变化次数，99999时超出时间限制</span></span><br><span class=\"line\">    <span class=\"comment\"># def bulbSwitch(self, n: int) -&gt; int:</span></span><br><span class=\"line\">    <span class=\"comment\">#     if n &lt; 1: return 0</span></span><br><span class=\"line\">    <span class=\"comment\">#     count = 1</span></span><br><span class=\"line\">    <span class=\"comment\">#     for i in range(1,n):</span></span><br><span class=\"line\">    <span class=\"comment\">#         changetimes = 0  # 变化次数</span></span><br><span class=\"line\">    <span class=\"comment\">#         for j in range(1,(i+1)//2+1):</span></span><br><span class=\"line\">    <span class=\"comment\">#             if (i+1)%j==0:</span></span><br><span class=\"line\">    <span class=\"comment\">#                 changetimes += 1</span></span><br><span class=\"line\">    <span class=\"comment\">#         count += ((changetimes+1)%2)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return count</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数学，变化次数为奇数的，最终为暗，为偶数的，变化为亮，只有完全平方数才会变化为亮，最终变为求完全平方数的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulbSwitch</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(sqrt(n))</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-5\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大单词长度乘积\">最大单词长度乘积</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/</a></p>\n<blockquote>\n<p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：[“abcw”,“baz”,“foo”,“bar”,“xtfn”,“abcdef”]<br>\n<strong>输出</strong>：16<br>\n<strong>解释</strong>：<br>\n“abcw”, “xtfn”<br>\n4 * 4 = 16</p>\n</blockquote>\n<h3 id=\"解题思路-6\">解题思路</h3>\n<h4 id=\"暴力遍历\">暴力遍历</h4>\n<p>遍历每一对字符串，如果这对不含有公共字母，则计算length(word[i]) * length(word[j]) 并得到最大值。</p>\n<h5 id=\"复杂度分析-6\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"位运算\">位运算</h4>\n<p>详见力扣题解：<a href=\"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/\">https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/zui-da-dan-ci-chang-du-cheng-ji-by-leetc-lym9/</a></p>\n<h3 id=\"题解-6\">题解</h3>\n<h4 id=\"Python-6\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProduct</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(words)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        wordset = <span class=\"built_in\">set</span>(words[i])</span><br><span class=\"line\">        <span class=\"comment\"># wordset = set()</span></span><br><span class=\"line\">        <span class=\"comment\"># for x in words[i]:</span></span><br><span class=\"line\">        <span class=\"comment\">#     wordset.add(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用上面代码代替时内存消耗会小0.2-0.3MB，原因未知，待以后深掘。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(words)):</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> words[j]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> wordset:  <span class=\"comment\"># 这一对字符含有公共字母</span></span><br><span class=\"line\">                    flag = <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 这一对字符不含有公共字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j]) &gt; result:  <span class=\"comment\"># 这一对不含有公共字母</span></span><br><span class=\"line\">                result = <span class=\"built_in\">len</span>(words[i]) * <span class=\"built_in\">len</span>(words[j])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-6\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"各位相加\">各位相加</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/add-digits/\">https://leetcode-cn.com/problems/add-digits/</a></p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：num = 38<br>\n<strong>输出</strong>：2<br>\n<strong>解释</strong>：<br>\n各位相加的过程为：<br>\n38 --&gt; 3 + 8 --&gt; 11<br>\n11 --&gt; 1 + 1 --&gt; 2<br>\n由于 2 是一位数，所以返回 2。</p>\n</blockquote>\n<h3 id=\"解题思路-7\">解题思路</h3>\n<h4 id=\"循环相加\">循环相加</h4>\n<h5 id=\"复杂度分析-7\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h4 id=\"数学-2\">数学</h4>\n<h5 id=\"复杂度分析-8\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-7\">题解</h3>\n<h4 id=\"Python-7\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> num &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            lst = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">str</span>(num)))  <span class=\"comment\"># [int(x) for x in str(num)]</span></span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">                num += n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数学方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num%<span class=\"number\">9</span>==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">9</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> num%<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addDigits</span>(<span class=\"params\">self, num: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数学方法2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> num==<span class=\"number\">0</span> : <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (num-<span class=\"number\">1</span>)%<span class=\"number\">9</span>+<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-7\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"构造-K-个回文字符串\">构造 K 个回文字符串</h2>\n<p>leetcode链接：<a href=\"https://leetcode-cn.com/problems/construct-k-palindrome-strings/\">https://leetcode-cn.com/problems/construct-k-palindrome-strings/</a></p>\n<blockquote>\n<p>给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。<br>\n如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 True ，否则返回 False 。</p>\n</blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：s = “annabelle”, k = 2<br>\n<strong>输出</strong>：true<br>\n<strong>解释</strong>：<br>\n一些可行的构造方案包括：“anna” + “elble”，“anbna” + “elle”，“anellena” + “b”</p>\n</blockquote>\n<h3 id=\"解题思路-8\">解题思路</h3>\n<h4 id=\"-2\"></h4>\n<h5 id=\"复杂度分析-9\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-8\">题解</h3>\n<h4 id=\"Python-8\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canConstruct</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s)&lt;k : <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        m = &#123;x: s.count(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>(s)&#125;</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> m[key] % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&gt;k: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> : <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-8\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"new-problem\">new problem</h2>\n<p>leetcode链接：&lt;&gt;</p>\n<blockquote></blockquote>\n<p>示例：</p>\n<blockquote>\n<p><strong>输入</strong>：<br>\n<strong>输出</strong>：<br>\n<strong>解释</strong>：</p>\n</blockquote>\n<h3 id=\"解题思路-9\">解题思路</h3>\n<h4 id=\"-3\"></h4>\n<h5 id=\"复杂度分析-10\">复杂度分析</h5>\n<ul>\n<li>时间复杂度：</li>\n<li>空间复杂度：</li>\n</ul>\n<h3 id=\"题解-9\">题解</h3>\n<h4 id=\"Python-9\"><code>Python</code></h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"C-9\"><code>C#</code></h4>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"数据分析笔记","catalog":true,"lang":"cn","date":"2022-01-21T05:09:45.000Z","subtitle":"Data Analysis Note","header-img":"/img/header_img/nier.png","sticky":998,"_content":"\n# 数据分析思维和方法\n\n## 职业认知\n\n### 数据分析概述与职业操守\n\n#### 概述\n\n数据分析是将数据转变成`有效信息`的过程。  \n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。\n\n> 数据给运营的作用\n> + 运营方向更清晰\n> + 决策更精准\n> + 成功率更高\n\n数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。\n\n数据分析标准流程：  \n1. 明确目标\n2. 明确分析维度和指标\n3. 数据采集\n4. 数据清洗\n5. 数据整理\n6. 数据分析\n7. 数据可视化\n8. 数据报告\n\n#### 职业操守\n\n+ 对于数据产权，用户的利益和机构的利益`置于个人利益之上`。\n+ 保护数据资产的`安全性、真实性、可靠性`（要说明使用了什么科学的方法）。\n+ `不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。`\n+ 应`全面`了解业务背景、痛点、需求。`获取符合要求的源数据`。\n+ 根据`业务需要`，选择`合理`的工具、平台、系统及算法。\n+ `不断迭代`并优化业务指标与数据模型。\n+ 做出具有`商业价值的建议`，并使其`可视化`。\n+ `按时按质完整交付`，并对相关数据和代码`保密`。\n+ 履行`后期`义务和责任，给出指导意见。\n\n#### 大数据的相关法律法规\n\n在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的`法律法规以及道德标准`。\n\n***数据采集的法律问题***\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。\n\n***数据应用的法律问题***\n应用收集到的数据必须遵循以下原则：  \n1. 明示同意\n2. 用途确定\n3. 安全保密\n4. 境内存储\n\n***相关罪刑的法律规定***\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。\n1. 非法获取计算机系统数据罪\n2. 侵犯商业秘密罪\n3. 非法侵入计算机信息系统罪\n4. 网络安全法\n5. 民法总则\n6. 侵犯公民个人信息罪\n\n## 数据分析概念与思维\n\n### 数据分析概念\n数据分析是指用`适当的统计分析方法`对收集来的`大量数据`进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而`对数据加以详细研究和概括总结的过程`。  \n其中，数据也称为观测值，是实验、测量、观察、调查的结果。\n\n数据分为两种：`定性数据`和`定量数据`\n\n定性数据是对特定情况或事物作`特别`的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。\n\n定性数据又被称为品质数据，它分为`定类数据`和`定序数据`两类。\n定量数据又被称为数量数据，它分为`定距数据`和`定比数据`两类。\n> 区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。\n\n### 数据分析思维\n\n在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。\n\n`对比/对照`\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。\n\n`拆分/细分`\n由大变小的过程，将问题拆解成若干部分。\n\n`降维`\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。\n\n`增维`\n增加分析的指标，一般要看具体情况需要换算出新的指标。\n\n`假说`\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。\n\n## 数据分析方法论\n\n### 基本方法论\n\n常用的基本方法如下：  \n\n| 分析方法 | 使用场景 |\n| :---: | :--------- |\n| 对比法 | 发现问题 |\n| 拆分法 | 寻找问题的原因 |\n| 排序法 | 找到分析的重点 |\n| 分组法 | 洞察事物特征 |\n| 交叉法 | 将两个及以上的维度进行比较，并通过交叉的方式分析数据 |\n| 降维法 | 解决复杂问题 |\n| 增维法 | 解决信息量过少的问题 |\n| 指标法 | 基本方法，可支持多字段 |\n| 图形法 | 基本方法，对分析字段有数量限制 |\n\n在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。\n\n我们先学习其中四种：  \n\n#### 漏斗分析法\n\n漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。  \n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。  \n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。  \n![漏斗分析法](漏斗分析法-1.png)\n\n漏斗分析法实例:\n\n1. 确定业务流程，各个环节的量纲必须一致。\n2. 确定数据。\n3. 画图\n\n![漏斗分析法实例](漏斗分析法-2.png)\n\n#### 矩阵分析法\n\n矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。  \n\n![工程管理矩阵分析](矩阵分析法-1.png)\n\n矩阵分析法实例：\n1. 分别计算出支付金额和访客平均价值的平均值。\n2. 选中支付金额和访客平均价值，创建散点图。\n3. 根据两个指标的均值设置X轴和Y轴的交点。\n\n![矩阵分析法实例](矩阵分析法-2.png)\n\n#### ABC分析法\n\nABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。  \nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。\n\n在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。  \n1. A类因素:发生累计频率为0%~80%，是主要影响因素。\n2. B类因素:发生累计频率为80%~90%，是次要影响因素。\n3. c类因素:发生累计频率为90%~100%，是一般影响因素。\n\nABC分析法实例：  \n![ABC分析法实例](ABC分析法.png)\n\n#### 杜邦分析法\n\n杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。\n\n杜邦分析法是对比法和拆分法的经典应用，是一种用来评价企业盈利能力和股东权益回报水平的方法，它利用主要的财务比率之间的关系来综合评价企业的财务状况。\n\n![杜邦分析法](杜邦分析法-1.png)\n\n杜邦分析法实例：\n\n销售额=预售金额+直售金额  \n推广费用=CPC推广费+CPM推广费+CPS推广费  \n成本=推广费用+货物成本+物流成本+人工成本+场地成本  \n毛利润=销售额-成本  \n\n![杜邦分析法实例](杜邦分析法-2.png)\n\n## 商业方法论\n\n### 零售业\n\n零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。\n\n![零售业](零售业-1.png)\n\n传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。  \n\n![零售业-2](零售业-2.png)\n\n从人的维度进行分析：  \n\n![人的分析维度](零售业-3.png)\n\n从货的维度进行分析：  \n\n![货的分析维度](零售业-4.png)\n\n从场的维度进行分析：  \n\n![场的分析维度](零售业-5.png)\n\n从人货场三个维度分析：  \n\n![零售业实例](零售业-6.png)\n\nA\\C\\D\\E：针对具体受众人群，属于人的需求\nB：场给用户带来不好的体验，属于场维度出现的问题\nF：存货/预计存货方面的问题\n\n### 制造业\n\n在制造业，`人机料法环`是对全面质量管理理论中的五个影响产品质量的主要因素的简称。\n\n+ 人，指制造产品的人员\n+ 机，制造产品所用的设备\n+ 料，指制造产品所使用的原材料\n+ 法，指制造产品所使用的方法\n+ 环，指产品制造过程中所处的环境\n\n![人机料法环](制造业-1.png)\n\n### 物流业\n\n物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。\n\n![物流业](物流业-1.png)\n\n**************************************\n\n# 数据分析技能\n\n## 数据库\n\n### 概述\n\n`数据库`\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。\n\n`数据库管理系统`\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。\n\n`结构化查询语言`\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。\n\n数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。\n\n+ 关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等\n+ 非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)\n\n### 使用Navicate操作终端数据库\n\n### MySQL语言\n<!-- TODO：SQL文章 -->\n\n#### 数据定义语言(DDL)\n\nDDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:\n\n+ CREATE TABLE:创建数据库表\n+ ALTER TABLE:更改表结构、添加、删除、修改列长度\n+ DROP TABLE:删除表\n\n#### 数据操纵语言(DML)\n\nDML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:\n\n+ INSERT:添加数据到数据库中\n+ UPDATE:修改数据库中的数据\n+ DELETE:删除数据库中的数据\n+ SELECT:选择(查询)数据\n\n#### 数据查询语言(DQL)\n\nSQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。\n\n+ 查询表数据: SELECT 列名1,列名2,... FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)\n+ 去除重复值: SELECT DISTINCT 列名1 FROM表名;\n+ 排序查询: SELECT 列名1,列名2 ... FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)\n\n## Excel\n\n### 表格概述\n\n表格是数据表达的一种形式。\n\n![表格概述](表格概述.png)\n\n### Excel概述\n\nOffice的电子报表软件。\n\n用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。\n\n### Excel相关组件及工具认知\n\nPower Query简介：  \nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。\n\n![power_query.png](power_query.png)\n\nPower Pivot简介:  \nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级\"两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。\n\n![power_pivot.png](power_pivot.png)\n\n### 公式、函数与制表\n\n#### Excel常用公式、函数\n\n`IF条件公式`\n\nIF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。  \n\n```\nIF (logical_test,value_if_true,value_if_false)  \n```\n\n判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.  \n\n+ Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;\n+ Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;\n+ Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。\n\nIF函数常见问题如下：  \n\n| 问题 | 哪里出了问题 |\n| :--: | :----- |\n| 单元格中的0 | value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。|\n| #NAME? (显示在单元格中) | 这通常意味着公式存在拼写错误 |\n\n`IFS条件公式`\n\nIFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。  \n\n```\nIFS (logical_test, value_if_true,...)\n```\n\n检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.  \n\n请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。\n\n`SUMIF条件公式`\n\n```\nSUMIF (range, criteria,[sum_range])\n```\n\n对满足条件的单元格求和\n\n+ range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。\n+ criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:`问号`(?)以匹配任意单个字符，`星号`(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(\")括起来。如果条件为数字，则无需使用双引号。\n+ sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。\n\n`SUMIFS条件公式`\n\n```\nSUMIFS (sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ..)\n```\n\n| 参数名称 | 说明 |\n| :--: | :------- |\n| sum_range(必需) | 要求和的单元格区域 |\n| criteria_range1(必需) | 使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。 |\n| criteria1(必需) | 定义将计算criteria_range1中的哪些单元格的和的条件。 |\n| criteria_range2, criteria2,...(可选) | 附加的区域及其关联条件。s最多可以输入127个区域/条件对 |\n\n> $ 加上区域表示绝对引用\n\n`VLOOKUP查询公式`\n\n```\nVLOOKUP (lookup_value,table_array,col_index_num,range_lookup)\n```\n\n需要四条信息才可构建VLOOKUP语法:  \n+ 要查找的值，也被称为查阅值。\n+ 查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。\n+ 区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。\n+ (可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。\n\n上述内容集合，如下所示:  \n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)\n\n`INDEX查询公式`\n\n```\nINDEX (array,row_num,[column_num])\n```\n\n在给定的单元格区域中，返回特定行列交叉处单元格的值或引用  \n+ array (必需)。单元格区域或数组常量。\n  - 如果数组仅包含一行或一列，则相应的row_num或\ncolumn_num参数是可选的。\n  - 如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。\n+ row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。\n+ column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数\n\n`MATCH查询公式`\n\n```\nMATCH (lookup_value,lookup_array,match_type)\n```\n\n返回符合特定值特定顺序的项在数组中的相对位置\n\n+ lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。\n+ lookup_array (必需)。要搜索的单元格区域。\n+ match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。\n\nmatch_type行为：\n\n| match_type值 | 说明 |\n| :--: | :----- |\n| 1或者省略 | MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:...-2,-1,0,1, 2,...,A-Z,FALSE,TRUE。 |\n| 0 |MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。 |\n| -1 | MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,...2,1,o,-1,-2,...等等。 |\n\n`LEFT提取公式`\n\n```\nLEFT (text,[num_chars])\n```\n\n从一个文本字符串的第一个字符开始返回指定个数的字符\n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ num_chars(可选)。指定要由LEFT提取的字符的数量。\n  + Num_chars 必须大于或等于零。\n  + 如果num_chars大于文本长度，则LEFT返回全部文本。\n  + 如果省略num_chars，则假定其值为1。\n\n`MID提取公式`\n\n```\nMID (text,start_num,num_chars)\n```\n\n从文本字符串中指定的起始位置起返回制定长度的字符  \n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ start num(必需)。文本中要提取的第一个字符的位置。文本中第一个字符的start_num为1，以此类推。\n  + 如果start_num大于文本长度，则MID/MIDB返回空文本(\")。\n  + 如果start_num小于文本长度，但start_num加num_chars超过文本长度，则MID/MIDB将返回直到文本末尾的字符。如果省略num_chars，则假定其值为1。\n  + 如果start_num小于1，则MID/MIDB返回#VALUE!错误值。\n+ num_chars(必需)。指定希望MID从文本中返回字符的个数\n  + 如果num_chars为负数，则MID返回#VALUE!错误值。\n\n`RIGHT提取公式`\n\n```\nRIGHT (text，num_chars)\n```\n\n从一个文本字符串的最后一个字符开始返回指定个数的字符\n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ num_chars (可选)。指定希望RIGHT提取的字符数。\n  + Num_chars必须大于或等于零。\n  + 如果num_chars大于文本长度，则RIGHT返回所有文本。\n  + 如果省略num_chars，则假定其值为1。\n\n#### Excel数据透视表\n\n是一种可以快速汇总大量数据的交互式方法。可用于深入分析数值数据和回答有关数据的一些预料之外的问题。\n\n数据透视表专门针对以下用途设计:  \n+ 以多种用户友好的方式查询大量数据;\n+ 分类汇总和聚合数值数据，按类别和子类别汇总数据，以及创建自定义计算和公式;\n+ 展开和折叠数据级别以重点关注结果，以及深入查看感兴趣的区域的汇总数据的详细信息;\n+ 可以通过将行移动到列或将列移动到行（也称为\"透视\")，查看源数据的不同汇总;\n+ 通过对最有用、最有趣的一组数据执行筛选、排序、分组和条件格式设置，可以重点关注所需信息;\n+ 提供简明、有吸引力并且带有批注的联机报表或打印报表。\n\n![数据透视表](数据透视表.png)\n\n## QuickBI\n<!-- TODO：BI平台 https://zhuanlan.zhihu.com/p/152340660 -->\n\n### QuickBI概述\n\nQuick BI是一款全场景数据消费式的BI平台，秉承`全场景消费数据，让业务决策触手可及`的使命，通过智能的数据分析和可视化能力帮助企业构建数据分析系统。\n\nQuickBI的价值：  \n+ 帮助企业构建自上而下的决策分析体系\n+ 实现业务流程和数据分析直接协同\n+ 提升企业内各种人员的数据分析效率\n+ 形成数据消费和价值洞察的企业文化\n\nQuickBI的产品优势：\n+ 企业数据分析全场景覆盖\n+ 高性能海量数据分析\n+ 权威认证的可视化\n+ 移动专属和协同\n+ 丰富的集成实践\n+ 企业级安全管控\n\nQuickBI有哪些产品和能力：\n![QuickBI的产品和能力](QuickBI.png)\n\n### 基于QuickBI的分析场景搭建\n\n分析场景:  \n客户画像对于商家来讲是一个进行精准营销的利器，商家可以通过对用户画像分析方法的掌握，以及对顾客基本特征与线上行为偏好的深度了解，以此来挖掘个性化服务，进一步提升顾客在店铺的消费体验。  \n本次内容将基于Quick BI，分析并搭建xx行业的客群画像。  \n![QuickBI-2](QuickBI-2.png)\n\n具体操作`暂略`\n\n# 数据分析场景应用\n\n## 盈亏分析\n\n### 盈亏平衡点\n\n盈亏平衡点(Break Even Point,简称BEP）又称零利润点、保本点、盈亏临界点、损益分歧点、收益转折点。通常是指全部销售收入等于全部成本时（销售收入线与总成本线的交点)的产量。以盈亏平衡点的界限，当销售收入高于盈亏平衡点时企业盈利，反之，企业就亏损。盈亏平衡点可以用销售量来表示，即盈亏平衡点的销售量;也可以用销售额来表示，即盈亏平衡点的销售额。\n\n![盈亏平衡点](盈亏平衡点.png)\n\n> 1. 盈亏平衡点越低，表示项目适应市场变化的能力越强，抗风险能力也越强；盈亏平衡点应按投产后的正常年份计算，而不能按计算期内的平均值计算；\n> 2. BEP（产量）=BEP(%)×设计生产能力；\n> 3. 盈亏平衡点分析只适合于财务评价。\n\n### 固定成本\n\n固定成本(Fixed Cost)，(又称固定费用）相对于变动成本，是指成本总额在一定时期和一定业务量范围内，不受业务量增减变动影响而能保持不变的成本。  \n计算:各项固定成本的合计。\n\n![固定成本](固定成本.png)\n\n### 变动成本\n\n变动成本(variable cost )指支付给各种变动生产要素的费用，如购买原材料及电力消耗费用和工人工资等。这种成本随产量的变化而变化，常常在实际生产过程开始后才需支付。    \n计算:各项变动成本的合计。 \n\n![变动成本](变动成本.png)\n\n### 盈亏预测思路\n\n`确定目标`\n+ 根据盈亏平衡点作最低目标\n+ 根据利润并结合前面做的市场分析确定目标\n\n`目标拆解`\n+ 将目标拆解成多个阶段性目标\n+ 方法:增幅法;参考历史数据\n\n### 盈亏预测计算\n\n![盈亏预测计算](盈亏预测计算.png)\n\n盈亏平衡点销售额 = 固定成本/毛利润率\n\n按实物单位计算：盈亏平衡点=固定成本/（单位产品销售收入-单位产品变动成本）\n按金额计算：盈亏平衡点=固定成本/（1-变动成本/销售收入） \n根据盈亏平衡点=销售额-变动成本-固定成本=0，推算毛利润=固定成本\n\n## 市场分析\n\n市场分析是非常重要的一个环节，是做策划、定位的前道工序。决策者只有了解市场，才能作出准确有效的决策。市场宏观分析的数据时长至少需要近2年以上的数据，如果数据的时长太少则难以全面且有效地对市场作出预判。\n宏观市场分析，包含市场容量分析和市场趋势分析。\n\n### 市场容量\n\n+ `市场容量`也称为市场规模，是指某个市场在统计期间的需求总价值。\n+ `市场容量分析`是对市场规模的分析和判断，市场规模决定了市场中企业发展的天花板。\n+ 使用`统计分组`汇总市场数据，可以帮助企业快速发现数据的特征。\n\n市场容量可视化：  \n![市场容量可视化](市场容量可视化.png)\n\n### 市场趋势分析\n\n市场趋势分析是指根据历史数据掌握市场需求随时间变化的情况，从而估计和预测市场未来的趋势。市场趋势分析在数据分析中具有十分重要的地位，企业都在探索如何能够准确预测市场趋势，因为企业的利润从`信息差`中产生。\n\n市场趋势分析要解决两个问题:  \n1. 市场是否具有潜力?\n企业在进入市场前或者在制订未来的发展规划时需要掌握市场趋势，市场趋势和企业的发展息息相关，发展趋势好的市场称之为增量市场（朝阳产业），发展趋势差的市场称之为存量市场（黄昏产业)。分析市场趋势就是要辨别市场，辨别的`标准`为:如果连续两年增幅超过15%则可判定为增量市场，反之为存量市场。\n2. 市场的运营节奏是怎么样的?\n市场趋势可以根据市场需求的变化划分为导入期、上升期、爆发期、衰退期等4个阶段。其中，导入期是指消费者开始产生需求的阶段，在导入期企业就要布局好产品将其投入市场;上升期是指消费者需求开始上升的阶段，在此阶段企业就要投入足够的市场预算抢占市场;爆发期是指消费者需求达到顶峰的阶段，在此阶段企业要尽量地促进销售;衰退期是指消费者需求开始下降的阶段，在此阶段企业要将库存清理到安全库存的范围。\n![市场运营节奏](市场运营节奏.png)\n\n市场趋势分析可视化：\n折线图是分析市场趋势时常用的可视化对象，在某些数据工具中也称为时序图。  \n折线图比表格形式更加直观，是因为使用了数据分析方法论中的图形法，用户可以通过折线图观察数据的变化趋势。\n\n`同比和环比计算`\n趋势分析中使用同比和环比属于指标法，通过同比和环比两个度量可以掌握趋势的变化情况。其中，环比看的是小趋势，同比看的是大趋势，基于这两个度量可以掌握商业变化的趋势。  \n时间粒度可以是年、季、月，时间粒度选择的越大，度量值能解释的趋势时间跨度则越长。  \n例如同比可以是对比不同年的额度，而环比可以比较不同月的额度。\n\n`组合图创建和设置`\n在完成同比、环比的计算后，数据透视表的数据存有两个量纲，如一个是金额，一个是百分比，这种情况如果直接作图，小量纲的数据将无法阅读。若要在一张图中直观地展示所有数据，可使用组合图的功能。  \n组合图，顾名思义，就是将两种及以上的二维图表组合而成，以主次坐标形式进行展示的图形。\n![组合图](组合图.png)\n\n`预测工作表创建`\n预测工作表可以根据连续的时序数据预测出未来N个时间单位的数据，使用的时序方式是指数平滑法。  \n\n在【预测工作表】选项中，还包含了一个置信区间的概念。  \n`置信区间`，是指由样本统计量构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间展现的是这个参数的真实值落在测量结果周围的概率,其给出的是被测量参数的测量值的可信程度，即前面所说的“概率'。\n\n### 市场集中度分析\n\n品牌是市场的重要组成部分，成熟的市场是由多个品牌构成的，进入一个市场领域前，一定要做好充分的品牌分析。  \n品牌集中度一般是指某一行业内规模最大的前几家企业的销售额占行业总销售额的比例。在电商行业中，品牌集中度用于反映某市场是否有利于行业品牌的发展。  \n\n品牌集中度的计算步骤如下:\n+ 采样市场排行在前N名的品牌市场份额。\n+ 计算每个样本市场份额占采样总体的百分比。\n+ 从大到小排序进行累加，超过8O%份额的样本数X，即TOPN中的市场集中度。表示在所采集的N个品牌中，市场主要被X个品牌垄断。如果在X内，有第X名是第X+1名的2倍，则区X为品牌集中度。\n\n设X:N=Y%，建议N>=3O\n+ Y=(O%,3O%]，表示市场品牌`高度集中`，消费者对品牌具有高度认知，市场可能已经不适合其他品牌的发展。  \n+ Y=(3O%,50%]，表示市场品牌`轻度集中`，消费者对品牌具一定认知，其他品牌要从市场明星品牌中争夺市场份额相对较难。\n+ Y=(5O%,80%]，表示市场品牌`没有集中`，消费者并没有明显地倾向于某些品牌该市场可以给其他品牌提供发展机会。\n+ Y=(8O%,1O0%]，表示消费者对品牌并`不敏感`，有没有品牌对消费者并没有产生影响，品牌市场可能比较混乱，甚至没有品牌市场。\n\n\n### 市场竞争分析\n\n`竞争环境分析`  \n企业的竞争环境是十分复杂的，在进行商业活动时掌握复杂的市场竞争环境是非常重要的。  \n在电商平台，搜索是企业重要的流量渠道之一，搜索环境的竞争程度激烈与否将影响企业的生存环境。搜索环境的激烈程度可以用搜索竞争度来评估，搜索竞争度由搜索人数规模、搜索商品规模决定。\n\n`竞争对手分析`  \n竞争对手分析可以是片面的，也可以是全面的。  \n+ 片面的分析是针对某个维度调查清楚竞争对手在这个维度中的归属问题，比如它的人群、渠道。\n+ 全面的分析是还原竞争对手的运营决策，比如优化图片、商品打造等过程。\n\n竞争对手分析最重要的方法论是`对比法`，通过和自己对比找到差异点。\n\n`市场价格带分组分析`\n价格带区间的步长需要遵循以下规则。  \n1. 根据消费者的心理区间设置步长。\n2. 价格区间的步长要一致，除了价格区间的两端，在价格跨度较大时可以将数据统一汇总起来。\n\n市场售价分析的是产品的销售价格，产品销售价格和销售额及利润息息相关。如果售价定高了，虽然利润得以保证，但是销量及销售额难以提高，总的利润也不会太乐观。如果售价低了，销售可能会比较乐观，但利润难以保证。\n![](利润和价格的关系.png)\n\n`市场客群分析`\n市场客群分析是对市场的消费者进行特征分析，在现今的市场环境下，企业都在实行精细化的运营策略，提供个性化的服务，满足消费者的个性需求，而这一切的前提，就是企业需要了解消费者。  \n市场客群分析包括消费者的`基本特征分析`以及消费者的`行为习惯分析`，基本特征是指消费者的基本属性，如:性别、年龄等，行为习惯是指消费者在发现商品到购买商品这整个的购物过程中所展示出来的行为习惯，如:搜索词偏好、支付时段偏好、属性偏好等。  \n\n## 经营分析\n\n### 店铺销售额预测\n\n在店铺经营过程中，卖家需要利用科学的方法和手段，对未来一定时期内的运营数据发展趋势和营销影响因素的变化做出判断，进而为营销决策服务。对店铺销售额趋势进行预测，需要了解数据初步呈现的发展规律，选择合适的`趋势预测方法（线性回归算法预测、时间序列预测等）`，从而完成趋势预测与数值预估。\n\n![店铺销售额预测](店铺销售额预测.png)\n\n### 店铺流量分析\n\n`思路`\n\n流量是决定店铺销量基础的因素，店铺流量分析可以从`店铺流量结构、流量质量`等方面进行分析。\n\n![店铺流量分析](店铺流量分析.png)\n\n`目的`\n\n店铺流量分析的主要目的如下:\n+ 分析各`渠道、地域、入店关键词等方面的流量分布`，找到店铺主要流量来源。\n+ 观察流量来源结合推广成果，判定推广成果与流量来源`是否匹配`。\n+ 观察商品引流效果。\n+ 解析流量来源的`整体质量`，其中跳失率、人均浏览量和平均停留时长都是评判流量质量的重要指标。\n+ 数据流量`占比的情况分析`,判断店铺流量结构的健康度、推广策略和数据占比是否符合推广逻辑。\n\n> 以免费流量为占主导地位的店铺流量是健康的\n\n### 店铺推广分析\n\n店铺推广分析是对店铺在进行营销推广活动时所产生的数据进行分析。其中，`投入产出比`是评判推广效果好坏的硬性指标。\n\n![店铺推广分析](店铺推广分析.png)\n\n### 店铺品类结构分析\n\n店铺品类结构分析，是对店铺内各产品的价格、品类、热卖程度等因素进行分析,了解不同产品品类的`数量、销售额以及利润`，为运营人员调整产品运营方向提供数据参考依据。\n\n![店铺品类结构分析](店铺品类结构分析.png)\n\n### 店铺商品分析\n\n店铺运营当中，商品分析是非常重要的一个环节，它关系到我们对商品的定位和销售方向性的把握。\n\n![店铺商品分析](店铺商品分析.png)\n\n### 店铺客群分析\n\n店铺客群分析是针对店铺消费者的特征分析，其中包括了性别、年龄、地域等基本特征分析和搜索偏好、支付偏好、商品品类偏好等行为特征。\n\n![店铺客群分析](店铺客群分析.png)\n\n## 杜邦分析表\n\n（店铺诊断模型）\n杜邦分析表示基于杜邦分析法的一个应用，可以查看上文的[杜邦分析法](#杜邦分析法)\n\n### 店铺诊断指标拆解\n\n![店铺诊断指标拆解](店铺诊断指标拆解.png)\n\n","source":"_posts/cn/Data-Analysis-Note.md","raw":"---\ntitle: 数据分析笔记\ncatalog: true\nlang: cn\ndate: 2022-01-21 13:09:45\nsubtitle: Data Analysis Note\nheader-img: /img/header_img/nier.png\ntags:\n- Date Analysis\n- Excel\ncategories:\n- Note\nsticky: 998\n---\n\n# 数据分析思维和方法\n\n## 职业认知\n\n### 数据分析概述与职业操守\n\n#### 概述\n\n数据分析是将数据转变成`有效信息`的过程。  \n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。\n\n> 数据给运营的作用\n> + 运营方向更清晰\n> + 决策更精准\n> + 成功率更高\n\n数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。\n\n数据分析标准流程：  \n1. 明确目标\n2. 明确分析维度和指标\n3. 数据采集\n4. 数据清洗\n5. 数据整理\n6. 数据分析\n7. 数据可视化\n8. 数据报告\n\n#### 职业操守\n\n+ 对于数据产权，用户的利益和机构的利益`置于个人利益之上`。\n+ 保护数据资产的`安全性、真实性、可靠性`（要说明使用了什么科学的方法）。\n+ `不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。`\n+ 应`全面`了解业务背景、痛点、需求。`获取符合要求的源数据`。\n+ 根据`业务需要`，选择`合理`的工具、平台、系统及算法。\n+ `不断迭代`并优化业务指标与数据模型。\n+ 做出具有`商业价值的建议`，并使其`可视化`。\n+ `按时按质完整交付`，并对相关数据和代码`保密`。\n+ 履行`后期`义务和责任，给出指导意见。\n\n#### 大数据的相关法律法规\n\n在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的`法律法规以及道德标准`。\n\n***数据采集的法律问题***\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。\n\n***数据应用的法律问题***\n应用收集到的数据必须遵循以下原则：  \n1. 明示同意\n2. 用途确定\n3. 安全保密\n4. 境内存储\n\n***相关罪刑的法律规定***\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。\n1. 非法获取计算机系统数据罪\n2. 侵犯商业秘密罪\n3. 非法侵入计算机信息系统罪\n4. 网络安全法\n5. 民法总则\n6. 侵犯公民个人信息罪\n\n## 数据分析概念与思维\n\n### 数据分析概念\n数据分析是指用`适当的统计分析方法`对收集来的`大量数据`进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而`对数据加以详细研究和概括总结的过程`。  \n其中，数据也称为观测值，是实验、测量、观察、调查的结果。\n\n数据分为两种：`定性数据`和`定量数据`\n\n定性数据是对特定情况或事物作`特别`的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。\n\n定性数据又被称为品质数据，它分为`定类数据`和`定序数据`两类。\n定量数据又被称为数量数据，它分为`定距数据`和`定比数据`两类。\n> 区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。\n\n### 数据分析思维\n\n在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。\n\n`对比/对照`\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。\n\n`拆分/细分`\n由大变小的过程，将问题拆解成若干部分。\n\n`降维`\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。\n\n`增维`\n增加分析的指标，一般要看具体情况需要换算出新的指标。\n\n`假说`\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。\n\n## 数据分析方法论\n\n### 基本方法论\n\n常用的基本方法如下：  \n\n| 分析方法 | 使用场景 |\n| :---: | :--------- |\n| 对比法 | 发现问题 |\n| 拆分法 | 寻找问题的原因 |\n| 排序法 | 找到分析的重点 |\n| 分组法 | 洞察事物特征 |\n| 交叉法 | 将两个及以上的维度进行比较，并通过交叉的方式分析数据 |\n| 降维法 | 解决复杂问题 |\n| 增维法 | 解决信息量过少的问题 |\n| 指标法 | 基本方法，可支持多字段 |\n| 图形法 | 基本方法，对分析字段有数量限制 |\n\n在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。\n\n我们先学习其中四种：  \n\n#### 漏斗分析法\n\n漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。  \n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。  \n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。  \n![漏斗分析法](漏斗分析法-1.png)\n\n漏斗分析法实例:\n\n1. 确定业务流程，各个环节的量纲必须一致。\n2. 确定数据。\n3. 画图\n\n![漏斗分析法实例](漏斗分析法-2.png)\n\n#### 矩阵分析法\n\n矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。  \n\n![工程管理矩阵分析](矩阵分析法-1.png)\n\n矩阵分析法实例：\n1. 分别计算出支付金额和访客平均价值的平均值。\n2. 选中支付金额和访客平均价值，创建散点图。\n3. 根据两个指标的均值设置X轴和Y轴的交点。\n\n![矩阵分析法实例](矩阵分析法-2.png)\n\n#### ABC分析法\n\nABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。  \nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。\n\n在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。  \n1. A类因素:发生累计频率为0%~80%，是主要影响因素。\n2. B类因素:发生累计频率为80%~90%，是次要影响因素。\n3. c类因素:发生累计频率为90%~100%，是一般影响因素。\n\nABC分析法实例：  \n![ABC分析法实例](ABC分析法.png)\n\n#### 杜邦分析法\n\n杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。\n\n杜邦分析法是对比法和拆分法的经典应用，是一种用来评价企业盈利能力和股东权益回报水平的方法，它利用主要的财务比率之间的关系来综合评价企业的财务状况。\n\n![杜邦分析法](杜邦分析法-1.png)\n\n杜邦分析法实例：\n\n销售额=预售金额+直售金额  \n推广费用=CPC推广费+CPM推广费+CPS推广费  \n成本=推广费用+货物成本+物流成本+人工成本+场地成本  \n毛利润=销售额-成本  \n\n![杜邦分析法实例](杜邦分析法-2.png)\n\n## 商业方法论\n\n### 零售业\n\n零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。\n\n![零售业](零售业-1.png)\n\n传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。  \n\n![零售业-2](零售业-2.png)\n\n从人的维度进行分析：  \n\n![人的分析维度](零售业-3.png)\n\n从货的维度进行分析：  \n\n![货的分析维度](零售业-4.png)\n\n从场的维度进行分析：  \n\n![场的分析维度](零售业-5.png)\n\n从人货场三个维度分析：  \n\n![零售业实例](零售业-6.png)\n\nA\\C\\D\\E：针对具体受众人群，属于人的需求\nB：场给用户带来不好的体验，属于场维度出现的问题\nF：存货/预计存货方面的问题\n\n### 制造业\n\n在制造业，`人机料法环`是对全面质量管理理论中的五个影响产品质量的主要因素的简称。\n\n+ 人，指制造产品的人员\n+ 机，制造产品所用的设备\n+ 料，指制造产品所使用的原材料\n+ 法，指制造产品所使用的方法\n+ 环，指产品制造过程中所处的环境\n\n![人机料法环](制造业-1.png)\n\n### 物流业\n\n物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。\n\n![物流业](物流业-1.png)\n\n**************************************\n\n# 数据分析技能\n\n## 数据库\n\n### 概述\n\n`数据库`\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。\n\n`数据库管理系统`\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。\n\n`结构化查询语言`\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。\n\n数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。\n\n+ 关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等\n+ 非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)\n\n### 使用Navicate操作终端数据库\n\n### MySQL语言\n<!-- TODO：SQL文章 -->\n\n#### 数据定义语言(DDL)\n\nDDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:\n\n+ CREATE TABLE:创建数据库表\n+ ALTER TABLE:更改表结构、添加、删除、修改列长度\n+ DROP TABLE:删除表\n\n#### 数据操纵语言(DML)\n\nDML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:\n\n+ INSERT:添加数据到数据库中\n+ UPDATE:修改数据库中的数据\n+ DELETE:删除数据库中的数据\n+ SELECT:选择(查询)数据\n\n#### 数据查询语言(DQL)\n\nSQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。\n\n+ 查询表数据: SELECT 列名1,列名2,... FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)\n+ 去除重复值: SELECT DISTINCT 列名1 FROM表名;\n+ 排序查询: SELECT 列名1,列名2 ... FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)\n\n## Excel\n\n### 表格概述\n\n表格是数据表达的一种形式。\n\n![表格概述](表格概述.png)\n\n### Excel概述\n\nOffice的电子报表软件。\n\n用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。\n\n### Excel相关组件及工具认知\n\nPower Query简介：  \nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。\n\n![power_query.png](power_query.png)\n\nPower Pivot简介:  \nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级\"两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。\n\n![power_pivot.png](power_pivot.png)\n\n### 公式、函数与制表\n\n#### Excel常用公式、函数\n\n`IF条件公式`\n\nIF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。  \n\n```\nIF (logical_test,value_if_true,value_if_false)  \n```\n\n判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.  \n\n+ Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;\n+ Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;\n+ Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。\n\nIF函数常见问题如下：  \n\n| 问题 | 哪里出了问题 |\n| :--: | :----- |\n| 单元格中的0 | value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。|\n| #NAME? (显示在单元格中) | 这通常意味着公式存在拼写错误 |\n\n`IFS条件公式`\n\nIFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。  \n\n```\nIFS (logical_test, value_if_true,...)\n```\n\n检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.  \n\n请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。\n\n`SUMIF条件公式`\n\n```\nSUMIF (range, criteria,[sum_range])\n```\n\n对满足条件的单元格求和\n\n+ range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。\n+ criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:`问号`(?)以匹配任意单个字符，`星号`(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(\")括起来。如果条件为数字，则无需使用双引号。\n+ sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。\n\n`SUMIFS条件公式`\n\n```\nSUMIFS (sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ..)\n```\n\n| 参数名称 | 说明 |\n| :--: | :------- |\n| sum_range(必需) | 要求和的单元格区域 |\n| criteria_range1(必需) | 使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。 |\n| criteria1(必需) | 定义将计算criteria_range1中的哪些单元格的和的条件。 |\n| criteria_range2, criteria2,...(可选) | 附加的区域及其关联条件。s最多可以输入127个区域/条件对 |\n\n> $ 加上区域表示绝对引用\n\n`VLOOKUP查询公式`\n\n```\nVLOOKUP (lookup_value,table_array,col_index_num,range_lookup)\n```\n\n需要四条信息才可构建VLOOKUP语法:  \n+ 要查找的值，也被称为查阅值。\n+ 查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。\n+ 区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。\n+ (可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。\n\n上述内容集合，如下所示:  \n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)\n\n`INDEX查询公式`\n\n```\nINDEX (array,row_num,[column_num])\n```\n\n在给定的单元格区域中，返回特定行列交叉处单元格的值或引用  \n+ array (必需)。单元格区域或数组常量。\n  - 如果数组仅包含一行或一列，则相应的row_num或\ncolumn_num参数是可选的。\n  - 如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。\n+ row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。\n+ column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数\n\n`MATCH查询公式`\n\n```\nMATCH (lookup_value,lookup_array,match_type)\n```\n\n返回符合特定值特定顺序的项在数组中的相对位置\n\n+ lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。\n+ lookup_array (必需)。要搜索的单元格区域。\n+ match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。\n\nmatch_type行为：\n\n| match_type值 | 说明 |\n| :--: | :----- |\n| 1或者省略 | MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:...-2,-1,0,1, 2,...,A-Z,FALSE,TRUE。 |\n| 0 |MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。 |\n| -1 | MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,...2,1,o,-1,-2,...等等。 |\n\n`LEFT提取公式`\n\n```\nLEFT (text,[num_chars])\n```\n\n从一个文本字符串的第一个字符开始返回指定个数的字符\n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ num_chars(可选)。指定要由LEFT提取的字符的数量。\n  + Num_chars 必须大于或等于零。\n  + 如果num_chars大于文本长度，则LEFT返回全部文本。\n  + 如果省略num_chars，则假定其值为1。\n\n`MID提取公式`\n\n```\nMID (text,start_num,num_chars)\n```\n\n从文本字符串中指定的起始位置起返回制定长度的字符  \n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ start num(必需)。文本中要提取的第一个字符的位置。文本中第一个字符的start_num为1，以此类推。\n  + 如果start_num大于文本长度，则MID/MIDB返回空文本(\")。\n  + 如果start_num小于文本长度，但start_num加num_chars超过文本长度，则MID/MIDB将返回直到文本末尾的字符。如果省略num_chars，则假定其值为1。\n  + 如果start_num小于1，则MID/MIDB返回#VALUE!错误值。\n+ num_chars(必需)。指定希望MID从文本中返回字符的个数\n  + 如果num_chars为负数，则MID返回#VALUE!错误值。\n\n`RIGHT提取公式`\n\n```\nRIGHT (text，num_chars)\n```\n\n从一个文本字符串的最后一个字符开始返回指定个数的字符\n\n+ text文本(必需)。包含要提取的字符的文本字符串。\n+ num_chars (可选)。指定希望RIGHT提取的字符数。\n  + Num_chars必须大于或等于零。\n  + 如果num_chars大于文本长度，则RIGHT返回所有文本。\n  + 如果省略num_chars，则假定其值为1。\n\n#### Excel数据透视表\n\n是一种可以快速汇总大量数据的交互式方法。可用于深入分析数值数据和回答有关数据的一些预料之外的问题。\n\n数据透视表专门针对以下用途设计:  \n+ 以多种用户友好的方式查询大量数据;\n+ 分类汇总和聚合数值数据，按类别和子类别汇总数据，以及创建自定义计算和公式;\n+ 展开和折叠数据级别以重点关注结果，以及深入查看感兴趣的区域的汇总数据的详细信息;\n+ 可以通过将行移动到列或将列移动到行（也称为\"透视\")，查看源数据的不同汇总;\n+ 通过对最有用、最有趣的一组数据执行筛选、排序、分组和条件格式设置，可以重点关注所需信息;\n+ 提供简明、有吸引力并且带有批注的联机报表或打印报表。\n\n![数据透视表](数据透视表.png)\n\n## QuickBI\n<!-- TODO：BI平台 https://zhuanlan.zhihu.com/p/152340660 -->\n\n### QuickBI概述\n\nQuick BI是一款全场景数据消费式的BI平台，秉承`全场景消费数据，让业务决策触手可及`的使命，通过智能的数据分析和可视化能力帮助企业构建数据分析系统。\n\nQuickBI的价值：  \n+ 帮助企业构建自上而下的决策分析体系\n+ 实现业务流程和数据分析直接协同\n+ 提升企业内各种人员的数据分析效率\n+ 形成数据消费和价值洞察的企业文化\n\nQuickBI的产品优势：\n+ 企业数据分析全场景覆盖\n+ 高性能海量数据分析\n+ 权威认证的可视化\n+ 移动专属和协同\n+ 丰富的集成实践\n+ 企业级安全管控\n\nQuickBI有哪些产品和能力：\n![QuickBI的产品和能力](QuickBI.png)\n\n### 基于QuickBI的分析场景搭建\n\n分析场景:  \n客户画像对于商家来讲是一个进行精准营销的利器，商家可以通过对用户画像分析方法的掌握，以及对顾客基本特征与线上行为偏好的深度了解，以此来挖掘个性化服务，进一步提升顾客在店铺的消费体验。  \n本次内容将基于Quick BI，分析并搭建xx行业的客群画像。  \n![QuickBI-2](QuickBI-2.png)\n\n具体操作`暂略`\n\n# 数据分析场景应用\n\n## 盈亏分析\n\n### 盈亏平衡点\n\n盈亏平衡点(Break Even Point,简称BEP）又称零利润点、保本点、盈亏临界点、损益分歧点、收益转折点。通常是指全部销售收入等于全部成本时（销售收入线与总成本线的交点)的产量。以盈亏平衡点的界限，当销售收入高于盈亏平衡点时企业盈利，反之，企业就亏损。盈亏平衡点可以用销售量来表示，即盈亏平衡点的销售量;也可以用销售额来表示，即盈亏平衡点的销售额。\n\n![盈亏平衡点](盈亏平衡点.png)\n\n> 1. 盈亏平衡点越低，表示项目适应市场变化的能力越强，抗风险能力也越强；盈亏平衡点应按投产后的正常年份计算，而不能按计算期内的平均值计算；\n> 2. BEP（产量）=BEP(%)×设计生产能力；\n> 3. 盈亏平衡点分析只适合于财务评价。\n\n### 固定成本\n\n固定成本(Fixed Cost)，(又称固定费用）相对于变动成本，是指成本总额在一定时期和一定业务量范围内，不受业务量增减变动影响而能保持不变的成本。  \n计算:各项固定成本的合计。\n\n![固定成本](固定成本.png)\n\n### 变动成本\n\n变动成本(variable cost )指支付给各种变动生产要素的费用，如购买原材料及电力消耗费用和工人工资等。这种成本随产量的变化而变化，常常在实际生产过程开始后才需支付。    \n计算:各项变动成本的合计。 \n\n![变动成本](变动成本.png)\n\n### 盈亏预测思路\n\n`确定目标`\n+ 根据盈亏平衡点作最低目标\n+ 根据利润并结合前面做的市场分析确定目标\n\n`目标拆解`\n+ 将目标拆解成多个阶段性目标\n+ 方法:增幅法;参考历史数据\n\n### 盈亏预测计算\n\n![盈亏预测计算](盈亏预测计算.png)\n\n盈亏平衡点销售额 = 固定成本/毛利润率\n\n按实物单位计算：盈亏平衡点=固定成本/（单位产品销售收入-单位产品变动成本）\n按金额计算：盈亏平衡点=固定成本/（1-变动成本/销售收入） \n根据盈亏平衡点=销售额-变动成本-固定成本=0，推算毛利润=固定成本\n\n## 市场分析\n\n市场分析是非常重要的一个环节，是做策划、定位的前道工序。决策者只有了解市场，才能作出准确有效的决策。市场宏观分析的数据时长至少需要近2年以上的数据，如果数据的时长太少则难以全面且有效地对市场作出预判。\n宏观市场分析，包含市场容量分析和市场趋势分析。\n\n### 市场容量\n\n+ `市场容量`也称为市场规模，是指某个市场在统计期间的需求总价值。\n+ `市场容量分析`是对市场规模的分析和判断，市场规模决定了市场中企业发展的天花板。\n+ 使用`统计分组`汇总市场数据，可以帮助企业快速发现数据的特征。\n\n市场容量可视化：  \n![市场容量可视化](市场容量可视化.png)\n\n### 市场趋势分析\n\n市场趋势分析是指根据历史数据掌握市场需求随时间变化的情况，从而估计和预测市场未来的趋势。市场趋势分析在数据分析中具有十分重要的地位，企业都在探索如何能够准确预测市场趋势，因为企业的利润从`信息差`中产生。\n\n市场趋势分析要解决两个问题:  \n1. 市场是否具有潜力?\n企业在进入市场前或者在制订未来的发展规划时需要掌握市场趋势，市场趋势和企业的发展息息相关，发展趋势好的市场称之为增量市场（朝阳产业），发展趋势差的市场称之为存量市场（黄昏产业)。分析市场趋势就是要辨别市场，辨别的`标准`为:如果连续两年增幅超过15%则可判定为增量市场，反之为存量市场。\n2. 市场的运营节奏是怎么样的?\n市场趋势可以根据市场需求的变化划分为导入期、上升期、爆发期、衰退期等4个阶段。其中，导入期是指消费者开始产生需求的阶段，在导入期企业就要布局好产品将其投入市场;上升期是指消费者需求开始上升的阶段，在此阶段企业就要投入足够的市场预算抢占市场;爆发期是指消费者需求达到顶峰的阶段，在此阶段企业要尽量地促进销售;衰退期是指消费者需求开始下降的阶段，在此阶段企业要将库存清理到安全库存的范围。\n![市场运营节奏](市场运营节奏.png)\n\n市场趋势分析可视化：\n折线图是分析市场趋势时常用的可视化对象，在某些数据工具中也称为时序图。  \n折线图比表格形式更加直观，是因为使用了数据分析方法论中的图形法，用户可以通过折线图观察数据的变化趋势。\n\n`同比和环比计算`\n趋势分析中使用同比和环比属于指标法，通过同比和环比两个度量可以掌握趋势的变化情况。其中，环比看的是小趋势，同比看的是大趋势，基于这两个度量可以掌握商业变化的趋势。  \n时间粒度可以是年、季、月，时间粒度选择的越大，度量值能解释的趋势时间跨度则越长。  \n例如同比可以是对比不同年的额度，而环比可以比较不同月的额度。\n\n`组合图创建和设置`\n在完成同比、环比的计算后，数据透视表的数据存有两个量纲，如一个是金额，一个是百分比，这种情况如果直接作图，小量纲的数据将无法阅读。若要在一张图中直观地展示所有数据，可使用组合图的功能。  \n组合图，顾名思义，就是将两种及以上的二维图表组合而成，以主次坐标形式进行展示的图形。\n![组合图](组合图.png)\n\n`预测工作表创建`\n预测工作表可以根据连续的时序数据预测出未来N个时间单位的数据，使用的时序方式是指数平滑法。  \n\n在【预测工作表】选项中，还包含了一个置信区间的概念。  \n`置信区间`，是指由样本统计量构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间展现的是这个参数的真实值落在测量结果周围的概率,其给出的是被测量参数的测量值的可信程度，即前面所说的“概率'。\n\n### 市场集中度分析\n\n品牌是市场的重要组成部分，成熟的市场是由多个品牌构成的，进入一个市场领域前，一定要做好充分的品牌分析。  \n品牌集中度一般是指某一行业内规模最大的前几家企业的销售额占行业总销售额的比例。在电商行业中，品牌集中度用于反映某市场是否有利于行业品牌的发展。  \n\n品牌集中度的计算步骤如下:\n+ 采样市场排行在前N名的品牌市场份额。\n+ 计算每个样本市场份额占采样总体的百分比。\n+ 从大到小排序进行累加，超过8O%份额的样本数X，即TOPN中的市场集中度。表示在所采集的N个品牌中，市场主要被X个品牌垄断。如果在X内，有第X名是第X+1名的2倍，则区X为品牌集中度。\n\n设X:N=Y%，建议N>=3O\n+ Y=(O%,3O%]，表示市场品牌`高度集中`，消费者对品牌具有高度认知，市场可能已经不适合其他品牌的发展。  \n+ Y=(3O%,50%]，表示市场品牌`轻度集中`，消费者对品牌具一定认知，其他品牌要从市场明星品牌中争夺市场份额相对较难。\n+ Y=(5O%,80%]，表示市场品牌`没有集中`，消费者并没有明显地倾向于某些品牌该市场可以给其他品牌提供发展机会。\n+ Y=(8O%,1O0%]，表示消费者对品牌并`不敏感`，有没有品牌对消费者并没有产生影响，品牌市场可能比较混乱，甚至没有品牌市场。\n\n\n### 市场竞争分析\n\n`竞争环境分析`  \n企业的竞争环境是十分复杂的，在进行商业活动时掌握复杂的市场竞争环境是非常重要的。  \n在电商平台，搜索是企业重要的流量渠道之一，搜索环境的竞争程度激烈与否将影响企业的生存环境。搜索环境的激烈程度可以用搜索竞争度来评估，搜索竞争度由搜索人数规模、搜索商品规模决定。\n\n`竞争对手分析`  \n竞争对手分析可以是片面的，也可以是全面的。  \n+ 片面的分析是针对某个维度调查清楚竞争对手在这个维度中的归属问题，比如它的人群、渠道。\n+ 全面的分析是还原竞争对手的运营决策，比如优化图片、商品打造等过程。\n\n竞争对手分析最重要的方法论是`对比法`，通过和自己对比找到差异点。\n\n`市场价格带分组分析`\n价格带区间的步长需要遵循以下规则。  \n1. 根据消费者的心理区间设置步长。\n2. 价格区间的步长要一致，除了价格区间的两端，在价格跨度较大时可以将数据统一汇总起来。\n\n市场售价分析的是产品的销售价格，产品销售价格和销售额及利润息息相关。如果售价定高了，虽然利润得以保证，但是销量及销售额难以提高，总的利润也不会太乐观。如果售价低了，销售可能会比较乐观，但利润难以保证。\n![](利润和价格的关系.png)\n\n`市场客群分析`\n市场客群分析是对市场的消费者进行特征分析，在现今的市场环境下，企业都在实行精细化的运营策略，提供个性化的服务，满足消费者的个性需求，而这一切的前提，就是企业需要了解消费者。  \n市场客群分析包括消费者的`基本特征分析`以及消费者的`行为习惯分析`，基本特征是指消费者的基本属性，如:性别、年龄等，行为习惯是指消费者在发现商品到购买商品这整个的购物过程中所展示出来的行为习惯，如:搜索词偏好、支付时段偏好、属性偏好等。  \n\n## 经营分析\n\n### 店铺销售额预测\n\n在店铺经营过程中，卖家需要利用科学的方法和手段，对未来一定时期内的运营数据发展趋势和营销影响因素的变化做出判断，进而为营销决策服务。对店铺销售额趋势进行预测，需要了解数据初步呈现的发展规律，选择合适的`趋势预测方法（线性回归算法预测、时间序列预测等）`，从而完成趋势预测与数值预估。\n\n![店铺销售额预测](店铺销售额预测.png)\n\n### 店铺流量分析\n\n`思路`\n\n流量是决定店铺销量基础的因素，店铺流量分析可以从`店铺流量结构、流量质量`等方面进行分析。\n\n![店铺流量分析](店铺流量分析.png)\n\n`目的`\n\n店铺流量分析的主要目的如下:\n+ 分析各`渠道、地域、入店关键词等方面的流量分布`，找到店铺主要流量来源。\n+ 观察流量来源结合推广成果，判定推广成果与流量来源`是否匹配`。\n+ 观察商品引流效果。\n+ 解析流量来源的`整体质量`，其中跳失率、人均浏览量和平均停留时长都是评判流量质量的重要指标。\n+ 数据流量`占比的情况分析`,判断店铺流量结构的健康度、推广策略和数据占比是否符合推广逻辑。\n\n> 以免费流量为占主导地位的店铺流量是健康的\n\n### 店铺推广分析\n\n店铺推广分析是对店铺在进行营销推广活动时所产生的数据进行分析。其中，`投入产出比`是评判推广效果好坏的硬性指标。\n\n![店铺推广分析](店铺推广分析.png)\n\n### 店铺品类结构分析\n\n店铺品类结构分析，是对店铺内各产品的价格、品类、热卖程度等因素进行分析,了解不同产品品类的`数量、销售额以及利润`，为运营人员调整产品运营方向提供数据参考依据。\n\n![店铺品类结构分析](店铺品类结构分析.png)\n\n### 店铺商品分析\n\n店铺运营当中，商品分析是非常重要的一个环节，它关系到我们对商品的定位和销售方向性的把握。\n\n![店铺商品分析](店铺商品分析.png)\n\n### 店铺客群分析\n\n店铺客群分析是针对店铺消费者的特征分析，其中包括了性别、年龄、地域等基本特征分析和搜索偏好、支付偏好、商品品类偏好等行为特征。\n\n![店铺客群分析](店铺客群分析.png)\n\n## 杜邦分析表\n\n（店铺诊断模型）\n杜邦分析表示基于杜邦分析法的一个应用，可以查看上文的[杜邦分析法](#杜邦分析法)\n\n### 店铺诊断指标拆解\n\n![店铺诊断指标拆解](店铺诊断指标拆解.png)\n\n","slug":"Data-Analysis-Note","published":1,"updated":"2022-01-21T05:09:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0n0009wwvoc8rv19py","content":"<h1>数据分析思维和方法</h1>\n<h2 id=\"职业认知\">职业认知</h2>\n<h3 id=\"数据分析概述与职业操守\">数据分析概述与职业操守</h3>\n<h4 id=\"概述\">概述</h4>\n<p>数据分析是将数据转变成<code>有效信息</code>的过程。<br>\n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。</p>\n<blockquote>\n<p>数据给运营的作用</p>\n<ul>\n<li>运营方向更清晰</li>\n<li>决策更精准</li>\n<li>成功率更高</li>\n</ul>\n</blockquote>\n<p>数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。</p>\n<p>数据分析标准流程：</p>\n<ol>\n<li>明确目标</li>\n<li>明确分析维度和指标</li>\n<li>数据采集</li>\n<li>数据清洗</li>\n<li>数据整理</li>\n<li>数据分析</li>\n<li>数据可视化</li>\n<li>数据报告</li>\n</ol>\n<h4 id=\"职业操守\">职业操守</h4>\n<ul>\n<li>对于数据产权，用户的利益和机构的利益<code>置于个人利益之上</code>。</li>\n<li>保护数据资产的<code>安全性、真实性、可靠性</code>（要说明使用了什么科学的方法）。</li>\n<li><code>不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。</code></li>\n<li>应<code>全面</code>了解业务背景、痛点、需求。<code>获取符合要求的源数据</code>。</li>\n<li>根据<code>业务需要</code>，选择<code>合理</code>的工具、平台、系统及算法。</li>\n<li><code>不断迭代</code>并优化业务指标与数据模型。</li>\n<li>做出具有<code>商业价值的建议</code>，并使其<code>可视化</code>。</li>\n<li><code>按时按质完整交付</code>，并对相关数据和代码<code>保密</code>。</li>\n<li>履行<code>后期</code>义务和责任，给出指导意见。</li>\n</ul>\n<h4 id=\"大数据的相关法律法规\">大数据的相关法律法规</h4>\n<p>在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的<code>法律法规以及道德标准</code>。</p>\n<p><em><strong>数据采集的法律问题</strong></em><br>\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。</p>\n<p><em><strong>数据应用的法律问题</strong></em><br>\n应用收集到的数据必须遵循以下原则：</p>\n<ol>\n<li>明示同意</li>\n<li>用途确定</li>\n<li>安全保密</li>\n<li>境内存储</li>\n</ol>\n<p><em><strong>相关罪刑的法律规定</strong></em><br>\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。</p>\n<ol>\n<li>非法获取计算机系统数据罪</li>\n<li>侵犯商业秘密罪</li>\n<li>非法侵入计算机信息系统罪</li>\n<li>网络安全法</li>\n<li>民法总则</li>\n<li>侵犯公民个人信息罪</li>\n</ol>\n<h2 id=\"数据分析概念与思维\">数据分析概念与思维</h2>\n<h3 id=\"数据分析概念\">数据分析概念</h3>\n<p>数据分析是指用<code>适当的统计分析方法</code>对收集来的<code>大量数据</code>进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而<code>对数据加以详细研究和概括总结的过程</code>。<br>\n其中，数据也称为观测值，是实验、测量、观察、调查的结果。</p>\n<p>数据分为两种：<code>定性数据</code>和<code>定量数据</code></p>\n<p>定性数据是对特定情况或事物作<code>特别</code>的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。</p>\n<p>定性数据又被称为品质数据，它分为<code>定类数据</code>和<code>定序数据</code>两类。<br>\n定量数据又被称为数量数据，它分为<code>定距数据</code>和<code>定比数据</code>两类。</p>\n<blockquote>\n<p>区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。</p>\n</blockquote>\n<h3 id=\"数据分析思维\">数据分析思维</h3>\n<p>在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。</p>\n<p><code>对比/对照</code><br>\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。</p>\n<p><code>拆分/细分</code><br>\n由大变小的过程，将问题拆解成若干部分。</p>\n<p><code>降维</code><br>\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。</p>\n<p><code>增维</code><br>\n增加分析的指标，一般要看具体情况需要换算出新的指标。</p>\n<p><code>假说</code><br>\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。</p>\n<h2 id=\"数据分析方法论\">数据分析方法论</h2>\n<h3 id=\"基本方法论\">基本方法论</h3>\n<p>常用的基本方法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分析方法</th>\n<th style=\"text-align:left\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对比法</td>\n<td style=\"text-align:left\">发现问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拆分法</td>\n<td style=\"text-align:left\">寻找问题的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">排序法</td>\n<td style=\"text-align:left\">找到分析的重点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分组法</td>\n<td style=\"text-align:left\">洞察事物特征</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交叉法</td>\n<td style=\"text-align:left\">将两个及以上的维度进行比较，并通过交叉的方式分析数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">降维法</td>\n<td style=\"text-align:left\">解决复杂问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增维法</td>\n<td style=\"text-align:left\">解决信息量过少的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指标法</td>\n<td style=\"text-align:left\">基本方法，可支持多字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">图形法</td>\n<td style=\"text-align:left\">基本方法，对分析字段有数量限制</td>\n</tr>\n</tbody>\n</table>\n<p>在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。</p>\n<p>我们先学习其中四种：</p>\n<h4 id=\"漏斗分析法\">漏斗分析法</h4>\n<p>漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。<br>\n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。<br>\n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。<br>\n<img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"漏斗分析法\"></p>\n<p>漏斗分析法实例:</p>\n<ol>\n<li>确定业务流程，各个环节的量纲必须一致。</li>\n<li>确定数据。</li>\n<li>画图</li>\n</ol>\n<p><img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"漏斗分析法实例\"></p>\n<h4 id=\"矩阵分析法\">矩阵分析法</h4>\n<p>矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。</p>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"工程管理矩阵分析\"></p>\n<p>矩阵分析法实例：</p>\n<ol>\n<li>分别计算出支付金额和访客平均价值的平均值。</li>\n<li>选中支付金额和访客平均价值，创建散点图。</li>\n<li>根据两个指标的均值设置X轴和Y轴的交点。</li>\n</ol>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"矩阵分析法实例\"></p>\n<h4 id=\"ABC分析法\">ABC分析法</h4>\n<p>ABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。<br>\nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。</p>\n<p>在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。</p>\n<ol>\n<li>A类因素:发生累计频率为0%~80%，是主要影响因素。</li>\n<li>B类因素:发生累计频率为80%~90%，是次要影响因素。</li>\n<li>c类因素:发生累计频率为90%~100%，是一般影响因素。</li>\n</ol>\n<p>ABC分析法实例：<br>\n<img src=\"ABC%E5%88%86%E6%9E%90%E6%B3%95.png\" alt=\"ABC分析法实例\"></p>\n<h4 id=\"杜邦分析法\">杜邦分析法</h4>\n<p>杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。</p>\n<p>杜邦分析法是对比法和拆分法的经典应用，是一种用来评价企业盈利能力和股东权益回报水平的方法，它利用主要的财务比率之间的关系来综合评价企业的财务状况。</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"杜邦分析法\"></p>\n<p>杜邦分析法实例：</p>\n<p>销售额=预售金额+直售金额<br>\n推广费用=CPC推广费+CPM推广费+CPS推广费<br>\n成本=推广费用+货物成本+物流成本+人工成本+场地成本<br>\n毛利润=销售额-成本</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"杜邦分析法实例\"></p>\n<h2 id=\"商业方法论\">商业方法论</h2>\n<h3 id=\"零售业\">零售业</h3>\n<p>零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-1.png\" alt=\"零售业\"></p>\n<p>传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-2.png\" alt=\"零售业-2\"></p>\n<p>从人的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-3.png\" alt=\"人的分析维度\"></p>\n<p>从货的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-4.png\" alt=\"货的分析维度\"></p>\n<p>从场的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-5.png\" alt=\"场的分析维度\"></p>\n<p>从人货场三个维度分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-6.png\" alt=\"零售业实例\"></p>\n<p>A\\C\\D\\E：针对具体受众人群，属于人的需求<br>\nB：场给用户带来不好的体验，属于场维度出现的问题<br>\nF：存货/预计存货方面的问题</p>\n<h3 id=\"制造业\">制造业</h3>\n<p>在制造业，<code>人机料法环</code>是对全面质量管理理论中的五个影响产品质量的主要因素的简称。</p>\n<ul>\n<li>人，指制造产品的人员</li>\n<li>机，制造产品所用的设备</li>\n<li>料，指制造产品所使用的原材料</li>\n<li>法，指制造产品所使用的方法</li>\n<li>环，指产品制造过程中所处的环境</li>\n</ul>\n<p><img src=\"%E5%88%B6%E9%80%A0%E4%B8%9A-1.png\" alt=\"人机料法环\"></p>\n<h3 id=\"物流业\">物流业</h3>\n<p>物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。</p>\n<p><img src=\"%E7%89%A9%E6%B5%81%E4%B8%9A-1.png\" alt=\"物流业\"></p>\n<hr>\n<h1>数据分析技能</h1>\n<h2 id=\"数据库\">数据库</h2>\n<h3 id=\"概述-2\">概述</h3>\n<p><code>数据库</code><br>\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>\n<p><code>数据库管理系统</code><br>\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。</p>\n<p><code>结构化查询语言</code><br>\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>\n<p>数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。</p>\n<ul>\n<li>关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等</li>\n<li>非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)</li>\n</ul>\n<h3 id=\"使用Navicate操作终端数据库\">使用Navicate操作终端数据库</h3>\n<h3 id=\"MySQL语言\">MySQL语言</h3>\n<!-- TODO：SQL文章 -->\n<h4 id=\"数据定义语言-DDL\">数据定义语言(DDL)</h4>\n<p>DDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:</p>\n<ul>\n<li>CREATE TABLE:创建数据库表</li>\n<li>ALTER TABLE:更改表结构、添加、删除、修改列长度</li>\n<li>DROP TABLE:删除表</li>\n</ul>\n<h4 id=\"数据操纵语言-DML\">数据操纵语言(DML)</h4>\n<p>DML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:</p>\n<ul>\n<li>INSERT:添加数据到数据库中</li>\n<li>UPDATE:修改数据库中的数据</li>\n<li>DELETE:删除数据库中的数据</li>\n<li>SELECT:选择(查询)数据</li>\n</ul>\n<h4 id=\"数据查询语言-DQL\">数据查询语言(DQL)</h4>\n<p>SQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。</p>\n<ul>\n<li>查询表数据: SELECT 列名1,列名2,… FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)</li>\n<li>去除重复值: SELECT DISTINCT 列名1 FROM表名;</li>\n<li>排序查询: SELECT 列名1,列名2 … FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)</li>\n</ul>\n<h2 id=\"Excel\">Excel</h2>\n<h3 id=\"表格概述\">表格概述</h3>\n<p>表格是数据表达的一种形式。</p>\n<p><img src=\"%E8%A1%A8%E6%A0%BC%E6%A6%82%E8%BF%B0.png\" alt=\"表格概述\"></p>\n<h3 id=\"Excel概述\">Excel概述</h3>\n<p>Office的电子报表软件。</p>\n<p>用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。</p>\n<h3 id=\"Excel相关组件及工具认知\">Excel相关组件及工具认知</h3>\n<p>Power Query简介：<br>\nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。</p>\n<p><img src=\"power_query.png\" alt=\"power_query.png\"></p>\n<p>Power Pivot简介:<br>\nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级&quot;两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。</p>\n<p><img src=\"power_pivot.png\" alt=\"power_pivot.png\"></p>\n<h3 id=\"公式、函数与制表\">公式、函数与制表</h3>\n<h4 id=\"Excel常用公式、函数\">Excel常用公式、函数</h4>\n<p><code>IF条件公式</code></p>\n<p>IF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> <span class=\"comment\">(logical_test,value_if_true,value_if_false)</span>  </span><br></pre></td></tr></table></figure>\n<p>判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.</p>\n<ul>\n<li>Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;</li>\n<li>Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;</li>\n<li>Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。</li>\n</ul>\n<p>IF函数常见问题如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">问题</th>\n<th style=\"text-align:left\">哪里出了问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">单元格中的0</td>\n<td style=\"text-align:left\">value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#NAME? (显示在单元格中)</td>\n<td style=\"text-align:left\">这通常意味着公式存在拼写错误</td>\n</tr>\n</tbody>\n</table>\n<p><code>IFS条件公式</code></p>\n<p>IFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">IFS</span></span> (logical_test, value_if_true,...)</span><br></pre></td></tr></table></figure>\n<p>检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.</p>\n<p>请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。</p>\n<p><code>SUMIF条件公式</code></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMIF (<span class=\"keyword\">range</span>, criteria,[sum_range])</span><br></pre></td></tr></table></figure>\n<p>对满足条件的单元格求和</p>\n<ul>\n<li>range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。</li>\n<li>criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:<code>问号</code>(?)以匹配任意单个字符，<code>星号</code>(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(&quot;)括起来。如果条件为数字，则无需使用双引号。</li>\n<li>sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。</li>\n</ul>\n<p><code>SUMIFS条件公式</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">SUMIFS</span> (sum_range, criteria_range<span class=\"number\">1</span>, criteria<span class=\"number\">1</span>,<span class=\"meta\"> [criteria_range2, criteria2], ..)</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum_range(必需)</td>\n<td style=\"text-align:left\">要求和的单元格区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range1(必需)</td>\n<td style=\"text-align:left\">使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria1(必需)</td>\n<td style=\"text-align:left\">定义将计算criteria_range1中的哪些单元格的和的条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range2, criteria2,…(可选)</td>\n<td style=\"text-align:left\">附加的区域及其关联条件。s最多可以输入127个区域/条件对</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>$ 加上区域表示绝对引用</p>\n</blockquote>\n<p><code>VLOOKUP查询公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VLOOKUP</span> (lookup_value,table_array,col_index_num,range_lookup)</span><br></pre></td></tr></table></figure>\n<p>需要四条信息才可构建VLOOKUP语法:</p>\n<ul>\n<li>要查找的值，也被称为查阅值。</li>\n<li>查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。</li>\n<li>区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。</li>\n<li>(可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。</li>\n</ul>\n<p>上述内容集合，如下所示:<br>\n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)</p>\n<p><code>INDEX查询公式</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INDEX</span> (<span class=\"keyword\">array</span>,row_num,[column_num])</span><br></pre></td></tr></table></figure>\n<p>在给定的单元格区域中，返回特定行列交叉处单元格的值或引用</p>\n<ul>\n<li>array (必需)。单元格区域或数组常量。\n<ul>\n<li>如果数组仅包含一行或一列，则相应的row_num或<br>\ncolumn_num参数是可选的。</li>\n<li>如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。</li>\n</ul>\n</li>\n<li>row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。</li>\n<li>column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数</li>\n</ul>\n<p><code>MATCH查询公式</code></p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MATCH</span> (lookup_value,lookup_array,match_<span class=\"keyword\">type</span>)</span><br></pre></td></tr></table></figure>\n<p>返回符合特定值特定顺序的项在数组中的相对位置</p>\n<ul>\n<li>lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</li>\n<li>lookup_array (必需)。要搜索的单元格区域。</li>\n<li>match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。</li>\n</ul>\n<p>match_type行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">match_type值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1或者省略</td>\n<td style=\"text-align:left\">MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:…-2,-1,0,1, 2,…,A-Z,FALSE,TRUE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:left\">MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,…2,1,o,-1,-2,…等等。</td>\n</tr>\n</tbody>\n</table>\n<p><code>LEFT提取公式</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">LEFT</span> (text,<span class=\"selector-attr\">[num_chars]</span>)</span><br></pre></td></tr></table></figure>\n<p>从一个文本字符串的第一个字符开始返回指定个数的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>num_chars(可选)。指定要由LEFT提取的字符的数量。\n<ul>\n<li>Num_chars 必须大于或等于零。</li>\n<li>如果num_chars大于文本长度，则LEFT返回全部文本。</li>\n<li>如果省略num_chars，则假定其值为1。</li>\n</ul>\n</li>\n</ul>\n<p><code>MID提取公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">MID</span> (<span class=\"built_in\">text</span>,start_num,num_chars)</span><br></pre></td></tr></table></figure>\n<p>从文本字符串中指定的起始位置起返回制定长度的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>start num(必需)。文本中要提取的第一个字符的位置。文本中第一个字符的start_num为1，以此类推。\n<ul>\n<li>如果start_num大于文本长度，则MID/MIDB返回空文本(&quot;)。</li>\n<li>如果start_num小于文本长度，但start_num加num_chars超过文本长度，则MID/MIDB将返回直到文本末尾的字符。如果省略num_chars，则假定其值为1。</li>\n<li>如果start_num小于1，则MID/MIDB返回#VALUE!错误值。</li>\n</ul>\n</li>\n<li>num_chars(必需)。指定希望MID从文本中返回字符的个数\n<ul>\n<li>如果num_chars为负数，则MID返回#VALUE!错误值。</li>\n</ul>\n</li>\n</ul>\n<p><code>RIGHT提取公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">RIGHT</span> (<span class=\"built_in\">text</span>，num_chars)</span><br></pre></td></tr></table></figure>\n<p>从一个文本字符串的最后一个字符开始返回指定个数的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>num_chars (可选)。指定希望RIGHT提取的字符数。\n<ul>\n<li>Num_chars必须大于或等于零。</li>\n<li>如果num_chars大于文本长度，则RIGHT返回所有文本。</li>\n<li>如果省略num_chars，则假定其值为1。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Excel数据透视表\">Excel数据透视表</h4>\n<p>是一种可以快速汇总大量数据的交互式方法。可用于深入分析数值数据和回答有关数据的一些预料之外的问题。</p>\n<p>数据透视表专门针对以下用途设计:</p>\n<ul>\n<li>以多种用户友好的方式查询大量数据;</li>\n<li>分类汇总和聚合数值数据，按类别和子类别汇总数据，以及创建自定义计算和公式;</li>\n<li>展开和折叠数据级别以重点关注结果，以及深入查看感兴趣的区域的汇总数据的详细信息;</li>\n<li>可以通过将行移动到列或将列移动到行（也称为&quot;透视&quot;)，查看源数据的不同汇总;</li>\n<li>通过对最有用、最有趣的一组数据执行筛选、排序、分组和条件格式设置，可以重点关注所需信息;</li>\n<li>提供简明、有吸引力并且带有批注的联机报表或打印报表。</li>\n</ul>\n<p><img src=\"%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8.png\" alt=\"数据透视表\"></p>\n<h2 id=\"QuickBI\">QuickBI</h2>\n<!-- TODO：BI平台 https://zhuanlan.zhihu.com/p/152340660 -->\n<h3 id=\"QuickBI概述\">QuickBI概述</h3>\n<p>Quick BI是一款全场景数据消费式的BI平台，秉承<code>全场景消费数据，让业务决策触手可及</code>的使命，通过智能的数据分析和可视化能力帮助企业构建数据分析系统。</p>\n<p>QuickBI的价值：</p>\n<ul>\n<li>帮助企业构建自上而下的决策分析体系</li>\n<li>实现业务流程和数据分析直接协同</li>\n<li>提升企业内各种人员的数据分析效率</li>\n<li>形成数据消费和价值洞察的企业文化</li>\n</ul>\n<p>QuickBI的产品优势：</p>\n<ul>\n<li>企业数据分析全场景覆盖</li>\n<li>高性能海量数据分析</li>\n<li>权威认证的可视化</li>\n<li>移动专属和协同</li>\n<li>丰富的集成实践</li>\n<li>企业级安全管控</li>\n</ul>\n<p>QuickBI有哪些产品和能力：<br>\n<img src=\"QuickBI.png\" alt=\"QuickBI的产品和能力\"></p>\n<h3 id=\"基于QuickBI的分析场景搭建\">基于QuickBI的分析场景搭建</h3>\n<p>分析场景:<br>\n客户画像对于商家来讲是一个进行精准营销的利器，商家可以通过对用户画像分析方法的掌握，以及对顾客基本特征与线上行为偏好的深度了解，以此来挖掘个性化服务，进一步提升顾客在店铺的消费体验。<br>\n本次内容将基于Quick BI，分析并搭建xx行业的客群画像。<br>\n<img src=\"QuickBI-2.png\" alt=\"QuickBI-2\"></p>\n<p>具体操作<code>暂略</code></p>\n<h1>数据分析场景应用</h1>\n<h2 id=\"盈亏分析\">盈亏分析</h2>\n<h3 id=\"盈亏平衡点\">盈亏平衡点</h3>\n<p>盈亏平衡点(Break Even Point,简称BEP）又称零利润点、保本点、盈亏临界点、损益分歧点、收益转折点。通常是指全部销售收入等于全部成本时（销售收入线与总成本线的交点)的产量。以盈亏平衡点的界限，当销售收入高于盈亏平衡点时企业盈利，反之，企业就亏损。盈亏平衡点可以用销售量来表示，即盈亏平衡点的销售量;也可以用销售额来表示，即盈亏平衡点的销售额。</p>\n<p><img src=\"%E7%9B%88%E4%BA%8F%E5%B9%B3%E8%A1%A1%E7%82%B9.png\" alt=\"盈亏平衡点\"></p>\n<blockquote>\n<ol>\n<li>盈亏平衡点越低，表示项目适应市场变化的能力越强，抗风险能力也越强；盈亏平衡点应按投产后的正常年份计算，而不能按计算期内的平均值计算；</li>\n<li>BEP（产量）=BEP(%)×设计生产能力；</li>\n<li>盈亏平衡点分析只适合于财务评价。</li>\n</ol>\n</blockquote>\n<h3 id=\"固定成本\">固定成本</h3>\n<p>固定成本(Fixed Cost)，(又称固定费用）相对于变动成本，是指成本总额在一定时期和一定业务量范围内，不受业务量增减变动影响而能保持不变的成本。<br>\n计算:各项固定成本的合计。</p>\n<p><img src=\"%E5%9B%BA%E5%AE%9A%E6%88%90%E6%9C%AC.png\" alt=\"固定成本\"></p>\n<h3 id=\"变动成本\">变动成本</h3>\n<p>变动成本(variable cost )指支付给各种变动生产要素的费用，如购买原材料及电力消耗费用和工人工资等。这种成本随产量的变化而变化，常常在实际生产过程开始后才需支付。<br>\n计算:各项变动成本的合计。</p>\n<p><img src=\"%E5%8F%98%E5%8A%A8%E6%88%90%E6%9C%AC.png\" alt=\"变动成本\"></p>\n<h3 id=\"盈亏预测思路\">盈亏预测思路</h3>\n<p><code>确定目标</code></p>\n<ul>\n<li>根据盈亏平衡点作最低目标</li>\n<li>根据利润并结合前面做的市场分析确定目标</li>\n</ul>\n<p><code>目标拆解</code></p>\n<ul>\n<li>将目标拆解成多个阶段性目标</li>\n<li>方法:增幅法;参考历史数据</li>\n</ul>\n<h3 id=\"盈亏预测计算\">盈亏预测计算</h3>\n<p><img src=\"%E7%9B%88%E4%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%A1%E7%AE%97.png\" alt=\"盈亏预测计算\"></p>\n<p>盈亏平衡点销售额 = 固定成本/毛利润率</p>\n<p>按实物单位计算：盈亏平衡点=固定成本/（单位产品销售收入-单位产品变动成本）<br>\n按金额计算：盈亏平衡点=固定成本/（1-变动成本/销售收入）<br>\n根据盈亏平衡点=销售额-变动成本-固定成本=0，推算毛利润=固定成本</p>\n<h2 id=\"市场分析\">市场分析</h2>\n<p>市场分析是非常重要的一个环节，是做策划、定位的前道工序。决策者只有了解市场，才能作出准确有效的决策。市场宏观分析的数据时长至少需要近2年以上的数据，如果数据的时长太少则难以全面且有效地对市场作出预判。<br>\n宏观市场分析，包含市场容量分析和市场趋势分析。</p>\n<h3 id=\"市场容量\">市场容量</h3>\n<ul>\n<li><code>市场容量</code>也称为市场规模，是指某个市场在统计期间的需求总价值。</li>\n<li><code>市场容量分析</code>是对市场规模的分析和判断，市场规模决定了市场中企业发展的天花板。</li>\n<li>使用<code>统计分组</code>汇总市场数据，可以帮助企业快速发现数据的特征。</li>\n</ul>\n<p>市场容量可视化：<br>\n<img src=\"%E5%B8%82%E5%9C%BA%E5%AE%B9%E9%87%8F%E5%8F%AF%E8%A7%86%E5%8C%96.png\" alt=\"市场容量可视化\"></p>\n<h3 id=\"市场趋势分析\">市场趋势分析</h3>\n<p>市场趋势分析是指根据历史数据掌握市场需求随时间变化的情况，从而估计和预测市场未来的趋势。市场趋势分析在数据分析中具有十分重要的地位，企业都在探索如何能够准确预测市场趋势，因为企业的利润从<code>信息差</code>中产生。</p>\n<p>市场趋势分析要解决两个问题:</p>\n<ol>\n<li>市场是否具有潜力?<br>\n企业在进入市场前或者在制订未来的发展规划时需要掌握市场趋势，市场趋势和企业的发展息息相关，发展趋势好的市场称之为增量市场（朝阳产业），发展趋势差的市场称之为存量市场（黄昏产业)。分析市场趋势就是要辨别市场，辨别的<code>标准</code>为:如果连续两年增幅超过15%则可判定为增量市场，反之为存量市场。</li>\n<li>市场的运营节奏是怎么样的?<br>\n市场趋势可以根据市场需求的变化划分为导入期、上升期、爆发期、衰退期等4个阶段。其中，导入期是指消费者开始产生需求的阶段，在导入期企业就要布局好产品将其投入市场;上升期是指消费者需求开始上升的阶段，在此阶段企业就要投入足够的市场预算抢占市场;爆发期是指消费者需求达到顶峰的阶段，在此阶段企业要尽量地促进销售;衰退期是指消费者需求开始下降的阶段，在此阶段企业要将库存清理到安全库存的范围。<br>\n<img src=\"%E5%B8%82%E5%9C%BA%E8%BF%90%E8%90%A5%E8%8A%82%E5%A5%8F.png\" alt=\"市场运营节奏\"></li>\n</ol>\n<p>市场趋势分析可视化：<br>\n折线图是分析市场趋势时常用的可视化对象，在某些数据工具中也称为时序图。<br>\n折线图比表格形式更加直观，是因为使用了数据分析方法论中的图形法，用户可以通过折线图观察数据的变化趋势。</p>\n<p><code>同比和环比计算</code><br>\n趋势分析中使用同比和环比属于指标法，通过同比和环比两个度量可以掌握趋势的变化情况。其中，环比看的是小趋势，同比看的是大趋势，基于这两个度量可以掌握商业变化的趋势。<br>\n时间粒度可以是年、季、月，时间粒度选择的越大，度量值能解释的趋势时间跨度则越长。<br>\n例如同比可以是对比不同年的额度，而环比可以比较不同月的额度。</p>\n<p><code>组合图创建和设置</code><br>\n在完成同比、环比的计算后，数据透视表的数据存有两个量纲，如一个是金额，一个是百分比，这种情况如果直接作图，小量纲的数据将无法阅读。若要在一张图中直观地展示所有数据，可使用组合图的功能。<br>\n组合图，顾名思义，就是将两种及以上的二维图表组合而成，以主次坐标形式进行展示的图形。<br>\n<img src=\"%E7%BB%84%E5%90%88%E5%9B%BE.png\" alt=\"组合图\"></p>\n<p><code>预测工作表创建</code><br>\n预测工作表可以根据连续的时序数据预测出未来N个时间单位的数据，使用的时序方式是指数平滑法。</p>\n<p>在【预测工作表】选项中，还包含了一个置信区间的概念。<br>\n<code>置信区间</code>，是指由样本统计量构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间展现的是这个参数的真实值落在测量结果周围的概率,其给出的是被测量参数的测量值的可信程度，即前面所说的“概率’。</p>\n<h3 id=\"市场集中度分析\">市场集中度分析</h3>\n<p>品牌是市场的重要组成部分，成熟的市场是由多个品牌构成的，进入一个市场领域前，一定要做好充分的品牌分析。<br>\n品牌集中度一般是指某一行业内规模最大的前几家企业的销售额占行业总销售额的比例。在电商行业中，品牌集中度用于反映某市场是否有利于行业品牌的发展。</p>\n<p>品牌集中度的计算步骤如下:</p>\n<ul>\n<li>采样市场排行在前N名的品牌市场份额。</li>\n<li>计算每个样本市场份额占采样总体的百分比。</li>\n<li>从大到小排序进行累加，超过8O%份额的样本数X，即TOPN中的市场集中度。表示在所采集的N个品牌中，市场主要被X个品牌垄断。如果在X内，有第X名是第X+1名的2倍，则区X为品牌集中度。</li>\n</ul>\n<p>设X:N=Y%，建议N&gt;=3O</p>\n<ul>\n<li>Y=(O%,3O%]，表示市场品牌<code>高度集中</code>，消费者对品牌具有高度认知，市场可能已经不适合其他品牌的发展。</li>\n<li>Y=(3O%,50%]，表示市场品牌<code>轻度集中</code>，消费者对品牌具一定认知，其他品牌要从市场明星品牌中争夺市场份额相对较难。</li>\n<li>Y=(5O%,80%]，表示市场品牌<code>没有集中</code>，消费者并没有明显地倾向于某些品牌该市场可以给其他品牌提供发展机会。</li>\n<li>Y=(8O%,1O0%]，表示消费者对品牌并<code>不敏感</code>，有没有品牌对消费者并没有产生影响，品牌市场可能比较混乱，甚至没有品牌市场。</li>\n</ul>\n<h3 id=\"市场竞争分析\">市场竞争分析</h3>\n<p><code>竞争环境分析</code><br>\n企业的竞争环境是十分复杂的，在进行商业活动时掌握复杂的市场竞争环境是非常重要的。<br>\n在电商平台，搜索是企业重要的流量渠道之一，搜索环境的竞争程度激烈与否将影响企业的生存环境。搜索环境的激烈程度可以用搜索竞争度来评估，搜索竞争度由搜索人数规模、搜索商品规模决定。</p>\n<p><code>竞争对手分析</code><br>\n竞争对手分析可以是片面的，也可以是全面的。</p>\n<ul>\n<li>片面的分析是针对某个维度调查清楚竞争对手在这个维度中的归属问题，比如它的人群、渠道。</li>\n<li>全面的分析是还原竞争对手的运营决策，比如优化图片、商品打造等过程。</li>\n</ul>\n<p>竞争对手分析最重要的方法论是<code>对比法</code>，通过和自己对比找到差异点。</p>\n<p><code>市场价格带分组分析</code><br>\n价格带区间的步长需要遵循以下规则。</p>\n<ol>\n<li>根据消费者的心理区间设置步长。</li>\n<li>价格区间的步长要一致，除了价格区间的两端，在价格跨度较大时可以将数据统一汇总起来。</li>\n</ol>\n<p>市场售价分析的是产品的销售价格，产品销售价格和销售额及利润息息相关。如果售价定高了，虽然利润得以保证，但是销量及销售额难以提高，总的利润也不会太乐观。如果售价低了，销售可能会比较乐观，但利润难以保证。<br>\n<img src=\"%E5%88%A9%E6%B6%A6%E5%92%8C%E4%BB%B7%E6%A0%BC%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\"></p>\n<p><code>市场客群分析</code><br>\n市场客群分析是对市场的消费者进行特征分析，在现今的市场环境下，企业都在实行精细化的运营策略，提供个性化的服务，满足消费者的个性需求，而这一切的前提，就是企业需要了解消费者。<br>\n市场客群分析包括消费者的<code>基本特征分析</code>以及消费者的<code>行为习惯分析</code>，基本特征是指消费者的基本属性，如:性别、年龄等，行为习惯是指消费者在发现商品到购买商品这整个的购物过程中所展示出来的行为习惯，如:搜索词偏好、支付时段偏好、属性偏好等。</p>\n<h2 id=\"经营分析\">经营分析</h2>\n<h3 id=\"店铺销售额预测\">店铺销售额预测</h3>\n<p>在店铺经营过程中，卖家需要利用科学的方法和手段，对未来一定时期内的运营数据发展趋势和营销影响因素的变化做出判断，进而为营销决策服务。对店铺销售额趋势进行预测，需要了解数据初步呈现的发展规律，选择合适的<code>趋势预测方法（线性回归算法预测、时间序列预测等）</code>，从而完成趋势预测与数值预估。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E9%94%80%E5%94%AE%E9%A2%9D%E9%A2%84%E6%B5%8B.png\" alt=\"店铺销售额预测\"></p>\n<h3 id=\"店铺流量分析\">店铺流量分析</h3>\n<p><code>思路</code></p>\n<p>流量是决定店铺销量基础的因素，店铺流量分析可以从<code>店铺流量结构、流量质量</code>等方面进行分析。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.png\" alt=\"店铺流量分析\"></p>\n<p><code>目的</code></p>\n<p>店铺流量分析的主要目的如下:</p>\n<ul>\n<li>分析各<code>渠道、地域、入店关键词等方面的流量分布</code>，找到店铺主要流量来源。</li>\n<li>观察流量来源结合推广成果，判定推广成果与流量来源<code>是否匹配</code>。</li>\n<li>观察商品引流效果。</li>\n<li>解析流量来源的<code>整体质量</code>，其中跳失率、人均浏览量和平均停留时长都是评判流量质量的重要指标。</li>\n<li>数据流量<code>占比的情况分析</code>,判断店铺流量结构的健康度、推广策略和数据占比是否符合推广逻辑。</li>\n</ul>\n<blockquote>\n<p>以免费流量为占主导地位的店铺流量是健康的</p>\n</blockquote>\n<h3 id=\"店铺推广分析\">店铺推广分析</h3>\n<p>店铺推广分析是对店铺在进行营销推广活动时所产生的数据进行分析。其中，<code>投入产出比</code>是评判推广效果好坏的硬性指标。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E6%8E%A8%E5%B9%BF%E5%88%86%E6%9E%90.png\" alt=\"店铺推广分析\"></p>\n<h3 id=\"店铺品类结构分析\">店铺品类结构分析</h3>\n<p>店铺品类结构分析，是对店铺内各产品的价格、品类、热卖程度等因素进行分析,了解不同产品品类的<code>数量、销售额以及利润</code>，为运营人员调整产品运营方向提供数据参考依据。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%93%81%E7%B1%BB%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.png\" alt=\"店铺品类结构分析\"></p>\n<h3 id=\"店铺商品分析\">店铺商品分析</h3>\n<p>店铺运营当中，商品分析是非常重要的一个环节，它关系到我们对商品的定位和销售方向性的把握。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%95%86%E5%93%81%E5%88%86%E6%9E%90.png\" alt=\"店铺商品分析\"></p>\n<h3 id=\"店铺客群分析\">店铺客群分析</h3>\n<p>店铺客群分析是针对店铺消费者的特征分析，其中包括了性别、年龄、地域等基本特征分析和搜索偏好、支付偏好、商品品类偏好等行为特征。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%AE%A2%E7%BE%A4%E5%88%86%E6%9E%90.png\" alt=\"店铺客群分析\"></p>\n<h2 id=\"杜邦分析表\">杜邦分析表</h2>\n<p>（店铺诊断模型）<br>\n杜邦分析表示基于杜邦分析法的一个应用，可以查看上文的<a href=\"#%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95\">杜邦分析法</a></p>\n<h3 id=\"店铺诊断指标拆解\">店铺诊断指标拆解</h3>\n<p><img src=\"%E5%BA%97%E9%93%BA%E8%AF%8A%E6%96%AD%E6%8C%87%E6%A0%87%E6%8B%86%E8%A7%A3.png\" alt=\"店铺诊断指标拆解\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>数据分析思维和方法</h1>\n<h2 id=\"职业认知\">职业认知</h2>\n<h3 id=\"数据分析概述与职业操守\">数据分析概述与职业操守</h3>\n<h4 id=\"概述\">概述</h4>\n<p>数据分析是将数据转变成<code>有效信息</code>的过程。<br>\n数据分析可以给决策者在运营过程中提供策略的决策依据，特定的分析维度可以帮助运营做出有效的决策，有效的决策可以提高项目的成功率。</p>\n<blockquote>\n<p>数据给运营的作用</p>\n<ul>\n<li>运营方向更清晰</li>\n<li>决策更精准</li>\n<li>成功率更高</li>\n</ul>\n</blockquote>\n<p>数据是客观的事实，但是数据本身并不会告诉人们它的价值，其中蕴含的信息需要分析师进行挖掘并发现。</p>\n<p>数据分析标准流程：</p>\n<ol>\n<li>明确目标</li>\n<li>明确分析维度和指标</li>\n<li>数据采集</li>\n<li>数据清洗</li>\n<li>数据整理</li>\n<li>数据分析</li>\n<li>数据可视化</li>\n<li>数据报告</li>\n</ol>\n<h4 id=\"职业操守\">职业操守</h4>\n<ul>\n<li>对于数据产权，用户的利益和机构的利益<code>置于个人利益之上</code>。</li>\n<li>保护数据资产的<code>安全性、真实性、可靠性</code>（要说明使用了什么科学的方法）。</li>\n<li><code>不参与任何违法行为；不使用或滥用他人产权；不宽恕或帮助他人违法。</code></li>\n<li>应<code>全面</code>了解业务背景、痛点、需求。<code>获取符合要求的源数据</code>。</li>\n<li>根据<code>业务需要</code>，选择<code>合理</code>的工具、平台、系统及算法。</li>\n<li><code>不断迭代</code>并优化业务指标与数据模型。</li>\n<li>做出具有<code>商业价值的建议</code>，并使其<code>可视化</code>。</li>\n<li><code>按时按质完整交付</code>，并对相关数据和代码<code>保密</code>。</li>\n<li>履行<code>后期</code>义务和责任，给出指导意见。</li>\n</ul>\n<h4 id=\"大数据的相关法律法规\">大数据的相关法律法规</h4>\n<p>在大数据环境下，作为生产资料的数据资源具有数据量巨大、数据变化快等特征，会导致大数据分析及应用场景更为复杂，因此必须遵守一定的<code>法律法规以及道德标准</code>。</p>\n<p><em><strong>数据采集的法律问题</strong></em><br>\n提供产品给用户从而采集数据的，对于收集的主体有明确限制。在收集页面公开数据方面，对于主体没有明确限制。</p>\n<p><em><strong>数据应用的法律问题</strong></em><br>\n应用收集到的数据必须遵循以下原则：</p>\n<ol>\n<li>明示同意</li>\n<li>用途确定</li>\n<li>安全保密</li>\n<li>境内存储</li>\n</ol>\n<p><em><strong>相关罪刑的法律规定</strong></em><br>\n我国的多部法律法典中明确定义了一些罪刑，在爬虫作业的过程中，应避免触碰数据合规红线。</p>\n<ol>\n<li>非法获取计算机系统数据罪</li>\n<li>侵犯商业秘密罪</li>\n<li>非法侵入计算机信息系统罪</li>\n<li>网络安全法</li>\n<li>民法总则</li>\n<li>侵犯公民个人信息罪</li>\n</ol>\n<h2 id=\"数据分析概念与思维\">数据分析概念与思维</h2>\n<h3 id=\"数据分析概念\">数据分析概念</h3>\n<p>数据分析是指用<code>适当的统计分析方法</code>对收集来的<code>大量数据</code>进行分析，将它们加以汇总和理解并消化，以求最大化地开发数据的功能。数据分析是为了提取有用信息和形成结论而<code>对数据加以详细研究和概括总结的过程</code>。<br>\n其中，数据也称为观测值，是实验、测量、观察、调查的结果。</p>\n<p>数据分为两种：<code>定性数据</code>和<code>定量数据</code></p>\n<p>定性数据是对特定情况或事物作<code>特别</code>的解释；而定量数据是对各种环境中的事物作出带有普遍性的解释。</p>\n<p>定性数据又被称为品质数据，它分为<code>定类数据</code>和<code>定序数据</code>两类。<br>\n定量数据又被称为数量数据，它分为<code>定距数据</code>和<code>定比数据</code>两类。</p>\n<blockquote>\n<p>区分定距数据和定比数据的一个标准是“0”，比如0度是一个客观数据，他就是一个定距数据，而像0额度就是一个定比数据。</p>\n</blockquote>\n<h3 id=\"数据分析思维\">数据分析思维</h3>\n<p>在数据分析中，含有对比/对照、拆分/细分、降维、增维、假说五大思维。</p>\n<p><code>对比/对照</code><br>\n只有通过和其他观测值的比较，才能知道什么是优、什么是劣。</p>\n<p><code>拆分/细分</code><br>\n由大变小的过程，将问题拆解成若干部分。</p>\n<p><code>降维</code><br>\n减少分析的指标，可通过指标间的关系有选择性减少，以提高模型的精度。</p>\n<p><code>增维</code><br>\n增加分析的指标，一般要看具体情况需要换算出新的指标。</p>\n<p><code>假说</code><br>\n假说是统计学的基础概念，先对结果做假设，再验证结果是否成立。</p>\n<h2 id=\"数据分析方法论\">数据分析方法论</h2>\n<h3 id=\"基本方法论\">基本方法论</h3>\n<p>常用的基本方法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分析方法</th>\n<th style=\"text-align:left\">使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对比法</td>\n<td style=\"text-align:left\">发现问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拆分法</td>\n<td style=\"text-align:left\">寻找问题的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">排序法</td>\n<td style=\"text-align:left\">找到分析的重点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分组法</td>\n<td style=\"text-align:left\">洞察事物特征</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交叉法</td>\n<td style=\"text-align:left\">将两个及以上的维度进行比较，并通过交叉的方式分析数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">降维法</td>\n<td style=\"text-align:left\">解决复杂问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增维法</td>\n<td style=\"text-align:left\">解决信息量过少的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指标法</td>\n<td style=\"text-align:left\">基本方法，可支持多字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">图形法</td>\n<td style=\"text-align:left\">基本方法，对分析字段有数量限制</td>\n</tr>\n</tbody>\n</table>\n<p>在实战过程提炼的应用方法，融入了统计方法、市场营销方法、数据清洗方法、数据挖掘方法，包括SWOT分析法、描述性统计法、数据标准化、熵值法、漏斗分析法、矩阵分析法、多维分析法、时间序列分析法、相关性分析法、杜邦分析法等。</p>\n<p>我们先学习其中四种：</p>\n<h4 id=\"漏斗分析法\">漏斗分析法</h4>\n<p>漏斗分析法师结合了流程分析的方法，更加强调事件的发展过程，按事件发展的过程分析问题，属于数据分析中的方法。<br>\n它能够科学反映用户行为状态，以及从起点到终点各阶段用户转化率的情况，是数据分析中重要的分析模型。<br>\n漏斗分析法已经广泛应用于网站用户行为分析和App用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析工作中。<br>\n<img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"漏斗分析法\"></p>\n<p>漏斗分析法实例:</p>\n<ol>\n<li>确定业务流程，各个环节的量纲必须一致。</li>\n<li>确定数据。</li>\n<li>画图</li>\n</ol>\n<p><img src=\"%E6%BC%8F%E6%96%97%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"漏斗分析法实例\"></p>\n<h4 id=\"矩阵分析法\">矩阵分析法</h4>\n<p>矩阵分析思维是指通过对原始感性材料进行矩阵般的分析与规整，形成全面、系统、严谨、专业并具有很强逻辑性和关联性的理性思想，从而有助于形成正确思考、研究、决策等高层次思维的思想方法，是一种纵横交叉的逻辑研究方法。此思维被广泛应用，比如在工程管理上将各种任务分为重要并紧急、重要不紧急、不重要紧急和不重要不紧急这四类，四类任务分别在矩阵图的四个象限。</p>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"工程管理矩阵分析\"></p>\n<p>矩阵分析法实例：</p>\n<ol>\n<li>分别计算出支付金额和访客平均价值的平均值。</li>\n<li>选中支付金额和访客平均价值，创建散点图。</li>\n<li>根据两个指标的均值设置X轴和Y轴的交点。</li>\n</ol>\n<p><img src=\"%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"矩阵分析法实例\"></p>\n<h4 id=\"ABC分析法\">ABC分析法</h4>\n<p>ABC分类法又称帕雷托分析法，也叫主次因素分析法，是项目管理中常用的一种方法。它是根据事物在技术或经济方面的主要特征，进行分类排队，分清重点和一般，从而有区别地确定管理方式的一种分析方法。由于它把被分析的对象分成A、B、c三类，所以又称为ABC分析法。<br>\nABC法则是帕累托80/20法则衍生出来的一种法则。所不同的是，80/20法则强调的是抓住关键。</p>\n<p>在ABC分析法中，先将目标数据列倒序排序，然后做累积百分比统计，最后将得到的累积百分比按照下面的比例值划分为A、B、c三类。</p>\n<ol>\n<li>A类因素:发生累计频率为0%~80%，是主要影响因素。</li>\n<li>B类因素:发生累计频率为80%~90%，是次要影响因素。</li>\n<li>c类因素:发生累计频率为90%~100%，是一般影响因素。</li>\n</ol>\n<p>ABC分析法实例：<br>\n<img src=\"ABC%E5%88%86%E6%9E%90%E6%B3%95.png\" alt=\"ABC分析法实例\"></p>\n<h4 id=\"杜邦分析法\">杜邦分析法</h4>\n<p>杜邦分析法是利用几种主要财务比率之间的关系来综合分析企业的财务状况。具体来说，它是一种用于评价公司赢利能力和股东权益回报水平，从财务角度评价企业绩效的经典方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率的乘积，这样有助于深入分析、比较企业经营情况。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。</p>\n<p>杜邦分析法是对比法和拆分法的经典应用，是一种用来评价企业盈利能力和股东权益回报水平的方法，它利用主要的财务比率之间的关系来综合评价企业的财务状况。</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-1.png\" alt=\"杜邦分析法\"></p>\n<p>杜邦分析法实例：</p>\n<p>销售额=预售金额+直售金额<br>\n推广费用=CPC推广费+CPM推广费+CPS推广费<br>\n成本=推广费用+货物成本+物流成本+人工成本+场地成本<br>\n毛利润=销售额-成本</p>\n<p><img src=\"%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95-2.png\" alt=\"杜邦分析法实例\"></p>\n<h2 id=\"商业方法论\">商业方法论</h2>\n<h3 id=\"零售业\">零售业</h3>\n<p>零售是指直接将商品或服务销售给个人消费者或最终消费者的商业活动，是商品或服务从流通领域进入消费领域的最后环节。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-1.png\" alt=\"零售业\"></p>\n<p>传统零售与新零售均是围绕人、货、场，实现信息流、资金流、物流的交互。</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-2.png\" alt=\"零售业-2\"></p>\n<p>从人的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-3.png\" alt=\"人的分析维度\"></p>\n<p>从货的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-4.png\" alt=\"货的分析维度\"></p>\n<p>从场的维度进行分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-5.png\" alt=\"场的分析维度\"></p>\n<p>从人货场三个维度分析：</p>\n<p><img src=\"%E9%9B%B6%E5%94%AE%E4%B8%9A-6.png\" alt=\"零售业实例\"></p>\n<p>A\\C\\D\\E：针对具体受众人群，属于人的需求<br>\nB：场给用户带来不好的体验，属于场维度出现的问题<br>\nF：存货/预计存货方面的问题</p>\n<h3 id=\"制造业\">制造业</h3>\n<p>在制造业，<code>人机料法环</code>是对全面质量管理理论中的五个影响产品质量的主要因素的简称。</p>\n<ul>\n<li>人，指制造产品的人员</li>\n<li>机，制造产品所用的设备</li>\n<li>料，指制造产品所使用的原材料</li>\n<li>法，指制造产品所使用的方法</li>\n<li>环，指产品制造过程中所处的环境</li>\n</ul>\n<p><img src=\"%E5%88%B6%E9%80%A0%E4%B8%9A-1.png\" alt=\"人机料法环\"></p>\n<h3 id=\"物流业\">物流业</h3>\n<p>物流业是将运输、储存、装卸、搬运、包装、流通加工、配送、信息处理等基本功能根据实际需要实施有机结合的活动的集合。其整体活动过程主要围绕人、库、线这三点。</p>\n<p><img src=\"%E7%89%A9%E6%B5%81%E4%B8%9A-1.png\" alt=\"物流业\"></p>\n<hr>\n<h1>数据分析技能</h1>\n<h2 id=\"数据库\">数据库</h2>\n<h3 id=\"概述-2\">概述</h3>\n<p><code>数据库</code><br>\nDB:是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>\n<p><code>数据库管理系统</code><br>\nDBMS:数据库管理系统(Database Managerment System)是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能，数据库是通过DBMS创建和操作的容器。</p>\n<p><code>结构化查询语言</code><br>\nSQL:结构化查询语言(Structure Query Language)是—种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>\n<p>数据库主要分为关系数据库与非关系型数据库，两者最大的不同点是非关系型数据库不使用SQL作为查询语言。</p>\n<ul>\n<li>关系数据库的典型代表有:MySQL、Oracle、Microsoft SQL Server、Access及PostgresQL等</li>\n<li>非关系型数据库的点典型代表有: BigTable (Google) 、Cassandra、MongoDB、CouchDB;还包括键值数据库:Apache Cassandra (Facebook) . LevelDB (Google)</li>\n</ul>\n<h3 id=\"使用Navicate操作终端数据库\">使用Navicate操作终端数据库</h3>\n<h3 id=\"MySQL语言\">MySQL语言</h3>\n<!-- TODO：SQL文章 -->\n<h4 id=\"数据定义语言-DDL\">数据定义语言(DDL)</h4>\n<p>DDL (Data Definition Language):数据定义语句，用于库和表的创建、修改、删除。包括如下SQL语句:</p>\n<ul>\n<li>CREATE TABLE:创建数据库表</li>\n<li>ALTER TABLE:更改表结构、添加、删除、修改列长度</li>\n<li>DROP TABLE:删除表</li>\n</ul>\n<h4 id=\"数据操纵语言-DML\">数据操纵语言(DML)</h4>\n<p>DML (Data Manipulation Language):数据操纵语句，用于添加、删除、修改、查询数据库记录，并检查数据完整性。包括如下SQL语句:</p>\n<ul>\n<li>INSERT:添加数据到数据库中</li>\n<li>UPDATE:修改数据库中的数据</li>\n<li>DELETE:删除数据库中的数据</li>\n<li>SELECT:选择(查询)数据</li>\n</ul>\n<h4 id=\"数据查询语言-DQL\">数据查询语言(DQL)</h4>\n<p>SQL中最常见的操作是查询，它是通过陈述性SELECT语句执行的，SELECT从一个或多个表或表达式中检索数据。</p>\n<ul>\n<li>查询表数据: SELECT 列名1,列名2,… FROM表名 WHERE条件; (SELECT * from表名，查询所有字段)</li>\n<li>去除重复值: SELECT DISTINCT 列名1 FROM表名;</li>\n<li>排序查询: SELECT 列名1,列名2 … FROM表名ORDER BY被排序的列名ASC; (ASC为正序,将ASC换成DESC时为倒序，不写时默认为正序)</li>\n</ul>\n<h2 id=\"Excel\">Excel</h2>\n<h3 id=\"表格概述\">表格概述</h3>\n<p>表格是数据表达的一种形式。</p>\n<p><img src=\"%E8%A1%A8%E6%A0%BC%E6%A6%82%E8%BF%B0.png\" alt=\"表格概述\"></p>\n<h3 id=\"Excel概述\">Excel概述</h3>\n<p>Office的电子报表软件。</p>\n<p>用户页面友好，具有强大数据计算和管理功能，能够使用图表直观显示数据，进行数据分析，并能够与各种流行的PC数据库连接。</p>\n<h3 id=\"Excel相关组件及工具认知\">Excel相关组件及工具认知</h3>\n<p>Power Query简介：<br>\nPower Query是微软提供的工具，Excel 2013版作为插件加载使用，从 office 2016版开始，PowerQuery的功能集成到Excel中，可以直接使用。微软推出Power BI Desktop后，一系列的工具，比如Power Query, Power Pivot, Power View等，都集成在其中。Power Query定位查询，中文一般翻译为超级查询，主要作用是连接不同种类的数据源，进行数据的转换。</p>\n<p><img src=\"power_query.png\" alt=\"power_query.png\"></p>\n<p>Power Pivot简介:<br>\nPower Pivot中文名是超级透视表，其简称是PP。它与Excel中的透视表类似，只是多了“超级&quot;两个字，功能却强大了好几倍，主要用于数据分析和数据建模。PP是一种列示数据库。</p>\n<p><img src=\"power_pivot.png\" alt=\"power_pivot.png\"></p>\n<h3 id=\"公式、函数与制表\">公式、函数与制表</h3>\n<h4 id=\"Excel常用公式、函数\">Excel常用公式、函数</h4>\n<p><code>IF条件公式</code></p>\n<p>IF函数是Excel中最常用的函数之一，它可以对值和期待值进行逻辑比较。因此IF语句可能有两个结果。第一个结果是比较结果为TRUE，第二个结果是比较结果为FALSE。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">IF</span> <span class=\"comment\">(logical_test,value_if_true,value_if_false)</span>  </span><br></pre></td></tr></table></figure>\n<p>判断是否满足某个条件，如果满足返回一个值，如果不满足则返回另一个值.</p>\n<ul>\n<li>Logical_test条件测试，表示计算结果为TRUE或FALSE的任意值或表达式;</li>\n<li>Value_if_true，若logical_test为TRUE是（条件测试为真时）返回的值;</li>\n<li>Value_if_false，若logical_test为FALSE是（条件测试为假时）返回的值。</li>\n</ul>\n<p>IF函数常见问题如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">问题</th>\n<th style=\"text-align:left\">哪里出了问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">单元格中的0</td>\n<td style=\"text-align:left\">value_if_true 或 value_if_False参数无参数值。若要查看返回的正确值，应为两个参数添加参数文本，或者为参数添加TRUE或FALSE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#NAME? (显示在单元格中)</td>\n<td style=\"text-align:left\">这通常意味着公式存在拼写错误</td>\n</tr>\n</tbody>\n</table>\n<p><code>IFS条件公式</code></p>\n<p>IFS 函数检查是否满足一个或多个条件，且返回符合第一个TRUE条件的值。IFS可以取代多个嵌套IF语句，并且有多个条件时更方便阅读。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">IFS</span></span> (logical_test, value_if_true,...)</span><br></pre></td></tr></table></figure>\n<p>检查是否满足一个或多个条件并返回与第一个TRUE条件对应的值.</p>\n<p>请注意，IFS 函数允许测试最多127个不同的条件。但不建议在IF或IFS语句中嵌套过多条件。这是因为多个条件需要按正确顺序输入，并且可能非常难构建、测试和更新。</p>\n<p><code>SUMIF条件公式</code></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMIF (<span class=\"keyword\">range</span>, criteria,[sum_range])</span><br></pre></td></tr></table></figure>\n<p>对满足条件的单元格求和</p>\n<ul>\n<li>range范围（必需)。希望通过标准评估的单元格范围。每个范围内的单元格必须是数字或名称、数组或包含数字的引用。空白和文本值将被忽略。选定的范围可以包含标准Excel格式的日期。</li>\n<li>criteria(必需)。criteria以数字、表达式、单元格参考、文本或函数的形式来定义将添加哪些单元格。可包括的通配符字符有:<code>问号</code>(?)以匹配任意单个字符，<code>星号</code>(*)以匹配任意字符序列。如果要查找实际的问号或星号，请在该字符前键入波形符(~)。注:任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号(&quot;)括起来。如果条件为数字，则无需使用双引号。</li>\n<li>sum_range(可选)。要添加的实际单元格。如果省略sum_range参数，Excel就会添加范围参数中指定的单元格（与应用标准的单元格相同)。sum_range的大小和形状应该与范围相同。如果不这样做，性能可能会受到影响，而且该公式将对从sum_range中第一个单元格开始的单元格范围进行求和，但其尺寸与范围相同。</li>\n</ul>\n<p><code>SUMIFS条件公式</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">SUMIFS</span> (sum_range, criteria_range<span class=\"number\">1</span>, criteria<span class=\"number\">1</span>,<span class=\"meta\"> [criteria_range2, criteria2], ..)</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">sum_range(必需)</td>\n<td style=\"text-align:left\">要求和的单元格区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range1(必需)</td>\n<td style=\"text-align:left\">使用criteria1测试的区域。Criteria _range1和Criteria1设置用于搜索某个区域是否符合特定条件的搜索对。一旦在该区域中找到了项，将计算sum_range 中的相应值的和。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria1(必需)</td>\n<td style=\"text-align:left\">定义将计算criteria_range1中的哪些单元格的和的条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">criteria_range2, criteria2,…(可选)</td>\n<td style=\"text-align:left\">附加的区域及其关联条件。s最多可以输入127个区域/条件对</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>$ 加上区域表示绝对引用</p>\n</blockquote>\n<p><code>VLOOKUP查询公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VLOOKUP</span> (lookup_value,table_array,col_index_num,range_lookup)</span><br></pre></td></tr></table></figure>\n<p>需要四条信息才可构建VLOOKUP语法:</p>\n<ul>\n<li>要查找的值，也被称为查阅值。</li>\n<li>查阅值所在的区域。请记住，查阅值应该始终位于所在区域的第一列，这样VLOOKUP才能正常工作。例如，如果查阅值位于单元格c2内，那么区域应该以c开头。</li>\n<li>区域中包含返回值的列号。例如，如果指定B2:D11作为区域，则应该将B计为第一列，将c作为第二列，以此类比。</li>\n<li>(可选)如果需要返回值的近似匹配，可以指定 TRUE;如果需要返回值的精确匹配，则指定FALSE。如果没有指定任何内容，默认值将始终为TRUE或近似匹配。</li>\n</ul>\n<p>上述内容集合，如下所示:<br>\n= VLOOKUP(要查找的项、要查找位置、区域中包含要返回的值的列号、返回近似匹配或精确匹配指示为1/TRUE或o/FALSE)</p>\n<p><code>INDEX查询公式</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INDEX</span> (<span class=\"keyword\">array</span>,row_num,[column_num])</span><br></pre></td></tr></table></figure>\n<p>在给定的单元格区域中，返回特定行列交叉处单元格的值或引用</p>\n<ul>\n<li>array (必需)。单元格区域或数组常量。\n<ul>\n<li>如果数组仅包含一行或一列，则相应的row_num或<br>\ncolumn_num参数是可选的。</li>\n<li>如果数组具有多行和多列，并且row_num或 column_num，INDEX返回数组中整个行或列的数组。</li>\n</ul>\n</li>\n<li>row_num(必需)。除非column_num存在。选择数组中的某行，函数从该行返回数值。如row_num,column_num参数。</li>\n<li>column_num(可选）。选择数组中的某列，函数从该列返回数值。如column_num, row_num参数</li>\n</ul>\n<p><code>MATCH查询公式</code></p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MATCH</span> (lookup_value,lookup_array,match_<span class=\"keyword\">type</span>)</span><br></pre></td></tr></table></figure>\n<p>返回符合特定值特定顺序的项在数组中的相对位置</p>\n<ul>\n<li>lookup_value(必需)。要在lookup_array中匹配的值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。lookup_value参数可以为值(数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</li>\n<li>lookup_array (必需)。要搜索的单元格区域。</li>\n<li>match_type (可选)。参数指定Excel如何将lookup_value与lookup_array中的值匹配。此参数可取o、1、-1，分别表示精确匹配、升序查找、降序查找模式。</li>\n</ul>\n<p>match_type行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">match_type值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1或者省略</td>\n<td style=\"text-align:left\">MATCH查找小于或等于lookup_value的最大值。lookup_array参数中的值必须以升序排序，例如:…-2,-1,0,1, 2,…,A-Z,FALSE,TRUE。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">MATCH查找完全等于lookup_value的第一个值。lookup_array参数中的值可按任何顺序排列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:left\">MATCH查找大于或等于lookup_value的最小值。lookup_array参数中的值必须按降序排列，例如:TRUE,FALSE,Z-A,…2,1,o,-1,-2,…等等。</td>\n</tr>\n</tbody>\n</table>\n<p><code>LEFT提取公式</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">LEFT</span> (text,<span class=\"selector-attr\">[num_chars]</span>)</span><br></pre></td></tr></table></figure>\n<p>从一个文本字符串的第一个字符开始返回指定个数的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>num_chars(可选)。指定要由LEFT提取的字符的数量。\n<ul>\n<li>Num_chars 必须大于或等于零。</li>\n<li>如果num_chars大于文本长度，则LEFT返回全部文本。</li>\n<li>如果省略num_chars，则假定其值为1。</li>\n</ul>\n</li>\n</ul>\n<p><code>MID提取公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">MID</span> (<span class=\"built_in\">text</span>,start_num,num_chars)</span><br></pre></td></tr></table></figure>\n<p>从文本字符串中指定的起始位置起返回制定长度的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>start num(必需)。文本中要提取的第一个字符的位置。文本中第一个字符的start_num为1，以此类推。\n<ul>\n<li>如果start_num大于文本长度，则MID/MIDB返回空文本(&quot;)。</li>\n<li>如果start_num小于文本长度，但start_num加num_chars超过文本长度，则MID/MIDB将返回直到文本末尾的字符。如果省略num_chars，则假定其值为1。</li>\n<li>如果start_num小于1，则MID/MIDB返回#VALUE!错误值。</li>\n</ul>\n</li>\n<li>num_chars(必需)。指定希望MID从文本中返回字符的个数\n<ul>\n<li>如果num_chars为负数，则MID返回#VALUE!错误值。</li>\n</ul>\n</li>\n</ul>\n<p><code>RIGHT提取公式</code></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">RIGHT</span> (<span class=\"built_in\">text</span>，num_chars)</span><br></pre></td></tr></table></figure>\n<p>从一个文本字符串的最后一个字符开始返回指定个数的字符</p>\n<ul>\n<li>text文本(必需)。包含要提取的字符的文本字符串。</li>\n<li>num_chars (可选)。指定希望RIGHT提取的字符数。\n<ul>\n<li>Num_chars必须大于或等于零。</li>\n<li>如果num_chars大于文本长度，则RIGHT返回所有文本。</li>\n<li>如果省略num_chars，则假定其值为1。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Excel数据透视表\">Excel数据透视表</h4>\n<p>是一种可以快速汇总大量数据的交互式方法。可用于深入分析数值数据和回答有关数据的一些预料之外的问题。</p>\n<p>数据透视表专门针对以下用途设计:</p>\n<ul>\n<li>以多种用户友好的方式查询大量数据;</li>\n<li>分类汇总和聚合数值数据，按类别和子类别汇总数据，以及创建自定义计算和公式;</li>\n<li>展开和折叠数据级别以重点关注结果，以及深入查看感兴趣的区域的汇总数据的详细信息;</li>\n<li>可以通过将行移动到列或将列移动到行（也称为&quot;透视&quot;)，查看源数据的不同汇总;</li>\n<li>通过对最有用、最有趣的一组数据执行筛选、排序、分组和条件格式设置，可以重点关注所需信息;</li>\n<li>提供简明、有吸引力并且带有批注的联机报表或打印报表。</li>\n</ul>\n<p><img src=\"%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8.png\" alt=\"数据透视表\"></p>\n<h2 id=\"QuickBI\">QuickBI</h2>\n<!-- TODO：BI平台 https://zhuanlan.zhihu.com/p/152340660 -->\n<h3 id=\"QuickBI概述\">QuickBI概述</h3>\n<p>Quick BI是一款全场景数据消费式的BI平台，秉承<code>全场景消费数据，让业务决策触手可及</code>的使命，通过智能的数据分析和可视化能力帮助企业构建数据分析系统。</p>\n<p>QuickBI的价值：</p>\n<ul>\n<li>帮助企业构建自上而下的决策分析体系</li>\n<li>实现业务流程和数据分析直接协同</li>\n<li>提升企业内各种人员的数据分析效率</li>\n<li>形成数据消费和价值洞察的企业文化</li>\n</ul>\n<p>QuickBI的产品优势：</p>\n<ul>\n<li>企业数据分析全场景覆盖</li>\n<li>高性能海量数据分析</li>\n<li>权威认证的可视化</li>\n<li>移动专属和协同</li>\n<li>丰富的集成实践</li>\n<li>企业级安全管控</li>\n</ul>\n<p>QuickBI有哪些产品和能力：<br>\n<img src=\"QuickBI.png\" alt=\"QuickBI的产品和能力\"></p>\n<h3 id=\"基于QuickBI的分析场景搭建\">基于QuickBI的分析场景搭建</h3>\n<p>分析场景:<br>\n客户画像对于商家来讲是一个进行精准营销的利器，商家可以通过对用户画像分析方法的掌握，以及对顾客基本特征与线上行为偏好的深度了解，以此来挖掘个性化服务，进一步提升顾客在店铺的消费体验。<br>\n本次内容将基于Quick BI，分析并搭建xx行业的客群画像。<br>\n<img src=\"QuickBI-2.png\" alt=\"QuickBI-2\"></p>\n<p>具体操作<code>暂略</code></p>\n<h1>数据分析场景应用</h1>\n<h2 id=\"盈亏分析\">盈亏分析</h2>\n<h3 id=\"盈亏平衡点\">盈亏平衡点</h3>\n<p>盈亏平衡点(Break Even Point,简称BEP）又称零利润点、保本点、盈亏临界点、损益分歧点、收益转折点。通常是指全部销售收入等于全部成本时（销售收入线与总成本线的交点)的产量。以盈亏平衡点的界限，当销售收入高于盈亏平衡点时企业盈利，反之，企业就亏损。盈亏平衡点可以用销售量来表示，即盈亏平衡点的销售量;也可以用销售额来表示，即盈亏平衡点的销售额。</p>\n<p><img src=\"%E7%9B%88%E4%BA%8F%E5%B9%B3%E8%A1%A1%E7%82%B9.png\" alt=\"盈亏平衡点\"></p>\n<blockquote>\n<ol>\n<li>盈亏平衡点越低，表示项目适应市场变化的能力越强，抗风险能力也越强；盈亏平衡点应按投产后的正常年份计算，而不能按计算期内的平均值计算；</li>\n<li>BEP（产量）=BEP(%)×设计生产能力；</li>\n<li>盈亏平衡点分析只适合于财务评价。</li>\n</ol>\n</blockquote>\n<h3 id=\"固定成本\">固定成本</h3>\n<p>固定成本(Fixed Cost)，(又称固定费用）相对于变动成本，是指成本总额在一定时期和一定业务量范围内，不受业务量增减变动影响而能保持不变的成本。<br>\n计算:各项固定成本的合计。</p>\n<p><img src=\"%E5%9B%BA%E5%AE%9A%E6%88%90%E6%9C%AC.png\" alt=\"固定成本\"></p>\n<h3 id=\"变动成本\">变动成本</h3>\n<p>变动成本(variable cost )指支付给各种变动生产要素的费用，如购买原材料及电力消耗费用和工人工资等。这种成本随产量的变化而变化，常常在实际生产过程开始后才需支付。<br>\n计算:各项变动成本的合计。</p>\n<p><img src=\"%E5%8F%98%E5%8A%A8%E6%88%90%E6%9C%AC.png\" alt=\"变动成本\"></p>\n<h3 id=\"盈亏预测思路\">盈亏预测思路</h3>\n<p><code>确定目标</code></p>\n<ul>\n<li>根据盈亏平衡点作最低目标</li>\n<li>根据利润并结合前面做的市场分析确定目标</li>\n</ul>\n<p><code>目标拆解</code></p>\n<ul>\n<li>将目标拆解成多个阶段性目标</li>\n<li>方法:增幅法;参考历史数据</li>\n</ul>\n<h3 id=\"盈亏预测计算\">盈亏预测计算</h3>\n<p><img src=\"%E7%9B%88%E4%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%A1%E7%AE%97.png\" alt=\"盈亏预测计算\"></p>\n<p>盈亏平衡点销售额 = 固定成本/毛利润率</p>\n<p>按实物单位计算：盈亏平衡点=固定成本/（单位产品销售收入-单位产品变动成本）<br>\n按金额计算：盈亏平衡点=固定成本/（1-变动成本/销售收入）<br>\n根据盈亏平衡点=销售额-变动成本-固定成本=0，推算毛利润=固定成本</p>\n<h2 id=\"市场分析\">市场分析</h2>\n<p>市场分析是非常重要的一个环节，是做策划、定位的前道工序。决策者只有了解市场，才能作出准确有效的决策。市场宏观分析的数据时长至少需要近2年以上的数据，如果数据的时长太少则难以全面且有效地对市场作出预判。<br>\n宏观市场分析，包含市场容量分析和市场趋势分析。</p>\n<h3 id=\"市场容量\">市场容量</h3>\n<ul>\n<li><code>市场容量</code>也称为市场规模，是指某个市场在统计期间的需求总价值。</li>\n<li><code>市场容量分析</code>是对市场规模的分析和判断，市场规模决定了市场中企业发展的天花板。</li>\n<li>使用<code>统计分组</code>汇总市场数据，可以帮助企业快速发现数据的特征。</li>\n</ul>\n<p>市场容量可视化：<br>\n<img src=\"%E5%B8%82%E5%9C%BA%E5%AE%B9%E9%87%8F%E5%8F%AF%E8%A7%86%E5%8C%96.png\" alt=\"市场容量可视化\"></p>\n<h3 id=\"市场趋势分析\">市场趋势分析</h3>\n<p>市场趋势分析是指根据历史数据掌握市场需求随时间变化的情况，从而估计和预测市场未来的趋势。市场趋势分析在数据分析中具有十分重要的地位，企业都在探索如何能够准确预测市场趋势，因为企业的利润从<code>信息差</code>中产生。</p>\n<p>市场趋势分析要解决两个问题:</p>\n<ol>\n<li>市场是否具有潜力?<br>\n企业在进入市场前或者在制订未来的发展规划时需要掌握市场趋势，市场趋势和企业的发展息息相关，发展趋势好的市场称之为增量市场（朝阳产业），发展趋势差的市场称之为存量市场（黄昏产业)。分析市场趋势就是要辨别市场，辨别的<code>标准</code>为:如果连续两年增幅超过15%则可判定为增量市场，反之为存量市场。</li>\n<li>市场的运营节奏是怎么样的?<br>\n市场趋势可以根据市场需求的变化划分为导入期、上升期、爆发期、衰退期等4个阶段。其中，导入期是指消费者开始产生需求的阶段，在导入期企业就要布局好产品将其投入市场;上升期是指消费者需求开始上升的阶段，在此阶段企业就要投入足够的市场预算抢占市场;爆发期是指消费者需求达到顶峰的阶段，在此阶段企业要尽量地促进销售;衰退期是指消费者需求开始下降的阶段，在此阶段企业要将库存清理到安全库存的范围。<br>\n<img src=\"%E5%B8%82%E5%9C%BA%E8%BF%90%E8%90%A5%E8%8A%82%E5%A5%8F.png\" alt=\"市场运营节奏\"></li>\n</ol>\n<p>市场趋势分析可视化：<br>\n折线图是分析市场趋势时常用的可视化对象，在某些数据工具中也称为时序图。<br>\n折线图比表格形式更加直观，是因为使用了数据分析方法论中的图形法，用户可以通过折线图观察数据的变化趋势。</p>\n<p><code>同比和环比计算</code><br>\n趋势分析中使用同比和环比属于指标法，通过同比和环比两个度量可以掌握趋势的变化情况。其中，环比看的是小趋势，同比看的是大趋势，基于这两个度量可以掌握商业变化的趋势。<br>\n时间粒度可以是年、季、月，时间粒度选择的越大，度量值能解释的趋势时间跨度则越长。<br>\n例如同比可以是对比不同年的额度，而环比可以比较不同月的额度。</p>\n<p><code>组合图创建和设置</code><br>\n在完成同比、环比的计算后，数据透视表的数据存有两个量纲，如一个是金额，一个是百分比，这种情况如果直接作图，小量纲的数据将无法阅读。若要在一张图中直观地展示所有数据，可使用组合图的功能。<br>\n组合图，顾名思义，就是将两种及以上的二维图表组合而成，以主次坐标形式进行展示的图形。<br>\n<img src=\"%E7%BB%84%E5%90%88%E5%9B%BE.png\" alt=\"组合图\"></p>\n<p><code>预测工作表创建</code><br>\n预测工作表可以根据连续的时序数据预测出未来N个时间单位的数据，使用的时序方式是指数平滑法。</p>\n<p>在【预测工作表】选项中，还包含了一个置信区间的概念。<br>\n<code>置信区间</code>，是指由样本统计量构造的总体参数的估计区间。在统计学中，一个概率样本的置信区间展现的是这个参数的真实值落在测量结果周围的概率,其给出的是被测量参数的测量值的可信程度，即前面所说的“概率’。</p>\n<h3 id=\"市场集中度分析\">市场集中度分析</h3>\n<p>品牌是市场的重要组成部分，成熟的市场是由多个品牌构成的，进入一个市场领域前，一定要做好充分的品牌分析。<br>\n品牌集中度一般是指某一行业内规模最大的前几家企业的销售额占行业总销售额的比例。在电商行业中，品牌集中度用于反映某市场是否有利于行业品牌的发展。</p>\n<p>品牌集中度的计算步骤如下:</p>\n<ul>\n<li>采样市场排行在前N名的品牌市场份额。</li>\n<li>计算每个样本市场份额占采样总体的百分比。</li>\n<li>从大到小排序进行累加，超过8O%份额的样本数X，即TOPN中的市场集中度。表示在所采集的N个品牌中，市场主要被X个品牌垄断。如果在X内，有第X名是第X+1名的2倍，则区X为品牌集中度。</li>\n</ul>\n<p>设X:N=Y%，建议N&gt;=3O</p>\n<ul>\n<li>Y=(O%,3O%]，表示市场品牌<code>高度集中</code>，消费者对品牌具有高度认知，市场可能已经不适合其他品牌的发展。</li>\n<li>Y=(3O%,50%]，表示市场品牌<code>轻度集中</code>，消费者对品牌具一定认知，其他品牌要从市场明星品牌中争夺市场份额相对较难。</li>\n<li>Y=(5O%,80%]，表示市场品牌<code>没有集中</code>，消费者并没有明显地倾向于某些品牌该市场可以给其他品牌提供发展机会。</li>\n<li>Y=(8O%,1O0%]，表示消费者对品牌并<code>不敏感</code>，有没有品牌对消费者并没有产生影响，品牌市场可能比较混乱，甚至没有品牌市场。</li>\n</ul>\n<h3 id=\"市场竞争分析\">市场竞争分析</h3>\n<p><code>竞争环境分析</code><br>\n企业的竞争环境是十分复杂的，在进行商业活动时掌握复杂的市场竞争环境是非常重要的。<br>\n在电商平台，搜索是企业重要的流量渠道之一，搜索环境的竞争程度激烈与否将影响企业的生存环境。搜索环境的激烈程度可以用搜索竞争度来评估，搜索竞争度由搜索人数规模、搜索商品规模决定。</p>\n<p><code>竞争对手分析</code><br>\n竞争对手分析可以是片面的，也可以是全面的。</p>\n<ul>\n<li>片面的分析是针对某个维度调查清楚竞争对手在这个维度中的归属问题，比如它的人群、渠道。</li>\n<li>全面的分析是还原竞争对手的运营决策，比如优化图片、商品打造等过程。</li>\n</ul>\n<p>竞争对手分析最重要的方法论是<code>对比法</code>，通过和自己对比找到差异点。</p>\n<p><code>市场价格带分组分析</code><br>\n价格带区间的步长需要遵循以下规则。</p>\n<ol>\n<li>根据消费者的心理区间设置步长。</li>\n<li>价格区间的步长要一致，除了价格区间的两端，在价格跨度较大时可以将数据统一汇总起来。</li>\n</ol>\n<p>市场售价分析的是产品的销售价格，产品销售价格和销售额及利润息息相关。如果售价定高了，虽然利润得以保证，但是销量及销售额难以提高，总的利润也不会太乐观。如果售价低了，销售可能会比较乐观，但利润难以保证。<br>\n<img src=\"%E5%88%A9%E6%B6%A6%E5%92%8C%E4%BB%B7%E6%A0%BC%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\"></p>\n<p><code>市场客群分析</code><br>\n市场客群分析是对市场的消费者进行特征分析，在现今的市场环境下，企业都在实行精细化的运营策略，提供个性化的服务，满足消费者的个性需求，而这一切的前提，就是企业需要了解消费者。<br>\n市场客群分析包括消费者的<code>基本特征分析</code>以及消费者的<code>行为习惯分析</code>，基本特征是指消费者的基本属性，如:性别、年龄等，行为习惯是指消费者在发现商品到购买商品这整个的购物过程中所展示出来的行为习惯，如:搜索词偏好、支付时段偏好、属性偏好等。</p>\n<h2 id=\"经营分析\">经营分析</h2>\n<h3 id=\"店铺销售额预测\">店铺销售额预测</h3>\n<p>在店铺经营过程中，卖家需要利用科学的方法和手段，对未来一定时期内的运营数据发展趋势和营销影响因素的变化做出判断，进而为营销决策服务。对店铺销售额趋势进行预测，需要了解数据初步呈现的发展规律，选择合适的<code>趋势预测方法（线性回归算法预测、时间序列预测等）</code>，从而完成趋势预测与数值预估。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E9%94%80%E5%94%AE%E9%A2%9D%E9%A2%84%E6%B5%8B.png\" alt=\"店铺销售额预测\"></p>\n<h3 id=\"店铺流量分析\">店铺流量分析</h3>\n<p><code>思路</code></p>\n<p>流量是决定店铺销量基础的因素，店铺流量分析可以从<code>店铺流量结构、流量质量</code>等方面进行分析。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.png\" alt=\"店铺流量分析\"></p>\n<p><code>目的</code></p>\n<p>店铺流量分析的主要目的如下:</p>\n<ul>\n<li>分析各<code>渠道、地域、入店关键词等方面的流量分布</code>，找到店铺主要流量来源。</li>\n<li>观察流量来源结合推广成果，判定推广成果与流量来源<code>是否匹配</code>。</li>\n<li>观察商品引流效果。</li>\n<li>解析流量来源的<code>整体质量</code>，其中跳失率、人均浏览量和平均停留时长都是评判流量质量的重要指标。</li>\n<li>数据流量<code>占比的情况分析</code>,判断店铺流量结构的健康度、推广策略和数据占比是否符合推广逻辑。</li>\n</ul>\n<blockquote>\n<p>以免费流量为占主导地位的店铺流量是健康的</p>\n</blockquote>\n<h3 id=\"店铺推广分析\">店铺推广分析</h3>\n<p>店铺推广分析是对店铺在进行营销推广活动时所产生的数据进行分析。其中，<code>投入产出比</code>是评判推广效果好坏的硬性指标。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E6%8E%A8%E5%B9%BF%E5%88%86%E6%9E%90.png\" alt=\"店铺推广分析\"></p>\n<h3 id=\"店铺品类结构分析\">店铺品类结构分析</h3>\n<p>店铺品类结构分析，是对店铺内各产品的价格、品类、热卖程度等因素进行分析,了解不同产品品类的<code>数量、销售额以及利润</code>，为运营人员调整产品运营方向提供数据参考依据。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%93%81%E7%B1%BB%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.png\" alt=\"店铺品类结构分析\"></p>\n<h3 id=\"店铺商品分析\">店铺商品分析</h3>\n<p>店铺运营当中，商品分析是非常重要的一个环节，它关系到我们对商品的定位和销售方向性的把握。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%95%86%E5%93%81%E5%88%86%E6%9E%90.png\" alt=\"店铺商品分析\"></p>\n<h3 id=\"店铺客群分析\">店铺客群分析</h3>\n<p>店铺客群分析是针对店铺消费者的特征分析，其中包括了性别、年龄、地域等基本特征分析和搜索偏好、支付偏好、商品品类偏好等行为特征。</p>\n<p><img src=\"%E5%BA%97%E9%93%BA%E5%AE%A2%E7%BE%A4%E5%88%86%E6%9E%90.png\" alt=\"店铺客群分析\"></p>\n<h2 id=\"杜邦分析表\">杜邦分析表</h2>\n<p>（店铺诊断模型）<br>\n杜邦分析表示基于杜邦分析法的一个应用，可以查看上文的<a href=\"#%E6%9D%9C%E9%82%A6%E5%88%86%E6%9E%90%E6%B3%95\">杜邦分析法</a></p>\n<h3 id=\"店铺诊断指标拆解\">店铺诊断指标拆解</h3>\n<p><img src=\"%E5%BA%97%E9%93%BA%E8%AF%8A%E6%96%AD%E6%8C%87%E6%A0%87%E6%8B%86%E8%A7%A3.png\" alt=\"店铺诊断指标拆解\"></p>\n"},{"title":"Django学习笔记","catalog":true,"lang":"cn","date":"2022-04-18T04:27:30.000Z","subtitle":"Django note","header-img":"/img/header_img/nier.png","sticky":998,"_content":"\n## Django 简介\n\nPython下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。  \nDjango 是一个开放源代码的 Web 应用框架，由 Python 写成。  \nDjango 遵守 BSD 版权，初次发布于 2005 年 7 月, 并于 2008 年 9 月发布了第一个正式版本 1.0 。  \n\nDjango 采用了 MVT 的软件设计模式，即模型（Model），视图（View）和模板（Template）。  \n使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。\n\nMVC 优势：  \n\n+ 低耦合\n+ 开发快捷\n+ 部署方便\n+ 可重用性高\n+ 维护成本低\n+ ...\n\nPython 加 Django 是快速开发、设计、部署网站的最佳组合。\n\n特点：  \n+ 强大的数据库功能\n+ 自带强大的后台功能\n+ 优雅的网址\n\nMVC 与 MTV模型的详情请参见：  \n[MVC与MVT模型](/cn/mvc-and-mvt)\n\n## Django安装\n\n> ```\n> pip3 install Django -i https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n\n### 创建项目\n\n`使用Pycharm创建`\n\n![pycharm创建django应用](Django-env9.png)\n\n`使用命令行创建`\n\n```\ndjango-admin startproject 项目名称\npython manage.py startapp 应用名\n```\n\nDjango项目结构:  \n![Django项目结构](Django-env6.png)\n\n+ `manage.py`: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。\n+ mysite/`__init__.py`: 一个空文件，告诉 Python 该目录是一个 Python 包。\n+ mysite/`asgi.py`: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。\n+ mysite/`settings.py`: 该 Django 项目的设置/配置。\n+ mysite/`urls.py`: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站\"目录\"。\n+ mysite/`wsgi.py`: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。\n\nDjango应用结构:  \n![Django应用结构](Django-env10.png)\n\n### 运行应用\n\n```\npython manage.py runserver 0.0.0.0:8000\n```\n\n0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000。\n\n> 注意：要在 manage.py 同级目录执行命令。\n\n或者\n![](startapp.png)\n![](pycharm01.png)\n\n\n在浏览器输入你服务器的 ip（这里我们输入本机 IP 地址： <http://127.0.0.1:8000>） 及端口号，如果正常启动，输出结果如下：\n\n![成功界面](django_init.png)\n\n### Hello World\n\n在应用目录的views.py文件输入以下代码:\n\n```py\nfrom django.http import HttpResponse\n \ndef hello(request):\n    return HttpResponse(\"Hello world ! \")\n```\n\n接着，绑定 URL 与视图函数。打开 urls.py 文件，输入：  \n\n```\nfrom django.urls import path\nfrom App01 import views\n\nurlpatterns = [\n    path('hello/',views.hello),\n]\n```\n\n然后通过浏览器打开<http://127.0.0.1:8000/hello>\n\n得到输出结果如下：  \n\n![](hello.png)\n\n#### path() 函数\n\nDjango path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。\n\n语法格式：\n```py\npath(route, view, kwargs=None, name=None)\n```\n\n+ route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。\n+ view: 用于执行与正则表达式匹配的 URL 请求。\n+ kwargs: 视图使用的字典类型的参数。\n+ name: 用来反向获取 URL。\n\nDjango2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 url() 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。\n\n```py\nfrom django.urls import include, re_path\n\nurlpatterns = [\n    re_path(r'^index/$', views.index, name='index'),\n    re_path(r'^bio/(?P<username>\\w+)/$', views.bio, name='bio'),\n    re_path(r'^weblog/', include('blog.urls')),\n    ...\n]\n```\n\n## Django模板(template)\n\n在上一章节中我们使用 django.http.HttpResponse() 来输出 \"Hello World！\"。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。  \n本章节我们将为大家详细介绍 Django 模板的应用，模板是一个文本，用于分离文档的表现形式和内容。\n\n首先我们在templates下新建一个test.html，文件代码如下：  \n\n```html\n<h1>{{ test_data }}</h1>\n```\n\n接下来我们修改views.py，增加一个新的对象，用于向模板提交数据：  \n\n```py\nfrom django.shortcuts import render\n \ndef test(request):\n    context = dict()\n    context['test_data'] = 'Hello World!'\n    return render(request, 'test.html', context)\n```\n\n```py\nfrom django.urls import path\n \nfrom . import views\n \nurlpatterns = [\n    path('test/', views.test),\n]\n```\n\n可以看到，我们这里使用 render 来替代之前使用的 HttpResponse。render 还使用了一个字典 context 作为参数。  \ncontext 字典中元素的键值 hello 对应了模板中的变量 {% raw %} {{ hello }} {% endraw %}。  \n再次访问 <http://127.0.0.1:8000/test>\n\n这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。  \n接下来我们将具体介绍模板中常用的语法规则。\n\n### 模板语法规则\n\n#### 传值\n\n`变量`\n\n```python\ndef test(request):\n    test = 'test'\n    return render(request,'test.html',{'test':test})\n```\n\n```html\n<p>{{ test }}</p>\n```\n\n`列表`\n\n```python\ndef test(request):\n    test_lst = ['1','2','5']\n    return render(request,'test.html',{'test_lst':test_lst})\n```\n\n```html\n<p>{{ test_lst }}</p>  # 取出整个列表\n<p>{{ test_lst.1 }}</p>  # 取出列表的第二个元素\n```\n\n`字典`\n\n```python\ndef test(request):\n    test_dict = {'test':'test'}\n    return render(request,'test.html',{'test_dict':test_dict})\n```\n\n```html\n<p>{{ test_dict }}</p>   # 显示所有字典\n<p>{{ test_dict.test }}</p>  # 取出字典对应的键值\n```\n\n#### 过滤器\n\n```html\n{{ 变量名 | 过滤器：可选参数 }}\n```\n\n模板过滤器可以在变量被显示前修改它，过滤器使用管道字符  \n过滤管道可以被`套接` ，既是说，一个过滤器管道的输出又可以作为下一个管道的输入：\n\n有以下几个常用过滤器：  \n\n| 过滤器 | 参数 | 效果 |\n| :---: | :-- | :----- |\n| `lower` |  | 文档大写转换文本为小写 |\n| `upper` |  | 文档小写转换文本为大写 |\n| `first` |  | 获取列表的第一个元素 |\n| `truncatewords` | \"num\" | 显示变量的前num个词 |\n| `truncatechars` | num | 如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分。截断的字符串将以 ... 结尾。 |\n| `addslashes` |  | 添加反斜杠到任何反斜杠、单引号或者双引号前面。 |\n| `date` |  | 根据给定格式对一个日期变量进行格式化。格式 `Y-m-d H:i:s`返回 年-月-日 小时:分钟:秒 的格式时间。 |\n| `length` |  | 返回变量的长度。适用于字符串和列表。字典返回的是键值对的数量，集合返回的是去重后的长度。 |\n| `default` | str | 如果 views 传的变量的值是 false，则使用指定的默认值。false值有：0、0.0、False、0j、\"\"、[]、()、set()、{}、None |\n| `filesizeformat` | | 以更易读的方式显示文件的大小（即'13 KB', '4.1 MB', '102 bytes'等）。|\n| `safe` |  | 将字符串标记为安全，不需要转义。 |\n\n\n\n#### if/else\n\n```js\n{% if condition1 %}\n   ... display 1\n{% elif condition2 %}\n   ... display 2\n{% else %}\n   ... display 3\n{% endif %}\n```\n\n根据条件判断是否输出。if/else 支持嵌套。\n\n标签{% raw %} {% if %} {% endraw %}接受 and ， or  关键字来对多个变量做判断 ，或者对变量取反（ not )\n\n#### for\n\n标签{% raw %} {% for %} {% endraw %}允许我们在一个序列上迭代。  \n与 Python 的 for 语句的情形类似，循环语法是 for X in Y ，Y 是要迭代的序列而 X 是在每一个特定的循环中使用的变量名称。  \n每一次循环中，模板系统会渲染在{% raw %} {% for %} 和 {% endfor %} {% endraw %}之间的所有内容。\n\n还可以给标签增加一个 reversed 使得该列表被反向迭代：\n\n```js\n{% for athlete in athlete_list reversed %}\n...\n{% endfor %}\n```\n\n遍历字典: 可以直接用字典 .items 方法，用变量的解包分别获取键和值。\n\n```js\n{% for i,j in views_dict.items %}\n{{ i }}---{{ j }}\n{% endfor %}\n```\n\n可以通过  `{{forloop}}` 变量获取循环序号。\n\n+ forloop.counter: 顺序获取循环序号，从 1 开始计算\n+ forloop.counter0: 顺序获取循环序号，从 0 开始计算\n+ forloop.revcounter: 倒序获取循环序号，结尾序号为 1\n+ forloop.revcounter0: 倒序获取循环序号，结尾序号为 0\n+ forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False\n+ forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False\n\n可选的 {% raw %}{% empty %}{% endraw %} 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）。\n\n```js\n{% for i in listvar %}\n    {{ forloop.counter0 }}\n{% empty %}\n    空空如也～\n{% endfor %}\n```\n\n\n#### ifequal/ifnotequal\n\n标签{% raw %}{% ifequal var1 var2 %} {% endraw %}比较两个值，当他们相等时，显示在{% raw %} {% ifequal %} 和 {% endifequal %} {% endraw %}之中所有的值。\n\n和 {% raw %}{% if %} {% endraw %}类似， {%raw%}{% ifequal %}{%endraw%} 支持可选的 {%raw%}{% else%}{%endraw%} 标签：\n\n#### 注释\n\nDjango 注释使用 {% raw %}{# #}{% endraw %}。\n\n```\n{# 这是一个注释 #}\n```\n\n#### include\n\n标签{%raw%}{% include %}{%endraw%}允许在模板中包含其它的模板的内容。\n\n下面这个例子包含了 nav.html 模板：\n\n```\n{% include \"nav.html\" %}\n```\n\n\n### csrf_token\n\ncsrf_token 用于form表单中，作用是跨站请求伪造保护。  \n如果不用 {%raw%}{% csrf_token %}{%endraw%} 标签，在用 form 表单时，要再次跳转页面会报 403 权限错误。  \n用了{%raw%}{% csrf_token %}{%endraw%} 标签，在 form 表单提交数据时，才会成功。  \n\n解析：  \n> 首先，向服务器发送请求，获取登录页面，此时中间件 csrf 会自动生成一个隐藏input标签，该标签里的 value 属性的值是一个随机的字符串，用户获取到登录页面的同时也获取到了这个隐藏的input标签。  \n> 然后，等用户需要用到form表单提交数据的时候，会携带这个 input 标签一起提交给中间件 csrf，原因是 form 表单提交数据时，会包括所有的 input 标签，中间件 csrf 接收到数据时，会判断，这个随机字符串是不是第一次它发给用户的那个，如果是，则数据提交成功，如果不是，则返回403权限错误。\n\n### 自定义标签和过滤器\n\n1、在应用目录下创建 templatetags 目录(与 templates 目录同级，目录名只能是 templatetags)。\n\n```\nHelloWorld/\n|-- HelloWorld\n|   |-- __init__.py\n|   |-- __init__.pyc\n|   |-- settings.py\n...\n|-- manage.py\n`-- templatetags\n`-- templates\n```\n\n2、在 templatetags 目录下创建任意 py 文件，如：my\\_tags.py。\n\n3、my\\_tags.py 文件代码如下：\n\n```py\nfrom django import template\n\nregister = template.Library()   #register的名字是固定的,不可改变\n```\n\n修改 settings.py 文件的 TEMPLATES 选项配置，添加 libraries 配置：\n\n```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR, \"/templates\",],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n            \"libraries\":{                          # 添加这边三行配置\n                'my_tags':'templatetags.my_tags'   # 添加这边三行配置        \n            }                                      # 添加这边三行配置\n        },\n    },\n]\n```\n\n4、利用装饰器 @register.filter 自定义过滤器。\n\n注意：装饰器的参数最多只能有 2 个。\n\n```py\n@register.filter\ndef my_filter(v1, v2):\n    return v1 * v2\n```\n\n5、利用装饰器 @register.simple_tag 自定义标签。\n\n```py\n@register.simple_tag\ndef my_tag1(v1, v2, v3):\n    return v1 * v2 * v3\n```\n\n6、在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 py 文件。\n\n```\n{% load my_tags %}\n```\n\n7、在 HTML 中使用自定义过滤器。\n\n```\n{{ 11|my_filter:22 }}\n```\n\n8、在 HTML 中使用自定义标签。\n\n```\n{% my_tag1 11 22 33 %}\n```\n\n9、语义化标签\n\n在该 py 文件中导入 mark_safe。\n\n```py\nfrom django.utils.safestring import mark_safe\n```\n\n定义标签时，用上 mark\\_safe 方法，令标签语义化，相当于 jQuery 中的 html() 方法。  \n和前端HTML文件中的过滤器 safe 效果一样。\n\n```py\n@register.simple_tag\ndef my_html(v1, v2):\n    temp_html = \"<input type='text' id='%s' class='%s' />\" %(v1, v2)\n    return mark_safe(temp_html)\n```\n\n在HTML中使用该自定义标签，在页面中动态创建标签。\n\n```\n{% my_html \"zzz\" \"xxx\" %}\n```\n\n### 配置静态文件\n\n1、在项目根目录下创建 statics 目录。\n\n2、在 settings 文件的最下方配置添加以下配置：\n\n```\nSTATIC_URL = '/static/' # 别名 \nSTATICFILES_DIRS = [ \n    os.path.join(BASE_DIR, \"statics\"), \n]\n```\n\n3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录， 分别放 css文件，js文件，图片，插件。\n\n4、把 bootstrap 框架放入插件目录 plugins。\n\n5、在 HTML 文件的 head 标签中引入 bootstrap。\n\n注意：此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。\n\n```md\n<link rel=\"stylesheet\" href=\"/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css\">\n```\n\n在模板中使用需要加入{%raw%} {% load static %} {%endraw%}代码，以下实例我们从静态目录中引入图片。\n\n```\n{% load static %}\n<img src=\"{% static 'images/logo.png' %}\" alt=\"logo\">\n```\n\n### 模板继承\n\n模板可以用继承的方式来实现复用，减少冗余内容。  \n网页的头部和尾部内容一般都是一致的，我们就可以通过模板继承来实现复用。  \n父模板用于放置可重复利用的内容，子模板继承父模板的内容，并放置自己的内容。  \n\n`父模板`\n\n标签 block...endblock: 父模板中的预留区域，该区域留给子模板填充差异性的内容，不同预留区域名字不能相同。\n\n```\n{% block 名称 %} \n预留给子模板的区域，可以设置设置默认内容\n{% endblock 名称 %}\n```\n\n`子模板`\n\n子模板使用标签 extends 继承父模板：\n\n```\n{% extends \"父模板路径\"%} \n```\n\n子模板如果没有设置父模板预留区域的内容，则使用在父模板设置的默认内容，当然也可以都不设置，就为空。\n\n子模板设置父模板预留区域的内容：\n\n```\n{ % block 名称 % }\n内容 \n{% endblock 名称 %}\n```\n\n\n接下来我们先创建之前项目的 templates 目录中添加 base.html 文件，代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Title</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <p>Django 测试。</p>\n    {% block mainbody %}\n       <p>original</p>\n    {% endblock %}\n</body>\n</html>\n```\n\n以上代码中，名为 mainbody 的 block 标签是可以被继承者们替换掉的部分。   \n所有的{%raw%} {% block %} {%endraw%}标签告诉模板引擎，子模板可以重载这些部分。   \n我们使用ex.html 继承 base.html，并替换特定 block，ex.html 修改后的代码如下：  \n\n```html\n{%extends \"base.html\" %}\n \n{% block mainbody %}\n<p>继承了 base.html 文件</p>\n{% endblock %}\n```\n\n## Django模型model\n\n### Django ORM\n\nDjango 模型使用自带的 ORM。  \n对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。  \nORM 在业务逻辑层和数据库层之间充当了桥梁的作用。   \nORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。  \n\n![django-orm](django-orm1.png)\n\n使用 ORM 的好处：\n\n+ 提高开发效率。\n+ 不同数据库可以平滑切换。\n\n使用 ORM 的缺点：\n\n+ ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。\n+ 长期写 ORM 代码，会降低编写 SQL 语句的能力。\n\nORM 解析过程:\n\n+ 1、ORM 会将 Python 代码转成为 SQL 语句。\n+ 2、SQL 语句通过 pymysql 传送到数据库服务端。\n+ 3、在数据库中执行 SQL 语句并将结果返回。\n\nORM 对应关系表：  \n![ORM 对应关系表](orm-object.png)\n\n### 数据库配置\n\n见[mysql](/cn/mysql)和[Python操作MySQL](/cn/Python-Note/#Python操作MySQL)\n\n首先先创建一个mysql数据库( ORM 无法操作到数据库级别，只能操作到数据表)  \n例如我们创建了一个testdb数据库：  \n\n```sql\ncreate database testdb default charset=utf8;   \n```\n\n接着我们在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：\n\n```py\nDATABASES = { \n    'default': \n    { \n        'ENGINE': 'django.db.backends.mysql',    # 数据库引擎\n        'NAME': 'testdb', # 数据库名称\n        'HOST': '127.0.0.1', # 数据库地址，本机 ip 地址 127.0.0.1 \n        'PORT': 3306, # 端口 \n        'USER': 'root',  # 数据库用户名\n        'PASSWORD': 'xxxxxx', # 数据库密码\n    }  \n}\n```\n\n> 如果你使用了 Python2.x 版本这里添加了中文注释，那么你需要在 HelloWorld/settings.py 文件头部添加 `# -*- coding: UTF-8 -*-`。\n\n上面包含数据库名称和用户的信息，它们与 MySQL 中对应数据库和用户的设置相同。Django 根据这一设置，与 MySQL 中相应的数据库和用户连接起来。  \n接下来，告诉 Django 使用 pymysql 模块连接 mysql 数据库：\n\n```py\n# 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n### 定义模型\n\n创建 APP:  \n\nDjango 规定，如果要使用模型，必须要创建一个 app。\n\n我们修改 app02/models.py 文件，代码如下：\n\n```py\n# models.py\nfrom django.db import models\n \nclass Test(models.Model):\n    name = models.CharField(max_length=20)\n```\n\n以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。\n\n在命令行中运行：\n\n```bash\n$ python3 manage.py migrate   # 创建表结构\n\n$ python3 manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更\n$ python3 manage.py migrate TestModel   # 创建表结构\n```\n\n你的数据表就创建好了。\n\n```\nMigrations for 'app02':\n  app02\\migrations\\0001_initial.py\n    - Create model Test\n\nOperations to perform:\n  Apply all migrations: app02\nRunning migrations:\n  Applying app02.0001_initial... OK\n```\n\n表名组成结构为：应用名_类名（如：app02_test）\n\n> 注意：尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。\n\n### 数据库操作\n\n接下来我们在 HelloWorld 目录中添加 testdb.py 文件（下面介绍），并修改 urls.py：\n\n```python\nfrom django.urls import path\n \nfrom . import views,testdb\n \nurlpatterns = [\n    path('runoob/', views.runoob),\n    path('testdb/', testdb.testdb),\n]\n```\n\n#### 添加数据\n\n添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：  \n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom app02.models import Test\n \n# 数据库操作\ndef testdb(request):\n    test1 = Test(name='name1')\n    test1.save()\n    return HttpResponse(\"<p>数据添加成功！</p>\")\n```\n\n访问 <http://127.0.0.1:8000/testdb> 就可以看到数据添加成功的提示。\n\n#### 获取数据\n\nDjango提供了多种方式来获取数据库的内容\n\n修改testdb如下代码所示：\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom app02.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 初始化\n    response = \"\"\n    \n    # 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM\n    list = Test.objects.all()\n\n    # 输出所有数据\n    for var in list:\n        response += var.name + \" \"\n\n    return HttpResponse(\"<p>\" + response + \"</p>\")\n```\n\nTest.objects是Test的模型管理器，其下拥有些方法方便我们进行操作。\n\n`all`\n\nall()可以获得所有数据行，相当于SQL中的`SELECT * FROM`。  \n这个函数返回一个QuerySet[T].\n\n`filter`\n\nfilter()相当于SQL中的WHERE，可设置条件过滤结果，函数返回一个QuerySet[T]。例如：  \n\n```py\nresult = Test.objects.filter(id=1) \n```\n\n`get`\n\nget()用于获取单个对象，例如：  \n\n```py\nresult = Test.objects.get(id=1)\n```\n\n`order_by`\n\norder_by()函数用于数据排序，作用等同sql语句的ORDER BY.\n\n```py\nTest.objects.order_by(\"id\")\n```\n\n\n> 上面的方法可以连锁使用：  \n> ```py\n> Test.objects.filter(name=\"name1\").order_by(\"id\")\n> ```\n> \n> 返回的结果集还可以使用切片截取限制，相当于SQL 中的 OFFSET 0 LIMIT 2;\n> result[0:2]\n\n\n#### 更新数据\n\n修改数据可以使用 save() 或 update():\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom TestModel.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE\n    test1 = Test.objects.get(id=1)\n    test1.name = 'Google'\n    test1.save()\n    \n    # 另外一种方式\n    #Test.objects.filter(id=1).update(name='Google')\n    \n    # 修改所有的列\n    # Test.objects.all().update(name='Google')\n    \n    return HttpResponse(\"<p>修改成功</p>\")\n```\n\n#### 删除数据\n\n删除数据库中的对象只需调用该对象的delete()方法即可：   \n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom TestModel.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 删除id=1的数据\n    test1 = Test.objects.get(id=1)\n    test1.delete()\n    \n    # 另外一种方式\n    # Test.objects.filter(id=1).delete()\n    \n    # 删除所有数据\n    # Test.objects.all().delete()\n    \n    return HttpResponse(\"<p>删除成功</p>\")\n```\n\n\n## Django表单form\n\nHTML表单是网站交互性的经典方式。 本章将介绍如何用Django对用户提交的表单数据进行处理。\n\n### HTTP请求\n\nHTTP协议以\"请求－回复\"的方式工作。客户发送请求时，可以在请求中附加数据。服务器通过解析请求，就可以获得客户传来的数据，并根据URL来提供特定的服务。\n\n#### Get方法\n\n我们在之前的项目中创建一个 search.py 文件，用于接收用户的请求：  \n\n```python\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n# 表单\ndef search_form(request):\n    return render(request, 'search_form.html')\n \n# 接收请求数据\ndef search(request):  \n    request.encoding='utf-8'\n    if 'q' in request.GET and request.GET['q']:\n        message = '你搜索的内容为: ' + request.GET['q']\n    else:\n        message = '你提交了空表单'\n    return HttpResponse(message)\n```\n\n在模板目录 templates 中添加 search_form.html 表单：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>search</title>\n</head>\n<body>\n    <form action=\"/search/\" method=\"get\">\n        <input type=\"text\" name=\"q\">\n        <input type=\"submit\" value=\"搜索\">\n    </form>\n</body>\n</html>\n```\n\n同时修改urls.py规则。\n\n访问地址 <http://127.0.0.1:8000/search-form/> 并搜索，可以看到get请求进行的表单传值结果。\n\n#### Post方法\n\n上面我们使用了GET方法。视图显示和请求处理分成两个函数处理。  \n提交数据时更常用POST方法。我们下面使用该方法，并用一个URL和处理函数，同时显示视图和处理请求。  \n\n我们在 templates 创建 post.html：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Title</title>\n</head>\n<body>\n    <form action=\"/search_post/\" method=\"post\">\n        {% csrf_token %}\n        <input type=\"text\" name=\"q\">\n        <input type=\"submit\" value=\"搜索\">\n    </form>\n \n    <p>{{ rlt }}</p>\n</body>\n</html>\n```\n\n在模板的末尾，我们增加一个 rlt 记号，为表单处理结果预留位置。  \n表单中还有一个{% raw %}{% csrf_token %}{% endraw %}的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。  \n\n在app目录下新建 search2.py 文件并使用 search_post 函数来处理 POST 请求：\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.shortcuts import render\nfrom django.views.decorators import csrf\n \n# 接收POST请求数据\ndef search_post(request):\n    ctx ={}\n    if request.POST:\n        ctx['rlt'] = request.POST['q']\n    return render(request, \"post.html\", ctx)\n```\n\n记得同时修改urls规则。  \n最后访问 <http://127.0.0.1:8000/search-post/>.\n\n### Request对象\n\nHttpRequest对象包含当前请求URL的一些信息：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n属性\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n\n<tbody>\n\n<tr>\n<td style = \"text-align : center\">\npath\n</td>\n<td>\n请求页面的全路径,不包括域名—例如, \"/hello/\"。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nmethod\n</td>\n<td>\n请求中使用的HTTP方法的字符串表示。全大写表示。例如:\n\n```py\nif request.method == 'GET':\n    do_something()\nelif request.method == 'POST':\n    do_something_else()\n```\n\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nGET\n</td>\n<td>\n\n包含所有HTTP GET参数的类字典对象。参见[QueryDict](#querydict对象)文档。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nPOST\n</td>\n<td>\n\n包含所有HTTP POST参数的类字典对象。参见[QueryDict](#QueryDict对象) 文档。<br>\n服务器收到空的POST请求的情况也是有可能发生的。也就是说，表单form通过HTTP POST方法提交请求，但是表单中可以没有数据。因此，不能使用语句if request.POST来判断是否使用HTTP POST方法；应该使用if request.method == \"POST\" (参见本表的method属性)。<br>\n注意: POST不包括file-upload信息。参见FILES属性。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nREQUEST\n</td>\n<td>\n为了方便，该属性是POST和GET属性的集合体，但是有特殊性，先查找POST属性，然后再查找GET属性。借鉴PHP's $_REQUEST。\n<br>\n例如，如果GET = {\"name\": \"john\"} 和POST = {\"age\": '34'},则 REQUEST[\"name\"] 的值是\"john\", REQUEST[\"age\"]的值是\"34\".\n<br>\n强烈建议使用GET and POST,因为这两个属性更加显式化，写出的代码也更易理解。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nCOOKIES\n</td>\n<td>\n包含所有cookies的标准Python字典对象。Keys和values都是字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nFILES\n</td>\n<td>\n包含所有上传文件的类字典对象。FILES中的每个Key都是\n\n`<input type=\"file\" name=\"\" \\>` 标签中name属性的值. FILES中的每个value 同时也是一个标准Python字典对象，包含下面三个Keys:\n<br>\n\n+ filename: 上传文件名,用Python字符串表示\n+ content-type: 上传文件的Content type\n+ content: 上传文件的原始内容\n\n注意：只有在请求方法是POST，并且请求页面中`<form>`有enctype=\"multipart/form-data\"属性时FILES才拥有数据。否则，FILES 是一个空字典。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nuser\n</td>\n<td>\n是一个django.contrib.auth.models.User 对象，代表当前登录的用户。\n<br>\n如果访问用户当前没有登录，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。\n<br>\n你可以通过user的is_authenticated()方法来辨别用户是否登录：\n\n```py\nif request.user.is_authenticated():\n    # Do something for logged-in users.\nelse:\n    # Do something for anonymous users.\n```\n只有激活Django中的AuthenticationMiddleware时该属性才可用\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nMETA\n</td>\n<td>\n包含所有可用HTTP头部信息的字典。 例如:\n\n+ CONTENT_LENGTH\n+ CONTENT_TYPE\n+ QUERY_STRING: 未解析的原始查询字符串\n+ REMOTE_ADDR: 客户端IP地址\n+ REMOTE_HOST: 客户端主机名\n+ SERVER_NAME: 服务器主机名\n+ SERVER_PORT: 服务器端口\n\nMETA 中这些头加上前缀 HTTP_ 为 Key, 冒号(:)后面的为 Value， 例如:\n\n+ HTTP_ACCEPT_ENCODING\n+ HTTP_ACCEPT_LANGUAGE\n+ HTTP_HOST: 客户发送的HTTP主机头信息\n+ HTTP_REFERER: referring页\n+ HTTP_USER_AGENT: 客户端的user-agent字符串\n+ HTTP_X_BENDER: X-Bender头信息\n\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nsession\n</td>\n<td>\n唯一可读写的属性，代表当前会话的字典对象。只有激活Django中的session支持时该属性才可用。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nraw_post_data\n</td>\n<td>\n原始HTTP POST数据，未解析过。 高级处理时会有用处。\n</td>\n</tr>\n\n\n</tbody>\n\n</table>\n\nRequest对象也有一些有用的方法：\n\n| 方法 | 描述 |\n|:--- | :----- |\n| \\_\\_getitem\\_\\_(key) | 返回GET/POST的键值,先取POST,后取GET。如果键不存在抛出 KeyError。<br>这是我们可以使用字典语法访问HttpRequest对象。<br>例如,request[\"foo\"]等同于先request.POST[\"foo\"] 然后 request.GET[\"foo\"]的操作。 |\n| has\\_key() | 检查request.GET 或者 request.POST中是否包含参数指定的Key。 |\n| get\\_full\\_path() | 返回包含查询字符串的请求路径。例如， \"/music/bands/the_beatles/?print=true\" |\n| is\\_secure() | 如果请求是安全的，返回True，就是说，发出的是HTTPS请求。 |\n\n### QueryDict对象\n\n在HttpRequest对象中, GET和POST属性是django.http.QueryDict类的实例。  \nQueryDict类似字典的自定义类，用来处理单键对应多值的情况。  \nQueryDict实现所有标准的词典方法。\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n\n<tbody>\n\n<tr style = \"text-align : center\">\n<td>\n__getitem__()\n</td>\n<td>\n和标准字典的处理有一点不同，就是，如果Key对应多个Value，__getitem__()返回最后一个value。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\n__setitem__()\n</td>\n<td>\n设置参数指定key的value列表(一个Python list)。注意：它只能在一个mutable QueryDict 对象上被调用(就是通过copy()产生的一个QueryDict对象的拷贝).\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nget()\n</td>\n<td>\n如果key对应多个value，get()返回最后一个value。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nupdate()\n</td>\n<td>\n参数可以是QueryDict，也可以是标准字典。和标准字典的update方法不同，该方法添加字典 items，而不是替换它们:\n\n```py\n>>> q = QueryDict('a=1')\n\n>>> q = q.copy() # to make it mutable\n\n>>> q.update({'a': '2'})\n\n>>> q.getlist('a')\n\n['1', '2']\n\n>>> q['a'] # returns the last\n\n['2']\n```\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nitems()\n</td>\n<td>\n和标准字典的items()方法有一点不同,该方法使用单值逻辑的__getitem__():\n\n```py\n>>> q = QueryDict('a=1&a=2&a=3')\n\n>>> q.items()\n\n[('a', '3')]\n```\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\ncopy()\n</td>\n<td>\n返回对象的拷贝，内部实现是用Python标准库的copy.deepcopy()。该拷贝是mutable(可更改的) — 就是说，可以更改该拷贝的值。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\ngetlist(key)\n</td>\n<td>\n返回和参数key对应的所有值，作为一个Python list返回。如果key不存在，则返回空list。 It's guaranteed to return a list of some sort..\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nsetlist(key,list...)\n</td>\n<td>\n设置key的值为list_ (unlike __setitem__()).\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nappendlist(key,item)\n</td>\n<td>\n添加item到和key关联的内部list.\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nsetlistdefault(key,list)\n</td>\n<td>\n和setdefault有一点不同，它接受list而不是单个value作为参数。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nlists()\n</td>\n<td>\n和items()有一点不同, 它会返回key的所有值，作为一个list, 例如:\n\n```py\n>>> q = QueryDict('a=1&a=2&a=3')\n\n>>> q.lists()\n\n[('a', ['1', '2', '3'])]\n```\n\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nurlencode()\n</td>\n<td>\n返回一个以查询字符串格式进行格式化后的字符串(例如：\"a=2&b=3&b=5\")。\n</td>\n</tr>\n\n\n\n</tbody>\n</table>","source":"_posts/cn/Django-Note.md","raw":"---\ntitle: Django学习笔记\ncatalog: true\nlang: cn\ndate: 2022-04-18 12:27:30\nsubtitle: Django note\nheader-img: /img/header_img/nier.png\nsticky: 998\ntags: \n- django\ncategories:\n- Note\n---\n\n## Django 简介\n\nPython下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。  \nDjango 是一个开放源代码的 Web 应用框架，由 Python 写成。  \nDjango 遵守 BSD 版权，初次发布于 2005 年 7 月, 并于 2008 年 9 月发布了第一个正式版本 1.0 。  \n\nDjango 采用了 MVT 的软件设计模式，即模型（Model），视图（View）和模板（Template）。  \n使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。\n\nMVC 优势：  \n\n+ 低耦合\n+ 开发快捷\n+ 部署方便\n+ 可重用性高\n+ 维护成本低\n+ ...\n\nPython 加 Django 是快速开发、设计、部署网站的最佳组合。\n\n特点：  \n+ 强大的数据库功能\n+ 自带强大的后台功能\n+ 优雅的网址\n\nMVC 与 MTV模型的详情请参见：  \n[MVC与MVT模型](/cn/mvc-and-mvt)\n\n## Django安装\n\n> ```\n> pip3 install Django -i https://pypi.tuna.tsinghua.edu.cn/simple\n> ```\n\n### 创建项目\n\n`使用Pycharm创建`\n\n![pycharm创建django应用](Django-env9.png)\n\n`使用命令行创建`\n\n```\ndjango-admin startproject 项目名称\npython manage.py startapp 应用名\n```\n\nDjango项目结构:  \n![Django项目结构](Django-env6.png)\n\n+ `manage.py`: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。\n+ mysite/`__init__.py`: 一个空文件，告诉 Python 该目录是一个 Python 包。\n+ mysite/`asgi.py`: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。\n+ mysite/`settings.py`: 该 Django 项目的设置/配置。\n+ mysite/`urls.py`: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站\"目录\"。\n+ mysite/`wsgi.py`: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。\n\nDjango应用结构:  \n![Django应用结构](Django-env10.png)\n\n### 运行应用\n\n```\npython manage.py runserver 0.0.0.0:8000\n```\n\n0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000。\n\n> 注意：要在 manage.py 同级目录执行命令。\n\n或者\n![](startapp.png)\n![](pycharm01.png)\n\n\n在浏览器输入你服务器的 ip（这里我们输入本机 IP 地址： <http://127.0.0.1:8000>） 及端口号，如果正常启动，输出结果如下：\n\n![成功界面](django_init.png)\n\n### Hello World\n\n在应用目录的views.py文件输入以下代码:\n\n```py\nfrom django.http import HttpResponse\n \ndef hello(request):\n    return HttpResponse(\"Hello world ! \")\n```\n\n接着，绑定 URL 与视图函数。打开 urls.py 文件，输入：  \n\n```\nfrom django.urls import path\nfrom App01 import views\n\nurlpatterns = [\n    path('hello/',views.hello),\n]\n```\n\n然后通过浏览器打开<http://127.0.0.1:8000/hello>\n\n得到输出结果如下：  \n\n![](hello.png)\n\n#### path() 函数\n\nDjango path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。\n\n语法格式：\n```py\npath(route, view, kwargs=None, name=None)\n```\n\n+ route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。\n+ view: 用于执行与正则表达式匹配的 URL 请求。\n+ kwargs: 视图使用的字典类型的参数。\n+ name: 用来反向获取 URL。\n\nDjango2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 url() 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。\n\n```py\nfrom django.urls import include, re_path\n\nurlpatterns = [\n    re_path(r'^index/$', views.index, name='index'),\n    re_path(r'^bio/(?P<username>\\w+)/$', views.bio, name='bio'),\n    re_path(r'^weblog/', include('blog.urls')),\n    ...\n]\n```\n\n## Django模板(template)\n\n在上一章节中我们使用 django.http.HttpResponse() 来输出 \"Hello World！\"。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。  \n本章节我们将为大家详细介绍 Django 模板的应用，模板是一个文本，用于分离文档的表现形式和内容。\n\n首先我们在templates下新建一个test.html，文件代码如下：  \n\n```html\n<h1>{{ test_data }}</h1>\n```\n\n接下来我们修改views.py，增加一个新的对象，用于向模板提交数据：  \n\n```py\nfrom django.shortcuts import render\n \ndef test(request):\n    context = dict()\n    context['test_data'] = 'Hello World!'\n    return render(request, 'test.html', context)\n```\n\n```py\nfrom django.urls import path\n \nfrom . import views\n \nurlpatterns = [\n    path('test/', views.test),\n]\n```\n\n可以看到，我们这里使用 render 来替代之前使用的 HttpResponse。render 还使用了一个字典 context 作为参数。  \ncontext 字典中元素的键值 hello 对应了模板中的变量 {% raw %} {{ hello }} {% endraw %}。  \n再次访问 <http://127.0.0.1:8000/test>\n\n这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。  \n接下来我们将具体介绍模板中常用的语法规则。\n\n### 模板语法规则\n\n#### 传值\n\n`变量`\n\n```python\ndef test(request):\n    test = 'test'\n    return render(request,'test.html',{'test':test})\n```\n\n```html\n<p>{{ test }}</p>\n```\n\n`列表`\n\n```python\ndef test(request):\n    test_lst = ['1','2','5']\n    return render(request,'test.html',{'test_lst':test_lst})\n```\n\n```html\n<p>{{ test_lst }}</p>  # 取出整个列表\n<p>{{ test_lst.1 }}</p>  # 取出列表的第二个元素\n```\n\n`字典`\n\n```python\ndef test(request):\n    test_dict = {'test':'test'}\n    return render(request,'test.html',{'test_dict':test_dict})\n```\n\n```html\n<p>{{ test_dict }}</p>   # 显示所有字典\n<p>{{ test_dict.test }}</p>  # 取出字典对应的键值\n```\n\n#### 过滤器\n\n```html\n{{ 变量名 | 过滤器：可选参数 }}\n```\n\n模板过滤器可以在变量被显示前修改它，过滤器使用管道字符  \n过滤管道可以被`套接` ，既是说，一个过滤器管道的输出又可以作为下一个管道的输入：\n\n有以下几个常用过滤器：  \n\n| 过滤器 | 参数 | 效果 |\n| :---: | :-- | :----- |\n| `lower` |  | 文档大写转换文本为小写 |\n| `upper` |  | 文档小写转换文本为大写 |\n| `first` |  | 获取列表的第一个元素 |\n| `truncatewords` | \"num\" | 显示变量的前num个词 |\n| `truncatechars` | num | 如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分。截断的字符串将以 ... 结尾。 |\n| `addslashes` |  | 添加反斜杠到任何反斜杠、单引号或者双引号前面。 |\n| `date` |  | 根据给定格式对一个日期变量进行格式化。格式 `Y-m-d H:i:s`返回 年-月-日 小时:分钟:秒 的格式时间。 |\n| `length` |  | 返回变量的长度。适用于字符串和列表。字典返回的是键值对的数量，集合返回的是去重后的长度。 |\n| `default` | str | 如果 views 传的变量的值是 false，则使用指定的默认值。false值有：0、0.0、False、0j、\"\"、[]、()、set()、{}、None |\n| `filesizeformat` | | 以更易读的方式显示文件的大小（即'13 KB', '4.1 MB', '102 bytes'等）。|\n| `safe` |  | 将字符串标记为安全，不需要转义。 |\n\n\n\n#### if/else\n\n```js\n{% if condition1 %}\n   ... display 1\n{% elif condition2 %}\n   ... display 2\n{% else %}\n   ... display 3\n{% endif %}\n```\n\n根据条件判断是否输出。if/else 支持嵌套。\n\n标签{% raw %} {% if %} {% endraw %}接受 and ， or  关键字来对多个变量做判断 ，或者对变量取反（ not )\n\n#### for\n\n标签{% raw %} {% for %} {% endraw %}允许我们在一个序列上迭代。  \n与 Python 的 for 语句的情形类似，循环语法是 for X in Y ，Y 是要迭代的序列而 X 是在每一个特定的循环中使用的变量名称。  \n每一次循环中，模板系统会渲染在{% raw %} {% for %} 和 {% endfor %} {% endraw %}之间的所有内容。\n\n还可以给标签增加一个 reversed 使得该列表被反向迭代：\n\n```js\n{% for athlete in athlete_list reversed %}\n...\n{% endfor %}\n```\n\n遍历字典: 可以直接用字典 .items 方法，用变量的解包分别获取键和值。\n\n```js\n{% for i,j in views_dict.items %}\n{{ i }}---{{ j }}\n{% endfor %}\n```\n\n可以通过  `{{forloop}}` 变量获取循环序号。\n\n+ forloop.counter: 顺序获取循环序号，从 1 开始计算\n+ forloop.counter0: 顺序获取循环序号，从 0 开始计算\n+ forloop.revcounter: 倒序获取循环序号，结尾序号为 1\n+ forloop.revcounter0: 倒序获取循环序号，结尾序号为 0\n+ forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False\n+ forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False\n\n可选的 {% raw %}{% empty %}{% endraw %} 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）。\n\n```js\n{% for i in listvar %}\n    {{ forloop.counter0 }}\n{% empty %}\n    空空如也～\n{% endfor %}\n```\n\n\n#### ifequal/ifnotequal\n\n标签{% raw %}{% ifequal var1 var2 %} {% endraw %}比较两个值，当他们相等时，显示在{% raw %} {% ifequal %} 和 {% endifequal %} {% endraw %}之中所有的值。\n\n和 {% raw %}{% if %} {% endraw %}类似， {%raw%}{% ifequal %}{%endraw%} 支持可选的 {%raw%}{% else%}{%endraw%} 标签：\n\n#### 注释\n\nDjango 注释使用 {% raw %}{# #}{% endraw %}。\n\n```\n{# 这是一个注释 #}\n```\n\n#### include\n\n标签{%raw%}{% include %}{%endraw%}允许在模板中包含其它的模板的内容。\n\n下面这个例子包含了 nav.html 模板：\n\n```\n{% include \"nav.html\" %}\n```\n\n\n### csrf_token\n\ncsrf_token 用于form表单中，作用是跨站请求伪造保护。  \n如果不用 {%raw%}{% csrf_token %}{%endraw%} 标签，在用 form 表单时，要再次跳转页面会报 403 权限错误。  \n用了{%raw%}{% csrf_token %}{%endraw%} 标签，在 form 表单提交数据时，才会成功。  \n\n解析：  \n> 首先，向服务器发送请求，获取登录页面，此时中间件 csrf 会自动生成一个隐藏input标签，该标签里的 value 属性的值是一个随机的字符串，用户获取到登录页面的同时也获取到了这个隐藏的input标签。  \n> 然后，等用户需要用到form表单提交数据的时候，会携带这个 input 标签一起提交给中间件 csrf，原因是 form 表单提交数据时，会包括所有的 input 标签，中间件 csrf 接收到数据时，会判断，这个随机字符串是不是第一次它发给用户的那个，如果是，则数据提交成功，如果不是，则返回403权限错误。\n\n### 自定义标签和过滤器\n\n1、在应用目录下创建 templatetags 目录(与 templates 目录同级，目录名只能是 templatetags)。\n\n```\nHelloWorld/\n|-- HelloWorld\n|   |-- __init__.py\n|   |-- __init__.pyc\n|   |-- settings.py\n...\n|-- manage.py\n`-- templatetags\n`-- templates\n```\n\n2、在 templatetags 目录下创建任意 py 文件，如：my\\_tags.py。\n\n3、my\\_tags.py 文件代码如下：\n\n```py\nfrom django import template\n\nregister = template.Library()   #register的名字是固定的,不可改变\n```\n\n修改 settings.py 文件的 TEMPLATES 选项配置，添加 libraries 配置：\n\n```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR, \"/templates\",],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n            \"libraries\":{                          # 添加这边三行配置\n                'my_tags':'templatetags.my_tags'   # 添加这边三行配置        \n            }                                      # 添加这边三行配置\n        },\n    },\n]\n```\n\n4、利用装饰器 @register.filter 自定义过滤器。\n\n注意：装饰器的参数最多只能有 2 个。\n\n```py\n@register.filter\ndef my_filter(v1, v2):\n    return v1 * v2\n```\n\n5、利用装饰器 @register.simple_tag 自定义标签。\n\n```py\n@register.simple_tag\ndef my_tag1(v1, v2, v3):\n    return v1 * v2 * v3\n```\n\n6、在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 py 文件。\n\n```\n{% load my_tags %}\n```\n\n7、在 HTML 中使用自定义过滤器。\n\n```\n{{ 11|my_filter:22 }}\n```\n\n8、在 HTML 中使用自定义标签。\n\n```\n{% my_tag1 11 22 33 %}\n```\n\n9、语义化标签\n\n在该 py 文件中导入 mark_safe。\n\n```py\nfrom django.utils.safestring import mark_safe\n```\n\n定义标签时，用上 mark\\_safe 方法，令标签语义化，相当于 jQuery 中的 html() 方法。  \n和前端HTML文件中的过滤器 safe 效果一样。\n\n```py\n@register.simple_tag\ndef my_html(v1, v2):\n    temp_html = \"<input type='text' id='%s' class='%s' />\" %(v1, v2)\n    return mark_safe(temp_html)\n```\n\n在HTML中使用该自定义标签，在页面中动态创建标签。\n\n```\n{% my_html \"zzz\" \"xxx\" %}\n```\n\n### 配置静态文件\n\n1、在项目根目录下创建 statics 目录。\n\n2、在 settings 文件的最下方配置添加以下配置：\n\n```\nSTATIC_URL = '/static/' # 别名 \nSTATICFILES_DIRS = [ \n    os.path.join(BASE_DIR, \"statics\"), \n]\n```\n\n3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录， 分别放 css文件，js文件，图片，插件。\n\n4、把 bootstrap 框架放入插件目录 plugins。\n\n5、在 HTML 文件的 head 标签中引入 bootstrap。\n\n注意：此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。\n\n```md\n<link rel=\"stylesheet\" href=\"/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css\">\n```\n\n在模板中使用需要加入{%raw%} {% load static %} {%endraw%}代码，以下实例我们从静态目录中引入图片。\n\n```\n{% load static %}\n<img src=\"{% static 'images/logo.png' %}\" alt=\"logo\">\n```\n\n### 模板继承\n\n模板可以用继承的方式来实现复用，减少冗余内容。  \n网页的头部和尾部内容一般都是一致的，我们就可以通过模板继承来实现复用。  \n父模板用于放置可重复利用的内容，子模板继承父模板的内容，并放置自己的内容。  \n\n`父模板`\n\n标签 block...endblock: 父模板中的预留区域，该区域留给子模板填充差异性的内容，不同预留区域名字不能相同。\n\n```\n{% block 名称 %} \n预留给子模板的区域，可以设置设置默认内容\n{% endblock 名称 %}\n```\n\n`子模板`\n\n子模板使用标签 extends 继承父模板：\n\n```\n{% extends \"父模板路径\"%} \n```\n\n子模板如果没有设置父模板预留区域的内容，则使用在父模板设置的默认内容，当然也可以都不设置，就为空。\n\n子模板设置父模板预留区域的内容：\n\n```\n{ % block 名称 % }\n内容 \n{% endblock 名称 %}\n```\n\n\n接下来我们先创建之前项目的 templates 目录中添加 base.html 文件，代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Title</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <p>Django 测试。</p>\n    {% block mainbody %}\n       <p>original</p>\n    {% endblock %}\n</body>\n</html>\n```\n\n以上代码中，名为 mainbody 的 block 标签是可以被继承者们替换掉的部分。   \n所有的{%raw%} {% block %} {%endraw%}标签告诉模板引擎，子模板可以重载这些部分。   \n我们使用ex.html 继承 base.html，并替换特定 block，ex.html 修改后的代码如下：  \n\n```html\n{%extends \"base.html\" %}\n \n{% block mainbody %}\n<p>继承了 base.html 文件</p>\n{% endblock %}\n```\n\n## Django模型model\n\n### Django ORM\n\nDjango 模型使用自带的 ORM。  \n对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。  \nORM 在业务逻辑层和数据库层之间充当了桥梁的作用。   \nORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。  \n\n![django-orm](django-orm1.png)\n\n使用 ORM 的好处：\n\n+ 提高开发效率。\n+ 不同数据库可以平滑切换。\n\n使用 ORM 的缺点：\n\n+ ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。\n+ 长期写 ORM 代码，会降低编写 SQL 语句的能力。\n\nORM 解析过程:\n\n+ 1、ORM 会将 Python 代码转成为 SQL 语句。\n+ 2、SQL 语句通过 pymysql 传送到数据库服务端。\n+ 3、在数据库中执行 SQL 语句并将结果返回。\n\nORM 对应关系表：  \n![ORM 对应关系表](orm-object.png)\n\n### 数据库配置\n\n见[mysql](/cn/mysql)和[Python操作MySQL](/cn/Python-Note/#Python操作MySQL)\n\n首先先创建一个mysql数据库( ORM 无法操作到数据库级别，只能操作到数据表)  \n例如我们创建了一个testdb数据库：  \n\n```sql\ncreate database testdb default charset=utf8;   \n```\n\n接着我们在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：\n\n```py\nDATABASES = { \n    'default': \n    { \n        'ENGINE': 'django.db.backends.mysql',    # 数据库引擎\n        'NAME': 'testdb', # 数据库名称\n        'HOST': '127.0.0.1', # 数据库地址，本机 ip 地址 127.0.0.1 \n        'PORT': 3306, # 端口 \n        'USER': 'root',  # 数据库用户名\n        'PASSWORD': 'xxxxxx', # 数据库密码\n    }  \n}\n```\n\n> 如果你使用了 Python2.x 版本这里添加了中文注释，那么你需要在 HelloWorld/settings.py 文件头部添加 `# -*- coding: UTF-8 -*-`。\n\n上面包含数据库名称和用户的信息，它们与 MySQL 中对应数据库和用户的设置相同。Django 根据这一设置，与 MySQL 中相应的数据库和用户连接起来。  \n接下来，告诉 Django 使用 pymysql 模块连接 mysql 数据库：\n\n```py\n# 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n### 定义模型\n\n创建 APP:  \n\nDjango 规定，如果要使用模型，必须要创建一个 app。\n\n我们修改 app02/models.py 文件，代码如下：\n\n```py\n# models.py\nfrom django.db import models\n \nclass Test(models.Model):\n    name = models.CharField(max_length=20)\n```\n\n以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。\n\n在命令行中运行：\n\n```bash\n$ python3 manage.py migrate   # 创建表结构\n\n$ python3 manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更\n$ python3 manage.py migrate TestModel   # 创建表结构\n```\n\n你的数据表就创建好了。\n\n```\nMigrations for 'app02':\n  app02\\migrations\\0001_initial.py\n    - Create model Test\n\nOperations to perform:\n  Apply all migrations: app02\nRunning migrations:\n  Applying app02.0001_initial... OK\n```\n\n表名组成结构为：应用名_类名（如：app02_test）\n\n> 注意：尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。\n\n### 数据库操作\n\n接下来我们在 HelloWorld 目录中添加 testdb.py 文件（下面介绍），并修改 urls.py：\n\n```python\nfrom django.urls import path\n \nfrom . import views,testdb\n \nurlpatterns = [\n    path('runoob/', views.runoob),\n    path('testdb/', testdb.testdb),\n]\n```\n\n#### 添加数据\n\n添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：  \n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom app02.models import Test\n \n# 数据库操作\ndef testdb(request):\n    test1 = Test(name='name1')\n    test1.save()\n    return HttpResponse(\"<p>数据添加成功！</p>\")\n```\n\n访问 <http://127.0.0.1:8000/testdb> 就可以看到数据添加成功的提示。\n\n#### 获取数据\n\nDjango提供了多种方式来获取数据库的内容\n\n修改testdb如下代码所示：\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom app02.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 初始化\n    response = \"\"\n    \n    # 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM\n    list = Test.objects.all()\n\n    # 输出所有数据\n    for var in list:\n        response += var.name + \" \"\n\n    return HttpResponse(\"<p>\" + response + \"</p>\")\n```\n\nTest.objects是Test的模型管理器，其下拥有些方法方便我们进行操作。\n\n`all`\n\nall()可以获得所有数据行，相当于SQL中的`SELECT * FROM`。  \n这个函数返回一个QuerySet[T].\n\n`filter`\n\nfilter()相当于SQL中的WHERE，可设置条件过滤结果，函数返回一个QuerySet[T]。例如：  \n\n```py\nresult = Test.objects.filter(id=1) \n```\n\n`get`\n\nget()用于获取单个对象，例如：  \n\n```py\nresult = Test.objects.get(id=1)\n```\n\n`order_by`\n\norder_by()函数用于数据排序，作用等同sql语句的ORDER BY.\n\n```py\nTest.objects.order_by(\"id\")\n```\n\n\n> 上面的方法可以连锁使用：  \n> ```py\n> Test.objects.filter(name=\"name1\").order_by(\"id\")\n> ```\n> \n> 返回的结果集还可以使用切片截取限制，相当于SQL 中的 OFFSET 0 LIMIT 2;\n> result[0:2]\n\n\n#### 更新数据\n\n修改数据可以使用 save() 或 update():\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom TestModel.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE\n    test1 = Test.objects.get(id=1)\n    test1.name = 'Google'\n    test1.save()\n    \n    # 另外一种方式\n    #Test.objects.filter(id=1).update(name='Google')\n    \n    # 修改所有的列\n    # Test.objects.all().update(name='Google')\n    \n    return HttpResponse(\"<p>修改成功</p>\")\n```\n\n#### 删除数据\n\n删除数据库中的对象只需调用该对象的delete()方法即可：   \n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.http import HttpResponse\n \nfrom TestModel.models import Test\n \n# 数据库操作\ndef testdb(request):\n    # 删除id=1的数据\n    test1 = Test.objects.get(id=1)\n    test1.delete()\n    \n    # 另外一种方式\n    # Test.objects.filter(id=1).delete()\n    \n    # 删除所有数据\n    # Test.objects.all().delete()\n    \n    return HttpResponse(\"<p>删除成功</p>\")\n```\n\n\n## Django表单form\n\nHTML表单是网站交互性的经典方式。 本章将介绍如何用Django对用户提交的表单数据进行处理。\n\n### HTTP请求\n\nHTTP协议以\"请求－回复\"的方式工作。客户发送请求时，可以在请求中附加数据。服务器通过解析请求，就可以获得客户传来的数据，并根据URL来提供特定的服务。\n\n#### Get方法\n\n我们在之前的项目中创建一个 search.py 文件，用于接收用户的请求：  \n\n```python\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n# 表单\ndef search_form(request):\n    return render(request, 'search_form.html')\n \n# 接收请求数据\ndef search(request):  \n    request.encoding='utf-8'\n    if 'q' in request.GET and request.GET['q']:\n        message = '你搜索的内容为: ' + request.GET['q']\n    else:\n        message = '你提交了空表单'\n    return HttpResponse(message)\n```\n\n在模板目录 templates 中添加 search_form.html 表单：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>search</title>\n</head>\n<body>\n    <form action=\"/search/\" method=\"get\">\n        <input type=\"text\" name=\"q\">\n        <input type=\"submit\" value=\"搜索\">\n    </form>\n</body>\n</html>\n```\n\n同时修改urls.py规则。\n\n访问地址 <http://127.0.0.1:8000/search-form/> 并搜索，可以看到get请求进行的表单传值结果。\n\n#### Post方法\n\n上面我们使用了GET方法。视图显示和请求处理分成两个函数处理。  \n提交数据时更常用POST方法。我们下面使用该方法，并用一个URL和处理函数，同时显示视图和处理请求。  \n\n我们在 templates 创建 post.html：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Title</title>\n</head>\n<body>\n    <form action=\"/search_post/\" method=\"post\">\n        {% csrf_token %}\n        <input type=\"text\" name=\"q\">\n        <input type=\"submit\" value=\"搜索\">\n    </form>\n \n    <p>{{ rlt }}</p>\n</body>\n</html>\n```\n\n在模板的末尾，我们增加一个 rlt 记号，为表单处理结果预留位置。  \n表单中还有一个{% raw %}{% csrf_token %}{% endraw %}的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。  \n\n在app目录下新建 search2.py 文件并使用 search_post 函数来处理 POST 请求：\n\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.shortcuts import render\nfrom django.views.decorators import csrf\n \n# 接收POST请求数据\ndef search_post(request):\n    ctx ={}\n    if request.POST:\n        ctx['rlt'] = request.POST['q']\n    return render(request, \"post.html\", ctx)\n```\n\n记得同时修改urls规则。  \n最后访问 <http://127.0.0.1:8000/search-post/>.\n\n### Request对象\n\nHttpRequest对象包含当前请求URL的一些信息：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n属性\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n\n<tbody>\n\n<tr>\n<td style = \"text-align : center\">\npath\n</td>\n<td>\n请求页面的全路径,不包括域名—例如, \"/hello/\"。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nmethod\n</td>\n<td>\n请求中使用的HTTP方法的字符串表示。全大写表示。例如:\n\n```py\nif request.method == 'GET':\n    do_something()\nelif request.method == 'POST':\n    do_something_else()\n```\n\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nGET\n</td>\n<td>\n\n包含所有HTTP GET参数的类字典对象。参见[QueryDict](#querydict对象)文档。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nPOST\n</td>\n<td>\n\n包含所有HTTP POST参数的类字典对象。参见[QueryDict](#QueryDict对象) 文档。<br>\n服务器收到空的POST请求的情况也是有可能发生的。也就是说，表单form通过HTTP POST方法提交请求，但是表单中可以没有数据。因此，不能使用语句if request.POST来判断是否使用HTTP POST方法；应该使用if request.method == \"POST\" (参见本表的method属性)。<br>\n注意: POST不包括file-upload信息。参见FILES属性。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nREQUEST\n</td>\n<td>\n为了方便，该属性是POST和GET属性的集合体，但是有特殊性，先查找POST属性，然后再查找GET属性。借鉴PHP's $_REQUEST。\n<br>\n例如，如果GET = {\"name\": \"john\"} 和POST = {\"age\": '34'},则 REQUEST[\"name\"] 的值是\"john\", REQUEST[\"age\"]的值是\"34\".\n<br>\n强烈建议使用GET and POST,因为这两个属性更加显式化，写出的代码也更易理解。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nCOOKIES\n</td>\n<td>\n包含所有cookies的标准Python字典对象。Keys和values都是字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nFILES\n</td>\n<td>\n包含所有上传文件的类字典对象。FILES中的每个Key都是\n\n`<input type=\"file\" name=\"\" \\>` 标签中name属性的值. FILES中的每个value 同时也是一个标准Python字典对象，包含下面三个Keys:\n<br>\n\n+ filename: 上传文件名,用Python字符串表示\n+ content-type: 上传文件的Content type\n+ content: 上传文件的原始内容\n\n注意：只有在请求方法是POST，并且请求页面中`<form>`有enctype=\"multipart/form-data\"属性时FILES才拥有数据。否则，FILES 是一个空字典。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nuser\n</td>\n<td>\n是一个django.contrib.auth.models.User 对象，代表当前登录的用户。\n<br>\n如果访问用户当前没有登录，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。\n<br>\n你可以通过user的is_authenticated()方法来辨别用户是否登录：\n\n```py\nif request.user.is_authenticated():\n    # Do something for logged-in users.\nelse:\n    # Do something for anonymous users.\n```\n只有激活Django中的AuthenticationMiddleware时该属性才可用\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nMETA\n</td>\n<td>\n包含所有可用HTTP头部信息的字典。 例如:\n\n+ CONTENT_LENGTH\n+ CONTENT_TYPE\n+ QUERY_STRING: 未解析的原始查询字符串\n+ REMOTE_ADDR: 客户端IP地址\n+ REMOTE_HOST: 客户端主机名\n+ SERVER_NAME: 服务器主机名\n+ SERVER_PORT: 服务器端口\n\nMETA 中这些头加上前缀 HTTP_ 为 Key, 冒号(:)后面的为 Value， 例如:\n\n+ HTTP_ACCEPT_ENCODING\n+ HTTP_ACCEPT_LANGUAGE\n+ HTTP_HOST: 客户发送的HTTP主机头信息\n+ HTTP_REFERER: referring页\n+ HTTP_USER_AGENT: 客户端的user-agent字符串\n+ HTTP_X_BENDER: X-Bender头信息\n\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nsession\n</td>\n<td>\n唯一可读写的属性，代表当前会话的字典对象。只有激活Django中的session支持时该属性才可用。\n</td>\n</tr>\n\n<tr>\n<td style = \"text-align : center\">\nraw_post_data\n</td>\n<td>\n原始HTTP POST数据，未解析过。 高级处理时会有用处。\n</td>\n</tr>\n\n\n</tbody>\n\n</table>\n\nRequest对象也有一些有用的方法：\n\n| 方法 | 描述 |\n|:--- | :----- |\n| \\_\\_getitem\\_\\_(key) | 返回GET/POST的键值,先取POST,后取GET。如果键不存在抛出 KeyError。<br>这是我们可以使用字典语法访问HttpRequest对象。<br>例如,request[\"foo\"]等同于先request.POST[\"foo\"] 然后 request.GET[\"foo\"]的操作。 |\n| has\\_key() | 检查request.GET 或者 request.POST中是否包含参数指定的Key。 |\n| get\\_full\\_path() | 返回包含查询字符串的请求路径。例如， \"/music/bands/the_beatles/?print=true\" |\n| is\\_secure() | 如果请求是安全的，返回True，就是说，发出的是HTTPS请求。 |\n\n### QueryDict对象\n\n在HttpRequest对象中, GET和POST属性是django.http.QueryDict类的实例。  \nQueryDict类似字典的自定义类，用来处理单键对应多值的情况。  \nQueryDict实现所有标准的词典方法。\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n\n<tbody>\n\n<tr style = \"text-align : center\">\n<td>\n__getitem__()\n</td>\n<td>\n和标准字典的处理有一点不同，就是，如果Key对应多个Value，__getitem__()返回最后一个value。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\n__setitem__()\n</td>\n<td>\n设置参数指定key的value列表(一个Python list)。注意：它只能在一个mutable QueryDict 对象上被调用(就是通过copy()产生的一个QueryDict对象的拷贝).\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nget()\n</td>\n<td>\n如果key对应多个value，get()返回最后一个value。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nupdate()\n</td>\n<td>\n参数可以是QueryDict，也可以是标准字典。和标准字典的update方法不同，该方法添加字典 items，而不是替换它们:\n\n```py\n>>> q = QueryDict('a=1')\n\n>>> q = q.copy() # to make it mutable\n\n>>> q.update({'a': '2'})\n\n>>> q.getlist('a')\n\n['1', '2']\n\n>>> q['a'] # returns the last\n\n['2']\n```\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nitems()\n</td>\n<td>\n和标准字典的items()方法有一点不同,该方法使用单值逻辑的__getitem__():\n\n```py\n>>> q = QueryDict('a=1&a=2&a=3')\n\n>>> q.items()\n\n[('a', '3')]\n```\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\ncopy()\n</td>\n<td>\n返回对象的拷贝，内部实现是用Python标准库的copy.deepcopy()。该拷贝是mutable(可更改的) — 就是说，可以更改该拷贝的值。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\ngetlist(key)\n</td>\n<td>\n返回和参数key对应的所有值，作为一个Python list返回。如果key不存在，则返回空list。 It's guaranteed to return a list of some sort..\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nsetlist(key,list...)\n</td>\n<td>\n设置key的值为list_ (unlike __setitem__()).\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nappendlist(key,item)\n</td>\n<td>\n添加item到和key关联的内部list.\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nsetlistdefault(key,list)\n</td>\n<td>\n和setdefault有一点不同，它接受list而不是单个value作为参数。\n</td>\n</tr>\n\n<tr style = \"text-align : center\">\n<td>\nlists()\n</td>\n<td>\n和items()有一点不同, 它会返回key的所有值，作为一个list, 例如:\n\n```py\n>>> q = QueryDict('a=1&a=2&a=3')\n\n>>> q.lists()\n\n[('a', ['1', '2', '3'])]\n```\n\n</td>\n</tr>\n\n\n<tr style = \"text-align : center\">\n<td>\nurlencode()\n</td>\n<td>\n返回一个以查询字符串格式进行格式化后的字符串(例如：\"a=2&b=3&b=5\")。\n</td>\n</tr>\n\n\n\n</tbody>\n</table>","slug":"Django-Note","published":1,"updated":"2022-04-18T04:27:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0p000bwwvo16q679y3","content":"<h2 id=\"Django-简介\">Django 简介</h2>\n<p>Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。<br>\nDjango 是一个开放源代码的 Web 应用框架，由 Python 写成。<br>\nDjango 遵守 BSD 版权，初次发布于 2005 年 7 月, 并于 2008 年 9 月发布了第一个正式版本 1.0 。</p>\n<p>Django 采用了 MVT 的软件设计模式，即模型（Model），视图（View）和模板（Template）。<br>\n使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。</p>\n<p>MVC 优势：</p>\n<ul>\n<li>低耦合</li>\n<li>开发快捷</li>\n<li>部署方便</li>\n<li>可重用性高</li>\n<li>维护成本低</li>\n<li>…</li>\n</ul>\n<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p>\n<p>特点：</p>\n<ul>\n<li>强大的数据库功能</li>\n<li>自带强大的后台功能</li>\n<li>优雅的网址</li>\n</ul>\n<p>MVC 与 MTV模型的详情请参见：<br>\n<a href=\"/cn/mvc-and-mvt\">MVC与MVT模型</a></p>\n<h2 id=\"Django安装\">Django安装</h2>\n<blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Django -i https:<span class=\"regexp\">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"创建项目\">创建项目</h3>\n<p><code>使用Pycharm创建</code></p>\n<p><img src=\"Django-env9.png\" alt=\"pycharm创建django应用\"></p>\n<p><code>使用命令行创建</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject 项目名称</span><br><span class=\"line\"><span class=\"keyword\">python</span> manage.<span class=\"keyword\">py</span> startapp 应用名</span><br></pre></td></tr></table></figure>\n<p>Django项目结构:<br>\n<img src=\"Django-env6.png\" alt=\"Django项目结构\"></p>\n<ul>\n<li><code>manage.py</code>: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>\n<li>mysite/<code>__init__.py</code>: 一个空文件，告诉 Python 该目录是一个 Python 包。</li>\n<li>mysite/<code>asgi.py</code>: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>\n<li>mysite/<code>settings.py</code>: 该 Django 项目的设置/配置。</li>\n<li>mysite/<code>urls.py</code>: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站&quot;目录&quot;。</li>\n<li>mysite/<code>wsgi.py</code>: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>\n</ul>\n<p>Django应用结构:<br>\n<img src=\"Django-env10.png\" alt=\"Django应用结构\"></p>\n<h3 id=\"运行应用\">运行应用</h3>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span> manage.py runserver <span class=\"number\">0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>\n<p>0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000。</p>\n<blockquote>\n<p>注意：要在 <a href=\"http://manage.py\">manage.py</a> 同级目录执行命令。</p>\n</blockquote>\n<p>或者<br>\n<img src=\"startapp.png\" alt=\"\"><br>\n<img src=\"pycharm01.png\" alt=\"\"></p>\n<p>在浏览器输入你服务器的 ip（这里我们输入本机 IP 地址： <a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>） 及端口号，如果正常启动，输出结果如下：</p>\n<p><img src=\"django_init.png\" alt=\"成功界面\"></p>\n<h3 id=\"Hello-World\">Hello World</h3>\n<p>在应用目录的views.py文件输入以下代码:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;Hello world ! &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>接着，绑定 URL 与视图函数。打开 <a href=\"http://urls.py\">urls.py</a> 文件，输入：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> <span class=\"type\">path</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> App01 <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;hello/&#x27;</span>,views.hello),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后通过浏览器打开<a href=\"http://127.0.0.1:8000/hello\">http://127.0.0.1:8000/hello</a></p>\n<p>得到输出结果如下：</p>\n<p><img src=\"hello.png\" alt=\"\"></p>\n<h4 id=\"path-函数\">path() 函数</h4>\n<p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p>\n<p>语法格式：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path(route, view, kwargs=<span class=\"literal\">None</span>, name=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li>\n<li>view: 用于执行与正则表达式匹配的 URL 请求。</li>\n<li>kwargs: 视图使用的字典类型的参数。</li>\n<li>name: 用来反向获取 URL。</li>\n</ul>\n<p>Django2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 url() 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include, re_path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^index/$&#x27;</span>, views.index, name=<span class=\"string\">&#x27;index&#x27;</span>),</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^bio/(?P&lt;username&gt;\\w+)/$&#x27;</span>, views.bio, name=<span class=\"string\">&#x27;bio&#x27;</span>),</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^weblog/&#x27;</span>, include(<span class=\"string\">&#x27;blog.urls&#x27;</span>)),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模板-template\">Django模板(template)</h2>\n<p>在上一章节中我们使用 django.http.HttpResponse() 来输出 “Hello World！”。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。<br>\n本章节我们将为大家详细介绍 Django 模板的应用，模板是一个文本，用于分离文档的表现形式和内容。</p>\n<p>首先我们在templates下新建一个test.html，文件代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; test_data &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://xn--views-bi1hp6c84c4z7enkddrfs3h.py\">接下来我们修改views.py</a>，增加一个新的对象，用于向模板提交数据：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    context = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    context[<span class=\"string\">&#x27;test_data&#x27;</span>] = <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;test.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;test/&#x27;</span>, views.test),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们这里使用 render 来替代之前使用的 HttpResponse。render 还使用了一个字典 context 作为参数。<br>\ncontext 字典中元素的键值 hello 对应了模板中的变量  {{ hello }} 。<br>\n再次访问 <a href=\"http://127.0.0.1:8000/test\">http://127.0.0.1:8000/test</a></p>\n<p>这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。<br>\n接下来我们将具体介绍模板中常用的语法规则。</p>\n<h3 id=\"模板语法规则\">模板语法规则</h3>\n<h4 id=\"传值\">传值</h4>\n<p><code>变量</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test&#x27;</span>:test&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>列表</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test_lst = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test_lst&#x27;</span>:test_lst&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_lst &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出整个列表</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_lst.1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出列表的第二个元素</span><br></pre></td></tr></table></figure>\n<p><code>字典</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test_dict = &#123;<span class=\"string\">&#x27;test&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test_dict&#x27;</span>:test_dict&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_dict &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   # 显示所有字典</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_dict.test &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出字典对应的键值</span><br></pre></td></tr></table></figure>\n<h4 id=\"过滤器\">过滤器</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 变量名 | 过滤器：可选参数 &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>模板过滤器可以在变量被显示前修改它，过滤器使用管道字符<br>\n过滤管道可以被<code>套接</code> ，既是说，一个过滤器管道的输出又可以作为下一个管道的输入：</p>\n<p>有以下几个常用过滤器：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">过滤器</th>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>lower</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">文档大写转换文本为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>upper</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">文档小写转换文本为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>first</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">获取列表的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>truncatewords</code></td>\n<td style=\"text-align:left\">“num”</td>\n<td style=\"text-align:left\">显示变量的前num个词</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>truncatechars</code></td>\n<td style=\"text-align:left\">num</td>\n<td style=\"text-align:left\">如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分。截断的字符串将以 … 结尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>addslashes</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">添加反斜杠到任何反斜杠、单引号或者双引号前面。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>date</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">根据给定格式对一个日期变量进行格式化。格式 <code>Y-m-d H:i:s</code>返回 年-月-日 小时:分钟:秒 的格式时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>length</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">返回变量的长度。适用于字符串和列表。字典返回的是键值对的数量，集合返回的是去重后的长度。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>default</code></td>\n<td style=\"text-align:left\">str</td>\n<td style=\"text-align:left\">如果 views 传的变量的值是 false，则使用指定的默认值。false值有：0、0.0、False、0j、“”、[]、()、set()、{}、None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>filesizeformat</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">以更易读的方式显示文件的大小（即’13 KB’, ‘4.1 MB’, '102 bytes’等）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>safe</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将字符串标记为安全，不需要转义。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"if-else\">if/else</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> condition1 %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">1</span></span><br><span class=\"line\">&#123;% elif condition2 %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">2</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">3</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>根据条件判断是否输出。if/else 支持嵌套。</p>\n<p>标签 {% if %} 接受 and ， or  关键字来对多个变量做判断 ，或者对变量取反（ not )</p>\n<h4 id=\"for\">for</h4>\n<p>标签 {% for %} 允许我们在一个序列上迭代。<br>\n与 Python 的 for 语句的情形类似，循环语法是 for X in Y ，Y 是要迭代的序列而 X 是在每一个特定的循环中使用的变量名称。<br>\n每一次循环中，模板系统会渲染在 {% for %} 和 {% endfor %} 之间的所有内容。</p>\n<p>还可以给标签增加一个 reversed 使得该列表被反向迭代：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> athlete <span class=\"keyword\">in</span> athlete_list reversed %&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历字典: 可以直接用字典 .items 方法，用变量的解包分别获取键和值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> views_dict.items %&#125;</span><br><span class=\"line\">&#123;&#123; i &#125;&#125;---&#123;&#123; j &#125;&#125;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过  <code>&#123;&#123;forloop&#125;&#125;</code> 变量获取循环序号。</p>\n<ul>\n<li>forloop.counter: 顺序获取循环序号，从 1 开始计算</li>\n<li>forloop.counter0: 顺序获取循环序号，从 0 开始计算</li>\n<li>forloop.revcounter: 倒序获取循环序号，结尾序号为 1</li>\n<li>forloop.revcounter0: 倒序获取循环序号，结尾序号为 0</li>\n<li>forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False</li>\n<li>forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False</li>\n</ul>\n<p>可选的 {% empty %} 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> listvar %&#125;</span><br><span class=\"line\">    &#123;&#123; forloop.counter0 &#125;&#125;</span><br><span class=\"line\">&#123;% empty %&#125;</span><br><span class=\"line\">    空空如也～</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ifequal-ifnotequal\">ifequal/ifnotequal</h4>\n<p>标签{% ifequal var1 var2 %} 比较两个值，当他们相等时，显示在 {% ifequal %} 和 {% endifequal %} 之中所有的值。</p>\n<p>和 {% if %} 类似， {% ifequal %} 支持可选的 {% else%} 标签：</p>\n<h4 id=\"注释\">注释</h4>\n<p>Django 注释使用 {# #}。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# 这是一个注释 #&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"include\">include</h4>\n<p>标签{% include %}允许在模板中包含其它的模板的内容。</p>\n<p>下面这个例子包含了 nav.html 模板：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">include</span></span> &quot;nav.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"csrf-token\">csrf_token</h3>\n<p>csrf_token 用于form表单中，作用是跨站请求伪造保护。<br>\n如果不用 {% csrf_token %} 标签，在用 form 表单时，要再次跳转页面会报 403 权限错误。<br>\n用了{% csrf_token %} 标签，在 form 表单提交数据时，才会成功。</p>\n<p>解析：</p>\n<blockquote>\n<p>首先，向服务器发送请求，获取登录页面，此时中间件 csrf 会自动生成一个隐藏input标签，该标签里的 value 属性的值是一个随机的字符串，用户获取到登录页面的同时也获取到了这个隐藏的input标签。<br>\n然后，等用户需要用到form表单提交数据的时候，会携带这个 input 标签一起提交给中间件 csrf，原因是 form 表单提交数据时，会包括所有的 input 标签，中间件 csrf 接收到数据时，会判断，这个随机字符串是不是第一次它发给用户的那个，如果是，则数据提交成功，如果不是，则返回403权限错误。</p>\n</blockquote>\n<h3 id=\"自定义标签和过滤器\">自定义标签和过滤器</h3>\n<p>1、在应用目录下创建 templatetags 目录(与 templates 目录同级，目录名只能是 templatetags)。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloWorld/</span><br><span class=\"line\">|<span class=\"string\">-- HelloWorld</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- __init__.py</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- __init__.pyc</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- settings.py</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">|<span class=\"string\">-- manage.py</span></span><br><span class=\"line\"><span class=\"string\">`-- templatetags</span></span><br><span class=\"line\"><span class=\"string\">`-- templates</span></span><br></pre></td></tr></table></figure>\n<p>2、在 templatetags 目录下创建任意 py 文件，如：my_tags.py。</p>\n<p>3、my_tags.py 文件代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"></span><br><span class=\"line\">register = template.Library()   <span class=\"comment\">#register的名字是固定的,不可改变</span></span><br></pre></td></tr></table></figure>\n<p>修改 <a href=\"http://settings.py\">settings.py</a> 文件的 TEMPLATES 选项配置，添加 libraries 配置：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;BACKEND&#x27;</span>: <span class=\"string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;DIRS&#x27;</span>: [BASE_DIR, <span class=\"string\">&quot;/templates&quot;</span>,],</span><br><span class=\"line\">        <span class=\"string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;context_processors&#x27;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;libraries&quot;</span>:&#123;                          <span class=\"comment\"># 添加这边三行配置</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;my_tags&#x27;</span>:<span class=\"string\">&#x27;templatetags.my_tags&#x27;</span>   <span class=\"comment\"># 添加这边三行配置        </span></span><br><span class=\"line\">            &#125;                                      <span class=\"comment\"># 添加这边三行配置</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>4、利用装饰器 @register.filter 自定义过滤器。</p>\n<p>注意：装饰器的参数最多只能有 2 个。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_filter</span>(<span class=\"params\">v1, v2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 * v2</span><br></pre></td></tr></table></figure>\n<p>5、利用装饰器 @register.simple_tag 自定义标签。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_tag1</span>(<span class=\"params\">v1, v2, v3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 * v2 * v3</span><br></pre></td></tr></table></figure>\n<p>6、在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 py 文件。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> my_tags %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>7、在 HTML 中使用自定义过滤器。</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-variable\">&#123;&#123; <span class=\"name\">11</span>|my_filter:22 &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>8、在 HTML 中使用自定义标签。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> my_ta<span class=\"name\">g1</span> <span class=\"number\">11</span> <span class=\"number\">22</span> <span class=\"number\">33</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>9、语义化标签</p>\n<p>在该 py 文件中导入 mark_safe。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.safestring <span class=\"keyword\">import</span> mark_safe</span><br></pre></td></tr></table></figure>\n<p>定义标签时，用上 mark_safe 方法，令标签语义化，相当于 jQuery 中的 html() 方法。<br>\n和前端HTML文件中的过滤器 safe 效果一样。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_html</span>(<span class=\"params\">v1, v2</span>):</span></span><br><span class=\"line\">    temp_html = <span class=\"string\">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; class=&#x27;%s&#x27; /&gt;&quot;</span> %(v1, v2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark_safe(temp_html)</span><br></pre></td></tr></table></figure>\n<p>在HTML中使用该自定义标签，在页面中动态创建标签。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> my_html <span class=\"string\">&quot;zzz&quot;</span> <span class=\"string\">&quot;xxx&quot;</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置静态文件\">配置静态文件</h3>\n<p>1、在项目根目录下创建 statics 目录。</p>\n<p>2、在 settings 文件的最下方配置添加以下配置：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">STATIC_URL</span> = <span class=\"string\">&#x27;/static/&#x27;</span> <span class=\"comment\"># 别名 </span></span><br><span class=\"line\"><span class=\"attr\">STATICFILES_DIRS</span> = [ </span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">&quot;statics&quot;</span>), </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录， 分别放 css文件，js文件，图片，插件。</p>\n<p>4、把 bootstrap 框架放入插件目录 plugins。</p>\n<p>5、在 HTML 文件的 head 标签中引入 bootstrap。</p>\n<p>注意：此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在模板中使用需要加入 {% load static %} 代码，以下实例我们从静态目录中引入图片。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> static %&#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">static</span></span> &#x27;images/logo.png&#x27; %&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模板继承\">模板继承</h3>\n<p>模板可以用继承的方式来实现复用，减少冗余内容。<br>\n网页的头部和尾部内容一般都是一致的，我们就可以通过模板继承来实现复用。<br>\n父模板用于放置可重复利用的内容，子模板继承父模板的内容，并放置自己的内容。</p>\n<p><code>父模板</code></p>\n<p>标签 block…endblock: 父模板中的预留区域，该区域留给子模板填充差异性的内容，不同预留区域名字不能相同。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">block</span></span> 名称 %&#125;</span><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\">预留给子模板的区域，可以设置设置默认内容</span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>子模板</code></p>\n<p>子模板使用标签 extends 继承父模板：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">extends</span></span> &quot;父模板路径&quot;%&#125;</span><span class=\"xml\"> </span></span><br></pre></td></tr></table></figure>\n<p>子模板如果没有设置父模板预留区域的内容，则使用在父模板设置的默认内容，当然也可以都不设置，就为空。</p>\n<p>子模板设置父模板预留区域的内容：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&#123; % block 名称 % &#125;</span></span><br><span class=\"line\"><span class=\"xml\">内容 </span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接下来我们先创建之前项目的 templates 目录中添加 base.html 文件，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Django 测试。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% block mainbody %&#125;</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>original<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% endblock %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中，名为 mainbody 的 block 标签是可以被继承者们替换掉的部分。<br>\n所有的 {% block %} 标签告诉模板引擎，子模板可以重载这些部分。<br>\n我们使用ex.html 继承 base.html，并替换特定 block，ex.html 修改后的代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%extends &quot;base.html&quot; %&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;% block mainbody %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>继承了 base.html 文件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模型model\">Django模型model</h2>\n<h3 id=\"Django-ORM\">Django ORM</h3>\n<p>Django 模型使用自带的 ORM。<br>\n对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>\nORM 在业务逻辑层和数据库层之间充当了桥梁的作用。<br>\nORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p>\n<p><img src=\"django-orm1.png\" alt=\"django-orm\"></p>\n<p>使用 ORM 的好处：</p>\n<ul>\n<li>提高开发效率。</li>\n<li>不同数据库可以平滑切换。</li>\n</ul>\n<p>使用 ORM 的缺点：</p>\n<ul>\n<li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li>\n<li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li>\n</ul>\n<p>ORM 解析过程:</p>\n<ul>\n<li>1、ORM 会将 Python 代码转成为 SQL 语句。</li>\n<li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li>\n<li>3、在数据库中执行 SQL 语句并将结果返回。</li>\n</ul>\n<p>ORM 对应关系表：<br>\n<img src=\"orm-object.png\" alt=\"ORM 对应关系表\"></p>\n<h3 id=\"数据库配置\">数据库配置</h3>\n<p>见<a href=\"/cn/mysql\">mysql</a>和<a href=\"/cn/Python-Note/#Python%E6%93%8D%E4%BD%9CMySQL\">Python操作MySQL</a></p>\n<p>首先先创建一个mysql数据库( ORM 无法操作到数据库级别，只能操作到数据表)<br>\n例如我们创建了一个testdb数据库：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database testdb <span class=\"keyword\">default</span> charset<span class=\"operator\">=</span>utf8;   </span><br></pre></td></tr></table></figure>\n<p>接着我们在项目的 <a href=\"http://settings.py\">settings.py</a> 文件中找到 DATABASES 配置项，将其信息修改为：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.mysql&#x27;</span>,    <span class=\"comment\"># 数据库引擎</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;testdb&#x27;</span>, <span class=\"comment\"># 数据库名称</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;HOST&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\"># 数据库地址，本机 ip 地址 127.0.0.1 </span></span><br><span class=\"line\">        <span class=\"string\">&#x27;PORT&#x27;</span>: <span class=\"number\">3306</span>, <span class=\"comment\"># 端口 </span></span><br><span class=\"line\">        <span class=\"string\">&#x27;USER&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>,  <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;PASSWORD&#x27;</span>: <span class=\"string\">&#x27;xxxxxx&#x27;</span>, <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你使用了 Python2.x 版本这里添加了中文注释，那么你需要在 HelloWorld/settings.py 文件头部添加 <code># -*- coding: UTF-8 -*-</code>。</p>\n</blockquote>\n<p>上面包含数据库名称和用户的信息，它们与 MySQL 中对应数据库和用户的设置相同。Django 根据这一设置，与 MySQL 中相应的数据库和用户连接起来。<br>\n接下来，告诉 Django 使用 pymysql 模块连接 mysql 数据库：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义模型\">定义模型</h3>\n<p>创建 APP:</p>\n<p>Django 规定，如果要使用模型，必须要创建一个 app。</p>\n<p>我们修改 app02/models.py 文件，代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># models.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>(<span class=\"params\">models.Model</span>):</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。</p>\n<p>在命令行中运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 manage.py migrate   <span class=\"comment\"># 创建表结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ python3 manage.py makemigrations TestModel  <span class=\"comment\"># 让 Django 知道我们在我们的模型有一些变更</span></span><br><span class=\"line\">$ python3 manage.py migrate TestModel   <span class=\"comment\"># 创建表结构</span></span><br></pre></td></tr></table></figure>\n<p>你的数据表就创建好了。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Migrations <span class=\"keyword\">for</span> <span class=\"string\">&#x27;app02&#x27;</span>:</span><br><span class=\"line\">  app02\\migrations\\<span class=\"number\">0001</span>_initial.<span class=\"keyword\">py</span></span><br><span class=\"line\">    - Create model Test</span><br><span class=\"line\"></span><br><span class=\"line\">Operations <span class=\"keyword\">to</span> perform:</span><br><span class=\"line\">  Apply <span class=\"keyword\">all</span> migration<span class=\"variable\">s:</span> app02</span><br><span class=\"line\">Running migration<span class=\"variable\">s:</span></span><br><span class=\"line\">  Applying app02.<span class=\"number\">0001</span>_initial... OK</span><br></pre></td></tr></table></figure>\n<p>表名组成结构为：应用名_类名（如：app02_test）</p>\n<blockquote>\n<p>注意：尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。</p>\n</blockquote>\n<h3 id=\"数据库操作\">数据库操作</h3>\n<p>接下来我们在 HelloWorld 目录中添加 <a href=\"http://testdb.py\">testdb.py</a> 文件（下面介绍），并修改 <a href=\"http://urls.py\">urls.py</a>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views,testdb</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;runoob/&#x27;</span>, views.runoob),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;testdb/&#x27;</span>, testdb.testdb),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加数据\">添加数据</h4>\n<p>添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> app02.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test1 = Test(name=<span class=\"string\">&#x27;name1&#x27;</span>)</span><br><span class=\"line\">    test1.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://127.0.0.1:8000/testdb\">http://127.0.0.1:8000/testdb</a> 就可以看到数据添加成功的提示。</p>\n<h4 id=\"获取数据\">获取数据</h4>\n<p>Django提供了多种方式来获取数据库的内容</p>\n<p>修改testdb如下代码所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> app02.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">    response = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span> = Test.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">        response += var.name + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;&quot;</span> + response + <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Test.objects是Test的模型管理器，其下拥有些方法方便我们进行操作。</p>\n<p><code>all</code></p>\n<p>all()可以获得所有数据行，相当于SQL中的<code>SELECT * FROM</code>。<br>\n这个函数返回一个QuerySet[T].</p>\n<p><code>filter</code></p>\n<p>filter()相当于SQL中的WHERE，可设置条件过滤结果，函数返回一个QuerySet[T]。例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Test.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>) </span><br></pre></td></tr></table></figure>\n<p><code>get</code></p>\n<p>get()用于获取单个对象，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><code>order_by</code></p>\n<p>order_by()函数用于数据排序，作用等同sql语句的ORDER BY.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.objects.order_by(<span class=\"string\">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的方法可以连锁使用：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.objects.<span class=\"built_in\">filter</span>(name=<span class=\"string\">&quot;name1&quot;</span>).order_by(<span class=\"string\">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>返回的结果集还可以使用切片截取限制，相当于SQL 中的 OFFSET 0 LIMIT 2;<br>\nresult[0:2]</p>\n</blockquote>\n<h4 id=\"更新数据\">更新数据</h4>\n<p>修改数据可以使用 save() 或 update():</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> TestModel.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span></span><br><span class=\"line\">    test1 = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">    test1.name = <span class=\"string\">&#x27;Google&#x27;</span></span><br><span class=\"line\">    test1.save()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 另外一种方式</span></span><br><span class=\"line\">    <span class=\"comment\">#Test.objects.filter(id=1).update(name=&#x27;Google&#x27;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 修改所有的列</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.all().update(name=&#x27;Google&#x27;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;修改成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据\">删除数据</h4>\n<p>删除数据库中的对象只需调用该对象的delete()方法即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> TestModel.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 删除id=1的数据</span></span><br><span class=\"line\">    test1 = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">    test1.delete()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 另外一种方式</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.filter(id=1).delete()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 删除所有数据</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.all().delete()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;删除成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django表单form\">Django表单form</h2>\n<p>HTML表单是网站交互性的经典方式。 本章将介绍如何用Django对用户提交的表单数据进行处理。</p>\n<h3 id=\"HTTP请求\">HTTP请求</h3>\n<p>HTTP协议以&quot;请求－回复&quot;的方式工作。客户发送请求时，可以在请求中附加数据。服务器通过解析请求，就可以获得客户传来的数据，并根据URL来提供特定的服务。</p>\n<h4 id=\"Get方法\">Get方法</h4>\n<p>我们在之前的项目中创建一个 <a href=\"http://search.py\">search.py</a> 文件，用于接收用户的请求：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"comment\"># 表单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_form</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;search_form.html&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 接收请求数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">request</span>):</span>  </span><br><span class=\"line\">    request.encoding=<span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;q&#x27;</span> <span class=\"keyword\">in</span> request.GET <span class=\"keyword\">and</span> request.GET[<span class=\"string\">&#x27;q&#x27;</span>]:</span><br><span class=\"line\">        message = <span class=\"string\">&#x27;你搜索的内容为: &#x27;</span> + request.GET[<span class=\"string\">&#x27;q&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        message = <span class=\"string\">&#x27;你提交了空表单&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(message)</span><br></pre></td></tr></table></figure>\n<p>在模板目录 templates 中添加 search_form.html 表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>search<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/search/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同时修改urls.py规则。</p>\n<p>访问地址 <a href=\"http://127.0.0.1:8000/search-form/\">http://127.0.0.1:8000/search-form/</a> 并搜索，可以看到get请求进行的表单传值结果。</p>\n<h4 id=\"Post方法\">Post方法</h4>\n<p>上面我们使用了GET方法。视图显示和请求处理分成两个函数处理。<br>\n提交数据时更常用POST方法。我们下面使用该方法，并用一个URL和处理函数，同时显示视图和处理请求。</p>\n<p>我们在 templates 创建 post.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/search_post/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;% csrf_token %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; rlt &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在模板的末尾，我们增加一个 rlt 记号，为表单处理结果预留位置。<br>\n表单中还有一个{% csrf_token %}的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。</p>\n<p>在app目录下新建 <a href=\"http://search2.py\">search2.py</a> 文件并使用 search_post 函数来处理 POST 请求：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views.decorators <span class=\"keyword\">import</span> csrf</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 接收POST请求数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_post</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    ctx =&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.POST:</span><br><span class=\"line\">        ctx[<span class=\"string\">&#x27;rlt&#x27;</span>] = request.POST[<span class=\"string\">&#x27;q&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&quot;post.html&quot;</span>, ctx)</span><br></pre></td></tr></table></figure>\n<p>记得同时修改urls规则。<br>\n最后访问 <a href=\"http://127.0.0.1:8000/search-post/\">http://127.0.0.1:8000/search-post/</a>.</p>\n<h3 id=\"Request对象\">Request对象</h3>\n<p>HttpRequest对象包含当前请求URL的一些信息：</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n属性\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"text-align : center\">\npath\n</td>\n<td>\n请求页面的全路径,不包括域名—例如, \"/hello/\"。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nmethod\n</td>\n<td>\n请求中使用的HTTP方法的字符串表示。全大写表示。例如:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;GET&#x27;</span>:</span><br><span class=\"line\">    do_something()</span><br><span class=\"line\"><span class=\"keyword\">elif</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">    do_something_else()</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nGET\n</td>\n<td>\n<p>包含所有HTTP GET参数的类字典对象。参见<a href=\"#querydict%E5%AF%B9%E8%B1%A1\">QueryDict</a>文档。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nPOST\n</td>\n<td>\n<p>包含所有HTTP POST参数的类字典对象。参见<a href=\"#QueryDict%E5%AF%B9%E8%B1%A1\">QueryDict</a> 文档。<br><br>\n服务器收到空的POST请求的情况也是有可能发生的。也就是说，表单form通过HTTP POST方法提交请求，但是表单中可以没有数据。因此，不能使用语句if request.POST来判断是否使用HTTP POST方法；应该使用if request.method == “POST” (参见本表的method属性)。<br><br>\n注意: POST不包括file-upload信息。参见FILES属性。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nREQUEST\n</td>\n<td>\n为了方便，该属性是POST和GET属性的集合体，但是有特殊性，先查找POST属性，然后再查找GET属性。借鉴PHP's $_REQUEST。\n<br>\n例如，如果GET = {\"name\": \"john\"} 和POST = {\"age\": '34'},则 REQUEST[\"name\"] 的值是\"john\", REQUEST[\"age\"]的值是\"34\".\n<br>\n强烈建议使用GET and POST,因为这两个属性更加显式化，写出的代码也更易理解。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nCOOKIES\n</td>\n<td>\n包含所有cookies的标准Python字典对象。Keys和values都是字符串。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nFILES\n</td>\n<td>\n包含所有上传文件的类字典对象。FILES中的每个Key都是\n<p><code>&lt;input type=&quot;file&quot; name=&quot;&quot; \\&gt;</code> 标签中name属性的值. FILES中的每个value 同时也是一个标准Python字典对象，包含下面三个Keys:<br>\n<br></p>\n<ul>\n<li>filename: 上传文件名,用Python字符串表示</li>\n<li>content-type: 上传文件的Content type</li>\n<li>content: 上传文件的原始内容</li>\n</ul>\n<p>注意：只有在请求方法是POST，并且请求页面中<code>&lt;form&gt;</code>有enctype=&quot;multipart/form-data&quot;属性时FILES才拥有数据。否则，FILES 是一个空字典。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nuser\n</td>\n<td>\n是一个django.contrib.auth.models.User 对象，代表当前登录的用户。\n<br>\n如果访问用户当前没有登录，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。\n<br>\n你可以通过user的is_authenticated()方法来辨别用户是否登录：\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.user.is_authenticated():</span><br><span class=\"line\">    <span class=\"comment\"># Do something for logged-in users.</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Do something for anonymous users.</span></span><br></pre></td></tr></table></figure>\n<p>只有激活Django中的AuthenticationMiddleware时该属性才可用</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nMETA\n</td>\n<td>\n包含所有可用HTTP头部信息的字典。 例如:\n<ul>\n<li>CONTENT_LENGTH</li>\n<li>CONTENT_TYPE</li>\n<li>QUERY_STRING: 未解析的原始查询字符串</li>\n<li>REMOTE_ADDR: 客户端IP地址</li>\n<li>REMOTE_HOST: 客户端主机名</li>\n<li>SERVER_NAME: 服务器主机名</li>\n<li>SERVER_PORT: 服务器端口</li>\n</ul>\n<p>META 中这些头加上前缀 HTTP_ 为 Key, 冒号(:)后面的为 Value， 例如:</p>\n<ul>\n<li>HTTP_ACCEPT_ENCODING</li>\n<li>HTTP_ACCEPT_LANGUAGE</li>\n<li>HTTP_HOST: 客户发送的HTTP主机头信息</li>\n<li>HTTP_REFERER: referring页</li>\n<li>HTTP_USER_AGENT: 客户端的user-agent字符串</li>\n<li>HTTP_X_BENDER: X-Bender头信息</li>\n</ul>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nsession\n</td>\n<td>\n唯一可读写的属性，代表当前会话的字典对象。只有激活Django中的session支持时该属性才可用。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nraw_post_data\n</td>\n<td>\n原始HTTP POST数据，未解析过。 高级处理时会有用处。\n</td>\n</tr>\n</tbody>\n</table>\n<p>Request对象也有一些有用的方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">__getitem__(key)</td>\n<td style=\"text-align:left\">返回GET/POST的键值,先取POST,后取GET。如果键不存在抛出 KeyError。<br>这是我们可以使用字典语法访问HttpRequest对象。<br>例如,request[“foo”]等同于先request.POST[“foo”] 然后 request.GET[“foo”]的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">has_key()</td>\n<td style=\"text-align:left\">检查request.GET 或者 request.POST中是否包含参数指定的Key。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get_full_path()</td>\n<td style=\"text-align:left\">返回包含查询字符串的请求路径。例如， “/music/bands/the_beatles/?print=true”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_secure()</td>\n<td style=\"text-align:left\">如果请求是安全的，返回True，就是说，发出的是HTTPS请求。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"QueryDict对象\">QueryDict对象</h3>\n<p>在HttpRequest对象中, GET和POST属性是django.http.QueryDict类的实例。<br>\nQueryDict类似字典的自定义类，用来处理单键对应多值的情况。<br>\nQueryDict实现所有标准的词典方法。</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr style = \"text-align : center\">\n<td>\n__getitem__()\n</td>\n<td>\n和标准字典的处理有一点不同，就是，如果Key对应多个Value，__getitem__()返回最后一个value。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\n__setitem__()\n</td>\n<td>\n设置参数指定key的value列表(一个Python list)。注意：它只能在一个mutable QueryDict 对象上被调用(就是通过copy()产生的一个QueryDict对象的拷贝).\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nget()\n</td>\n<td>\n如果key对应多个value，get()返回最后一个value。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nupdate()\n</td>\n<td>\n参数可以是QueryDict，也可以是标准字典。和标准字典的update方法不同，该方法添加字典 items，而不是替换它们:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = q.copy() <span class=\"comment\"># to make it mutable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.update(&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;2&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.getlist(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q[<span class=\"string\">&#x27;a&#x27;</span>] <span class=\"comment\"># returns the last</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;2&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nitems()\n</td>\n<td>\n和标准字典的items()方法有一点不同,该方法使用单值逻辑的__getitem__():\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&amp;a=2&amp;a=3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.items()</span><br><span class=\"line\"></span><br><span class=\"line\">[(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\ncopy()\n</td>\n<td>\n返回对象的拷贝，内部实现是用Python标准库的copy.deepcopy()。该拷贝是mutable(可更改的) — 就是说，可以更改该拷贝的值。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\ngetlist(key)\n</td>\n<td>\n返回和参数key对应的所有值，作为一个Python list返回。如果key不存在，则返回空list。 It's guaranteed to return a list of some sort..\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nsetlist(key,list...)\n</td>\n<td>\n设置key的值为list_ (unlike __setitem__()).\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nappendlist(key,item)\n</td>\n<td>\n添加item到和key关联的内部list.\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nsetlistdefault(key,list)\n</td>\n<td>\n和setdefault有一点不同，它接受list而不是单个value作为参数。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nlists()\n</td>\n<td>\n和items()有一点不同, 它会返回key的所有值，作为一个list, 例如:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&amp;a=2&amp;a=3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.lists()</span><br><span class=\"line\"></span><br><span class=\"line\">[(<span class=\"string\">&#x27;a&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>])]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nurlencode()\n</td>\n<td>\n返回一个以查询字符串格式进行格式化后的字符串(例如：\"a=2&b=3&b=5\")。\n</td>\n</tr>\n</tbody>\n</table>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django-简介\">Django 简介</h2>\n<p>Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。<br>\nDjango 是一个开放源代码的 Web 应用框架，由 Python 写成。<br>\nDjango 遵守 BSD 版权，初次发布于 2005 年 7 月, 并于 2008 年 9 月发布了第一个正式版本 1.0 。</p>\n<p>Django 采用了 MVT 的软件设计模式，即模型（Model），视图（View）和模板（Template）。<br>\n使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。</p>\n<p>MVC 优势：</p>\n<ul>\n<li>低耦合</li>\n<li>开发快捷</li>\n<li>部署方便</li>\n<li>可重用性高</li>\n<li>维护成本低</li>\n<li>…</li>\n</ul>\n<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p>\n<p>特点：</p>\n<ul>\n<li>强大的数据库功能</li>\n<li>自带强大的后台功能</li>\n<li>优雅的网址</li>\n</ul>\n<p>MVC 与 MTV模型的详情请参见：<br>\n<a href=\"/cn/mvc-and-mvt\">MVC与MVT模型</a></p>\n<h2 id=\"Django安装\">Django安装</h2>\n<blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Django -i https:<span class=\"regexp\">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"创建项目\">创建项目</h3>\n<p><code>使用Pycharm创建</code></p>\n<p><img src=\"Django-env9.png\" alt=\"pycharm创建django应用\"></p>\n<p><code>使用命令行创建</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin startproject 项目名称</span><br><span class=\"line\"><span class=\"keyword\">python</span> manage.<span class=\"keyword\">py</span> startapp 应用名</span><br></pre></td></tr></table></figure>\n<p>Django项目结构:<br>\n<img src=\"Django-env6.png\" alt=\"Django项目结构\"></p>\n<ul>\n<li><code>manage.py</code>: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li>\n<li>mysite/<code>__init__.py</code>: 一个空文件，告诉 Python 该目录是一个 Python 包。</li>\n<li>mysite/<code>asgi.py</code>: 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>\n<li>mysite/<code>settings.py</code>: 该 Django 项目的设置/配置。</li>\n<li>mysite/<code>urls.py</code>: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站&quot;目录&quot;。</li>\n<li>mysite/<code>wsgi.py</code>: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li>\n</ul>\n<p>Django应用结构:<br>\n<img src=\"Django-env10.png\" alt=\"Django应用结构\"></p>\n<h3 id=\"运行应用\">运行应用</h3>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span> manage.py runserver <span class=\"number\">0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>\n<p>0.0.0.0 让其它电脑可连接到开发服务器，8000 为端口号。如果不说明，那么端口号默认为 8000。</p>\n<blockquote>\n<p>注意：要在 <a href=\"http://manage.py\">manage.py</a> 同级目录执行命令。</p>\n</blockquote>\n<p>或者<br>\n<img src=\"startapp.png\" alt=\"\"><br>\n<img src=\"pycharm01.png\" alt=\"\"></p>\n<p>在浏览器输入你服务器的 ip（这里我们输入本机 IP 地址： <a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>） 及端口号，如果正常启动，输出结果如下：</p>\n<p><img src=\"django_init.png\" alt=\"成功界面\"></p>\n<h3 id=\"Hello-World\">Hello World</h3>\n<p>在应用目录的views.py文件输入以下代码:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;Hello world ! &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>接着，绑定 URL 与视图函数。打开 <a href=\"http://urls.py\">urls.py</a> 文件，输入：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> <span class=\"type\">path</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> App01 <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;hello/&#x27;</span>,views.hello),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后通过浏览器打开<a href=\"http://127.0.0.1:8000/hello\">http://127.0.0.1:8000/hello</a></p>\n<p>得到输出结果如下：</p>\n<p><img src=\"hello.png\" alt=\"\"></p>\n<h4 id=\"path-函数\">path() 函数</h4>\n<p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p>\n<p>语法格式：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path(route, view, kwargs=<span class=\"literal\">None</span>, name=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li>\n<li>view: 用于执行与正则表达式匹配的 URL 请求。</li>\n<li>kwargs: 视图使用的字典类型的参数。</li>\n<li>name: 用来反向获取 URL。</li>\n</ul>\n<p>Django2. 0中可以使用 re_path() 方法来兼容 1.x 版本中的 url() 方法，一些正则表达式的规则也可以通过 re_path() 来实现 。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> include, re_path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^index/$&#x27;</span>, views.index, name=<span class=\"string\">&#x27;index&#x27;</span>),</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^bio/(?P&lt;username&gt;\\w+)/$&#x27;</span>, views.bio, name=<span class=\"string\">&#x27;bio&#x27;</span>),</span><br><span class=\"line\">    re_path(<span class=\"string\">r&#x27;^weblog/&#x27;</span>, include(<span class=\"string\">&#x27;blog.urls&#x27;</span>)),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模板-template\">Django模板(template)</h2>\n<p>在上一章节中我们使用 django.http.HttpResponse() 来输出 “Hello World！”。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。<br>\n本章节我们将为大家详细介绍 Django 模板的应用，模板是一个文本，用于分离文档的表现形式和内容。</p>\n<p>首先我们在templates下新建一个test.html，文件代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; test_data &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://xn--views-bi1hp6c84c4z7enkddrfs3h.py\">接下来我们修改views.py</a>，增加一个新的对象，用于向模板提交数据：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    context = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    context[<span class=\"string\">&#x27;test_data&#x27;</span>] = <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;test.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;test/&#x27;</span>, views.test),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们这里使用 render 来替代之前使用的 HttpResponse。render 还使用了一个字典 context 作为参数。<br>\ncontext 字典中元素的键值 hello 对应了模板中的变量  {{ hello }} 。<br>\n再次访问 <a href=\"http://127.0.0.1:8000/test\">http://127.0.0.1:8000/test</a></p>\n<p>这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。<br>\n接下来我们将具体介绍模板中常用的语法规则。</p>\n<h3 id=\"模板语法规则\">模板语法规则</h3>\n<h4 id=\"传值\">传值</h4>\n<p><code>变量</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test&#x27;</span>:test&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>列表</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test_lst = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test_lst&#x27;</span>:test_lst&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_lst &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出整个列表</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_lst.1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出列表的第二个元素</span><br></pre></td></tr></table></figure>\n<p><code>字典</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test_dict = &#123;<span class=\"string\">&#x27;test&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">&#x27;test.html&#x27;</span>,&#123;<span class=\"string\">&#x27;test_dict&#x27;</span>:test_dict&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_dict &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>   # 显示所有字典</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; test_dict.test &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  # 取出字典对应的键值</span><br></pre></td></tr></table></figure>\n<h4 id=\"过滤器\">过滤器</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; 变量名 | 过滤器：可选参数 &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>模板过滤器可以在变量被显示前修改它，过滤器使用管道字符<br>\n过滤管道可以被<code>套接</code> ，既是说，一个过滤器管道的输出又可以作为下一个管道的输入：</p>\n<p>有以下几个常用过滤器：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">过滤器</th>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>lower</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">文档大写转换文本为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>upper</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">文档小写转换文本为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>first</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">获取列表的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>truncatewords</code></td>\n<td style=\"text-align:left\">“num”</td>\n<td style=\"text-align:left\">显示变量的前num个词</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>truncatechars</code></td>\n<td style=\"text-align:left\">num</td>\n<td style=\"text-align:left\">如果字符串包含的字符总个数多于指定的字符数量，那么会被截断掉后面的部分。截断的字符串将以 … 结尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>addslashes</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">添加反斜杠到任何反斜杠、单引号或者双引号前面。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>date</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">根据给定格式对一个日期变量进行格式化。格式 <code>Y-m-d H:i:s</code>返回 年-月-日 小时:分钟:秒 的格式时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>length</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">返回变量的长度。适用于字符串和列表。字典返回的是键值对的数量，集合返回的是去重后的长度。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>default</code></td>\n<td style=\"text-align:left\">str</td>\n<td style=\"text-align:left\">如果 views 传的变量的值是 false，则使用指定的默认值。false值有：0、0.0、False、0j、“”、[]、()、set()、{}、None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>filesizeformat</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">以更易读的方式显示文件的大小（即’13 KB’, ‘4.1 MB’, '102 bytes’等）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>safe</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将字符串标记为安全，不需要转义。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"if-else\">if/else</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> condition1 %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">1</span></span><br><span class=\"line\">&#123;% elif condition2 %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">2</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">   ... display <span class=\"number\">3</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>根据条件判断是否输出。if/else 支持嵌套。</p>\n<p>标签 {% if %} 接受 and ， or  关键字来对多个变量做判断 ，或者对变量取反（ not )</p>\n<h4 id=\"for\">for</h4>\n<p>标签 {% for %} 允许我们在一个序列上迭代。<br>\n与 Python 的 for 语句的情形类似，循环语法是 for X in Y ，Y 是要迭代的序列而 X 是在每一个特定的循环中使用的变量名称。<br>\n每一次循环中，模板系统会渲染在 {% for %} 和 {% endfor %} 之间的所有内容。</p>\n<p>还可以给标签增加一个 reversed 使得该列表被反向迭代：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> athlete <span class=\"keyword\">in</span> athlete_list reversed %&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历字典: 可以直接用字典 .items 方法，用变量的解包分别获取键和值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> views_dict.items %&#125;</span><br><span class=\"line\">&#123;&#123; i &#125;&#125;---&#123;&#123; j &#125;&#125;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>可以通过  <code>&#123;&#123;forloop&#125;&#125;</code> 变量获取循环序号。</p>\n<ul>\n<li>forloop.counter: 顺序获取循环序号，从 1 开始计算</li>\n<li>forloop.counter0: 顺序获取循环序号，从 0 开始计算</li>\n<li>forloop.revcounter: 倒序获取循环序号，结尾序号为 1</li>\n<li>forloop.revcounter0: 倒序获取循环序号，结尾序号为 0</li>\n<li>forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False</li>\n<li>forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False</li>\n</ul>\n<p>可选的 {% empty %} 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> listvar %&#125;</span><br><span class=\"line\">    &#123;&#123; forloop.counter0 &#125;&#125;</span><br><span class=\"line\">&#123;% empty %&#125;</span><br><span class=\"line\">    空空如也～</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ifequal-ifnotequal\">ifequal/ifnotequal</h4>\n<p>标签{% ifequal var1 var2 %} 比较两个值，当他们相等时，显示在 {% ifequal %} 和 {% endifequal %} 之中所有的值。</p>\n<p>和 {% if %} 类似， {% ifequal %} 支持可选的 {% else%} 标签：</p>\n<h4 id=\"注释\">注释</h4>\n<p>Django 注释使用 {# #}。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# 这是一个注释 #&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"include\">include</h4>\n<p>标签{% include %}允许在模板中包含其它的模板的内容。</p>\n<p>下面这个例子包含了 nav.html 模板：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">include</span></span> &quot;nav.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"csrf-token\">csrf_token</h3>\n<p>csrf_token 用于form表单中，作用是跨站请求伪造保护。<br>\n如果不用 {% csrf_token %} 标签，在用 form 表单时，要再次跳转页面会报 403 权限错误。<br>\n用了{% csrf_token %} 标签，在 form 表单提交数据时，才会成功。</p>\n<p>解析：</p>\n<blockquote>\n<p>首先，向服务器发送请求，获取登录页面，此时中间件 csrf 会自动生成一个隐藏input标签，该标签里的 value 属性的值是一个随机的字符串，用户获取到登录页面的同时也获取到了这个隐藏的input标签。<br>\n然后，等用户需要用到form表单提交数据的时候，会携带这个 input 标签一起提交给中间件 csrf，原因是 form 表单提交数据时，会包括所有的 input 标签，中间件 csrf 接收到数据时，会判断，这个随机字符串是不是第一次它发给用户的那个，如果是，则数据提交成功，如果不是，则返回403权限错误。</p>\n</blockquote>\n<h3 id=\"自定义标签和过滤器\">自定义标签和过滤器</h3>\n<p>1、在应用目录下创建 templatetags 目录(与 templates 目录同级，目录名只能是 templatetags)。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloWorld/</span><br><span class=\"line\">|<span class=\"string\">-- HelloWorld</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- __init__.py</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- __init__.pyc</span></span><br><span class=\"line\">|<span class=\"string\">   </span>|<span class=\"string\">-- settings.py</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">|<span class=\"string\">-- manage.py</span></span><br><span class=\"line\"><span class=\"string\">`-- templatetags</span></span><br><span class=\"line\"><span class=\"string\">`-- templates</span></span><br></pre></td></tr></table></figure>\n<p>2、在 templatetags 目录下创建任意 py 文件，如：my_tags.py。</p>\n<p>3、my_tags.py 文件代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"></span><br><span class=\"line\">register = template.Library()   <span class=\"comment\">#register的名字是固定的,不可改变</span></span><br></pre></td></tr></table></figure>\n<p>修改 <a href=\"http://settings.py\">settings.py</a> 文件的 TEMPLATES 选项配置，添加 libraries 配置：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;BACKEND&#x27;</span>: <span class=\"string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;DIRS&#x27;</span>: [BASE_DIR, <span class=\"string\">&quot;/templates&quot;</span>,],</span><br><span class=\"line\">        <span class=\"string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;context_processors&#x27;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;libraries&quot;</span>:&#123;                          <span class=\"comment\"># 添加这边三行配置</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;my_tags&#x27;</span>:<span class=\"string\">&#x27;templatetags.my_tags&#x27;</span>   <span class=\"comment\"># 添加这边三行配置        </span></span><br><span class=\"line\">            &#125;                                      <span class=\"comment\"># 添加这边三行配置</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>4、利用装饰器 @register.filter 自定义过滤器。</p>\n<p>注意：装饰器的参数最多只能有 2 个。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_filter</span>(<span class=\"params\">v1, v2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 * v2</span><br></pre></td></tr></table></figure>\n<p>5、利用装饰器 @register.simple_tag 自定义标签。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_tag1</span>(<span class=\"params\">v1, v2, v3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 * v2 * v3</span><br></pre></td></tr></table></figure>\n<p>6、在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 py 文件。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> my_tags %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>7、在 HTML 中使用自定义过滤器。</p>\n<figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-variable\">&#123;&#123; <span class=\"name\">11</span>|my_filter:22 &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>8、在 HTML 中使用自定义标签。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> my_ta<span class=\"name\">g1</span> <span class=\"number\">11</span> <span class=\"number\">22</span> <span class=\"number\">33</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>9、语义化标签</p>\n<p>在该 py 文件中导入 mark_safe。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.safestring <span class=\"keyword\">import</span> mark_safe</span><br></pre></td></tr></table></figure>\n<p>定义标签时，用上 mark_safe 方法，令标签语义化，相当于 jQuery 中的 html() 方法。<br>\n和前端HTML文件中的过滤器 safe 效果一样。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_html</span>(<span class=\"params\">v1, v2</span>):</span></span><br><span class=\"line\">    temp_html = <span class=\"string\">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; class=&#x27;%s&#x27; /&gt;&quot;</span> %(v1, v2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mark_safe(temp_html)</span><br></pre></td></tr></table></figure>\n<p>在HTML中使用该自定义标签，在页面中动态创建标签。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> my_html <span class=\"string\">&quot;zzz&quot;</span> <span class=\"string\">&quot;xxx&quot;</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置静态文件\">配置静态文件</h3>\n<p>1、在项目根目录下创建 statics 目录。</p>\n<p>2、在 settings 文件的最下方配置添加以下配置：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">STATIC_URL</span> = <span class=\"string\">&#x27;/static/&#x27;</span> <span class=\"comment\"># 别名 </span></span><br><span class=\"line\"><span class=\"attr\">STATICFILES_DIRS</span> = [ </span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">&quot;statics&quot;</span>), </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录， 分别放 css文件，js文件，图片，插件。</p>\n<p>4、把 bootstrap 框架放入插件目录 plugins。</p>\n<p>5、在 HTML 文件的 head 标签中引入 bootstrap。</p>\n<p>注意：此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在模板中使用需要加入 {% load static %} 代码，以下实例我们从静态目录中引入图片。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">load</span></span> static %&#125;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">static</span></span> &#x27;images/logo.png&#x27; %&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模板继承\">模板继承</h3>\n<p>模板可以用继承的方式来实现复用，减少冗余内容。<br>\n网页的头部和尾部内容一般都是一致的，我们就可以通过模板继承来实现复用。<br>\n父模板用于放置可重复利用的内容，子模板继承父模板的内容，并放置自己的内容。</p>\n<p><code>父模板</code></p>\n<p>标签 block…endblock: 父模板中的预留区域，该区域留给子模板填充差异性的内容，不同预留区域名字不能相同。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">block</span></span> 名称 %&#125;</span><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\">预留给子模板的区域，可以设置设置默认内容</span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>子模板</code></p>\n<p>子模板使用标签 extends 继承父模板：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">extends</span></span> &quot;父模板路径&quot;%&#125;</span><span class=\"xml\"> </span></span><br></pre></td></tr></table></figure>\n<p>子模板如果没有设置父模板预留区域的内容，则使用在父模板设置的默认内容，当然也可以都不设置，就为空。</p>\n<p>子模板设置父模板预留区域的内容：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&#123; % block 名称 % &#125;</span></span><br><span class=\"line\"><span class=\"xml\">内容 </span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>接下来我们先创建之前项目的 templates 目录中添加 base.html 文件，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Django 测试。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% block mainbody %&#125;</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>original<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% endblock %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中，名为 mainbody 的 block 标签是可以被继承者们替换掉的部分。<br>\n所有的 {% block %} 标签告诉模板引擎，子模板可以重载这些部分。<br>\n我们使用ex.html 继承 base.html，并替换特定 block，ex.html 修改后的代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%extends &quot;base.html&quot; %&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;% block mainbody %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>继承了 base.html 文件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django模型model\">Django模型model</h2>\n<h3 id=\"Django-ORM\">Django ORM</h3>\n<p>Django 模型使用自带的 ORM。<br>\n对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>\nORM 在业务逻辑层和数据库层之间充当了桥梁的作用。<br>\nORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p>\n<p><img src=\"django-orm1.png\" alt=\"django-orm\"></p>\n<p>使用 ORM 的好处：</p>\n<ul>\n<li>提高开发效率。</li>\n<li>不同数据库可以平滑切换。</li>\n</ul>\n<p>使用 ORM 的缺点：</p>\n<ul>\n<li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li>\n<li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li>\n</ul>\n<p>ORM 解析过程:</p>\n<ul>\n<li>1、ORM 会将 Python 代码转成为 SQL 语句。</li>\n<li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li>\n<li>3、在数据库中执行 SQL 语句并将结果返回。</li>\n</ul>\n<p>ORM 对应关系表：<br>\n<img src=\"orm-object.png\" alt=\"ORM 对应关系表\"></p>\n<h3 id=\"数据库配置\">数据库配置</h3>\n<p>见<a href=\"/cn/mysql\">mysql</a>和<a href=\"/cn/Python-Note/#Python%E6%93%8D%E4%BD%9CMySQL\">Python操作MySQL</a></p>\n<p>首先先创建一个mysql数据库( ORM 无法操作到数据库级别，只能操作到数据表)<br>\n例如我们创建了一个testdb数据库：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database testdb <span class=\"keyword\">default</span> charset<span class=\"operator\">=</span>utf8;   </span><br></pre></td></tr></table></figure>\n<p>接着我们在项目的 <a href=\"http://settings.py\">settings.py</a> 文件中找到 DATABASES 配置项，将其信息修改为：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.mysql&#x27;</span>,    <span class=\"comment\"># 数据库引擎</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;NAME&#x27;</span>: <span class=\"string\">&#x27;testdb&#x27;</span>, <span class=\"comment\"># 数据库名称</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;HOST&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\"># 数据库地址，本机 ip 地址 127.0.0.1 </span></span><br><span class=\"line\">        <span class=\"string\">&#x27;PORT&#x27;</span>: <span class=\"number\">3306</span>, <span class=\"comment\"># 端口 </span></span><br><span class=\"line\">        <span class=\"string\">&#x27;USER&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>,  <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;PASSWORD&#x27;</span>: <span class=\"string\">&#x27;xxxxxx&#x27;</span>, <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你使用了 Python2.x 版本这里添加了中文注释，那么你需要在 HelloWorld/settings.py 文件头部添加 <code># -*- coding: UTF-8 -*-</code>。</p>\n</blockquote>\n<p>上面包含数据库名称和用户的信息，它们与 MySQL 中对应数据库和用户的设置相同。Django 根据这一设置，与 MySQL 中相应的数据库和用户连接起来。<br>\n接下来，告诉 Django 使用 pymysql 模块连接 mysql 数据库：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义模型\">定义模型</h3>\n<p>创建 APP:</p>\n<p>Django 规定，如果要使用模型，必须要创建一个 app。</p>\n<p>我们修改 app02/models.py 文件，代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># models.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>(<span class=\"params\">models.Model</span>):</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。</p>\n<p>在命令行中运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 manage.py migrate   <span class=\"comment\"># 创建表结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ python3 manage.py makemigrations TestModel  <span class=\"comment\"># 让 Django 知道我们在我们的模型有一些变更</span></span><br><span class=\"line\">$ python3 manage.py migrate TestModel   <span class=\"comment\"># 创建表结构</span></span><br></pre></td></tr></table></figure>\n<p>你的数据表就创建好了。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Migrations <span class=\"keyword\">for</span> <span class=\"string\">&#x27;app02&#x27;</span>:</span><br><span class=\"line\">  app02\\migrations\\<span class=\"number\">0001</span>_initial.<span class=\"keyword\">py</span></span><br><span class=\"line\">    - Create model Test</span><br><span class=\"line\"></span><br><span class=\"line\">Operations <span class=\"keyword\">to</span> perform:</span><br><span class=\"line\">  Apply <span class=\"keyword\">all</span> migration<span class=\"variable\">s:</span> app02</span><br><span class=\"line\">Running migration<span class=\"variable\">s:</span></span><br><span class=\"line\">  Applying app02.<span class=\"number\">0001</span>_initial... OK</span><br></pre></td></tr></table></figure>\n<p>表名组成结构为：应用名_类名（如：app02_test）</p>\n<blockquote>\n<p>注意：尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。</p>\n</blockquote>\n<h3 id=\"数据库操作\">数据库操作</h3>\n<p>接下来我们在 HelloWorld 目录中添加 <a href=\"http://testdb.py\">testdb.py</a> 文件（下面介绍），并修改 <a href=\"http://urls.py\">urls.py</a>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views,testdb</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;runoob/&#x27;</span>, views.runoob),</span><br><span class=\"line\">    path(<span class=\"string\">&#x27;testdb/&#x27;</span>, testdb.testdb),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加数据\">添加数据</h4>\n<p>添加数据需要先创建对象，然后再执行 save 函数，相当于SQL中的INSERT：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> app02.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    test1 = Test(name=<span class=\"string\">&#x27;name1&#x27;</span>)</span><br><span class=\"line\">    test1.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://127.0.0.1:8000/testdb\">http://127.0.0.1:8000/testdb</a> 就可以看到数据添加成功的提示。</p>\n<h4 id=\"获取数据\">获取数据</h4>\n<p>Django提供了多种方式来获取数据库的内容</p>\n<p>修改testdb如下代码所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> app02.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">    response = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span> = Test.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">        response += var.name + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;&quot;</span> + response + <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Test.objects是Test的模型管理器，其下拥有些方法方便我们进行操作。</p>\n<p><code>all</code></p>\n<p>all()可以获得所有数据行，相当于SQL中的<code>SELECT * FROM</code>。<br>\n这个函数返回一个QuerySet[T].</p>\n<p><code>filter</code></p>\n<p>filter()相当于SQL中的WHERE，可设置条件过滤结果，函数返回一个QuerySet[T]。例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Test.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>) </span><br></pre></td></tr></table></figure>\n<p><code>get</code></p>\n<p>get()用于获取单个对象，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><code>order_by</code></p>\n<p>order_by()函数用于数据排序，作用等同sql语句的ORDER BY.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.objects.order_by(<span class=\"string\">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的方法可以连锁使用：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.objects.<span class=\"built_in\">filter</span>(name=<span class=\"string\">&quot;name1&quot;</span>).order_by(<span class=\"string\">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>返回的结果集还可以使用切片截取限制，相当于SQL 中的 OFFSET 0 LIMIT 2;<br>\nresult[0:2]</p>\n</blockquote>\n<h4 id=\"更新数据\">更新数据</h4>\n<p>修改数据可以使用 save() 或 update():</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> TestModel.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span></span><br><span class=\"line\">    test1 = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">    test1.name = <span class=\"string\">&#x27;Google&#x27;</span></span><br><span class=\"line\">    test1.save()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 另外一种方式</span></span><br><span class=\"line\">    <span class=\"comment\">#Test.objects.filter(id=1).update(name=&#x27;Google&#x27;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 修改所有的列</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.all().update(name=&#x27;Google&#x27;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;修改成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据\">删除数据</h4>\n<p>删除数据库中的对象只需调用该对象的delete()方法即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> TestModel.models <span class=\"keyword\">import</span> Test</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据库操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testdb</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 删除id=1的数据</span></span><br><span class=\"line\">    test1 = Test.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">    test1.delete()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 另外一种方式</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.filter(id=1).delete()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 删除所有数据</span></span><br><span class=\"line\">    <span class=\"comment\"># Test.objects.all().delete()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">&quot;&lt;p&gt;删除成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Django表单form\">Django表单form</h2>\n<p>HTML表单是网站交互性的经典方式。 本章将介绍如何用Django对用户提交的表单数据进行处理。</p>\n<h3 id=\"HTTP请求\">HTTP请求</h3>\n<p>HTTP协议以&quot;请求－回复&quot;的方式工作。客户发送请求时，可以在请求中附加数据。服务器通过解析请求，就可以获得客户传来的数据，并根据URL来提供特定的服务。</p>\n<h4 id=\"Get方法\">Get方法</h4>\n<p>我们在之前的项目中创建一个 <a href=\"http://search.py\">search.py</a> 文件，用于接收用户的请求：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"comment\"># 表单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_form</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&#x27;search_form.html&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 接收请求数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">request</span>):</span>  </span><br><span class=\"line\">    request.encoding=<span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;q&#x27;</span> <span class=\"keyword\">in</span> request.GET <span class=\"keyword\">and</span> request.GET[<span class=\"string\">&#x27;q&#x27;</span>]:</span><br><span class=\"line\">        message = <span class=\"string\">&#x27;你搜索的内容为: &#x27;</span> + request.GET[<span class=\"string\">&#x27;q&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        message = <span class=\"string\">&#x27;你提交了空表单&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(message)</span><br></pre></td></tr></table></figure>\n<p>在模板目录 templates 中添加 search_form.html 表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>search<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/search/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同时修改urls.py规则。</p>\n<p>访问地址 <a href=\"http://127.0.0.1:8000/search-form/\">http://127.0.0.1:8000/search-form/</a> 并搜索，可以看到get请求进行的表单传值结果。</p>\n<h4 id=\"Post方法\">Post方法</h4>\n<p>上面我们使用了GET方法。视图显示和请求处理分成两个函数处理。<br>\n提交数据时更常用POST方法。我们下面使用该方法，并用一个URL和处理函数，同时显示视图和处理请求。</p>\n<p>我们在 templates 创建 post.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/search_post/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;% csrf_token %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;q&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; rlt &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在模板的末尾，我们增加一个 rlt 记号，为表单处理结果预留位置。<br>\n表单中还有一个{% csrf_token %}的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。</p>\n<p>在app目录下新建 <a href=\"http://search2.py\">search2.py</a> 文件并使用 search_post 函数来处理 POST 请求：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views.decorators <span class=\"keyword\">import</span> csrf</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 接收POST请求数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_post</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    ctx =&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.POST:</span><br><span class=\"line\">        ctx[<span class=\"string\">&#x27;rlt&#x27;</span>] = request.POST[<span class=\"string\">&#x27;q&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&quot;post.html&quot;</span>, ctx)</span><br></pre></td></tr></table></figure>\n<p>记得同时修改urls规则。<br>\n最后访问 <a href=\"http://127.0.0.1:8000/search-post/\">http://127.0.0.1:8000/search-post/</a>.</p>\n<h3 id=\"Request对象\">Request对象</h3>\n<p>HttpRequest对象包含当前请求URL的一些信息：</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n属性\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"text-align : center\">\npath\n</td>\n<td>\n请求页面的全路径,不包括域名—例如, \"/hello/\"。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nmethod\n</td>\n<td>\n请求中使用的HTTP方法的字符串表示。全大写表示。例如:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;GET&#x27;</span>:</span><br><span class=\"line\">    do_something()</span><br><span class=\"line\"><span class=\"keyword\">elif</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">    do_something_else()</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nGET\n</td>\n<td>\n<p>包含所有HTTP GET参数的类字典对象。参见<a href=\"#querydict%E5%AF%B9%E8%B1%A1\">QueryDict</a>文档。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nPOST\n</td>\n<td>\n<p>包含所有HTTP POST参数的类字典对象。参见<a href=\"#QueryDict%E5%AF%B9%E8%B1%A1\">QueryDict</a> 文档。<br><br>\n服务器收到空的POST请求的情况也是有可能发生的。也就是说，表单form通过HTTP POST方法提交请求，但是表单中可以没有数据。因此，不能使用语句if request.POST来判断是否使用HTTP POST方法；应该使用if request.method == “POST” (参见本表的method属性)。<br><br>\n注意: POST不包括file-upload信息。参见FILES属性。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nREQUEST\n</td>\n<td>\n为了方便，该属性是POST和GET属性的集合体，但是有特殊性，先查找POST属性，然后再查找GET属性。借鉴PHP's $_REQUEST。\n<br>\n例如，如果GET = {\"name\": \"john\"} 和POST = {\"age\": '34'},则 REQUEST[\"name\"] 的值是\"john\", REQUEST[\"age\"]的值是\"34\".\n<br>\n强烈建议使用GET and POST,因为这两个属性更加显式化，写出的代码也更易理解。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nCOOKIES\n</td>\n<td>\n包含所有cookies的标准Python字典对象。Keys和values都是字符串。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nFILES\n</td>\n<td>\n包含所有上传文件的类字典对象。FILES中的每个Key都是\n<p><code>&lt;input type=&quot;file&quot; name=&quot;&quot; \\&gt;</code> 标签中name属性的值. FILES中的每个value 同时也是一个标准Python字典对象，包含下面三个Keys:<br>\n<br></p>\n<ul>\n<li>filename: 上传文件名,用Python字符串表示</li>\n<li>content-type: 上传文件的Content type</li>\n<li>content: 上传文件的原始内容</li>\n</ul>\n<p>注意：只有在请求方法是POST，并且请求页面中<code>&lt;form&gt;</code>有enctype=&quot;multipart/form-data&quot;属性时FILES才拥有数据。否则，FILES 是一个空字典。</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nuser\n</td>\n<td>\n是一个django.contrib.auth.models.User 对象，代表当前登录的用户。\n<br>\n如果访问用户当前没有登录，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。\n<br>\n你可以通过user的is_authenticated()方法来辨别用户是否登录：\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> request.user.is_authenticated():</span><br><span class=\"line\">    <span class=\"comment\"># Do something for logged-in users.</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Do something for anonymous users.</span></span><br></pre></td></tr></table></figure>\n<p>只有激活Django中的AuthenticationMiddleware时该属性才可用</p>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nMETA\n</td>\n<td>\n包含所有可用HTTP头部信息的字典。 例如:\n<ul>\n<li>CONTENT_LENGTH</li>\n<li>CONTENT_TYPE</li>\n<li>QUERY_STRING: 未解析的原始查询字符串</li>\n<li>REMOTE_ADDR: 客户端IP地址</li>\n<li>REMOTE_HOST: 客户端主机名</li>\n<li>SERVER_NAME: 服务器主机名</li>\n<li>SERVER_PORT: 服务器端口</li>\n</ul>\n<p>META 中这些头加上前缀 HTTP_ 为 Key, 冒号(:)后面的为 Value， 例如:</p>\n<ul>\n<li>HTTP_ACCEPT_ENCODING</li>\n<li>HTTP_ACCEPT_LANGUAGE</li>\n<li>HTTP_HOST: 客户发送的HTTP主机头信息</li>\n<li>HTTP_REFERER: referring页</li>\n<li>HTTP_USER_AGENT: 客户端的user-agent字符串</li>\n<li>HTTP_X_BENDER: X-Bender头信息</li>\n</ul>\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nsession\n</td>\n<td>\n唯一可读写的属性，代表当前会话的字典对象。只有激活Django中的session支持时该属性才可用。\n</td>\n</tr>\n<tr>\n<td style = \"text-align : center\">\nraw_post_data\n</td>\n<td>\n原始HTTP POST数据，未解析过。 高级处理时会有用处。\n</td>\n</tr>\n</tbody>\n</table>\n<p>Request对象也有一些有用的方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">__getitem__(key)</td>\n<td style=\"text-align:left\">返回GET/POST的键值,先取POST,后取GET。如果键不存在抛出 KeyError。<br>这是我们可以使用字典语法访问HttpRequest对象。<br>例如,request[“foo”]等同于先request.POST[“foo”] 然后 request.GET[“foo”]的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">has_key()</td>\n<td style=\"text-align:left\">检查request.GET 或者 request.POST中是否包含参数指定的Key。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get_full_path()</td>\n<td style=\"text-align:left\">返回包含查询字符串的请求路径。例如， “/music/bands/the_beatles/?print=true”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is_secure()</td>\n<td style=\"text-align:left\">如果请求是安全的，返回True，就是说，发出的是HTTPS请求。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"QueryDict对象\">QueryDict对象</h3>\n<p>在HttpRequest对象中, GET和POST属性是django.http.QueryDict类的实例。<br>\nQueryDict类似字典的自定义类，用来处理单键对应多值的情况。<br>\nQueryDict实现所有标准的词典方法。</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr style = \"text-align : center\">\n<td>\n__getitem__()\n</td>\n<td>\n和标准字典的处理有一点不同，就是，如果Key对应多个Value，__getitem__()返回最后一个value。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\n__setitem__()\n</td>\n<td>\n设置参数指定key的value列表(一个Python list)。注意：它只能在一个mutable QueryDict 对象上被调用(就是通过copy()产生的一个QueryDict对象的拷贝).\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nget()\n</td>\n<td>\n如果key对应多个value，get()返回最后一个value。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nupdate()\n</td>\n<td>\n参数可以是QueryDict，也可以是标准字典。和标准字典的update方法不同，该方法添加字典 items，而不是替换它们:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = q.copy() <span class=\"comment\"># to make it mutable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.update(&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"string\">&#x27;2&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.getlist(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q[<span class=\"string\">&#x27;a&#x27;</span>] <span class=\"comment\"># returns the last</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;2&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nitems()\n</td>\n<td>\n和标准字典的items()方法有一点不同,该方法使用单值逻辑的__getitem__():\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&amp;a=2&amp;a=3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.items()</span><br><span class=\"line\"></span><br><span class=\"line\">[(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nvalues()\n</td>\n<td>\n和标准字典的values()方法有一点不同,该方法使用单值逻辑的__getitem__()\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\ncopy()\n</td>\n<td>\n返回对象的拷贝，内部实现是用Python标准库的copy.deepcopy()。该拷贝是mutable(可更改的) — 就是说，可以更改该拷贝的值。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\ngetlist(key)\n</td>\n<td>\n返回和参数key对应的所有值，作为一个Python list返回。如果key不存在，则返回空list。 It's guaranteed to return a list of some sort..\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nsetlist(key,list...)\n</td>\n<td>\n设置key的值为list_ (unlike __setitem__()).\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nappendlist(key,item)\n</td>\n<td>\n添加item到和key关联的内部list.\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nsetlistdefault(key,list)\n</td>\n<td>\n和setdefault有一点不同，它接受list而不是单个value作为参数。\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nlists()\n</td>\n<td>\n和items()有一点不同, 它会返回key的所有值，作为一个list, 例如:\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q = QueryDict(<span class=\"string\">&#x27;a=1&amp;a=2&amp;a=3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q.lists()</span><br><span class=\"line\"></span><br><span class=\"line\">[(<span class=\"string\">&#x27;a&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>])]</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr style = \"text-align : center\">\n<td>\nurlencode()\n</td>\n<td>\n返回一个以查询字符串格式进行格式化后的字符串(例如：\"a=2&b=3&b=5\")。\n</td>\n</tr>\n</tbody>\n</table>"},{"title":"存在主义","catalog":true,"lang":"cn","date":"2022-01-22T02:52:32.000Z","subtitle":"Existentialism","header-img":null,"_content":"","source":"_posts/cn/Existentialism.md","raw":"---\ntitle: 存在主义\ncatalog: true\nlang: cn\ndate: 2022-01-22 10:52:32\nsubtitle: Existentialism\nheader-img:\ntags:\ncategories:\n---\n","slug":"Existentialism","published":1,"updated":"2022-01-22T02:52:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0q000cwwvoept5arlq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hexo-Theme-LiveMyLife","catalog":true,"date":"2020-04-16T18:34:17.000Z","subtitle":"A succinct hexo theme...","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","source":"_posts/cn/Hexo-Theme-LiveMyLife.md","raw":"---\ntitle: Hexo-Theme-LiveMyLife\ncatalog: true\ndate: 2020-04-17 02:34:17\nsubtitle: A succinct hexo theme...\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n- Hexo-Theme-LiveMyLife\n- Hexo\n- Tutorials\ncategories:\n- [Tutorials,Hexo]\n---\n\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","slug":"Hexo-Theme-LiveMyLife","published":1,"updated":"2020-04-16T18:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0t000gwwvoe76wacgh","content":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题模式设置\">主题模式设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n"},{"title":"MarkDown基础","catalog":true,"lang":"cn","date":"2021-11-02T06:36:17.000Z","subtitle":"markdown的基本语法","header-img":"/img/header_img/nier.png","sticky":700,"_content":"<!-- TODO: \\ 和 & < 的使用 -->\n\n## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","source":"_posts/cn/MarkDown-Base.md","raw":"---\ntitle: MarkDown基础\ncatalog: true\nlang: cn\ndate: 2021-11-02 14:36:17\nsubtitle: markdown的基本语法\nheader-img: /img/header_img/nier.png\ntags:\n- markdown\ncategories:\n- Note\nsticky: 700\n---\n<!-- TODO: \\ 和 & < 的使用 -->\n\n## MarkDown介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。  \nMarkdown 编写的文档后缀为 .md, .markdown。\n\n-------------------------------------------------------------\n\n## MarkDown编写\n### MarkDown标题\n> markdown使用#号来标记标题  \n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n```md\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n效果如下图所示\n![title_sample](title.png)\n\n> markdown还可以使用 `=` 和 `-` 标记一级和二级标题\n```md\n一级标题\n=========================\n二级标题\n-------------------------\n```\n\n------------------------------------------------------\n\n### MarkDown格式\n#### 段落的换行\nmarkdown段落的换行在上一行后加上两个以上的空格后再换行即可。  \n或者直接在两段中添加一个空行。  \n\n------------------------------------------------------\n\n#### 字体\nmarkdown有以下几种字体：\n\n```md\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n-----------------------------------------------------\n\n#### 分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n```md\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n------------------------------------------------------\n\n#### 删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：\n\n```md\n~~删除的字~~\n```\n\n> 实现效果如下：  \n~~删除的字~~\n\n-------------------------------------------------------\n\n### MarkDown列表\n#### 有序列表\n> 有序列表使用数字加上 . 号来表示\n```md\n1. 第一项\n2. 第二项\n3. 第三项\n```\n#### 无序列表\n> 无序列表使用  *，-，+  号来表示\n```md\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n#### 列表嵌套\n```md\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n> 实现效果如下：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n----------------------------------------\n\n### MarkDown区块\nMarkdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号：\n```md\n> 区块引用\n```\n显示效果如下：\n> 区块引用\n\n另外区块是可以嵌套的：\n```md\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n显示效果如下：\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n并且区块和列表是可以互相嵌套的：\n```md\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n2. 第二项\n```\n显示效果如下：\n> 区块中嵌套列表\n> 1. 第一项\n> 2. 第二项\n>   + 第一项\n>   + 第二项\n>   + 第三项\n\n1. 第一项\n    > 列表中\n    > 嵌套区块\n2. 第二项\n\n------------------------------------\n\n### MarkDown代码\n#### 函数\n可以使用反引号（`）包起一个函数或片段的代码：\n```md\n`scanf()`函数\n```\n显示效果如下：  \n`scanf()`函数\n\n#### 代码区块\nmarkdown代码区块使用**4个空格**或者**一个制表符（Tab）**\n\n也可以使用` ``` `包裹一段代码，并可以选择指定一种语言\n\n-------------------------------\n\n### MarkDown链接\n链接使用方法如下：\n```md\n[链接名称](链接地址)\n\n<链接地址>\n\n例如：\n[百度](https://www.baidu.com)\n<https://www.baidu.com>\n```\n显示效果如下：  \n> [百度](https://www.baidu.com)  \n> <https://www.baidu.com>\n\n使用引脚指向链接地址：\n```md\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 'baidu' 作为网址变量 [Baidu][baidu]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n```\n显示效果如下：  \n> 这个链接用 1 作为网址变量 [Google][1]  \n> 这个链接用 'baidu' 作为网址变量 [Baidu][baidu]  \n> 然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [baidu]: https://www.baidu.com/\n\n---------------------------------\n\n### MarkDown图片\n图片的语法格式如下：\n```md\n![alt 属性文本](图片地址 \"可选标题\")\n\n![screenshot](/url/img/...)\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 `<img>` 标签。\n```html\n<img src=\"url\" width=\"50%\"> \n```\n\n----------------------------------------------\n\n### MarkDown表格\nMarkdown 制作表格使用` | `来分隔不同的单元格，使用` - `来分隔表头和其他行。\n\n语法格式如下：\n```md\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n以上代码显示结果如下：  \n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n我们可以设置表格的对齐方式：\n> ` -: ` 设置内容和标题栏居右对齐。  \n> ` :- ` 设置内容和标题栏居左对齐。  \n> ` :-: ` 设置内容和标题栏居中对齐。\n```md\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n显示效果如下：  \n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |  \n\nmarkdown也可以直接使用table标签：  \n```html\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n> blockquote test\n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 -->\n\n    code test\n    \n</td> <!-- 注意此处的空格空行等格式，可能会导致无法正确显示 -->\n  </tr>\n</table>\n\n```\n显示效果如下：  \n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n\n> blockquote test\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n\n\n```python\ncode test\n```\n</td> \n  </tr>\n</table>\n\n--------------------------------------------\n\n### MarkDown Html元素\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd>` `<b>` `<i>` `<em>` `<sup>` `<sub>` `<br>`等 ，如：\n```html\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n```\n显示结果为：  \n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器\n\n----------------------------------------------------\n\n### MarkDown转义\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n```md\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n显示效果如下：\n> **文本加粗**   \n> \\*\\* 正常显示星号 \\*\\*\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n> ```md\n> \\   反斜线\n> `   反引号\n> *   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> #   井字号\n> +   加号\n> -   减号\n> .   英文句点\n> !   感叹号\n> ```\n\n### ~~MarkDown公式~~\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n```md\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n显示效果如下：\n> $$\n> \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n> \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n> \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial > u} & 0 \\\\\n> \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial > v} & 0 \\\\\n> \\end{vmatrix}\n> ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n> $$\n","slug":"MarkDown-Base","published":1,"updated":"2021-11-02T06:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0u000hwwvo3pzf9amo","content":"<!-- TODO: \\ 和 & < 的使用 -->\n<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<!-- TODO: \\ 和 & < 的使用 -->\n<h2 id=\"MarkDown介绍\">MarkDown介绍</h2>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>\nMarkdown 编写的文档后缀为 .md, .markdown。</p>\n<hr>\n<h2 id=\"MarkDown编写\">MarkDown编写</h2>\n<h3 id=\"MarkDown标题\">MarkDown标题</h3>\n<blockquote>\n<p>markdown使用#号来标记标题<br>\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>效果如下图所示<br>\n<img src=\"title.png\" alt=\"title_sample\"></p>\n<blockquote>\n<p>markdown还可以使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=========================</span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-------------------------</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown格式\">MarkDown格式</h3>\n<h4 id=\"段落的换行\">段落的换行</h4>\n<p>markdown段落的换行在上一行后加上两个以上的空格后再换行即可。<br>\n或者直接在两段中添加一个空行。</p>\n<hr>\n<h4 id=\"字体\">字体</h4>\n<p>markdown有以下几种字体：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本<span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"emphasis\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本<span class=\"strong\">__<span class=\"emphasis\">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"分割线\">分割线</h4>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\"></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">- - -</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\"></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">----------</span></span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"删除线\">删除线</h4>\n<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线“~~”即可，实例如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除的字~~</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：<br>\n<s>删除的字</s></p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown列表\">MarkDown列表</h3>\n<h4 id=\"有序列表\">有序列表</h4>\n<blockquote>\n<p>有序列表使用数字加上 . 号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"无序列表\">无序列表</h4>\n<blockquote>\n<p>无序列表使用  *，-，+  号来表示</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h4 id=\"列表嵌套\">列表嵌套</h4>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现效果如下：</p>\n</blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown区块\">MarkDown区块</h3>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 最外层</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 第一层嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>并且区块和列表是可以互相嵌套的：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt;   + 第三项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"code\">    &gt; 菜鸟教程</span></span><br><span class=\"line\"><span class=\"code\">    &gt; 学的不仅是技术更是梦想</span></span><br><span class=\"line\"><span class=\"code\">2. 第二项</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>区块中嵌套列表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<ol>\n<li>第一项\n<blockquote>\n<p>列表中<br>\n嵌套区块</p>\n</blockquote>\n</li>\n<li>第二项</li>\n</ol>\n<hr>\n<h3 id=\"MarkDown代码\">MarkDown代码</h3>\n<h4 id=\"函数\">函数</h4>\n<p>可以使用反引号（`）包起一个函数或片段的代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`scanf()`</span>函数</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：<br>\n<code>scanf()</code>函数</p>\n<h4 id=\"代码区块\">代码区块</h4>\n<p>markdown代码区块使用<strong>4个空格</strong>或者<strong>一个制表符（Tab）</strong></p>\n<p>也可以使用<code>```</code>包裹一段代码，并可以选择指定一种语言</p>\n<hr>\n<h3 id=\"MarkDown链接\">MarkDown链接</h3>\n<p>链接使用方法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接名称</span>](<span class=\"link\">链接地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">[<span class=\"string\">百度</span>](<span class=\"link\">https://www.baidu.com</span>)</span><br><span class=\"line\"><span class=\"xml\">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><a href=\"https://www.baidu.com\">百度</a><br>\n<a href=\"https://www.baidu.com\">https://www.baidu.com</a></p>\n</blockquote>\n<p>使用引脚指向链接地址：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [<span class=\"string\">Google</span>][<span class=\"symbol\">1</span>]</span><br><span class=\"line\">这个链接用 &#x27;baidu&#x27; 作为网址变量 [<span class=\"string\">Baidu</span>][<span class=\"symbol\">baidu</span>]</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [baidu]: https://www.baidu.com/</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>\n这个链接用 ‘baidu’ 作为网址变量 <a href=\"https://www.baidu.com/\">Baidu</a><br>\n然后在文档的结尾为变量赋值（网址）</p>\n</blockquote>\n<hr>\n<h3 id=\"MarkDown图片\">MarkDown图片</h3>\n<p>图片的语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">screenshot</span>](<span class=\"link\">/url/img/...</span>)</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;50%&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"MarkDown表格\">MarkDown表格</h3>\n<p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>以上代码显示结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<p>我们可以设置表格的对齐方式：</p>\n<blockquote>\n<p><code>-:</code> 设置内容和标题栏居右对齐。<br>\n<code>:-</code> 设置内容和标题栏居左对齐。<br>\n<code>:-:</code> 设置内容和标题栏居中对齐。</p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<p>markdown也可以直接使用table标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>= <span class=\"string\">&quot;#int&quot;</span>&gt;</span>table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Savings<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>January<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$100<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>blockquote<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; blockquote test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>code<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注意此处需要添加空格空行等格式，否则可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    code test</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"comment\">&lt;!-- 注意此处的空格空行等格式，可能会导致无法正确显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<table>\n  <tr>\n    <th><a href= \"#int\">table</a></th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>blockquote</td>\n    <td>\n<blockquote>\n<p>blockquote test</p>\n</blockquote>\n</td>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code test</span><br></pre></td></tr></table></figure>\n</td> \n  </tr>\n</table>\n<hr>\n<h3 id=\"MarkDown-Html元素\">MarkDown Html元素</h3>\n<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 <span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Ctrl<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Alt<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span>+<span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span> 打开任务管理器</span><br></pre></td></tr></table></figure>\n<p>显示结果为：<br>\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 打开任务管理器</p>\n<hr>\n<h3 id=\"MarkDown转义\">MarkDown转义</h3>\n<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文本加粗**</span> </span><br><span class=\"line\">\\<span class=\"emphasis\">*\\*</span> 正常显示星号 \\<span class=\"emphasis\">*\\*</span></span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p><strong>文本加粗</strong><br>\n** 正常显示星号 **</p>\n</blockquote>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\"><span class=\"bullet\">*</span>   星号</span><br><span class=\"line\"><span class=\"emphasis\">_   下划线</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;&#125;  花括号</span></span><br><span class=\"line\"><span class=\"emphasis\">[]  方括号</span></span><br><span class=\"line\"><span class=\"emphasis\">()  小括号</span></span><br><span class=\"line\"><span class=\"emphasis\">#   井字号</span></span><br><span class=\"line\"><span class=\"emphasis\">+   加号</span></span><br><span class=\"line\"><span class=\"emphasis\">-   减号</span></span><br><span class=\"line\"><span class=\"emphasis\">.   英文句点</span></span><br><span class=\"line\"><span class=\"emphasis\">!   感叹号</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"MarkDown公式\"><s>MarkDown公式</s></h3>\n<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\mathbf&#123;V&#125;<span class=\"emphasis\">_1 \\times \\mathbf&#123;V&#125;_</span>2 =  \\begin&#123;vmatrix&#125; </span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;</span><br><span class=\"line\">$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>显示效果如下：</p>\n<blockquote>\n<p>$$<br>\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\n\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\n\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial &gt; u} &amp; 0 \\<br>\n\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial &gt; v} &amp; 0 \\<br>\n\\end{vmatrix}<br>\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}<br>\n$$</p>\n</blockquote>\n"},{"title":"Microsoft E5开发者账号","catalog":true,"lang":"cn","date":"2022-06-17T13:38:33.000Z","subtitle":"免费领取最多25T的one drive云盘和Microsoft365使用权","header-img":"/img/header_img/nier.png","sticky":999,"_content":"\n> 一直苦于国内网盘封杀力度以及某网盘速率问题，寻到的解决方法其一便是换用one drive云盘，可又有新的问题，那就是个人one drive的容量非常小，只有5G。  \n> 在使用了几个月后，受不了的我找到了一个解决方案，那就是用国外的教育机构的临时邮件申请Microsoft365教育版，但存在很大的风险。  \n> \n> 终于在前几天找到了`异想之旅`大佬的博客，成功解决了这些问题，下面我给大家分享下如何免费领取Microsoft 365和其25T云盘的方法。\n\n## 前言\n\n那么这个Microsoft 365 E5 开发者账号到底有什么用呢？  \n\n+ 理论最高25T的one drive云服务\n+ 正版Microsoft 365软件使用权\n+ 更多像是搭建`私人云`等进阶操作……\n\n## 开始\n\n### 申请加入开发人员计划\n\n首先，我们登录这个网址：<https://developer.microsoft.com/zh-cn/microsoft-365/profile>  \n它会先重定向到一个登录界面，我们登录成功后回来到下面这个界面，如果不是的话说明你的账号已经注册过了：  \n![加入step1](加入1.png)\n![加入step2](加入2.png)\n![加入step3](加入3.png)\n\n接下来我们选择`可配置沙盒`，这个可以有自定义域名：  \n![加入step4](设置沙盒.png)\n\n然后配置沙盒的时候就可以自己创建域名和管理员密码（15-20个字符，且必须包含大小写字母、数字、符号的一个或多个）啦：  \n\n> 记得要记下自己的管理员账号密码。\n\n![加入step5](设置沙盒域名.png)\n\n订阅成功后的截图如下：  \n![加入step6](订阅成功.png)\n\n### 配置开发者账号\n\n接着我们点击“`转到订阅`”，输入刚刚设置的自己的E5订阅管理员账户，进入Microsoft 365企业版后台。\n![配置step1](配置1.png)\n\n进入后台后点击左上角的九个点，然后点击进入管理界面：  \n![配置step2](配置2.png)\n\n账号还是选择刚刚生成的管理员账号，进入后的界面如下：  \n![配置step3](配置3.png)\n\n然后我们添加一个子用户作为我们日常使用的账号：  \n![配置step4](配置4.png)\n\n然后输入子账号的一些信息（瞎填都行）：  \n![配置step5](配置5.png)\n![配置step6](配置6.png)\n\n无脑下一步后，我们给该账号分配one drive 5T空间：  \n在活动用户界面点击该子账号，然后在右侧弹出的窗口中选择OneDrive面板：  \n![配置step7](配置7.png)\n![配置step8](配置8.png)\n\n至此我们的管理员（公司）账号注册和子账号创建都已经完成了。往后如果我们想使用正版Microsoft 365，或者是使用免费的NAS空间，都是基于子账号的。\n\n当然还有更多的功能可以大家自己去探索。TvT\n\n### 无限续期\n\n这个时候有人跳出来说了，这个开发者账号是有到期时间的啊，那要怎样才能`无限期使用`呢？虽然麻烦点，但是需要各位在快过期的时候进行续期，而达成续期的条件就是需要活跃账号，最好的方法就是调用API，调用API其一是通过网盘的文件操作，另一个则是可以通过三方网站来模拟调用。为了保险，建议两个都使用。（也不用太担心，即使没能自动续费也有30天下载文件）\n\n> 转载博客于： <https://qyi.io/archives/687.html>\n\n具体操作如下：  \n\n首先我们注册自己的api key：  \n访问[azure](https://portal.azure.com/#home)，需要先登录，登录账号为你的管理员账号，就是以xxx.onmicrosoft.com开头的的账户。  \n然后搜索“应用注册”  \n![续期step1](续期1.png)\n如果搜索不到，还有两种方法进入应用注册：  \n1. 请搜索 “Azure Active Directory”，然后在 管理-应用注册 \n2. 或者直接点击直达链接：<https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps>\n![续期step2](续期2.png)\n\n进入应用注册界面如下，我们继续点击新注册按钮：  \n![续期step3](续期3.png)\n\n在注册应用界面，我们需要注意以下几点：  \n+ 名称随意取\n+ 选择受支持的账户类型为：任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)\n+ 重定向URI一定要选择Web，然后输入以下地址，不然程序收不到回调。\n\n```\nhttps://e5.qyi.io/outlook/auth2/receive\n```\n\n![续期step4](续期4.png)\n\n注册成功后我们来到应用程序界面，在该界面，我们需要记录一下`应用程序(客户端)ID`：  \n![续期step5](续期5.png)\n\n接着我们设置客户端密码：  \n![续期step6](续期6.png)\n\n> 记得在添加成功后的列表中复制`客户端密码的值`！！\n\n在记录好以上值后，我们需要开放api权限：  \n![续期step7](续期7.png)\n![续期step8](续期8.png)\n\n这样api就配置完成了。\n\n接下来需要去添加自动订阅api的程序：  \n进入 <https://e5.qyi.io/>，这里需要github账户登录\n\n![续期step9](续期9.png)\n\n登录后点击新建一个api配置：  \n![续期step10](续期10.png)\n\n然后点击配置：  \n![续期step11](续期11.png)\n\n接着在配置界面输入你之前保存的客户端ID和密码，然后一直下一步到授权：  \n![续期step12](续期12.png)\n\n> 在授权界面登录的是你的子账号！！！！\n\n![续期step13](续期13.png)\n\n这样之后就完成啦！\n\n## 开始使用！！\n\n### one drive\n\n一般win10以上都会自带one drive，如果没有的话在微软应用商店里搜索安装就行。\n\n然后登录你刚刚创建好的子账号。\n\n已经有的用户，可以在one drive设置里添加新账号。\n\n\n![使用step1](使用1.png)\n![使用step2](使用2.png)\n![使用step3](使用3.png)\n![使用step4](使用4.png)\n\n电脑设置完后，记得下载手机one drive，直接应用商店搜就行。\n\n这样one drive就可以使用了。\n\n### microsoft 365\n\n在你刚刚登录的管理员账户界面里，除了。。。\n\n## 私人云搭建\n\n待建设\n\n## Q&A\n\n你登录管理员账号时可以会遇到叫你添加身份验证，跟着做就行。","source":"_posts/cn/Microsoft-E5.md","raw":"---\ntitle: Microsoft E5开发者账号\ncatalog: true\nlang: cn\ndate: 2022-06-17 21:38:33\nsubtitle: 免费领取最多25T的one drive云盘和Microsoft365使用权\nheader-img: /img/header_img/nier.png\nsticky: 999\ntags:\n- one drive\n- microsoft 365\ncategories:\n---\n\n> 一直苦于国内网盘封杀力度以及某网盘速率问题，寻到的解决方法其一便是换用one drive云盘，可又有新的问题，那就是个人one drive的容量非常小，只有5G。  \n> 在使用了几个月后，受不了的我找到了一个解决方案，那就是用国外的教育机构的临时邮件申请Microsoft365教育版，但存在很大的风险。  \n> \n> 终于在前几天找到了`异想之旅`大佬的博客，成功解决了这些问题，下面我给大家分享下如何免费领取Microsoft 365和其25T云盘的方法。\n\n## 前言\n\n那么这个Microsoft 365 E5 开发者账号到底有什么用呢？  \n\n+ 理论最高25T的one drive云服务\n+ 正版Microsoft 365软件使用权\n+ 更多像是搭建`私人云`等进阶操作……\n\n## 开始\n\n### 申请加入开发人员计划\n\n首先，我们登录这个网址：<https://developer.microsoft.com/zh-cn/microsoft-365/profile>  \n它会先重定向到一个登录界面，我们登录成功后回来到下面这个界面，如果不是的话说明你的账号已经注册过了：  \n![加入step1](加入1.png)\n![加入step2](加入2.png)\n![加入step3](加入3.png)\n\n接下来我们选择`可配置沙盒`，这个可以有自定义域名：  \n![加入step4](设置沙盒.png)\n\n然后配置沙盒的时候就可以自己创建域名和管理员密码（15-20个字符，且必须包含大小写字母、数字、符号的一个或多个）啦：  \n\n> 记得要记下自己的管理员账号密码。\n\n![加入step5](设置沙盒域名.png)\n\n订阅成功后的截图如下：  \n![加入step6](订阅成功.png)\n\n### 配置开发者账号\n\n接着我们点击“`转到订阅`”，输入刚刚设置的自己的E5订阅管理员账户，进入Microsoft 365企业版后台。\n![配置step1](配置1.png)\n\n进入后台后点击左上角的九个点，然后点击进入管理界面：  \n![配置step2](配置2.png)\n\n账号还是选择刚刚生成的管理员账号，进入后的界面如下：  \n![配置step3](配置3.png)\n\n然后我们添加一个子用户作为我们日常使用的账号：  \n![配置step4](配置4.png)\n\n然后输入子账号的一些信息（瞎填都行）：  \n![配置step5](配置5.png)\n![配置step6](配置6.png)\n\n无脑下一步后，我们给该账号分配one drive 5T空间：  \n在活动用户界面点击该子账号，然后在右侧弹出的窗口中选择OneDrive面板：  \n![配置step7](配置7.png)\n![配置step8](配置8.png)\n\n至此我们的管理员（公司）账号注册和子账号创建都已经完成了。往后如果我们想使用正版Microsoft 365，或者是使用免费的NAS空间，都是基于子账号的。\n\n当然还有更多的功能可以大家自己去探索。TvT\n\n### 无限续期\n\n这个时候有人跳出来说了，这个开发者账号是有到期时间的啊，那要怎样才能`无限期使用`呢？虽然麻烦点，但是需要各位在快过期的时候进行续期，而达成续期的条件就是需要活跃账号，最好的方法就是调用API，调用API其一是通过网盘的文件操作，另一个则是可以通过三方网站来模拟调用。为了保险，建议两个都使用。（也不用太担心，即使没能自动续费也有30天下载文件）\n\n> 转载博客于： <https://qyi.io/archives/687.html>\n\n具体操作如下：  \n\n首先我们注册自己的api key：  \n访问[azure](https://portal.azure.com/#home)，需要先登录，登录账号为你的管理员账号，就是以xxx.onmicrosoft.com开头的的账户。  \n然后搜索“应用注册”  \n![续期step1](续期1.png)\n如果搜索不到，还有两种方法进入应用注册：  \n1. 请搜索 “Azure Active Directory”，然后在 管理-应用注册 \n2. 或者直接点击直达链接：<https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps>\n![续期step2](续期2.png)\n\n进入应用注册界面如下，我们继续点击新注册按钮：  \n![续期step3](续期3.png)\n\n在注册应用界面，我们需要注意以下几点：  \n+ 名称随意取\n+ 选择受支持的账户类型为：任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)\n+ 重定向URI一定要选择Web，然后输入以下地址，不然程序收不到回调。\n\n```\nhttps://e5.qyi.io/outlook/auth2/receive\n```\n\n![续期step4](续期4.png)\n\n注册成功后我们来到应用程序界面，在该界面，我们需要记录一下`应用程序(客户端)ID`：  \n![续期step5](续期5.png)\n\n接着我们设置客户端密码：  \n![续期step6](续期6.png)\n\n> 记得在添加成功后的列表中复制`客户端密码的值`！！\n\n在记录好以上值后，我们需要开放api权限：  \n![续期step7](续期7.png)\n![续期step8](续期8.png)\n\n这样api就配置完成了。\n\n接下来需要去添加自动订阅api的程序：  \n进入 <https://e5.qyi.io/>，这里需要github账户登录\n\n![续期step9](续期9.png)\n\n登录后点击新建一个api配置：  \n![续期step10](续期10.png)\n\n然后点击配置：  \n![续期step11](续期11.png)\n\n接着在配置界面输入你之前保存的客户端ID和密码，然后一直下一步到授权：  \n![续期step12](续期12.png)\n\n> 在授权界面登录的是你的子账号！！！！\n\n![续期step13](续期13.png)\n\n这样之后就完成啦！\n\n## 开始使用！！\n\n### one drive\n\n一般win10以上都会自带one drive，如果没有的话在微软应用商店里搜索安装就行。\n\n然后登录你刚刚创建好的子账号。\n\n已经有的用户，可以在one drive设置里添加新账号。\n\n\n![使用step1](使用1.png)\n![使用step2](使用2.png)\n![使用step3](使用3.png)\n![使用step4](使用4.png)\n\n电脑设置完后，记得下载手机one drive，直接应用商店搜就行。\n\n这样one drive就可以使用了。\n\n### microsoft 365\n\n在你刚刚登录的管理员账户界面里，除了。。。\n\n## 私人云搭建\n\n待建设\n\n## Q&A\n\n你登录管理员账号时可以会遇到叫你添加身份验证，跟着做就行。","slug":"Microsoft-E5","published":1,"updated":"2022-06-17T13:38:33.000Z","_id":"cl4ilmg0w000lwwvohrjw7mdc","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>一直苦于国内网盘封杀力度以及某网盘速率问题，寻到的解决方法其一便是换用one drive云盘，可又有新的问题，那就是个人one drive的容量非常小，只有5G。<br>\n在使用了几个月后，受不了的我找到了一个解决方案，那就是用国外的教育机构的临时邮件申请Microsoft365教育版，但存在很大的风险。</p>\n<p>终于在前几天找到了<code>异想之旅</code>大佬的博客，成功解决了这些问题，下面我给大家分享下如何免费领取Microsoft 365和其25T云盘的方法。</p>\n</blockquote>\n<h2 id=\"前言\">前言</h2>\n<p>那么这个Microsoft 365 E5 开发者账号到底有什么用呢？</p>\n<ul>\n<li>理论最高25T的one drive云服务</li>\n<li>正版Microsoft 365软件使用权</li>\n<li>更多像是搭建<code>私人云</code>等进阶操作……</li>\n</ul>\n<h2 id=\"开始\">开始</h2>\n<h3 id=\"申请加入开发人员计划\">申请加入开发人员计划</h3>\n<p>首先，我们登录这个网址：<a href=\"https://developer.microsoft.com/zh-cn/microsoft-365/profile\">https://developer.microsoft.com/zh-cn/microsoft-365/profile</a><br>\n它会先重定向到一个登录界面，我们登录成功后回来到下面这个界面，如果不是的话说明你的账号已经注册过了：<br>\n<img src=\"%E5%8A%A0%E5%85%A51.png\" alt=\"加入step1\"><br>\n<img src=\"%E5%8A%A0%E5%85%A52.png\" alt=\"加入step2\"><br>\n<img src=\"%E5%8A%A0%E5%85%A53.png\" alt=\"加入step3\"></p>\n<p>接下来我们选择<code>可配置沙盒</code>，这个可以有自定义域名：<br>\n<img src=\"%E8%AE%BE%E7%BD%AE%E6%B2%99%E7%9B%92.png\" alt=\"加入step4\"></p>\n<p>然后配置沙盒的时候就可以自己创建域名和管理员密码（15-20个字符，且必须包含大小写字母、数字、符号的一个或多个）啦：</p>\n<blockquote>\n<p>记得要记下自己的管理员账号密码。</p>\n</blockquote>\n<p><img src=\"%E8%AE%BE%E7%BD%AE%E6%B2%99%E7%9B%92%E5%9F%9F%E5%90%8D.png\" alt=\"加入step5\"></p>\n<p>订阅成功后的截图如下：<br>\n<img src=\"%E8%AE%A2%E9%98%85%E6%88%90%E5%8A%9F.png\" alt=\"加入step6\"></p>\n<h3 id=\"配置开发者账号\">配置开发者账号</h3>\n<p>接着我们点击“<code>转到订阅</code>”，输入刚刚设置的自己的E5订阅管理员账户，进入Microsoft 365企业版后台。<br>\n<img src=\"%E9%85%8D%E7%BD%AE1.png\" alt=\"配置step1\"></p>\n<p>进入后台后点击左上角的九个点，然后点击进入管理界面：<br>\n<img src=\"%E9%85%8D%E7%BD%AE2.png\" alt=\"配置step2\"></p>\n<p>账号还是选择刚刚生成的管理员账号，进入后的界面如下：<br>\n<img src=\"%E9%85%8D%E7%BD%AE3.png\" alt=\"配置step3\"></p>\n<p>然后我们添加一个子用户作为我们日常使用的账号：<br>\n<img src=\"%E9%85%8D%E7%BD%AE4.png\" alt=\"配置step4\"></p>\n<p>然后输入子账号的一些信息（瞎填都行）：<br>\n<img src=\"%E9%85%8D%E7%BD%AE5.png\" alt=\"配置step5\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE6.png\" alt=\"配置step6\"></p>\n<p>无脑下一步后，我们给该账号分配one drive 5T空间：<br>\n在活动用户界面点击该子账号，然后在右侧弹出的窗口中选择OneDrive面板：<br>\n<img src=\"%E9%85%8D%E7%BD%AE7.png\" alt=\"配置step7\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE8.png\" alt=\"配置step8\"></p>\n<p>至此我们的管理员（公司）账号注册和子账号创建都已经完成了。往后如果我们想使用正版Microsoft 365，或者是使用免费的NAS空间，都是基于子账号的。</p>\n<p>当然还有更多的功能可以大家自己去探索。TvT</p>\n<h3 id=\"无限续期\">无限续期</h3>\n<p>这个时候有人跳出来说了，这个开发者账号是有到期时间的啊，那要怎样才能<code>无限期使用</code>呢？虽然麻烦点，但是需要各位在快过期的时候进行续期，而达成续期的条件就是需要活跃账号，最好的方法就是调用API，调用API其一是通过网盘的文件操作，另一个则是可以通过三方网站来模拟调用。为了保险，建议两个都使用。（也不用太担心，即使没能自动续费也有30天下载文件）</p>\n<blockquote>\n<p>转载博客于： <a href=\"https://qyi.io/archives/687.html\">https://qyi.io/archives/687.html</a></p>\n</blockquote>\n<p>具体操作如下：</p>\n<p>首先我们注册自己的api key：<br>\n访问<a href=\"https://portal.azure.com/#home\">azure</a>，需要先登录，登录账号为你的管理员账号，就是以xxx.onmicrosoft.com开头的的账户。<br>\n然后搜索“应用注册”<br>\n<img src=\"%E7%BB%AD%E6%9C%9F1.png\" alt=\"续期step1\"><br>\n如果搜索不到，还有两种方法进入应用注册：</p>\n<ol>\n<li>请搜索 “Azure Active Directory”，然后在 管理-应用注册</li>\n<li>或者直接点击直达链接：<a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps\">https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps</a><br>\n<img src=\"%E7%BB%AD%E6%9C%9F2.png\" alt=\"续期step2\"></li>\n</ol>\n<p>进入应用注册界面如下，我们继续点击新注册按钮：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F3.png\" alt=\"续期step3\"></p>\n<p>在注册应用界面，我们需要注意以下几点：</p>\n<ul>\n<li>名称随意取</li>\n<li>选择受支持的账户类型为：任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)</li>\n<li>重定向URI一定要选择Web，然后输入以下地址，不然程序收不到回调。</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>e5.qyi.io<span class=\"regexp\">/outlook/</span>auth2/receive</span><br></pre></td></tr></table></figure>\n<p><img src=\"%E7%BB%AD%E6%9C%9F4.png\" alt=\"续期step4\"></p>\n<p>注册成功后我们来到应用程序界面，在该界面，我们需要记录一下<code>应用程序(客户端)ID</code>：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F5.png\" alt=\"续期step5\"></p>\n<p>接着我们设置客户端密码：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F6.png\" alt=\"续期step6\"></p>\n<blockquote>\n<p>记得在添加成功后的列表中复制<code>客户端密码的值</code>！！</p>\n</blockquote>\n<p>在记录好以上值后，我们需要开放api权限：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F7.png\" alt=\"续期step7\"><br>\n<img src=\"%E7%BB%AD%E6%9C%9F8.png\" alt=\"续期step8\"></p>\n<p>这样api就配置完成了。</p>\n<p>接下来需要去添加自动订阅api的程序：<br>\n进入 <a href=\"https://e5.qyi.io/\">https://e5.qyi.io/</a>，这里需要github账户登录</p>\n<p><img src=\"%E7%BB%AD%E6%9C%9F9.png\" alt=\"续期step9\"></p>\n<p>登录后点击新建一个api配置：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F10.png\" alt=\"续期step10\"></p>\n<p>然后点击配置：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F11.png\" alt=\"续期step11\"></p>\n<p>接着在配置界面输入你之前保存的客户端ID和密码，然后一直下一步到授权：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F12.png\" alt=\"续期step12\"></p>\n<blockquote>\n<p>在授权界面登录的是你的子账号！！！！</p>\n</blockquote>\n<p><img src=\"%E7%BB%AD%E6%9C%9F13.png\" alt=\"续期step13\"></p>\n<p>这样之后就完成啦！</p>\n<h2 id=\"开始使用！！\">开始使用！！</h2>\n<h3 id=\"one-drive\">one drive</h3>\n<p>一般win10以上都会自带one drive，如果没有的话在微软应用商店里搜索安装就行。</p>\n<p>然后登录你刚刚创建好的子账号。</p>\n<p>已经有的用户，可以在one drive设置里添加新账号。</p>\n<p><img src=\"%E4%BD%BF%E7%94%A81.png\" alt=\"使用step1\"><br>\n<img src=\"%E4%BD%BF%E7%94%A82.png\" alt=\"使用step2\"><br>\n<img src=\"%E4%BD%BF%E7%94%A83.png\" alt=\"使用step3\"><br>\n<img src=\"%E4%BD%BF%E7%94%A84.png\" alt=\"使用step4\"></p>\n<p>电脑设置完后，记得下载手机one drive，直接应用商店搜就行。</p>\n<p>这样one drive就可以使用了。</p>\n<h3 id=\"microsoft-365\">microsoft 365</h3>\n<p>在你刚刚登录的管理员账户界面里，除了。。。</p>\n<h2 id=\"私人云搭建\">私人云搭建</h2>\n<p>待建设</p>\n<h2 id=\"Q-A\">Q&amp;A</h2>\n<p>你登录管理员账号时可以会遇到叫你添加身份验证，跟着做就行。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直苦于国内网盘封杀力度以及某网盘速率问题，寻到的解决方法其一便是换用one drive云盘，可又有新的问题，那就是个人one drive的容量非常小，只有5G。<br>\n在使用了几个月后，受不了的我找到了一个解决方案，那就是用国外的教育机构的临时邮件申请Microsoft365教育版，但存在很大的风险。</p>\n<p>终于在前几天找到了<code>异想之旅</code>大佬的博客，成功解决了这些问题，下面我给大家分享下如何免费领取Microsoft 365和其25T云盘的方法。</p>\n</blockquote>\n<h2 id=\"前言\">前言</h2>\n<p>那么这个Microsoft 365 E5 开发者账号到底有什么用呢？</p>\n<ul>\n<li>理论最高25T的one drive云服务</li>\n<li>正版Microsoft 365软件使用权</li>\n<li>更多像是搭建<code>私人云</code>等进阶操作……</li>\n</ul>\n<h2 id=\"开始\">开始</h2>\n<h3 id=\"申请加入开发人员计划\">申请加入开发人员计划</h3>\n<p>首先，我们登录这个网址：<a href=\"https://developer.microsoft.com/zh-cn/microsoft-365/profile\">https://developer.microsoft.com/zh-cn/microsoft-365/profile</a><br>\n它会先重定向到一个登录界面，我们登录成功后回来到下面这个界面，如果不是的话说明你的账号已经注册过了：<br>\n<img src=\"%E5%8A%A0%E5%85%A51.png\" alt=\"加入step1\"><br>\n<img src=\"%E5%8A%A0%E5%85%A52.png\" alt=\"加入step2\"><br>\n<img src=\"%E5%8A%A0%E5%85%A53.png\" alt=\"加入step3\"></p>\n<p>接下来我们选择<code>可配置沙盒</code>，这个可以有自定义域名：<br>\n<img src=\"%E8%AE%BE%E7%BD%AE%E6%B2%99%E7%9B%92.png\" alt=\"加入step4\"></p>\n<p>然后配置沙盒的时候就可以自己创建域名和管理员密码（15-20个字符，且必须包含大小写字母、数字、符号的一个或多个）啦：</p>\n<blockquote>\n<p>记得要记下自己的管理员账号密码。</p>\n</blockquote>\n<p><img src=\"%E8%AE%BE%E7%BD%AE%E6%B2%99%E7%9B%92%E5%9F%9F%E5%90%8D.png\" alt=\"加入step5\"></p>\n<p>订阅成功后的截图如下：<br>\n<img src=\"%E8%AE%A2%E9%98%85%E6%88%90%E5%8A%9F.png\" alt=\"加入step6\"></p>\n<h3 id=\"配置开发者账号\">配置开发者账号</h3>\n<p>接着我们点击“<code>转到订阅</code>”，输入刚刚设置的自己的E5订阅管理员账户，进入Microsoft 365企业版后台。<br>\n<img src=\"%E9%85%8D%E7%BD%AE1.png\" alt=\"配置step1\"></p>\n<p>进入后台后点击左上角的九个点，然后点击进入管理界面：<br>\n<img src=\"%E9%85%8D%E7%BD%AE2.png\" alt=\"配置step2\"></p>\n<p>账号还是选择刚刚生成的管理员账号，进入后的界面如下：<br>\n<img src=\"%E9%85%8D%E7%BD%AE3.png\" alt=\"配置step3\"></p>\n<p>然后我们添加一个子用户作为我们日常使用的账号：<br>\n<img src=\"%E9%85%8D%E7%BD%AE4.png\" alt=\"配置step4\"></p>\n<p>然后输入子账号的一些信息（瞎填都行）：<br>\n<img src=\"%E9%85%8D%E7%BD%AE5.png\" alt=\"配置step5\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE6.png\" alt=\"配置step6\"></p>\n<p>无脑下一步后，我们给该账号分配one drive 5T空间：<br>\n在活动用户界面点击该子账号，然后在右侧弹出的窗口中选择OneDrive面板：<br>\n<img src=\"%E9%85%8D%E7%BD%AE7.png\" alt=\"配置step7\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE8.png\" alt=\"配置step8\"></p>\n<p>至此我们的管理员（公司）账号注册和子账号创建都已经完成了。往后如果我们想使用正版Microsoft 365，或者是使用免费的NAS空间，都是基于子账号的。</p>\n<p>当然还有更多的功能可以大家自己去探索。TvT</p>\n<h3 id=\"无限续期\">无限续期</h3>\n<p>这个时候有人跳出来说了，这个开发者账号是有到期时间的啊，那要怎样才能<code>无限期使用</code>呢？虽然麻烦点，但是需要各位在快过期的时候进行续期，而达成续期的条件就是需要活跃账号，最好的方法就是调用API，调用API其一是通过网盘的文件操作，另一个则是可以通过三方网站来模拟调用。为了保险，建议两个都使用。（也不用太担心，即使没能自动续费也有30天下载文件）</p>\n<blockquote>\n<p>转载博客于： <a href=\"https://qyi.io/archives/687.html\">https://qyi.io/archives/687.html</a></p>\n</blockquote>\n<p>具体操作如下：</p>\n<p>首先我们注册自己的api key：<br>\n访问<a href=\"https://portal.azure.com/#home\">azure</a>，需要先登录，登录账号为你的管理员账号，就是以xxx.onmicrosoft.com开头的的账户。<br>\n然后搜索“应用注册”<br>\n<img src=\"%E7%BB%AD%E6%9C%9F1.png\" alt=\"续期step1\"><br>\n如果搜索不到，还有两种方法进入应用注册：</p>\n<ol>\n<li>请搜索 “Azure Active Directory”，然后在 管理-应用注册</li>\n<li>或者直接点击直达链接：<a href=\"https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps\">https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps</a><br>\n<img src=\"%E7%BB%AD%E6%9C%9F2.png\" alt=\"续期step2\"></li>\n</ol>\n<p>进入应用注册界面如下，我们继续点击新注册按钮：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F3.png\" alt=\"续期step3\"></p>\n<p>在注册应用界面，我们需要注意以下几点：</p>\n<ul>\n<li>名称随意取</li>\n<li>选择受支持的账户类型为：任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)</li>\n<li>重定向URI一定要选择Web，然后输入以下地址，不然程序收不到回调。</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"regexp\">//</span>e5.qyi.io<span class=\"regexp\">/outlook/</span>auth2/receive</span><br></pre></td></tr></table></figure>\n<p><img src=\"%E7%BB%AD%E6%9C%9F4.png\" alt=\"续期step4\"></p>\n<p>注册成功后我们来到应用程序界面，在该界面，我们需要记录一下<code>应用程序(客户端)ID</code>：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F5.png\" alt=\"续期step5\"></p>\n<p>接着我们设置客户端密码：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F6.png\" alt=\"续期step6\"></p>\n<blockquote>\n<p>记得在添加成功后的列表中复制<code>客户端密码的值</code>！！</p>\n</blockquote>\n<p>在记录好以上值后，我们需要开放api权限：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F7.png\" alt=\"续期step7\"><br>\n<img src=\"%E7%BB%AD%E6%9C%9F8.png\" alt=\"续期step8\"></p>\n<p>这样api就配置完成了。</p>\n<p>接下来需要去添加自动订阅api的程序：<br>\n进入 <a href=\"https://e5.qyi.io/\">https://e5.qyi.io/</a>，这里需要github账户登录</p>\n<p><img src=\"%E7%BB%AD%E6%9C%9F9.png\" alt=\"续期step9\"></p>\n<p>登录后点击新建一个api配置：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F10.png\" alt=\"续期step10\"></p>\n<p>然后点击配置：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F11.png\" alt=\"续期step11\"></p>\n<p>接着在配置界面输入你之前保存的客户端ID和密码，然后一直下一步到授权：<br>\n<img src=\"%E7%BB%AD%E6%9C%9F12.png\" alt=\"续期step12\"></p>\n<blockquote>\n<p>在授权界面登录的是你的子账号！！！！</p>\n</blockquote>\n<p><img src=\"%E7%BB%AD%E6%9C%9F13.png\" alt=\"续期step13\"></p>\n<p>这样之后就完成啦！</p>\n<h2 id=\"开始使用！！\">开始使用！！</h2>\n<h3 id=\"one-drive\">one drive</h3>\n<p>一般win10以上都会自带one drive，如果没有的话在微软应用商店里搜索安装就行。</p>\n<p>然后登录你刚刚创建好的子账号。</p>\n<p>已经有的用户，可以在one drive设置里添加新账号。</p>\n<p><img src=\"%E4%BD%BF%E7%94%A81.png\" alt=\"使用step1\"><br>\n<img src=\"%E4%BD%BF%E7%94%A82.png\" alt=\"使用step2\"><br>\n<img src=\"%E4%BD%BF%E7%94%A83.png\" alt=\"使用step3\"><br>\n<img src=\"%E4%BD%BF%E7%94%A84.png\" alt=\"使用step4\"></p>\n<p>电脑设置完后，记得下载手机one drive，直接应用商店搜就行。</p>\n<p>这样one drive就可以使用了。</p>\n<h3 id=\"microsoft-365\">microsoft 365</h3>\n<p>在你刚刚登录的管理员账户界面里，除了。。。</p>\n<h2 id=\"私人云搭建\">私人云搭建</h2>\n<p>待建设</p>\n<h2 id=\"Q-A\">Q&amp;A</h2>\n<p>你登录管理员账号时可以会遇到叫你添加身份验证，跟着做就行。</p>\n"},{"title":"MongoDB","catalog":true,"lang":"cn","date":"2022-03-22T12:15:29.000Z","subtitle":"MongoDB学习","header-img":"/img/header_img/nier.png","sticky":996,"_content":"\n## MongoDB简介\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n\n**非关系型数据库NoSQL**\n\nNoSQL(NoSQL = Not Only SQL )，意即\"不仅仅是SQL\"。\n\n通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。\n\nNoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。\n\nNoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。\n\nNoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。\n\n**MongoDB**\n\nMongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。  \n在高负载的情况下，添加更多的节点，可以保证服务器性能。  \nMongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。  \nMongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。\n\nMongoDB下载： <https://www.mongodb.com/try/download/community>\n\n**MongoDB的主要特点**\n\n+ MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。\n+ 你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=\"Sameer\",Address=\"8 Gandhi Road\")来实现更快的排序。\n+ 你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。\n+ 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。\n+ Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。\n+ MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。\n+ Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。\n+ Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。\n+ Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。\n+ GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。\n+ MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。\n+ MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。\n+ MongoDB安装简单。\n\n## MongoDB概念解析\n\n不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。  \n下表将帮助您更容易理解Mongo中的一些概念：\n\n| SQL术语/概念 | MongoDB术语/概念 | 解释/说明 |\n| :---  |  :-----  |   :------  |\n| database | database | 数据库 |\n| table | collection | 数据库表/集合 |\n| row | document | 数据记录行/文档 |\n| column | field | 数据字段/域 |\n| index | index | 索引 |\n| table | joins\t| 表连接,MongoDB不支持 |\n| primary key | primary key | 主键,MongoDB自动将_id字段设置为主键 |\n\n通过下图实例，我们也可以更直观的了解Mongo中的一些概念：\n\n![表与MongoDB](Figure-1-Mapping-Table-to-Collection-1.png)\n\n### 数据库\n\n一个mongodb中可以建立多个数据库。  \nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。  \nMongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。  \n\n\"show dbs\" 命令可以显示所有数据的列表。  \n\"db\" 命令可显示当前数据库对象或集合\n\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。  \n+ 不能是空字符串（\"\")。\n+ 不得含有' '（空格)、.、$、/、\\和\\0 (空字符)。\n+ 应全部小写。\n+ 最多64字节。\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\n\n+ admin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n+ local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\n+ config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n### 集合\n\n集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。  \n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。  \n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n```json\n{\"site\":\"www.baidu.com\"}\n{\"site\":\"www.google.com\",\"name\":\"Google\"}\n```\n\n当第一个文档插入时，集合就会被创建。\n\n`合法的集合名`\n+ 集合名不能是空字符串\"\"。\n+ 集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。\n+ 集合名不能以\"system.\"开头，这是为系统集合保留的前缀。\n+ 用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。　\n\n`capped collections`\nCapped collections 就是固定大小的collection。  \n它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 \"RRD\" 概念类似。  \nCapped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能。和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。  \nCapped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。  \n由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 oplog.rs 就是利用 Capped Collection 来实现的。  \n要注意的是指定的存储大小包含了数据库的头信息。\n\n```c\ndb.createCollection(\"mycoll\", {capped:true, size:100000})\n```\n\n+ 在 capped collection 中，你能添加新的对象。\n+ 能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。\n+ 使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。\n+ 删除之后，你必须显式的重新创建这个 collection。\n+ 在32bit机器中，capped collection 最大存储为 1e9( 1*10^9)个字节。\n\n### 文档\n\n文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n需要注意的是：\n\n+ 文档中的键/值对是有序的。\n+ 文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n+ MongoDB区分类型和大小写。\n+ MongoDB的文档不能有重复的键。\n+ 文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n文档键命名规范：\n\n+ 键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n+ .和$有特别的意义，只有在特定环境下才能使用。\n+ 以下划线\"_\"开头的键是保留的(不是严格要求的)。\n\n### 元数据\n\n数据库的信息是存储在集合中。它们使用了系统的命名空间：\n\n```\ndbname.system.*\n```\n\n在MongoDB数据库中名字空间 &lt;dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:\n\n| 集合命名空间 | 描述 |\n| :----  | :--------- |\n| dbname.system.namespaces\t| 列出所有名字空间。 |\n| dbname.system.indexes | 列出所有索引。 |\n| dbname.system.profile | 包含数据库概要(profile)信息。 |\n| dbname.system.users | 列出所有可访问数据库的用户。 |\n| dbname.local.sources | 包含复制对端（slave）的服务器信息和状态。 |\n\n对于修改系统集合中的对象有如下限制。  \n在{{system.indexes}}插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。  \n{{system.users}}是可修改的。 {{system.profile}}是可删除的。\n\n## MongoDB 数据类型\n\n下表为MongoDB中常用的几种数据类型。\n\n| 数据类型 | 描述 |\n| :---- | :------- |\n| String | 字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。 |\n| Integer | 整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 |\n| Boolean | 布尔值。用于存储布尔值（真/假）。 |\n| Double | 双精度浮点值。用于存储浮点值。 |\n| Min/Max keys | 将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 |\n| Array | 用于将数组或列表或多个值存储为一个键。 |\n| Timestamp | 时间戳。记录文档修改或添加的具体时间。 |\n| Object | 用于内嵌文档。 |\n| Null | 用于创建空值。 |\n| Symbol | 符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。 |\n| Date | 日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。 |\n| Object ID | 对象 ID。用于创建文档的 ID。 |\n| Binary Data | 二进制数据。用于存储二进制数据。 |\n| Code |代码类型。用于在文档中存储 JavaScript 代码。 |\n| Regular expression | 正则表达式类型。用于存储正则表达式。 |\n\n下面说明下几种重要的数据类型。\n\n`ObjectId`\n\nObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：\n\n+ 前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时\n+ 接下来的 3 个字节是机器标识码\n+ 紧接的两个字节由进程 id 组成 PID\n+ 最后三个字节是随机数\n\n![ObjectId](ObjectId.jpeg)\n\nMongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象\n\n由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:\n\n```c\n> var newObject = ObjectId()\n> newObject.getTimestamp()\nISODate(\"2022-03-23T06:31:09.000Z\")\n```\n\nObjectId 转为字符串\n\n```c\n> newObject.str\n623abece277b0000e1003d84\n```\n\n\n## MongoDB可视化工具\n\nMongoDB可视化工具软件有很多，推荐三款正在使用的：\n\n+ navicat\n+ mongo campass\n+ robo3T\n\n## MongoDB数据库操作\n\n### 创建数据库\n\n语法：  \n```mongodb\nuse DATABASE_NAME\n```\n\n如果数据库不存在，则创建数据库，否则切换到指定数据库。\n\n```\n> use testdb\nswitched to db testdb\n> db\ntestdb\n>\n```\n\n如果你想查看所有数据库，可以使用 show dbs 命令：\n\n```\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n> \n```\n\n可以看到，我们刚创建的数据库 newTestDB 并不在数据库的列表中， 要显示它，我们需要向 newTestDB 数据库插入一些数据。\n\n```c\n> db.collection1.insert({\"name\":\"name1\",\"value\":1})\nWriteResult({ \"nInserted\" : 1 })\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\ntestdb  0.000GB\n```\n\nMongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。\n\n> 注意: 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。\n\n### 删除数据库\n\n语法：  \n\n```\ndb.dropDatabase()\n```\n\n### 创建集合\n\n语法：  \n\n```\ndb.createCollection(name, options)\n```\n\n+ name: 要创建的集合名称\n+ options: 可选参数, 指定有关内存大小及索引的选项\n  + capped: 布尔类型，如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。\n  + size: 数值，为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。\n  + max: 数值，指定固定集合中包含文档的最大数量。\n\n在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。\n\n如果要查看已有集合，可以使用 `show collections` 或 `show tables` 命令：  \n\n下面是带有几个关键参数的 createCollection() 的用法：  \n创建固定集合 mycol，整个集合空间大小 6142800 B, 文档最大个数为 10000 个。\n\n```c\n> db.createCollection(\"mycol\", { capped : true, autoIndexId : true, size : \n   6142800, max : 10000 } )\n{ \"ok\" : 1 }\n>\n```\n\n在 MongoDB 中，当你插入一些文档时，MongoDB 会自动创建集合。\n\n### 删除集合\n\n语法：  \n\n```c\ndb.collection.drop()\n```\n\n如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。\n\n### 插入文档\n\n文档的数据结构和 JSON 基本一样。  \n所有存储在集合中的数据都是 BSON 格式。  \nBSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。\n\n语法：  \n\n```\ndb.COLLECTION_NAME.insert(document)\n或\ndb.COLLECTION_NAME.save(document)\n```\n\n+ save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。\n+ insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。\n\n3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。\n\ndb.collection.insertOne() 用于向集合插入一个新文档，语法格式如下：\n\n```\ndb.collection.insertOne(\n   <document>,\n   {\n      writeConcern: <document>\n   }\n)\n```\n\ndb.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：\n\n```\ndb.collection.insertMany(\n   [ <document 1> , <document 2>, ... ],\n   {\n      writeConcern: <document>,\n      ordered: <boolean>\n   }\n)\n```\n\n+ document：要写入的文档。\n+ writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。\n+ ordered：指定是否按顺序写入，默认 true，按顺序写入。\n\n我们也可以将数据定义为一个变量，如下所示：\n\n```js\ndocument=({title: 'MongoDB', \n    description: 'MongoDB 是一个 Nosql 数据库',\n    by: 'blog',\n    url: 'http://www.bravogohome.top',\n    tags: ['mongodb', 'database', 'NoSQL'],\n    likes: 100\n});\n```\n\n执行后显示结果如下：\n\n```json\n// 1\n{\n    \"title\": \"MongoDB\",\n    \"description\": \"MongoDB 是一个 Nosql 数据库\",\n    \"by\": \"blog\",\n    \"url\": \"http://www.bravogohome.top\",\n    \"tags\": [\n        \"mongodb\",\n        \"database\",\n        \"NoSQL\"\n    ],\n    \"likes\": 100\n}\n```\n\n执行插入操作：  \n\n```\ndb.testcollection.insert(document)\n```\n\n### 查询文档\n\n语法：  \n\n```\ndb.collection.find(query, projection)\n```\n\n+ query ：可选，使用查询操作符指定查询条件\n+ projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：\n\n> db.col.find().pretty()\n\npretty() 方法以格式化的方式来显示所有文档。\n\n如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：\n\n| 操作 | 格式 | 范例 | RDBMS中的类似语句 |\n| :-- | :--: | :---- | :----- |\n| 等于 | {&lt;key>:&lt;value>} | db.col.find({\"name\":\"name1\"}).pretty() | where name = 'name1' |\n| 小于 | {&lt;key>:{$lt:&lt;value>}} | db.col.find({\"likes\":{$lt:50}}).pretty() | where likes < 50 |\n| 小于或等于 | {&lt;key>:{$lte:&lt;value>}} | db.col.find({\"likes\":{$lte:50}}).pretty() | where likes <= 50 |\n| 大于 | {&lt;key>:{$gt:&lt;value>}} | db.col.find({\"likes\":{$gt:50}}).pretty() | where likes > 50 |\n| 大于或等于 | {&lt;key>:{$gte:&lt;value>}} | db.col.find({\"likes\":{$gte:50}}).pretty() | where likes >= 50 |\n| 不等于 | {&lt;key>:{$ne:&lt;value>}} | db.col.find({\"likes\":{$ne:50}}).pretty() | where likes != 50 |\n\nMongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。\n\n语法格式如下：\n\n> db.col.find({key1:value1, key2:value2}).pretty()\n\nMongoDB OR 条件语句使用了关键字 $or,语法格式如下：\n\n```cpp\ndb.col.find(\n   {\n      $or: [\n         {key1: value1}, {key2:value2}\n      ]\n   }\n).pretty()\n```\n\n### 更新文档\n\nMongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。\n\nupdate() 方法用于更新已存在的文档。语法格式如下：\n\n```cpp\ndb.collection.update(\n   <query>,\n   <update>,\n   {\n     upsert: <boolean>,\n     multi: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：\n\n+ query : update的查询条件，类似sql update查询内where后面的。\n+ update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n+ upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n+ multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n+ writeConcern :可选，抛出异常的级别。\n\n实例：  \n\n```cpp\ndb.coll2.update({\"title\":\"MongoDB\"},{$set:{\"likes\":\"0\"}})\n```\n\n> db.collection.updateOne() 向指定集合更新单个文档\n> db.collection.updateMany() 向指定集合更新多个文档\n\nsave() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：\n\n```cpp\ndb.collection.save(\n   <document>,\n   {\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：\n\n+ document : 文档数据。\n+ writeConcern :可选，抛出异常的级别。\n\n### 删除文档\n\nMongoDB remove() 函数是用来移除集合中的数据。\n\nMongoDB 数据更新可以使用 update() 函数。在执行 remove() 函数前先执行 find() 命令来判断执行的条件是否正确，这是一个比较好的习惯。\n\n语法：  \n\n```cpp\ndb.collection.remove(\n   <query>,\n   {\n     justOne: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：  \n\n+ query :（可选）删除的文档的条件。\n+ justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n+ writeConcern :（可选）抛出异常的级别。\n\n如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：\n\n> db.col.remove({})\n\nremove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。\n\n如删除集合下全部文档：\n\n```\ndb.inventory.deleteMany({})\n```\n\n删除 status 等于 A 的全部文档：\n\n```\ndb.inventory.deleteMany({ status : \"A\" })\n```\n\n删除 status 等于 D 的一个文档：\n\n```\ndb.inventory.deleteOne( { status: \"D\" } )\n```\n\n## MongoDB条件操作符\n\n条件操作符用于比较两个表达式并从mongoDB集合中获取数据。\n\n在本章节中，我们将讨论如何在MongoDB中使用条件操作符。\n\nMongoDB中条件操作符有：\n\n+ (>) 大于 - $gt\n+ (<) 小于 - $lt\n+ (>=) 大于等于 - $gte\n+ (<= ) 小于等于 - $lte\n+ (!=) 不等于 - $ne\n+ 特殊操作符 - $type\n\n`MongoDB $type操作符`\n\n\\$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。\n\nMongoDB 中可以使用的类型如下表所示：\n\n| 类型 | 数字 | 备注 |\n| :--- | :----: | :---- |\n| Double | 1 | |\n| String | 2 | |\n| Object | 3 | |\n| Array | 4\t| |\n| Binary data | 5 |\n| Undefined | 6 | 已废弃。 |\n| Object id | 7 |\t|\n| Boolean | 8 |\t| \n| Date | 9 |  |\n| Null | 10 | | \n| Regular Expression | 11 | |\n| JavaScript | 13 | |\n| Symbol | 14 | |\n| JavaScript (with scope) | 15 |\t| \n| 32-bit integer | 16 |\t | \n| Timestamp | 17\t| | \n| 64-bit integer | 18 |  |\n| Min key | 255 | Query with -1 |\n| Max key | 127 | | \n\n如果想获取 \"col\" 集合中 title 为 String 的数据，你可以使用以下命令：\n\n```\ndb.col.find({\"title\" : {$type : 2}})\n或\ndb.col.find({\"title\" : {$type : 'string'}})\n```\n\n## MongoDB Limit与SKip方法\n\n### Limit()\n\n如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。\n\n语法:  \n\n```\ndb.COLLECTION_NAME.find().limit(NUMBER)\n```\n\n> 如果你们没有指定limit()方法中的参数则显示集合中的所有数据。\n\n### Skip()\n\n我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。\n\n语法:   \n\n```\ndb.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)\n```\n\n> skip()方法默认参数为 0 。\n\n## MongoDB排序\n\n在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。\n\n语法：  \n\n```\ndb.COLLECTION_NAME.find().sort({KEY:1})\n```\n\n> skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。\n\n## MongoDB索引\n\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。  \n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。  \n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。  \n\n### 创建索引\n\nMongoDB使用 createIndex() 方法来创建索引。\n\n语法：  \n\n```\ndb.collection.createIndex(keys, options)\n```\n\n语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。  \ncreateIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。\n\ncreateIndex() 接收可选参数，可选参数列表如下：\n\n| Parameter | Type | Description |\n| :----- | :----- | :------------ |\n| background | Boolean | 建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 \"background\" 可选参数。 \"background\" 默认值为false。 |\n| unique | Boolean | 建立的索引是否唯一。指定为true创建唯一索引。默认值为false. |\n| name | string | 索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。 |\n| dropDups | Boolean | 3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false. |\n| sparse | Boolean | 对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false. |\n| expireAfterSeconds | integer | 指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。 |\n| v | index version | 索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。 |\n| weights | document | 索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。 |\n| default_language | string | 对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语 |\n| language_override | string | 对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language. |\n\n### 查看集合索引\n\n```\ndb.col.getIndexes()\n```\n\n### 查看集合索引大小\n\n```\ndb.col.totalIndexSize()\n```\n\n### 删除集合所有索引\n\n```\ndb.col.dropIndexes()\n```\n\n### 删除集合指定索引\n\n```\ndb.col.dropIndex(\"索引名称\")\n```\n\n## MongoDB聚合\n\nMongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。  \n有点类似 SQL 语句中的 count(*)。\n\n### aggregate()\n\n语法：  \n\n```\ndb.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)\n```\n\n下表展示了一些聚合的表达式:\n\n| 表达式 | 描述 | 实例 |\n| :---- | :------- | :--------- |\n| $sum | 计算总和。 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : \"$likes\"}}}]) |\n| $avg | 计算平均值 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$avg : \"$likes\"}}}]) |\n| $min | 获取集合中所有文档对应值得最小值。 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$min : \"$likes\"}}}]) |\n| $max | 获取集合中所有文档对应值得最大值。\tdb.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$max : \"$likes\"}}}]) |\n| $push | 将值加入一个数组中，不会判断是否有重复的值。\t | db.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$push: \"$url\"}}}]) |\n| $addToSet | 将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。 | \tdb.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$addToSet : \"$url\"}}}]) |\n| $first | 根据资源文档的排序获取第一个文档数据。 |  db.mycol.aggregate([{$group : {_id : \"$by_user\", first_url : {$first : \"$url\"}}}]) |\n| $last | 根据资源文档的排序获取最后一个文档数据 | db.mycol.aggregate([{$group : {_id : \"$by_user\", last_url : {$last : \"$url\"}}}]) |\n\n### 管道的概念\n\n管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。  \nMongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。  \n表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。  \n\n这里我们介绍一下聚合框架中常用的几个操作：  \n\n+ $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。\n+ $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。\n+ $limit：用来限制MongoDB聚合管道返回的文档数。\n+ $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。\n+ $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。\n+ $group：将集合中的文档分组，可用于统计结果。\n+ $sort：将输入文档排序后输出。\n+ $geoNear：输出接近某一地理位置的有序文档。\n\n管道操作符实例\n\n1、$project实例\n\n```c\ndb.article.aggregate(\n    { $project : {\n        title : 1 ,\n        author : 1 ,\n    }}\n );\n```\n\n这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:\n\n```c\ndb.article.aggregate(\n    { $project : {\n        _id : 0 ,\n        title : 1 ,\n        author : 1\n    }});\n```\n\n2、$match实例\n\n```c\ndb.articles.aggregate( [\n                        { $match : { score : { $gt : 70, $lte : 90 } } },\n                        { $group: { _id: null, count: { $sum: 1 } } }\n                       ] );\n```\n\n$match用于获取分数大于70且小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。\n\n3、$skip实例\n\n```c\ndb.article.aggregate(\n    { $skip : 5 });\n```\n\n经过$skip管道操作符处理后，前五个文档被\"过滤\"掉。\n\n## MongoDB复制（副本集）\n\nMongoDB复制是将数据同步在多个服务器的过程。  \n复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。  \n复制还允许您从硬件故障和服务中断中恢复数据。\n\n\n***什么是复制?***\n\n+ 保障数据的安全性\n+ 数据高可用性 (24*7)\n+ 灾难恢复\n+ 无需停机维护（如备份，重建索引，压缩）\n+ 分布式读取数据\n\n### MongoDB复制原理\n\nmongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。  \nmongodb各个节点常见的搭配方式为：一主一从、一主多从。  \n主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。  \nMongoDB复制结构图如下所示：\n\n![mongodb复制原理.png](mongodb复制原理.png)\n\n以上结构图中，客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性。\n\n副本集特征：\n\n+ N个节点的集群\n+ 任何节点可作为主节点\n+ 所有写入操作都在主节点上\n+ 自动故障转移\n+ 自动恢复\n\n### MongoDB副本集设置\n\n在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：\n\n1. 关闭正在运行的MongoDB服务器。\n\n2. 我们通过指定 --replSet 选项来启动mongoDB。--replSet 基本语法格式如下：\n```bash\nmongod --port \"PORT\" --dbpath \"YOUR_DB_DATA_PATH\" --replSet \"REPLICA_SET_INSTANCE_NAME\"\n```\n> 实例  \n> mongod --port 27017 --dbpath \"D:\\set up\\mongodb\\data\" --replSet rs0  \n> 以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。\n\n3. 启动后打开命令提示框并连接上mongoDB服务。  \n在Mongo客户端使用命令rs.initiate()来启动一个新的副本集。  \n我们可以使用rs.conf()来查看副本集的配置  \n查看副本集状态使用 rs.status() 命令\n\n### 副本集添加成员\n\n添加副本集的成员，我们需要使用多台服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。\n\n语法:  \n\n```\nrs.add(HOST_NAME:PORT)\n```\n\n实例:   \n假设你已经启动了一个名为 mongod1.net ，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：\n\n```\nrs.add(\"mongod1.net:27017\")\n```\n\nMongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。  \nMongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。\n\n## MongoDB分片\n\n### 分片\n\n在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。  \n当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。\n\n### 为什么使用分片\n\n+ 复制所有的写入操作到主节点\n+ 延迟的敏感数据会在主节点查询\n+ 单个副本集限制在12个节点\n+ 当请求量巨大时会出现内存不足。\n+ 本地磁盘不足\n+ 垂直扩展价格昂贵\n\n### MongoDB分片\n下图展示了在MongoDB中使用分片集群结构分布：\n\n![mongodb分片集群结构分布](mongodb分片集群结构分布.png)\n\n上图中主要有如下所述三个主要组件：\n\nShard:  \n用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障\n\nConfig Server:  \nmongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息。\n\nQuery Routers:  \n前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。\n\n## MongoDB 备份(mongodump)与恢复(mongorestore)\n\n### MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。  \nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n语法：  \n\n```\nmongodump -h dbhost -d dbname -o dbdirectory\n```\n\n-h：  \nMongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n\n-d：  \n需要备份的数据库实例，例如：test\n\n-o：  \n备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n\n\nmongodump 命令可选参数列表如下所示：  \n\n| 语法 | 描述 | 实例 |\n| :---- | :---- | :------ |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host 127.0.0.1 --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |  | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n\n### MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据。\n\n语法:  \n\n```\nmongorestore -h <hostname><:port> -d dbname <path>\n```\n\n--host &lt;:port>, -h &lt;:port>：\nMongoDB所在服务器地址，默认为： localhost:27017\n\n--db , -d ：\n需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n\n--drop：\n恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n\n&lt;path>：\nmongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n\n你不能同时指定 &lt;path> 和 --dir 选项，--dir也可以设置备份目录。\n\n--dir：\n指定备份的目录\n\n你不能同时指定 &lt;path> 和 --dir 选项。\n\n\n## MongoDB 监控\n\n在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。\n\nMongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。\n\n### mongostat 命令\n\nmongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。\n\n启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongostat命令\n\n### mongotop 命令\n\nmongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。\n\n启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongotop命令\n\n\n## MongoDB 关系\n\nMongoDB 的关系表示多个文档之间在逻辑上的相互联系。  \n文档间可以通过嵌入和引用来建立联系。  \nMongoDB 中的关系可以是：\n\n+ 1:1 (1对1)\n+ 1: N (1对多)\n+ N: 1 (多对1)\n+ N: N (多对多)\n\n接下来我们来考虑下用户与用户地址的关系。  \n一个用户可以有多个地址，所以是一对多的关系。  \n以下是 user 文档的简单结构：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"name\": \"Tom Hanks\",\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\"\n}\n```\n\n以下是 address 文档的简单结构：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc4a5d85242602e000000\"),\n   \"building\": \"22 A, Indiana Apt\",\n   \"pincode\": 123456,\n   \"city\": \"Los Angeles\",\n   \"state\": \"California\"\n} \n```\n\n### 嵌入式关系\n\n使用嵌入式方法，我们可以把用户地址嵌入到用户的文档中：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\",\n   \"address\": [\n      {\n         \"building\": \"22 A, Indiana Apt\",\n         \"pincode\": 123456,\n         \"city\": \"Los Angeles\",\n         \"state\": \"California\"\n      },\n      {\n         \"building\": \"170 A, Acropolis Apt\",\n         \"pincode\": 456789,\n         \"city\": \"Chicago\",\n         \"state\": \"Illinois\"\n      }]\n} \n```\n\n以上数据保存在单一的文档中，可以比较容易的获取和维护数据。 你可以这样查询用户的地址：\n\n>db.users.findOne({\"name\":\"Tom Benzamin\"},{\"address\":1})\n\n这种数据结构的缺点是，如果用户和用户地址在不断增加，数据量不断变大，会影响读写性能。\n\n\n### 引用式关系\n\n引用式关系是设计数据库时经常用到的方法，这种方法把用户数据文档和用户地址数据文档分开，通过引用文档的 id 字段来建立关系。\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\",\n   \"address_ids\": [\n      ObjectId(\"52ffc4a5d85242602e000000\"),\n      ObjectId(\"52ffc4a5d85242602e000001\")\n   ]\n}\n```\n\n以上实例中，用户文档的 address_ids 字段包含用户地址的对象id（ObjectId）数组。  \n我们可以读取这些用户地址的对象id（ObjectId）来获取用户的详细地址信息。  \n这种方法需要两次查询，第一次查询用户地址的对象id（ObjectId），第二次通过查询的id获取用户的详细地址信息。\n\n```cpp\nvar result = db.users.findOne({\"name\":\"Tom Benzamin\"},{\"address_ids\":1})\nvar addresses = db.address.find({\"_id\":{\"$in\":result[\"address_ids\"]}})\n```\n\n> 注意这一句中的 findOne 不能写成 find，因为 find 返回的数据类型是数组，findOne 返回的数据类型是对象。  \n> 如果这一句使用了 find，那么下面一句应该改写为:  \n> var addresses = db.address.find({\"_id\":{\"$in\":result[0][\"address_ids\"]}})\n\n## MongoDB 数据库引用\n\n在上一章节MongoDB关系中我们提到了MongoDB的引用来规范数据结构文档。\n\nMongoDB 引用有两种：\n\n+ 手动引用（Manual References）\n+ DBRefs\n\n考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。  \n这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。\n\n### 使用 DBRefs\n\nDBRef的形式：\n\n```\n{ $ref : , $id : , $db :  }\n```\n\n三个字段表示的意义为：\n\n+ $ref：集合名称\n+ $id：引用的id\n+ $db: 数据库名称，可选参数\n\n以下实例中用户数据文档使用了 DBRef, 字段 address：\n\n```json\n{\n   \"_id\":ObjectId(\"53402597d852426020000002\"),\n   \"address\": {\n   \"$ref\": \"address_home\",\n   \"$id\": ObjectId(\"534009e4d852427820000002\"),\n   \"$db\": \"testdb\"},\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\"\n}\n```\n\naddress DBRef 字段指定了引用的地址文档是在 testdb 数据库下的 address_home 集合，id 为 534009e4d852427820000002。  \n以下代码中，我们通过指定 $ref 参数（address_home 集合）来查找集合中指定id的用户地址信息：  \n\n```cpp\nvar user = db.users.findOne({\"name\":\"Tom Benzamin\"})\nvar dbRef = user.address\ndb[dbRef.$ref].findOne({\"_id\":(dbRef.$id)})\n```\n\n> db[dbRef.$ref].findOne({\"\\_id\":ObjectId(dbRef.$id)})\n\n以上实例返回了 address_home 集合中的地址数据：\n\n```json\n{\n   \"_id\" : ObjectId(\"534009e4d852427820000002\"),\n   \"building\" : \"22 A, Indiana Apt\",\n   \"pincode\" : 123456,\n   \"city\" : \"Los Angeles\",\n   \"state\" : \"California\"\n}\n```\n\n## MongoDB 覆盖索引查询\n\n官方的MongoDB的文档中说明，覆盖查询是以下的查询：\n\n+ 所有的查询字段是索引的一部分\n+ 所有的查询返回字段在同一个索引中\n\n由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。  \n因为索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多。\n\n### 使用覆盖索引查询\n\n为了测试覆盖索引查询，使用以下 users 集合:\n\n```json\n{\n   \"_id\": ObjectId(\"53402597d852426020000002\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"gender\": \"M\",\n   \"name\": \"Tom Benzamin\",\n   \"user_name\": \"tombenzamin\"\n}\n```\n\n我们在 users 集合中创建联合索引，字段为 gender 和 user_name :\n\n```c\ndb.users.createIndex({gender:1,user_name:1})\n```\n\n现在，该索引会覆盖以下查询：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0})\n```\n\n也就是说，对于上述查询，MongoDB的不会去数据库文件中查找。相反，它会从索引中提取数据，这是非常快速的数据查询。  \n由于我们的索引中不包括 \\_id 字段，\\_id在查询中会默认返回，我们可以在MongoDB的查询结果集中排除它。  \n下面的实例没有排除_id，查询就不会被覆盖：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1})\n```\n\n最后，如果是以下的查询，不能使用覆盖索引查询：\n\n+ 所有索引字段是一个数组\n+ 所有索引字段是一个子文档\n\n## MongoDB 查询分析\n\nMongoDB 查询分析可以确保我们所建立的索引是否有效，是查询语句性能分析的重要工具。   \nMongoDB 查询分析常用函数有：explain() 和 hint()。\n\n### explain()\n\nexplain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。  \n接下来我们在 users 集合中创建 gender 和 user_name 的索引：\n\n```c\ndb.users.ensureIndex({gender:1,user_name:1})\n```\n\n现在在查询语句中使用 explain ：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).explain()\n```\n\n以上的 explain() 查询返回如下结果：\n\n```c\n{\n   \"cursor\" : \"BtreeCursor gender_1_user_name_1\",\n   \"isMultiKey\" : false,\n   \"n\" : 1,\n   \"nscannedObjects\" : 0,\n   \"nscanned\" : 1,\n   \"nscannedObjectsAllPlans\" : 0,\n   \"nscannedAllPlans\" : 1,\n   \"scanAndOrder\" : false,\n   \"indexOnly\" : true,\n   \"nYields\" : 0,\n   \"nChunkSkips\" : 0,\n   \"millis\" : 0,\n   \"indexBounds\" : {\n      \"gender\" : [\n         [\n            \"M\",\n            \"M\"\n         ]\n      ],\n      \"user_name\" : [\n         [\n            {\n               \"$minElement\" : 1\n            },\n            {\n               \"$maxElement\" : 1\n            }\n         ]\n      ]\n   }\n}\n```\n\n现在，我们看看这个结果集的字段：\n\n+ indexOnly: 字段为 true ，表示我们使用了索引。\n+ cursor：因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。\n+ n：当前查询返回的文档数量。\n+ nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。\n+ millis：当前查询所需时间，毫秒数。\n+ indexBounds：当前查询具体使用的索引。\n\n### hint()\n\n虽然MongoDB查询优化器一般工作的很不错，但是也可以使用 hint 来强制 MongoDB 使用一个指定的索引。  \n这种方法某些情形下会提升性能。 一个有索引的 collection 并且执行一个多字段的查询(一些字段已经索引了)。  \n如下查询实例指定了使用 gender 和 user_name 索引字段来查询：  \n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).hint({gender:1,user_name:1})\n```\n\n可以使用 explain() 函数来分析以上查询：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()\n```\n\n## MongoDB 原子操作\n\nmongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。  \n但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。  \n所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。\n\n### 原子操作数据模型\n\n考虑下面的例子，图书馆的书籍及结账信息。  \n实例说明了在一个相同的文档中如何确保嵌入字段关联原子操作（update：更新）的字段是同步的。\n\n```json\nbook = {\n          _id: 123456789,\n          title: \"MongoDB: The Definitive Guide\",\n          author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n          published_date: ISODate(\"2010-09-24\"),\n          pages: 216,\n          language: \"English\",\n          publisher_id: \"oreilly\",\n          available: 3,\n          checkout: [ { by: \"joe\", date: ISODate(\"2012-10-15\") } ]\n        }\n```\n\n你可以使用 db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。  \n在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:\n\n\n","source":"_posts/cn/MongoDB.md","raw":"---\ntitle: MongoDB\ncatalog: true\nlang: cn\ndate: 2022-03-22 20:15:29\nsubtitle: MongoDB学习\nheader-img: /img/header_img/nier.png\nsticky: 996\ntags:\n- MongoDB\ncategories:\n---\n\n## MongoDB简介\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n\n**非关系型数据库NoSQL**\n\nNoSQL(NoSQL = Not Only SQL )，意即\"不仅仅是SQL\"。\n\n通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。\n\nNoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。\n\nNoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。\n\nNoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。\n\n**MongoDB**\n\nMongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。  \n在高负载的情况下，添加更多的节点，可以保证服务器性能。  \nMongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。  \nMongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。\n\nMongoDB下载： <https://www.mongodb.com/try/download/community>\n\n**MongoDB的主要特点**\n\n+ MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。\n+ 你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=\"Sameer\",Address=\"8 Gandhi Road\")来实现更快的排序。\n+ 你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。\n+ 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。\n+ Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。\n+ MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。\n+ Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。\n+ Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。\n+ Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。\n+ GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。\n+ MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。\n+ MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。\n+ MongoDB安装简单。\n\n## MongoDB概念解析\n\n不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。  \n下表将帮助您更容易理解Mongo中的一些概念：\n\n| SQL术语/概念 | MongoDB术语/概念 | 解释/说明 |\n| :---  |  :-----  |   :------  |\n| database | database | 数据库 |\n| table | collection | 数据库表/集合 |\n| row | document | 数据记录行/文档 |\n| column | field | 数据字段/域 |\n| index | index | 索引 |\n| table | joins\t| 表连接,MongoDB不支持 |\n| primary key | primary key | 主键,MongoDB自动将_id字段设置为主键 |\n\n通过下图实例，我们也可以更直观的了解Mongo中的一些概念：\n\n![表与MongoDB](Figure-1-Mapping-Table-to-Collection-1.png)\n\n### 数据库\n\n一个mongodb中可以建立多个数据库。  \nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。  \nMongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。  \n\n\"show dbs\" 命令可以显示所有数据的列表。  \n\"db\" 命令可显示当前数据库对象或集合\n\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。  \n+ 不能是空字符串（\"\")。\n+ 不得含有' '（空格)、.、$、/、\\和\\0 (空字符)。\n+ 应全部小写。\n+ 最多64字节。\n\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。\n\n+ admin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n+ local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\n+ config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\n### 集合\n\n集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。  \n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。  \n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n```json\n{\"site\":\"www.baidu.com\"}\n{\"site\":\"www.google.com\",\"name\":\"Google\"}\n```\n\n当第一个文档插入时，集合就会被创建。\n\n`合法的集合名`\n+ 集合名不能是空字符串\"\"。\n+ 集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。\n+ 集合名不能以\"system.\"开头，这是为系统集合保留的前缀。\n+ 用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。　\n\n`capped collections`\nCapped collections 就是固定大小的collection。  \n它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 \"RRD\" 概念类似。  \nCapped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能。和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。  \nCapped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。  \n由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 oplog.rs 就是利用 Capped Collection 来实现的。  \n要注意的是指定的存储大小包含了数据库的头信息。\n\n```c\ndb.createCollection(\"mycoll\", {capped:true, size:100000})\n```\n\n+ 在 capped collection 中，你能添加新的对象。\n+ 能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。\n+ 使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。\n+ 删除之后，你必须显式的重新创建这个 collection。\n+ 在32bit机器中，capped collection 最大存储为 1e9( 1*10^9)个字节。\n\n### 文档\n\n文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n需要注意的是：\n\n+ 文档中的键/值对是有序的。\n+ 文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n+ MongoDB区分类型和大小写。\n+ MongoDB的文档不能有重复的键。\n+ 文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n文档键命名规范：\n\n+ 键不能含有\\0 (空字符)。这个字符用来表示键的结尾。\n+ .和$有特别的意义，只有在特定环境下才能使用。\n+ 以下划线\"_\"开头的键是保留的(不是严格要求的)。\n\n### 元数据\n\n数据库的信息是存储在集合中。它们使用了系统的命名空间：\n\n```\ndbname.system.*\n```\n\n在MongoDB数据库中名字空间 &lt;dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:\n\n| 集合命名空间 | 描述 |\n| :----  | :--------- |\n| dbname.system.namespaces\t| 列出所有名字空间。 |\n| dbname.system.indexes | 列出所有索引。 |\n| dbname.system.profile | 包含数据库概要(profile)信息。 |\n| dbname.system.users | 列出所有可访问数据库的用户。 |\n| dbname.local.sources | 包含复制对端（slave）的服务器信息和状态。 |\n\n对于修改系统集合中的对象有如下限制。  \n在{{system.indexes}}插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。  \n{{system.users}}是可修改的。 {{system.profile}}是可删除的。\n\n## MongoDB 数据类型\n\n下表为MongoDB中常用的几种数据类型。\n\n| 数据类型 | 描述 |\n| :---- | :------- |\n| String | 字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。 |\n| Integer | 整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 |\n| Boolean | 布尔值。用于存储布尔值（真/假）。 |\n| Double | 双精度浮点值。用于存储浮点值。 |\n| Min/Max keys | 将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 |\n| Array | 用于将数组或列表或多个值存储为一个键。 |\n| Timestamp | 时间戳。记录文档修改或添加的具体时间。 |\n| Object | 用于内嵌文档。 |\n| Null | 用于创建空值。 |\n| Symbol | 符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。 |\n| Date | 日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。 |\n| Object ID | 对象 ID。用于创建文档的 ID。 |\n| Binary Data | 二进制数据。用于存储二进制数据。 |\n| Code |代码类型。用于在文档中存储 JavaScript 代码。 |\n| Regular expression | 正则表达式类型。用于存储正则表达式。 |\n\n下面说明下几种重要的数据类型。\n\n`ObjectId`\n\nObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：\n\n+ 前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时\n+ 接下来的 3 个字节是机器标识码\n+ 紧接的两个字节由进程 id 组成 PID\n+ 最后三个字节是随机数\n\n![ObjectId](ObjectId.jpeg)\n\nMongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象\n\n由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:\n\n```c\n> var newObject = ObjectId()\n> newObject.getTimestamp()\nISODate(\"2022-03-23T06:31:09.000Z\")\n```\n\nObjectId 转为字符串\n\n```c\n> newObject.str\n623abece277b0000e1003d84\n```\n\n\n## MongoDB可视化工具\n\nMongoDB可视化工具软件有很多，推荐三款正在使用的：\n\n+ navicat\n+ mongo campass\n+ robo3T\n\n## MongoDB数据库操作\n\n### 创建数据库\n\n语法：  \n```mongodb\nuse DATABASE_NAME\n```\n\n如果数据库不存在，则创建数据库，否则切换到指定数据库。\n\n```\n> use testdb\nswitched to db testdb\n> db\ntestdb\n>\n```\n\n如果你想查看所有数据库，可以使用 show dbs 命令：\n\n```\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n> \n```\n\n可以看到，我们刚创建的数据库 newTestDB 并不在数据库的列表中， 要显示它，我们需要向 newTestDB 数据库插入一些数据。\n\n```c\n> db.collection1.insert({\"name\":\"name1\",\"value\":1})\nWriteResult({ \"nInserted\" : 1 })\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\ntestdb  0.000GB\n```\n\nMongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。\n\n> 注意: 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。\n\n### 删除数据库\n\n语法：  \n\n```\ndb.dropDatabase()\n```\n\n### 创建集合\n\n语法：  \n\n```\ndb.createCollection(name, options)\n```\n\n+ name: 要创建的集合名称\n+ options: 可选参数, 指定有关内存大小及索引的选项\n  + capped: 布尔类型，如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。\n  + size: 数值，为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。\n  + max: 数值，指定固定集合中包含文档的最大数量。\n\n在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。\n\n如果要查看已有集合，可以使用 `show collections` 或 `show tables` 命令：  \n\n下面是带有几个关键参数的 createCollection() 的用法：  \n创建固定集合 mycol，整个集合空间大小 6142800 B, 文档最大个数为 10000 个。\n\n```c\n> db.createCollection(\"mycol\", { capped : true, autoIndexId : true, size : \n   6142800, max : 10000 } )\n{ \"ok\" : 1 }\n>\n```\n\n在 MongoDB 中，当你插入一些文档时，MongoDB 会自动创建集合。\n\n### 删除集合\n\n语法：  \n\n```c\ndb.collection.drop()\n```\n\n如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。\n\n### 插入文档\n\n文档的数据结构和 JSON 基本一样。  \n所有存储在集合中的数据都是 BSON 格式。  \nBSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。\n\n语法：  \n\n```\ndb.COLLECTION_NAME.insert(document)\n或\ndb.COLLECTION_NAME.save(document)\n```\n\n+ save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。\n+ insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。\n\n3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。\n\ndb.collection.insertOne() 用于向集合插入一个新文档，语法格式如下：\n\n```\ndb.collection.insertOne(\n   <document>,\n   {\n      writeConcern: <document>\n   }\n)\n```\n\ndb.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：\n\n```\ndb.collection.insertMany(\n   [ <document 1> , <document 2>, ... ],\n   {\n      writeConcern: <document>,\n      ordered: <boolean>\n   }\n)\n```\n\n+ document：要写入的文档。\n+ writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。\n+ ordered：指定是否按顺序写入，默认 true，按顺序写入。\n\n我们也可以将数据定义为一个变量，如下所示：\n\n```js\ndocument=({title: 'MongoDB', \n    description: 'MongoDB 是一个 Nosql 数据库',\n    by: 'blog',\n    url: 'http://www.bravogohome.top',\n    tags: ['mongodb', 'database', 'NoSQL'],\n    likes: 100\n});\n```\n\n执行后显示结果如下：\n\n```json\n// 1\n{\n    \"title\": \"MongoDB\",\n    \"description\": \"MongoDB 是一个 Nosql 数据库\",\n    \"by\": \"blog\",\n    \"url\": \"http://www.bravogohome.top\",\n    \"tags\": [\n        \"mongodb\",\n        \"database\",\n        \"NoSQL\"\n    ],\n    \"likes\": 100\n}\n```\n\n执行插入操作：  \n\n```\ndb.testcollection.insert(document)\n```\n\n### 查询文档\n\n语法：  \n\n```\ndb.collection.find(query, projection)\n```\n\n+ query ：可选，使用查询操作符指定查询条件\n+ projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：\n\n> db.col.find().pretty()\n\npretty() 方法以格式化的方式来显示所有文档。\n\n如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：\n\n| 操作 | 格式 | 范例 | RDBMS中的类似语句 |\n| :-- | :--: | :---- | :----- |\n| 等于 | {&lt;key>:&lt;value>} | db.col.find({\"name\":\"name1\"}).pretty() | where name = 'name1' |\n| 小于 | {&lt;key>:{$lt:&lt;value>}} | db.col.find({\"likes\":{$lt:50}}).pretty() | where likes < 50 |\n| 小于或等于 | {&lt;key>:{$lte:&lt;value>}} | db.col.find({\"likes\":{$lte:50}}).pretty() | where likes <= 50 |\n| 大于 | {&lt;key>:{$gt:&lt;value>}} | db.col.find({\"likes\":{$gt:50}}).pretty() | where likes > 50 |\n| 大于或等于 | {&lt;key>:{$gte:&lt;value>}} | db.col.find({\"likes\":{$gte:50}}).pretty() | where likes >= 50 |\n| 不等于 | {&lt;key>:{$ne:&lt;value>}} | db.col.find({\"likes\":{$ne:50}}).pretty() | where likes != 50 |\n\nMongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。\n\n语法格式如下：\n\n> db.col.find({key1:value1, key2:value2}).pretty()\n\nMongoDB OR 条件语句使用了关键字 $or,语法格式如下：\n\n```cpp\ndb.col.find(\n   {\n      $or: [\n         {key1: value1}, {key2:value2}\n      ]\n   }\n).pretty()\n```\n\n### 更新文档\n\nMongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。\n\nupdate() 方法用于更新已存在的文档。语法格式如下：\n\n```cpp\ndb.collection.update(\n   <query>,\n   <update>,\n   {\n     upsert: <boolean>,\n     multi: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：\n\n+ query : update的查询条件，类似sql update查询内where后面的。\n+ update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n+ upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n+ multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n+ writeConcern :可选，抛出异常的级别。\n\n实例：  \n\n```cpp\ndb.coll2.update({\"title\":\"MongoDB\"},{$set:{\"likes\":\"0\"}})\n```\n\n> db.collection.updateOne() 向指定集合更新单个文档\n> db.collection.updateMany() 向指定集合更新多个文档\n\nsave() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：\n\n```cpp\ndb.collection.save(\n   <document>,\n   {\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：\n\n+ document : 文档数据。\n+ writeConcern :可选，抛出异常的级别。\n\n### 删除文档\n\nMongoDB remove() 函数是用来移除集合中的数据。\n\nMongoDB 数据更新可以使用 update() 函数。在执行 remove() 函数前先执行 find() 命令来判断执行的条件是否正确，这是一个比较好的习惯。\n\n语法：  \n\n```cpp\ndb.collection.remove(\n   <query>,\n   {\n     justOne: <boolean>,\n     writeConcern: <document>\n   }\n)\n```\n\n参数说明：  \n\n+ query :（可选）删除的文档的条件。\n+ justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n+ writeConcern :（可选）抛出异常的级别。\n\n如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：\n\n> db.col.remove({})\n\nremove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。\n\n如删除集合下全部文档：\n\n```\ndb.inventory.deleteMany({})\n```\n\n删除 status 等于 A 的全部文档：\n\n```\ndb.inventory.deleteMany({ status : \"A\" })\n```\n\n删除 status 等于 D 的一个文档：\n\n```\ndb.inventory.deleteOne( { status: \"D\" } )\n```\n\n## MongoDB条件操作符\n\n条件操作符用于比较两个表达式并从mongoDB集合中获取数据。\n\n在本章节中，我们将讨论如何在MongoDB中使用条件操作符。\n\nMongoDB中条件操作符有：\n\n+ (>) 大于 - $gt\n+ (<) 小于 - $lt\n+ (>=) 大于等于 - $gte\n+ (<= ) 小于等于 - $lte\n+ (!=) 不等于 - $ne\n+ 特殊操作符 - $type\n\n`MongoDB $type操作符`\n\n\\$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。\n\nMongoDB 中可以使用的类型如下表所示：\n\n| 类型 | 数字 | 备注 |\n| :--- | :----: | :---- |\n| Double | 1 | |\n| String | 2 | |\n| Object | 3 | |\n| Array | 4\t| |\n| Binary data | 5 |\n| Undefined | 6 | 已废弃。 |\n| Object id | 7 |\t|\n| Boolean | 8 |\t| \n| Date | 9 |  |\n| Null | 10 | | \n| Regular Expression | 11 | |\n| JavaScript | 13 | |\n| Symbol | 14 | |\n| JavaScript (with scope) | 15 |\t| \n| 32-bit integer | 16 |\t | \n| Timestamp | 17\t| | \n| 64-bit integer | 18 |  |\n| Min key | 255 | Query with -1 |\n| Max key | 127 | | \n\n如果想获取 \"col\" 集合中 title 为 String 的数据，你可以使用以下命令：\n\n```\ndb.col.find({\"title\" : {$type : 2}})\n或\ndb.col.find({\"title\" : {$type : 'string'}})\n```\n\n## MongoDB Limit与SKip方法\n\n### Limit()\n\n如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。\n\n语法:  \n\n```\ndb.COLLECTION_NAME.find().limit(NUMBER)\n```\n\n> 如果你们没有指定limit()方法中的参数则显示集合中的所有数据。\n\n### Skip()\n\n我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。\n\n语法:   \n\n```\ndb.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)\n```\n\n> skip()方法默认参数为 0 。\n\n## MongoDB排序\n\n在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。\n\n语法：  \n\n```\ndb.COLLECTION_NAME.find().sort({KEY:1})\n```\n\n> skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。\n\n## MongoDB索引\n\n索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。  \n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。  \n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。  \n\n### 创建索引\n\nMongoDB使用 createIndex() 方法来创建索引。\n\n语法：  \n\n```\ndb.collection.createIndex(keys, options)\n```\n\n语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。  \ncreateIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。\n\ncreateIndex() 接收可选参数，可选参数列表如下：\n\n| Parameter | Type | Description |\n| :----- | :----- | :------------ |\n| background | Boolean | 建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 \"background\" 可选参数。 \"background\" 默认值为false。 |\n| unique | Boolean | 建立的索引是否唯一。指定为true创建唯一索引。默认值为false. |\n| name | string | 索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。 |\n| dropDups | Boolean | 3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false. |\n| sparse | Boolean | 对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false. |\n| expireAfterSeconds | integer | 指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。 |\n| v | index version | 索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。 |\n| weights | document | 索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。 |\n| default_language | string | 对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语 |\n| language_override | string | 对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language. |\n\n### 查看集合索引\n\n```\ndb.col.getIndexes()\n```\n\n### 查看集合索引大小\n\n```\ndb.col.totalIndexSize()\n```\n\n### 删除集合所有索引\n\n```\ndb.col.dropIndexes()\n```\n\n### 删除集合指定索引\n\n```\ndb.col.dropIndex(\"索引名称\")\n```\n\n## MongoDB聚合\n\nMongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。  \n有点类似 SQL 语句中的 count(*)。\n\n### aggregate()\n\n语法：  \n\n```\ndb.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)\n```\n\n下表展示了一些聚合的表达式:\n\n| 表达式 | 描述 | 实例 |\n| :---- | :------- | :--------- |\n| $sum | 计算总和。 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : \"$likes\"}}}]) |\n| $avg | 计算平均值 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$avg : \"$likes\"}}}]) |\n| $min | 获取集合中所有文档对应值得最小值。 | db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$min : \"$likes\"}}}]) |\n| $max | 获取集合中所有文档对应值得最大值。\tdb.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$max : \"$likes\"}}}]) |\n| $push | 将值加入一个数组中，不会判断是否有重复的值。\t | db.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$push: \"$url\"}}}]) |\n| $addToSet | 将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。 | \tdb.mycol.aggregate([{$group : {_id : \"$by_user\", url : {$addToSet : \"$url\"}}}]) |\n| $first | 根据资源文档的排序获取第一个文档数据。 |  db.mycol.aggregate([{$group : {_id : \"$by_user\", first_url : {$first : \"$url\"}}}]) |\n| $last | 根据资源文档的排序获取最后一个文档数据 | db.mycol.aggregate([{$group : {_id : \"$by_user\", last_url : {$last : \"$url\"}}}]) |\n\n### 管道的概念\n\n管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。  \nMongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。  \n表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。  \n\n这里我们介绍一下聚合框架中常用的几个操作：  \n\n+ $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。\n+ $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。\n+ $limit：用来限制MongoDB聚合管道返回的文档数。\n+ $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。\n+ $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。\n+ $group：将集合中的文档分组，可用于统计结果。\n+ $sort：将输入文档排序后输出。\n+ $geoNear：输出接近某一地理位置的有序文档。\n\n管道操作符实例\n\n1、$project实例\n\n```c\ndb.article.aggregate(\n    { $project : {\n        title : 1 ,\n        author : 1 ,\n    }}\n );\n```\n\n这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:\n\n```c\ndb.article.aggregate(\n    { $project : {\n        _id : 0 ,\n        title : 1 ,\n        author : 1\n    }});\n```\n\n2、$match实例\n\n```c\ndb.articles.aggregate( [\n                        { $match : { score : { $gt : 70, $lte : 90 } } },\n                        { $group: { _id: null, count: { $sum: 1 } } }\n                       ] );\n```\n\n$match用于获取分数大于70且小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。\n\n3、$skip实例\n\n```c\ndb.article.aggregate(\n    { $skip : 5 });\n```\n\n经过$skip管道操作符处理后，前五个文档被\"过滤\"掉。\n\n## MongoDB复制（副本集）\n\nMongoDB复制是将数据同步在多个服务器的过程。  \n复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。  \n复制还允许您从硬件故障和服务中断中恢复数据。\n\n\n***什么是复制?***\n\n+ 保障数据的安全性\n+ 数据高可用性 (24*7)\n+ 灾难恢复\n+ 无需停机维护（如备份，重建索引，压缩）\n+ 分布式读取数据\n\n### MongoDB复制原理\n\nmongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。  \nmongodb各个节点常见的搭配方式为：一主一从、一主多从。  \n主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。  \nMongoDB复制结构图如下所示：\n\n![mongodb复制原理.png](mongodb复制原理.png)\n\n以上结构图中，客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性。\n\n副本集特征：\n\n+ N个节点的集群\n+ 任何节点可作为主节点\n+ 所有写入操作都在主节点上\n+ 自动故障转移\n+ 自动恢复\n\n### MongoDB副本集设置\n\n在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：\n\n1. 关闭正在运行的MongoDB服务器。\n\n2. 我们通过指定 --replSet 选项来启动mongoDB。--replSet 基本语法格式如下：\n```bash\nmongod --port \"PORT\" --dbpath \"YOUR_DB_DATA_PATH\" --replSet \"REPLICA_SET_INSTANCE_NAME\"\n```\n> 实例  \n> mongod --port 27017 --dbpath \"D:\\set up\\mongodb\\data\" --replSet rs0  \n> 以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。\n\n3. 启动后打开命令提示框并连接上mongoDB服务。  \n在Mongo客户端使用命令rs.initiate()来启动一个新的副本集。  \n我们可以使用rs.conf()来查看副本集的配置  \n查看副本集状态使用 rs.status() 命令\n\n### 副本集添加成员\n\n添加副本集的成员，我们需要使用多台服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。\n\n语法:  \n\n```\nrs.add(HOST_NAME:PORT)\n```\n\n实例:   \n假设你已经启动了一个名为 mongod1.net ，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：\n\n```\nrs.add(\"mongod1.net:27017\")\n```\n\nMongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。  \nMongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。\n\n## MongoDB分片\n\n### 分片\n\n在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。  \n当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。\n\n### 为什么使用分片\n\n+ 复制所有的写入操作到主节点\n+ 延迟的敏感数据会在主节点查询\n+ 单个副本集限制在12个节点\n+ 当请求量巨大时会出现内存不足。\n+ 本地磁盘不足\n+ 垂直扩展价格昂贵\n\n### MongoDB分片\n下图展示了在MongoDB中使用分片集群结构分布：\n\n![mongodb分片集群结构分布](mongodb分片集群结构分布.png)\n\n上图中主要有如下所述三个主要组件：\n\nShard:  \n用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障\n\nConfig Server:  \nmongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息。\n\nQuery Routers:  \n前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。\n\n## MongoDB 备份(mongodump)与恢复(mongorestore)\n\n### MongoDB数据备份\n\n在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。  \nmongodump命令可以通过参数指定导出的数据量级转存的服务器。\n\n语法：  \n\n```\nmongodump -h dbhost -d dbname -o dbdirectory\n```\n\n-h：  \nMongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017\n\n-d：  \n需要备份的数据库实例，例如：test\n\n-o：  \n备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。\n\n\nmongodump 命令可选参数列表如下所示：  \n\n| 语法 | 描述 | 实例 |\n| :---- | :---- | :------ |\n| mongodump --host HOST_NAME --port PORT_NUMBER | 该命令将备份所有MongoDB数据 | mongodump --host 127.0.0.1 --port 27017 |\n| mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY |  | mongodump --dbpath /data/db/ --out /data/backup/ |\n| mongodump --collection COLLECTION --db DB_NAME | 该命令将备份指定数据库的集合。 | mongodump --collection mycol --db test |\n\n\n### MongoDB数据恢复\n\nmongodb使用 mongorestore 命令来恢复备份的数据。\n\n语法:  \n\n```\nmongorestore -h <hostname><:port> -d dbname <path>\n```\n\n--host &lt;:port>, -h &lt;:port>：\nMongoDB所在服务器地址，默认为： localhost:27017\n\n--db , -d ：\n需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2\n\n--drop：\n恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！\n\n&lt;path>：\nmongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。\n\n你不能同时指定 &lt;path> 和 --dir 选项，--dir也可以设置备份目录。\n\n--dir：\n指定备份的目录\n\n你不能同时指定 &lt;path> 和 --dir 选项。\n\n\n## MongoDB 监控\n\n在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。\n\nMongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。\n\n### mongostat 命令\n\nmongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。\n\n启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongostat命令\n\n### mongotop 命令\n\nmongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。\n\n启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongotop命令\n\n\n## MongoDB 关系\n\nMongoDB 的关系表示多个文档之间在逻辑上的相互联系。  \n文档间可以通过嵌入和引用来建立联系。  \nMongoDB 中的关系可以是：\n\n+ 1:1 (1对1)\n+ 1: N (1对多)\n+ N: 1 (多对1)\n+ N: N (多对多)\n\n接下来我们来考虑下用户与用户地址的关系。  \n一个用户可以有多个地址，所以是一对多的关系。  \n以下是 user 文档的简单结构：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"name\": \"Tom Hanks\",\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\"\n}\n```\n\n以下是 address 文档的简单结构：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc4a5d85242602e000000\"),\n   \"building\": \"22 A, Indiana Apt\",\n   \"pincode\": 123456,\n   \"city\": \"Los Angeles\",\n   \"state\": \"California\"\n} \n```\n\n### 嵌入式关系\n\n使用嵌入式方法，我们可以把用户地址嵌入到用户的文档中：\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\",\n   \"address\": [\n      {\n         \"building\": \"22 A, Indiana Apt\",\n         \"pincode\": 123456,\n         \"city\": \"Los Angeles\",\n         \"state\": \"California\"\n      },\n      {\n         \"building\": \"170 A, Acropolis Apt\",\n         \"pincode\": 456789,\n         \"city\": \"Chicago\",\n         \"state\": \"Illinois\"\n      }]\n} \n```\n\n以上数据保存在单一的文档中，可以比较容易的获取和维护数据。 你可以这样查询用户的地址：\n\n>db.users.findOne({\"name\":\"Tom Benzamin\"},{\"address\":1})\n\n这种数据结构的缺点是，如果用户和用户地址在不断增加，数据量不断变大，会影响读写性能。\n\n\n### 引用式关系\n\n引用式关系是设计数据库时经常用到的方法，这种方法把用户数据文档和用户地址数据文档分开，通过引用文档的 id 字段来建立关系。\n\n```json\n{\n   \"_id\":ObjectId(\"52ffc33cd85242f436000001\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\",\n   \"address_ids\": [\n      ObjectId(\"52ffc4a5d85242602e000000\"),\n      ObjectId(\"52ffc4a5d85242602e000001\")\n   ]\n}\n```\n\n以上实例中，用户文档的 address_ids 字段包含用户地址的对象id（ObjectId）数组。  \n我们可以读取这些用户地址的对象id（ObjectId）来获取用户的详细地址信息。  \n这种方法需要两次查询，第一次查询用户地址的对象id（ObjectId），第二次通过查询的id获取用户的详细地址信息。\n\n```cpp\nvar result = db.users.findOne({\"name\":\"Tom Benzamin\"},{\"address_ids\":1})\nvar addresses = db.address.find({\"_id\":{\"$in\":result[\"address_ids\"]}})\n```\n\n> 注意这一句中的 findOne 不能写成 find，因为 find 返回的数据类型是数组，findOne 返回的数据类型是对象。  \n> 如果这一句使用了 find，那么下面一句应该改写为:  \n> var addresses = db.address.find({\"_id\":{\"$in\":result[0][\"address_ids\"]}})\n\n## MongoDB 数据库引用\n\n在上一章节MongoDB关系中我们提到了MongoDB的引用来规范数据结构文档。\n\nMongoDB 引用有两种：\n\n+ 手动引用（Manual References）\n+ DBRefs\n\n考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。  \n这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。\n\n### 使用 DBRefs\n\nDBRef的形式：\n\n```\n{ $ref : , $id : , $db :  }\n```\n\n三个字段表示的意义为：\n\n+ $ref：集合名称\n+ $id：引用的id\n+ $db: 数据库名称，可选参数\n\n以下实例中用户数据文档使用了 DBRef, 字段 address：\n\n```json\n{\n   \"_id\":ObjectId(\"53402597d852426020000002\"),\n   \"address\": {\n   \"$ref\": \"address_home\",\n   \"$id\": ObjectId(\"534009e4d852427820000002\"),\n   \"$db\": \"testdb\"},\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"name\": \"Tom Benzamin\"\n}\n```\n\naddress DBRef 字段指定了引用的地址文档是在 testdb 数据库下的 address_home 集合，id 为 534009e4d852427820000002。  \n以下代码中，我们通过指定 $ref 参数（address_home 集合）来查找集合中指定id的用户地址信息：  \n\n```cpp\nvar user = db.users.findOne({\"name\":\"Tom Benzamin\"})\nvar dbRef = user.address\ndb[dbRef.$ref].findOne({\"_id\":(dbRef.$id)})\n```\n\n> db[dbRef.$ref].findOne({\"\\_id\":ObjectId(dbRef.$id)})\n\n以上实例返回了 address_home 集合中的地址数据：\n\n```json\n{\n   \"_id\" : ObjectId(\"534009e4d852427820000002\"),\n   \"building\" : \"22 A, Indiana Apt\",\n   \"pincode\" : 123456,\n   \"city\" : \"Los Angeles\",\n   \"state\" : \"California\"\n}\n```\n\n## MongoDB 覆盖索引查询\n\n官方的MongoDB的文档中说明，覆盖查询是以下的查询：\n\n+ 所有的查询字段是索引的一部分\n+ 所有的查询返回字段在同一个索引中\n\n由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。  \n因为索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多。\n\n### 使用覆盖索引查询\n\n为了测试覆盖索引查询，使用以下 users 集合:\n\n```json\n{\n   \"_id\": ObjectId(\"53402597d852426020000002\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"gender\": \"M\",\n   \"name\": \"Tom Benzamin\",\n   \"user_name\": \"tombenzamin\"\n}\n```\n\n我们在 users 集合中创建联合索引，字段为 gender 和 user_name :\n\n```c\ndb.users.createIndex({gender:1,user_name:1})\n```\n\n现在，该索引会覆盖以下查询：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0})\n```\n\n也就是说，对于上述查询，MongoDB的不会去数据库文件中查找。相反，它会从索引中提取数据，这是非常快速的数据查询。  \n由于我们的索引中不包括 \\_id 字段，\\_id在查询中会默认返回，我们可以在MongoDB的查询结果集中排除它。  \n下面的实例没有排除_id，查询就不会被覆盖：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1})\n```\n\n最后，如果是以下的查询，不能使用覆盖索引查询：\n\n+ 所有索引字段是一个数组\n+ 所有索引字段是一个子文档\n\n## MongoDB 查询分析\n\nMongoDB 查询分析可以确保我们所建立的索引是否有效，是查询语句性能分析的重要工具。   \nMongoDB 查询分析常用函数有：explain() 和 hint()。\n\n### explain()\n\nexplain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。  \n接下来我们在 users 集合中创建 gender 和 user_name 的索引：\n\n```c\ndb.users.ensureIndex({gender:1,user_name:1})\n```\n\n现在在查询语句中使用 explain ：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).explain()\n```\n\n以上的 explain() 查询返回如下结果：\n\n```c\n{\n   \"cursor\" : \"BtreeCursor gender_1_user_name_1\",\n   \"isMultiKey\" : false,\n   \"n\" : 1,\n   \"nscannedObjects\" : 0,\n   \"nscanned\" : 1,\n   \"nscannedObjectsAllPlans\" : 0,\n   \"nscannedAllPlans\" : 1,\n   \"scanAndOrder\" : false,\n   \"indexOnly\" : true,\n   \"nYields\" : 0,\n   \"nChunkSkips\" : 0,\n   \"millis\" : 0,\n   \"indexBounds\" : {\n      \"gender\" : [\n         [\n            \"M\",\n            \"M\"\n         ]\n      ],\n      \"user_name\" : [\n         [\n            {\n               \"$minElement\" : 1\n            },\n            {\n               \"$maxElement\" : 1\n            }\n         ]\n      ]\n   }\n}\n```\n\n现在，我们看看这个结果集的字段：\n\n+ indexOnly: 字段为 true ，表示我们使用了索引。\n+ cursor：因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。\n+ n：当前查询返回的文档数量。\n+ nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。\n+ millis：当前查询所需时间，毫秒数。\n+ indexBounds：当前查询具体使用的索引。\n\n### hint()\n\n虽然MongoDB查询优化器一般工作的很不错，但是也可以使用 hint 来强制 MongoDB 使用一个指定的索引。  \n这种方法某些情形下会提升性能。 一个有索引的 collection 并且执行一个多字段的查询(一些字段已经索引了)。  \n如下查询实例指定了使用 gender 和 user_name 索引字段来查询：  \n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).hint({gender:1,user_name:1})\n```\n\n可以使用 explain() 函数来分析以上查询：\n\n```c\ndb.users.find({gender:\"M\"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()\n```\n\n## MongoDB 原子操作\n\nmongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。  \n但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。  \n所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。\n\n### 原子操作数据模型\n\n考虑下面的例子，图书馆的书籍及结账信息。  \n实例说明了在一个相同的文档中如何确保嵌入字段关联原子操作（update：更新）的字段是同步的。\n\n```json\nbook = {\n          _id: 123456789,\n          title: \"MongoDB: The Definitive Guide\",\n          author: [ \"Kristina Chodorow\", \"Mike Dirolf\" ],\n          published_date: ISODate(\"2010-09-24\"),\n          pages: 216,\n          language: \"English\",\n          publisher_id: \"oreilly\",\n          available: 3,\n          checkout: [ { by: \"joe\", date: ISODate(\"2012-10-15\") } ]\n        }\n```\n\n你可以使用 db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。  \n在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:\n\n\n","slug":"MongoDB","published":1,"updated":"2022-03-22T12:15:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0x000mwwvo77n892ey","content":"<h2 id=\"MongoDB简介\">MongoDB简介</h2>\n<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<p><strong>非关系型数据库NoSQL</strong></p>\n<p>NoSQL(NoSQL = Not Only SQL )，意即&quot;不仅仅是SQL&quot;。</p>\n<p>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p>\n<p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p>\n<p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p>\n<p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>\n<p><strong>MongoDB</strong></p>\n<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>\n在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>\nMongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<p>MongoDB下载： <a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a></p>\n<p><strong>MongoDB的主要特点</strong></p>\n<ul>\n<li>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</li>\n<li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=“Sameer”,Address=“8 Gandhi Road”)来实现更快的排序。</li>\n<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>\n<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>\n<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>\n<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>\n<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>\n<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>\n<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>\n<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>\n<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>\n<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>\n<li>MongoDB安装简单。</li>\n</ul>\n<h2 id=\"MongoDB概念解析\">MongoDB概念解析</h2>\n<p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。<br>\n下表将帮助您更容易理解Mongo中的一些概念：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SQL术语/概念</th>\n<th style=\"text-align:left\">MongoDB术语/概念</th>\n<th style=\"text-align:left\">解释/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">collection</td>\n<td style=\"text-align:left\">数据库表/集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">数据记录行/文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">column</td>\n<td style=\"text-align:left\">field</td>\n<td style=\"text-align:left\">数据字段/域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">joins</td>\n<td style=\"text-align:left\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<p>通过下图实例，我们也可以更直观的了解Mongo中的一些概念：</p>\n<p><img src=\"Figure-1-Mapping-Table-to-Collection-1.png\" alt=\"表与MongoDB\"></p>\n<h3 id=\"数据库\">数据库</h3>\n<p>一个mongodb中可以建立多个数据库。<br>\nMongoDB的默认数据库为&quot;db&quot;，该数据库存储在data目录中。<br>\nMongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>\n<p>“show dbs” 命令可以显示所有数据的列表。<br>\n“db” 命令可显示当前数据库对象或集合</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（“”)。</li>\n<li>不得含有’ '（空格)、.、$、/、\\和\\0 (空字符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<ul>\n<li>admin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li>local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li>config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<h3 id=\"集合\">集合</h3>\n<p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。<br>\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。<br>\n比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;site&quot;</span>:<span class=\"string\">&quot;www.baidu.com&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">&quot;site&quot;</span>:<span class=\"string\">&quot;www.google.com&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Google&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当第一个文档插入时，集合就会被创建。</p>\n<p><code>合法的集合名</code></p>\n<ul>\n<li>集合名不能是空字符串&quot;&quot;。</li>\n<li>集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。</li>\n<li>集合名不能以&quot;system.&quot;开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。</li>\n</ul>\n<p><code>capped collections</code><br>\nCapped collections 就是固定大小的collection。<br>\n它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。<br>\nCapped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能。和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。<br>\nCapped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。<br>\n由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 <a href=\"http://oplog.rs\">oplog.rs</a> 就是利用 Capped Collection 来实现的。<br>\n要注意的是指定的存储大小包含了数据库的头信息。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(<span class=\"string\">&quot;mycoll&quot;</span>, &#123;capped:<span class=\"literal\">true</span>, size:<span class=\"number\">100000</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 capped collection 中，你能添加新的对象。</li>\n<li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li>\n<li>使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。</li>\n<li>删除之后，你必须显式的重新创建这个 collection。</li>\n<li>在32bit机器中，capped collection 最大存储为 1e9( 1*10^9)个字节。</li>\n</ul>\n<h3 id=\"文档\">文档</h3>\n<p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>文档中的键/值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ul>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有\\0 (空字符)。这个字符用来表示键的结尾。</li>\n<li>.和$有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线&quot;_&quot;开头的键是保留的(不是严格要求的)。</li>\n</ul>\n<h3 id=\"元数据\">元数据</h3>\n<p>数据库的信息是存储在集合中。它们使用了系统的命名空间：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbname.<span class=\"keyword\">system</span>.*</span><br></pre></td></tr></table></figure>\n<p>在MongoDB数据库中名字空间 &lt;dbname&gt;.system.* 是包含多种系统信息的特殊集合(Collection)，如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">集合命名空间</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dbname.system.namespaces</td>\n<td style=\"text-align:left\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.indexes</td>\n<td style=\"text-align:left\">列出所有索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.profile</td>\n<td style=\"text-align:left\">包含数据库概要(profile)信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.users</td>\n<td style=\"text-align:left\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.local.sources</td>\n<td style=\"text-align:left\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody>\n</table>\n<p>对于修改系统集合中的对象有如下限制。<br>\n在插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p>\n是可修改的。 是可删除的。\n<h2 id=\"MongoDB-数据类型\">MongoDB 数据类型</h2>\n<p>下表为MongoDB中常用的几种数据类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">布尔值。用于存储布尔值（真/假）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Min/Max keys</td>\n<td style=\"text-align:left\">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Array</td>\n<td style=\"text-align:left\">用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:left\">时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">用于内嵌文档。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Null</td>\n<td style=\"text-align:left\">用于创建空值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Symbol</td>\n<td style=\"text-align:left\">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object ID</td>\n<td style=\"text-align:left\">对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Binary Data</td>\n<td style=\"text-align:left\">二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Code</td>\n<td style=\"text-align:left\">代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Regular expression</td>\n<td style=\"text-align:left\">正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody>\n</table>\n<p>下面说明下几种重要的数据类型。</p>\n<p><code>ObjectId</code></p>\n<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>\n<ul>\n<li>前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li>\n<li>接下来的 3 个字节是机器标识码</li>\n<li>紧接的两个字节由进程 id 组成 PID</li>\n<li>最后三个字节是随机数</li>\n</ul>\n<p><img src=\"ObjectId.jpeg\" alt=\"ObjectId\"></p>\n<p>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>\n<p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var newObject = ObjectId()</span><br><span class=\"line\">&gt; newObject.getTimestamp()</span><br><span class=\"line\">ISODate(<span class=\"string\">&quot;2022-03-23T06:31:09.000Z&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>ObjectId 转为字符串</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; newObject.str</span><br><span class=\"line\"><span class=\"number\">623</span>abece277b0000e1003d84</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB可视化工具\">MongoDB可视化工具</h2>\n<p>MongoDB可视化工具软件有很多，推荐三款正在使用的：</p>\n<ul>\n<li>navicat</li>\n<li>mongo campass</li>\n<li>robo3T</li>\n</ul>\n<h2 id=\"MongoDB数据库操作\">MongoDB数据库操作</h2>\n<h3 id=\"创建数据库\">创建数据库</h3>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use DATABASE_NAME</span><br></pre></td></tr></table></figure>\n<p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use testdb</span><br><span class=\"line\">switched to db testdb</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">testdb</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>如果你想查看所有数据库，可以使用 show dbs 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt; </span><br></pre></td></tr></table></figure>\n<p>可以看到，我们刚创建的数据库 newTestDB 并不在数据库的列表中， 要显示它，我们需要向 newTestDB 数据库插入一些数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.collection1.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;value&quot;</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">WriteResult(&#123; <span class=\"string\">&quot;nInserted&quot;</span> : <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">config  <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">local   <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">testdb  <span class=\"number\">0.000</span>GB</span><br></pre></td></tr></table></figure>\n<p>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</p>\n<blockquote>\n<p>注意: 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。</p>\n</blockquote>\n<h3 id=\"删除数据库\">删除数据库</h3>\n<p>语法：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase<span class=\"comment\">()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建集合\">创建集合</h3>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.create<span class=\"constructor\">Collection(<span class=\"params\">name</span>, <span class=\"params\">options</span>)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>name: 要创建的集合名称</li>\n<li>options: 可选参数, 指定有关内存大小及索引的选项\n<ul>\n<li>capped: 布尔类型，如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</li>\n<li>size: 数值，为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。</li>\n<li>max: 数值，指定固定集合中包含文档的最大数量。</li>\n</ul>\n</li>\n</ul>\n<p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。</p>\n<p>如果要查看已有集合，可以使用 <code>show collections</code> 或 <code>show tables</code> 命令：</p>\n<p>下面是带有几个关键参数的 createCollection() 的用法：<br>\n创建固定集合 mycol，整个集合空间大小 6142800 B, 文档最大个数为 10000 个。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;mycol&quot;</span>, &#123; capped : <span class=\"literal\">true</span>, autoIndexId : <span class=\"literal\">true</span>, size : </span><br><span class=\"line\">   <span class=\"number\">6142800</span>, max : <span class=\"number\">10000</span> &#125; )</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;ok&quot;</span> : <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>在 MongoDB 中，当你插入一些文档时，MongoDB 会自动创建集合。</p>\n<h3 id=\"删除集合\">删除集合</h3>\n<p>语法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.drop()</span><br></pre></td></tr></table></figure>\n<p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p>\n<h3 id=\"插入文档\">插入文档</h3>\n<p>文档的数据结构和 JSON 基本一样。<br>\n所有存储在集合中的数据都是 BSON 格式。<br>\nBSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。</p>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>insert(document)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>save(document)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。</li>\n<li>insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。</li>\n</ul>\n<p>3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。</p>\n<p>db.collection.insertOne() 用于向集合插入一个新文档，语法格式如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.insertOne(</span><br><span class=\"line\">   <span class=\"params\">&lt;document&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"symbol\">      writeConcern:</span> <span class=\"params\">&lt;document&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>db.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.insertMany(</span><br><span class=\"line\">   [ <span class=\"params\">&lt;document <span class=\"number\">1</span>&gt;</span> , <span class=\"params\">&lt;document <span class=\"number\">2</span>&gt;</span>, ... ],</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"symbol\">      writeConcern:</span> <span class=\"params\">&lt;document&gt;</span>,</span><br><span class=\"line\"><span class=\"symbol\">      ordered:</span> <span class=\"params\">&lt;boolean&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>document：要写入的文档。</li>\n<li>writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。</li>\n<li>ordered：指定是否按顺序写入，默认 true，按顺序写入。</li>\n</ul>\n<p>我们也可以将数据定义为一个变量，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>=(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;MongoDB&#x27;</span>, </span><br><span class=\"line\">    description: <span class=\"string\">&#x27;MongoDB 是一个 Nosql 数据库&#x27;</span>,</span><br><span class=\"line\">    by: <span class=\"string\">&#x27;blog&#x27;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;http://www.bravogohome.top&#x27;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&#x27;mongodb&#x27;</span>, <span class=\"string\">&#x27;database&#x27;</span>, <span class=\"string\">&#x27;NoSQL&#x27;</span>],</span><br><span class=\"line\">    likes: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行后显示结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;MongoDB&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;MongoDB 是一个 Nosql 数据库&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;by&quot;</span>: <span class=\"string\">&quot;blog&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://www.bravogohome.top&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tags&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;mongodb&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;database&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;NoSQL&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;likes&quot;</span>: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行插入操作：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.testcollection</span><span class=\"selector-class\">.insert</span>(document)</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询文档\">查询文档</h3>\n<p>语法：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"builtin-name\">find</span>(query, projection)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>query ：可选，使用查询操作符指定查询条件</li>\n<li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p>\n<blockquote>\n<p>db.col.find().pretty()</p>\n</blockquote>\n<p>pretty() 方法以格式化的方式来显示所有文档。</p>\n<p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:left\">范例</th>\n<th style=\"text-align:left\">RDBMS中的类似语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:&lt;value&gt;}</td>\n<td style=\"text-align:left\">db.col.find({“name”:“name1”}).pretty()</td>\n<td style=\"text-align:left\">where name = ‘name1’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$lt:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$lt:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &lt; 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于或等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$lte:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$lte:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &lt;= 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$gt:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$gt:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &gt; 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于或等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$gte:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$gte:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &gt;= 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$ne:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$ne:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes != 50</td>\n</tr>\n</tbody>\n</table>\n<p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p>\n<p>语法格式如下：</p>\n<blockquote>\n<p>db.col.find({key1:value1, key2:value2}).pretty()</p>\n</blockquote>\n<p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.<span class=\"built_in\">find</span>(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $<span class=\"keyword\">or</span>: [</span><br><span class=\"line\">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">).<span class=\"built_in\">pretty</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新文档\">更新文档</h3>\n<p>MongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。</p>\n<p>update() 方法用于更新已存在的文档。语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">update</span>(</span><br><span class=\"line\">   &lt;query&gt;,</span><br><span class=\"line\">   &lt;update&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     multi: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>query : update的查询条件，类似sql update查询内where后面的。</li>\n<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li>\n<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>\n<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li>writeConcern :可选，抛出异常的级别。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.coll2.<span class=\"built_in\">update</span>(&#123;<span class=\"string\">&quot;title&quot;</span>:<span class=\"string\">&quot;MongoDB&quot;</span>&#125;,&#123;$set:&#123;<span class=\"string\">&quot;likes&quot;</span>:<span class=\"string\">&quot;0&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>db.collection.updateOne() 向指定集合更新单个文档<br>\ndb.collection.updateMany() 向指定集合更新多个文档</p>\n</blockquote>\n<p>save() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">save</span>(</span><br><span class=\"line\">   &lt;document&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>document : 文档数据。</li>\n<li>writeConcern :可选，抛出异常的级别。</li>\n</ul>\n<h3 id=\"删除文档\">删除文档</h3>\n<p>MongoDB remove() 函数是用来移除集合中的数据。</p>\n<p>MongoDB 数据更新可以使用 update() 函数。在执行 remove() 函数前先执行 find() 命令来判断执行的条件是否正确，这是一个比较好的习惯。</p>\n<p>语法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">remove</span>(</span><br><span class=\"line\">   &lt;query&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     justOne: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>query :（可选）删除的文档的条件。</li>\n<li>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li>\n<li>writeConcern :（可选）抛出异常的级别。</li>\n</ul>\n<p>如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：</p>\n<blockquote>\n<p>db.col.remove({})</p>\n</blockquote>\n<p>remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。</p>\n<p>如删除集合下全部文档：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.inventory</span><span class=\"selector-class\">.deleteMany</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>删除 status 等于 A 的全部文档：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.delete<span class=\"constructor\">Many(&#123; <span class=\"params\">status</span> : <span class=\"string\">&quot;A&quot;</span> &#125;)</span></span><br></pre></td></tr></table></figure>\n<p>删除 status 等于 D 的一个文档：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.delete<span class=\"constructor\">One( &#123; <span class=\"params\">status</span>: <span class=\"string\">&quot;D&quot;</span> &#125; )</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB条件操作符\">MongoDB条件操作符</h2>\n<p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p>\n<p>在本章节中，我们将讨论如何在MongoDB中使用条件操作符。</p>\n<p>MongoDB中条件操作符有：</p>\n<ul>\n<li>(&gt;) 大于 - $gt</li>\n<li>(&lt;) 小于 - $lt</li>\n<li>(&gt;=) 大于等于 - $gte</li>\n<li>(&lt;= ) 小于等于 - $lte</li>\n<li>(!=) 不等于 - $ne</li>\n<li>特殊操作符 - $type</li>\n</ul>\n<p><code>MongoDB $type操作符</code></p>\n<p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p>\n<p>MongoDB 中可以使用的类型如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:center\">数字</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Array</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Binary data</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Undefined</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">已废弃。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object id</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Null</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Regular Expression</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Symbol</td>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript (with scope)</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">32-bit integer</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64-bit integer</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Min key</td>\n<td style=\"text-align:center\">255</td>\n<td style=\"text-align:left\">Query with -1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Max key</td>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>如果想获取 “col” 集合中 title 为 String 的数据，你可以使用以下命令：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.<span class=\"builtin-name\">find</span>(&#123;<span class=\"string\">&quot;title&quot;</span> : &#123;<span class=\"variable\">$type</span> : 2&#125;&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.col.<span class=\"builtin-name\">find</span>(&#123;<span class=\"string\">&quot;title&quot;</span> : &#123;<span class=\"variable\">$type</span> : <span class=\"string\">&#x27;string&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-Limit与SKip方法\">MongoDB Limit与SKip方法</h2>\n<h3 id=\"Limit\">Limit()</h3>\n<p>如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</p>\n<p>语法:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(NUMBER)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你们没有指定limit()方法中的参数则显示集合中的所有数据。</p>\n</blockquote>\n<h3 id=\"Skip\">Skip()</h3>\n<p>我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>\n<p>语法:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(NUMBER)<span class=\"selector-class\">.skip</span>(NUMBER)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>skip()方法默认参数为 0 。</p>\n</blockquote>\n<h2 id=\"MongoDB排序\">MongoDB排序</h2>\n<p>在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p>\n<p>语法：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.sort</span>(&#123;KEY:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</p>\n</blockquote>\n<h2 id=\"MongoDB索引\">MongoDB索引</h2>\n<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。<br>\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。<br>\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。</p>\n<h3 id=\"创建索引\">创建索引</h3>\n<p>MongoDB使用 createIndex() 方法来创建索引。</p>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.create<span class=\"constructor\">Index(<span class=\"params\">keys</span>, <span class=\"params\">options</span>)</span></span><br></pre></td></tr></table></figure>\n<p>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。<br>\ncreateIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。</p>\n<p>createIndex() 接收可选参数，可选参数列表如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Parameter</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">background</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unique</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dropDups</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sparse</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">expireAfterSeconds</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\">index version</td>\n<td style=\"text-align:left\">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">weights</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default_language</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">language_override</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查看集合索引\">查看集合索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.getIndexes</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看集合索引大小\">查看集合索引大小</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.totalIndexSize</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除集合所有索引\">删除集合所有索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.dropIndexes</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除集合指定索引\">删除集合指定索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.dropIndex</span>(<span class=\"string\">&quot;索引名称&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB聚合\">MongoDB聚合</h2>\n<p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。<br>\n有点类似 SQL 语句中的 count(*)。</p>\n<h3 id=\"aggregate\">aggregate()</h3>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure>\n<p>下表展示了一些聚合的表达式:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表达式</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">$sum</td>\n<td style=\"text-align:left\">计算总和。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$avg</td>\n<td style=\"text-align:left\">计算平均值</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$min</td>\n<td style=\"text-align:left\">获取集合中所有文档对应值得最小值。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$max</td>\n<td style=\"text-align:left\">获取集合中所有文档对应值得最大值。\tdb.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$push</td>\n<td style=\"text-align:left\">将值加入一个数组中，不会判断是否有重复的值。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$addToSet</td>\n<td style=\"text-align:left\">将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$first</td>\n<td style=\"text-align:left\">根据资源文档的排序获取第一个文档数据。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$last</td>\n<td style=\"text-align:left\">根据资源文档的排序获取最后一个文档数据</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"管道的概念\">管道的概念</h3>\n<p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。<br>\nMongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。<br>\n表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p>\n<p>这里我们介绍一下聚合框架中常用的几个操作：</p>\n<ul>\n<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li>\n<li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li>\n<li>$limit：用来限制MongoDB聚合管道返回的文档数。</li>\n<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li>\n<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>\n<li>$group：将集合中的文档分组，可用于统计结果。</li>\n<li>$sort：将输入文档排序后输出。</li>\n<li>$geoNear：输出接近某一地理位置的有序文档。</li>\n</ul>\n<p>管道操作符实例</p>\n<p>1、$project实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $project : &#123;</span><br><span class=\"line\">        title : <span class=\"number\">1</span> ,</span><br><span class=\"line\">        author : <span class=\"number\">1</span> ,</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n<p>这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $project : &#123;</span><br><span class=\"line\">        _id : <span class=\"number\">0</span> ,</span><br><span class=\"line\">        title : <span class=\"number\">1</span> ,</span><br><span class=\"line\">        author : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>2、$match实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.articles.aggregate( [</span><br><span class=\"line\">                        &#123; $match : &#123; score : &#123; $gt : <span class=\"number\">70</span>, $lte : <span class=\"number\">90</span> &#125; &#125; &#125;,</span><br><span class=\"line\">                        &#123; $group: &#123; _id: null, count: &#123; $sum: <span class=\"number\">1</span> &#125; &#125; &#125;</span><br><span class=\"line\">                       ] );</span><br></pre></td></tr></table></figure>\n<p>$match用于获取分数大于70且小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</p>\n<p>3、$skip实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $skip : <span class=\"number\">5</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>经过$skip管道操作符处理后，前五个文档被&quot;过滤&quot;掉。</p>\n<h2 id=\"MongoDB复制（副本集）\">MongoDB复制（副本集）</h2>\n<p>MongoDB复制是将数据同步在多个服务器的过程。<br>\n复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。<br>\n复制还允许您从硬件故障和服务中断中恢复数据。</p>\n<p><em><strong>什么是复制?</strong></em></p>\n<ul>\n<li>保障数据的安全性</li>\n<li>数据高可用性 (24*7)</li>\n<li>灾难恢复</li>\n<li>无需停机维护（如备份，重建索引，压缩）</li>\n<li>分布式读取数据</li>\n</ul>\n<h3 id=\"MongoDB复制原理\">MongoDB复制原理</h3>\n<p>mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。<br>\nmongodb各个节点常见的搭配方式为：一主一从、一主多从。<br>\n主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。<br>\nMongoDB复制结构图如下所示：</p>\n<p><img src=\"mongodb%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png\" alt=\"mongodb复制原理.png\"></p>\n<p>以上结构图中，客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性。</p>\n<p>副本集特征：</p>\n<ul>\n<li>N个节点的集群</li>\n<li>任何节点可作为主节点</li>\n<li>所有写入操作都在主节点上</li>\n<li>自动故障转移</li>\n<li>自动恢复</li>\n</ul>\n<h3 id=\"MongoDB副本集设置\">MongoDB副本集设置</h3>\n<p>在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：</p>\n<ol>\n<li>\n<p>关闭正在运行的MongoDB服务器。</p>\n</li>\n<li>\n<p>我们通过指定 --replSet 选项来启动mongoDB。–replSet 基本语法格式如下：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --port <span class=\"string\">&quot;PORT&quot;</span> --dbpath <span class=\"string\">&quot;YOUR_DB_DATA_PATH&quot;</span> --replSet <span class=\"string\">&quot;REPLICA_SET_INSTANCE_NAME&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实例<br>\nmongod --port 27017 --dbpath “D:\\set up\\mongodb\\data” --replSet rs0<br>\n以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。</p>\n</blockquote>\n<ol start=\"3\">\n<li>启动后打开命令提示框并连接上mongoDB服务。<br>\n在Mongo客户端使用命令rs.initiate()来启动一个新的副本集。<br>\n我们可以使用rs.conf()来查看副本集的配置<br>\n查看副本集状态使用 rs.status() 命令</li>\n</ol>\n<h3 id=\"副本集添加成员\">副本集添加成员</h3>\n<p>添加副本集的成员，我们需要使用多台服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。</p>\n<p>语法:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">rs</span><span class=\"selector-class\">.add</span>(<span class=\"attribute\">HOST_NAME</span>:PORT)</span><br></pre></td></tr></table></figure>\n<p>实例:<br>\n假设你已经启动了一个名为 <a href=\"http://mongod1.net\">mongod1.net</a> ，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs.<span class=\"builtin-name\">add</span>(<span class=\"string\">&quot;mongod1.net:27017&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>MongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。<br>\nMongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。</p>\n<h2 id=\"MongoDB分片\">MongoDB分片</h2>\n<h3 id=\"分片\">分片</h3>\n<p>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。<br>\n当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p>\n<h3 id=\"为什么使用分片\">为什么使用分片</h3>\n<ul>\n<li>复制所有的写入操作到主节点</li>\n<li>延迟的敏感数据会在主节点查询</li>\n<li>单个副本集限制在12个节点</li>\n<li>当请求量巨大时会出现内存不足。</li>\n<li>本地磁盘不足</li>\n<li>垂直扩展价格昂贵</li>\n</ul>\n<h3 id=\"MongoDB分片-2\">MongoDB分片</h3>\n<p>下图展示了在MongoDB中使用分片集群结构分布：</p>\n<p><img src=\"mongodb%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E7%BB%93%E6%9E%84%E5%88%86%E5%B8%83.png\" alt=\"mongodb分片集群结构分布\"></p>\n<p>上图中主要有如下所述三个主要组件：</p>\n<p>Shard:<br>\n用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障</p>\n<p>Config Server:<br>\nmongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息。</p>\n<p>Query Routers:<br>\n前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。</p>\n<h2 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\">MongoDB 备份(mongodump)与恢复(mongorestore)</h2>\n<h3 id=\"MongoDB数据备份\">MongoDB数据备份</h3>\n<p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。<br>\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<p>语法：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mongodump -h dbhost -d dbname -o dbdirectory</span></span><br></pre></td></tr></table></figure>\n<p>-h：<br>\nMongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n<p>-d：<br>\n需要备份的数据库实例，例如：test</p>\n<p>-o：<br>\n备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语法</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mongodump --host HOST_NAME --port PORT_NUMBER</td>\n<td style=\"text-align:left\">该命令将备份所有MongoDB数据</td>\n<td style=\"text-align:left\">mongodump --host 127.0.0.1 --port 27017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">mongodump --dbpath /data/db/ --out /data/backup/</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mongodump --collection COLLECTION --db DB_NAME</td>\n<td style=\"text-align:left\">该命令将备份指定数据库的集合。</td>\n<td style=\"text-align:left\">mongodump --collection mycol --db test</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MongoDB数据恢复\">MongoDB数据恢复</h3>\n<p>mongodb使用 mongorestore 命令来恢复备份的数据。</p>\n<p>语法:</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -h <span class=\"attribute\">&lt;hostname&gt;</span><span class=\"attribute\">&lt;:port&gt;</span> -d dbname <span class=\"attribute\">&lt;path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>–host &lt;:port&gt;, -h &lt;:port&gt;：<br>\nMongoDB所在服务器地址，默认为： localhost:27017</p>\n<p>–db , -d ：<br>\n需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n<p>–drop：<br>\n恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n<p>&lt;path&gt;：<br>\nmongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 &lt;path&gt; 和 --dir 选项，–dir也可以设置备份目录。</p>\n<p>–dir：<br>\n指定备份的目录</p>\n<p>你不能同时指定 &lt;path&gt; 和 --dir 选项。</p>\n<h2 id=\"MongoDB-监控\">MongoDB 监控</h2>\n<p>在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。</p>\n<p>MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。</p>\n<h3 id=\"mongostat-命令\">mongostat 命令</h3>\n<p>mongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。</p>\n<p>启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongostat命令</p>\n<h3 id=\"mongotop-命令\">mongotop 命令</h3>\n<p>mongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。</p>\n<p>启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongotop命令</p>\n<h2 id=\"MongoDB-关系\">MongoDB 关系</h2>\n<p>MongoDB 的关系表示多个文档之间在逻辑上的相互联系。<br>\n文档间可以通过嵌入和引用来建立联系。<br>\nMongoDB 中的关系可以是：</p>\n<ul>\n<li>1:1 (1对1)</li>\n<li>1: N (1对多)</li>\n<li>N: 1 (多对1)</li>\n<li>N: N (多对多)</li>\n</ul>\n<p>接下来我们来考虑下用户与用户地址的关系。<br>\n一个用户可以有多个地址，所以是一对多的关系。<br>\n以下是 user 文档的简单结构：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Hanks&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下是 address 文档的简单结构：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000000&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">123456</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入式关系\">嵌入式关系</h3>\n<p>使用嵌入式方法，我们可以把用户地址嵌入到用户的文档中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;address&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">123456</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;170 A, Acropolis Apt&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">456789</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Chicago&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;Illinois&quot;</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>以上数据保存在单一的文档中，可以比较容易的获取和维护数据。 你可以这样查询用户的地址：</p>\n<blockquote>\n<p>db.users.findOne({“name”:“Tom Benzamin”},{“address”:1})</p>\n</blockquote>\n<p>这种数据结构的缺点是，如果用户和用户地址在不断增加，数据量不断变大，会影响读写性能。</p>\n<h3 id=\"引用式关系\">引用式关系</h3>\n<p>引用式关系是设计数据库时经常用到的方法，这种方法把用户数据文档和用户地址数据文档分开，通过引用文档的 id 字段来建立关系。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;address_ids&quot;</span>: [</span><br><span class=\"line\">      ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000000&quot;</span>),</span><br><span class=\"line\">      ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000001&quot;</span>)</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上实例中，用户文档的 address_ids 字段包含用户地址的对象id（ObjectId）数组。<br>\n我们可以读取这些用户地址的对象id（ObjectId）来获取用户的详细地址信息。<br>\n这种方法需要两次查询，第一次查询用户地址的对象id（ObjectId），第二次通过查询的id获取用户的详细地址信息。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = db.users.<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;Tom Benzamin&quot;</span>&#125;,&#123;<span class=\"string\">&quot;address_ids&quot;</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">var addresses = db.address.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">&quot;_id&quot;</span>:&#123;<span class=\"string\">&quot;$in&quot;</span>:result[<span class=\"string\">&quot;address_ids&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这一句中的 findOne 不能写成 find，因为 find 返回的数据类型是数组，findOne 返回的数据类型是对象。<br>\n如果这一句使用了 find，那么下面一句应该改写为:<br>\nvar addresses = db.address.find({“_id”:{“$in”:result[0][“address_ids”]}})</p>\n</blockquote>\n<h2 id=\"MongoDB-数据库引用\">MongoDB 数据库引用</h2>\n<p>在上一章节MongoDB关系中我们提到了MongoDB的引用来规范数据结构文档。</p>\n<p>MongoDB 引用有两种：</p>\n<ul>\n<li>手动引用（Manual References）</li>\n<li>DBRefs</li>\n</ul>\n<p>考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。<br>\n这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。</p>\n<h3 id=\"使用-DBRefs\">使用 DBRefs</h3>\n<p>DBRef的形式：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; $ref : , $<span class=\"type\">id</span> : , $<span class=\"type\">db</span> :  &#125;</span><br></pre></td></tr></table></figure>\n<p>三个字段表示的意义为：</p>\n<ul>\n<li>$ref：集合名称</li>\n<li>$id：引用的id</li>\n<li>$db: 数据库名称，可选参数</li>\n</ul>\n<p>以下实例中用户数据文档使用了 DBRef, 字段 address：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;53402597d852426020000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;address&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;$ref&quot;</span>: <span class=\"string\">&quot;address_home&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;$id&quot;</span>: ObjectId(<span class=\"string\">&quot;534009e4d852427820000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;$db&quot;</span>: <span class=\"string\">&quot;testdb&quot;</span>&#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>address DBRef 字段指定了引用的地址文档是在 testdb 数据库下的 address_home 集合，id 为 534009e4d852427820000002。<br>\n以下代码中，我们通过指定 $ref 参数（address_home 集合）来查找集合中指定id的用户地址信息：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user = db.users.<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;Tom Benzamin&quot;</span>&#125;)</span><br><span class=\"line\">var dbRef = user.address</span><br><span class=\"line\">db[dbRef.$ref].<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;_id&quot;</span>:(dbRef.$id)&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>db[dbRef.$ref].findOne({“_id”:ObjectId(dbRef.$id)})</p>\n</blockquote>\n<p>以上实例返回了 address_home 集合中的地址数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;534009e4d852427820000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;building&quot;</span> : <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;pincode&quot;</span> : <span class=\"number\">123456</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;city&quot;</span> : <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-覆盖索引查询\">MongoDB 覆盖索引查询</h2>\n<p>官方的MongoDB的文档中说明，覆盖查询是以下的查询：</p>\n<ul>\n<li>所有的查询字段是索引的一部分</li>\n<li>所有的查询返回字段在同一个索引中</li>\n</ul>\n<p>由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。<br>\n因为索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多。</p>\n<h3 id=\"使用覆盖索引查询\">使用覆盖索引查询</h3>\n<p>为了测试覆盖索引查询，使用以下 users 集合:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>: ObjectId(<span class=\"string\">&quot;53402597d852426020000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;gender&quot;</span>: <span class=\"string\">&quot;M&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;user_name&quot;</span>: <span class=\"string\">&quot;tombenzamin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在 users 集合中创建联合索引，字段为 gender 和 user_name :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.createIndex(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在，该索引会覆盖以下查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>也就是说，对于上述查询，MongoDB的不会去数据库文件中查找。相反，它会从索引中提取数据，这是非常快速的数据查询。<br>\n由于我们的索引中不包括 _id 字段，_id在查询中会默认返回，我们可以在MongoDB的查询结果集中排除它。<br>\n下面的实例没有排除_id，查询就不会被覆盖：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>最后，如果是以下的查询，不能使用覆盖索引查询：</p>\n<ul>\n<li>所有索引字段是一个数组</li>\n<li>所有索引字段是一个子文档</li>\n</ul>\n<h2 id=\"MongoDB-查询分析\">MongoDB 查询分析</h2>\n<p>MongoDB 查询分析可以确保我们所建立的索引是否有效，是查询语句性能分析的重要工具。<br>\nMongoDB 查询分析常用函数有：explain() 和 hint()。</p>\n<h3 id=\"explain\">explain()</h3>\n<p>explain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。<br>\n接下来我们在 users 集合中创建 gender 和 user_name 的索引：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.ensureIndex(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在在查询语句中使用 explain ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).explain()</span><br></pre></td></tr></table></figure>\n<p>以上的 explain() 查询返回如下结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;cursor&quot;</span> : <span class=\"string\">&quot;BtreeCursor gender_1_user_name_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;isMultiKey&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;n&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedObjects&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscanned&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedObjectsAllPlans&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedAllPlans&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;scanAndOrder&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;indexOnly&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nYields&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nChunkSkips&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;millis&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;indexBounds&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;gender&quot;</span> : [</span><br><span class=\"line\">         [</span><br><span class=\"line\">            <span class=\"string\">&quot;M&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;M&quot;</span></span><br><span class=\"line\">         ]</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">&quot;user_name&quot;</span> : [</span><br><span class=\"line\">         [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;$minElement&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;$maxElement&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们看看这个结果集的字段：</p>\n<ul>\n<li>indexOnly: 字段为 true ，表示我们使用了索引。</li>\n<li>cursor：因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。</li>\n<li>n：当前查询返回的文档数量。</li>\n<li>nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。</li>\n<li>millis：当前查询所需时间，毫秒数。</li>\n<li>indexBounds：当前查询具体使用的索引。</li>\n</ul>\n<h3 id=\"hint\">hint()</h3>\n<p>虽然MongoDB查询优化器一般工作的很不错，但是也可以使用 hint 来强制 MongoDB 使用一个指定的索引。<br>\n这种方法某些情形下会提升性能。 一个有索引的 collection 并且执行一个多字段的查询(一些字段已经索引了)。<br>\n如下查询实例指定了使用 gender 和 user_name 索引字段来查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).hint(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以使用 explain() 函数来分析以上查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).hint(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;).explain()</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-原子操作\">MongoDB 原子操作</h2>\n<p>mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。<br>\n但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。<br>\n所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。</p>\n<h3 id=\"原子操作数据模型\">原子操作数据模型</h3>\n<p>考虑下面的例子，图书馆的书籍及结账信息。<br>\n实例说明了在一个相同的文档中如何确保嵌入字段关联原子操作（update：更新）的字段是同步的。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = &#123;</span><br><span class=\"line\">          _id: 123456789,</span><br><span class=\"line\">          title: &quot;MongoDB: The Definitive Guide&quot;,</span><br><span class=\"line\">          author: [ &quot;Kristina Chodorow&quot;, &quot;Mike Dirolf&quot; ],</span><br><span class=\"line\">          published_date: ISODate(&quot;2010-09-24&quot;),</span><br><span class=\"line\">          pages: 216,</span><br><span class=\"line\">          language: &quot;English&quot;,</span><br><span class=\"line\">          publisher_id: &quot;oreilly&quot;,</span><br><span class=\"line\">          available: 3,</span><br><span class=\"line\">          checkout: [ &#123; by: &quot;joe&quot;, date: ISODate(&quot;2012-10-15&quot;) &#125; ]</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>你可以使用 db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。<br>\n在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MongoDB简介\">MongoDB简介</h2>\n<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<p><strong>非关系型数据库NoSQL</strong></p>\n<p>NoSQL(NoSQL = Not Only SQL )，意即&quot;不仅仅是SQL&quot;。</p>\n<p>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p>\n<p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p>\n<p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p>\n<p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>\n<p><strong>MongoDB</strong></p>\n<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>\n在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>\nMongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>\nMongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<p>MongoDB下载： <a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a></p>\n<p><strong>MongoDB的主要特点</strong></p>\n<ul>\n<li>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</li>\n<li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=“Sameer”,Address=“8 Gandhi Road”)来实现更快的排序。</li>\n<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>\n<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>\n<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>\n<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>\n<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>\n<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>\n<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>\n<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>\n<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>\n<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>\n<li>MongoDB安装简单。</li>\n</ul>\n<h2 id=\"MongoDB概念解析\">MongoDB概念解析</h2>\n<p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。<br>\n下表将帮助您更容易理解Mongo中的一些概念：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SQL术语/概念</th>\n<th style=\"text-align:left\">MongoDB术语/概念</th>\n<th style=\"text-align:left\">解释/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">collection</td>\n<td style=\"text-align:left\">数据库表/集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">数据记录行/文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">column</td>\n<td style=\"text-align:left\">field</td>\n<td style=\"text-align:left\">数据字段/域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">joins</td>\n<td style=\"text-align:left\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<p>通过下图实例，我们也可以更直观的了解Mongo中的一些概念：</p>\n<p><img src=\"Figure-1-Mapping-Table-to-Collection-1.png\" alt=\"表与MongoDB\"></p>\n<h3 id=\"数据库\">数据库</h3>\n<p>一个mongodb中可以建立多个数据库。<br>\nMongoDB的默认数据库为&quot;db&quot;，该数据库存储在data目录中。<br>\nMongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>\n<p>“show dbs” 命令可以显示所有数据的列表。<br>\n“db” 命令可显示当前数据库对象或集合</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（“”)。</li>\n<li>不得含有’ '（空格)、.、$、/、\\和\\0 (空字符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>\n<ul>\n<li>admin： 从权限的角度来看，这是&quot;root&quot;数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li>local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li>config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<h3 id=\"集合\">集合</h3>\n<p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。<br>\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。<br>\n比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;site&quot;</span>:<span class=\"string\">&quot;www.baidu.com&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">&quot;site&quot;</span>:<span class=\"string\">&quot;www.google.com&quot;</span>,<span class=\"attr\">&quot;name&quot;</span>:<span class=\"string\">&quot;Google&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当第一个文档插入时，集合就会被创建。</p>\n<p><code>合法的集合名</code></p>\n<ul>\n<li>集合名不能是空字符串&quot;&quot;。</li>\n<li>集合名不能含有\\0字符（空字符)，这个字符表示集合名的结尾。</li>\n<li>集合名不能以&quot;system.&quot;开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。</li>\n</ul>\n<p><code>capped collections</code><br>\nCapped collections 就是固定大小的collection。<br>\n它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。<br>\nCapped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能。和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。<br>\nCapped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。<br>\n由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 <a href=\"http://oplog.rs\">oplog.rs</a> 就是利用 Capped Collection 来实现的。<br>\n要注意的是指定的存储大小包含了数据库的头信息。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(<span class=\"string\">&quot;mycoll&quot;</span>, &#123;capped:<span class=\"literal\">true</span>, size:<span class=\"number\">100000</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 capped collection 中，你能添加新的对象。</li>\n<li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li>\n<li>使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。</li>\n<li>删除之后，你必须显式的重新创建这个 collection。</li>\n<li>在32bit机器中，capped collection 最大存储为 1e9( 1*10^9)个字节。</li>\n</ul>\n<h3 id=\"文档\">文档</h3>\n<p>文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>文档中的键/值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ul>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有\\0 (空字符)。这个字符用来表示键的结尾。</li>\n<li>.和$有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线&quot;_&quot;开头的键是保留的(不是严格要求的)。</li>\n</ul>\n<h3 id=\"元数据\">元数据</h3>\n<p>数据库的信息是存储在集合中。它们使用了系统的命名空间：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbname.<span class=\"keyword\">system</span>.*</span><br></pre></td></tr></table></figure>\n<p>在MongoDB数据库中名字空间 &lt;dbname&gt;.system.* 是包含多种系统信息的特殊集合(Collection)，如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">集合命名空间</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dbname.system.namespaces</td>\n<td style=\"text-align:left\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.indexes</td>\n<td style=\"text-align:left\">列出所有索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.profile</td>\n<td style=\"text-align:left\">包含数据库概要(profile)信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.users</td>\n<td style=\"text-align:left\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.local.sources</td>\n<td style=\"text-align:left\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody>\n</table>\n<p>对于修改系统集合中的对象有如下限制。<br>\n在插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p>\n是可修改的。 是可删除的。\n<h2 id=\"MongoDB-数据类型\">MongoDB 数据类型</h2>\n<p>下表为MongoDB中常用的几种数据类型。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">布尔值。用于存储布尔值（真/假）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Min/Max keys</td>\n<td style=\"text-align:left\">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Array</td>\n<td style=\"text-align:left\">用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:left\">时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">用于内嵌文档。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Null</td>\n<td style=\"text-align:left\">用于创建空值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Symbol</td>\n<td style=\"text-align:left\">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object ID</td>\n<td style=\"text-align:left\">对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Binary Data</td>\n<td style=\"text-align:left\">二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Code</td>\n<td style=\"text-align:left\">代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Regular expression</td>\n<td style=\"text-align:left\">正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody>\n</table>\n<p>下面说明下几种重要的数据类型。</p>\n<p><code>ObjectId</code></p>\n<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>\n<ul>\n<li>前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li>\n<li>接下来的 3 个字节是机器标识码</li>\n<li>紧接的两个字节由进程 id 组成 PID</li>\n<li>最后三个字节是随机数</li>\n</ul>\n<p><img src=\"ObjectId.jpeg\" alt=\"ObjectId\"></p>\n<p>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>\n<p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var newObject = ObjectId()</span><br><span class=\"line\">&gt; newObject.getTimestamp()</span><br><span class=\"line\">ISODate(<span class=\"string\">&quot;2022-03-23T06:31:09.000Z&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>ObjectId 转为字符串</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; newObject.str</span><br><span class=\"line\"><span class=\"number\">623</span>abece277b0000e1003d84</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB可视化工具\">MongoDB可视化工具</h2>\n<p>MongoDB可视化工具软件有很多，推荐三款正在使用的：</p>\n<ul>\n<li>navicat</li>\n<li>mongo campass</li>\n<li>robo3T</li>\n</ul>\n<h2 id=\"MongoDB数据库操作\">MongoDB数据库操作</h2>\n<h3 id=\"创建数据库\">创建数据库</h3>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use DATABASE_NAME</span><br></pre></td></tr></table></figure>\n<p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use testdb</span><br><span class=\"line\">switched to db testdb</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">testdb</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>如果你想查看所有数据库，可以使用 show dbs 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt; </span><br></pre></td></tr></table></figure>\n<p>可以看到，我们刚创建的数据库 newTestDB 并不在数据库的列表中， 要显示它，我们需要向 newTestDB 数据库插入一些数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.collection1.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;value&quot;</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">WriteResult(&#123; <span class=\"string\">&quot;nInserted&quot;</span> : <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">config  <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">local   <span class=\"number\">0.000</span>GB</span><br><span class=\"line\">testdb  <span class=\"number\">0.000</span>GB</span><br></pre></td></tr></table></figure>\n<p>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</p>\n<blockquote>\n<p>注意: 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。</p>\n</blockquote>\n<h3 id=\"删除数据库\">删除数据库</h3>\n<p>语法：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase<span class=\"comment\">()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建集合\">创建集合</h3>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.create<span class=\"constructor\">Collection(<span class=\"params\">name</span>, <span class=\"params\">options</span>)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>name: 要创建的集合名称</li>\n<li>options: 可选参数, 指定有关内存大小及索引的选项\n<ul>\n<li>capped: 布尔类型，如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</li>\n<li>size: 数值，为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。</li>\n<li>max: 数值，指定固定集合中包含文档的最大数量。</li>\n</ul>\n</li>\n</ul>\n<p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。</p>\n<p>如果要查看已有集合，可以使用 <code>show collections</code> 或 <code>show tables</code> 命令：</p>\n<p>下面是带有几个关键参数的 createCollection() 的用法：<br>\n创建固定集合 mycol，整个集合空间大小 6142800 B, 文档最大个数为 10000 个。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;mycol&quot;</span>, &#123; capped : <span class=\"literal\">true</span>, autoIndexId : <span class=\"literal\">true</span>, size : </span><br><span class=\"line\">   <span class=\"number\">6142800</span>, max : <span class=\"number\">10000</span> &#125; )</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;ok&quot;</span> : <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>在 MongoDB 中，当你插入一些文档时，MongoDB 会自动创建集合。</p>\n<h3 id=\"删除集合\">删除集合</h3>\n<p>语法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.drop()</span><br></pre></td></tr></table></figure>\n<p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p>\n<h3 id=\"插入文档\">插入文档</h3>\n<p>文档的数据结构和 JSON 基本一样。<br>\n所有存储在集合中的数据都是 BSON 格式。<br>\nBSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。</p>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>insert(document)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>save(document)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。</li>\n<li>insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。</li>\n</ul>\n<p>3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。</p>\n<p>db.collection.insertOne() 用于向集合插入一个新文档，语法格式如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.insertOne(</span><br><span class=\"line\">   <span class=\"params\">&lt;document&gt;</span>,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"symbol\">      writeConcern:</span> <span class=\"params\">&lt;document&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>db.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.insertMany(</span><br><span class=\"line\">   [ <span class=\"params\">&lt;document <span class=\"number\">1</span>&gt;</span> , <span class=\"params\">&lt;document <span class=\"number\">2</span>&gt;</span>, ... ],</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"symbol\">      writeConcern:</span> <span class=\"params\">&lt;document&gt;</span>,</span><br><span class=\"line\"><span class=\"symbol\">      ordered:</span> <span class=\"params\">&lt;boolean&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>document：要写入的文档。</li>\n<li>writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。</li>\n<li>ordered：指定是否按顺序写入，默认 true，按顺序写入。</li>\n</ul>\n<p>我们也可以将数据定义为一个变量，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>=(&#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;MongoDB&#x27;</span>, </span><br><span class=\"line\">    description: <span class=\"string\">&#x27;MongoDB 是一个 Nosql 数据库&#x27;</span>,</span><br><span class=\"line\">    by: <span class=\"string\">&#x27;blog&#x27;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;http://www.bravogohome.top&#x27;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&#x27;mongodb&#x27;</span>, <span class=\"string\">&#x27;database&#x27;</span>, <span class=\"string\">&#x27;NoSQL&#x27;</span>],</span><br><span class=\"line\">    likes: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>执行后显示结果如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span>: <span class=\"string\">&quot;MongoDB&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;MongoDB 是一个 Nosql 数据库&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;by&quot;</span>: <span class=\"string\">&quot;blog&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span>: <span class=\"string\">&quot;http://www.bravogohome.top&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tags&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;mongodb&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;database&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;NoSQL&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;likes&quot;</span>: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行插入操作：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.testcollection</span><span class=\"selector-class\">.insert</span>(document)</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询文档\">查询文档</h3>\n<p>语法：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"builtin-name\">find</span>(query, projection)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>query ：可选，使用查询操作符指定查询条件</li>\n<li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p>\n<blockquote>\n<p>db.col.find().pretty()</p>\n</blockquote>\n<p>pretty() 方法以格式化的方式来显示所有文档。</p>\n<p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:left\">范例</th>\n<th style=\"text-align:left\">RDBMS中的类似语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:&lt;value&gt;}</td>\n<td style=\"text-align:left\">db.col.find({“name”:“name1”}).pretty()</td>\n<td style=\"text-align:left\">where name = ‘name1’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$lt:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$lt:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &lt; 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于或等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$lte:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$lte:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &lt;= 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$gt:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$gt:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &gt; 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于或等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$gte:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$gte:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes &gt;= 50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不等于</td>\n<td style=\"text-align:center\">{&lt;key&gt;:{$ne:&lt;value&gt;}}</td>\n<td style=\"text-align:left\">db.col.find({“likes”:{$ne:50}}).pretty()</td>\n<td style=\"text-align:left\">where likes != 50</td>\n</tr>\n</tbody>\n</table>\n<p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p>\n<p>语法格式如下：</p>\n<blockquote>\n<p>db.col.find({key1:value1, key2:value2}).pretty()</p>\n</blockquote>\n<p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.<span class=\"built_in\">find</span>(</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $<span class=\"keyword\">or</span>: [</span><br><span class=\"line\">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">).<span class=\"built_in\">pretty</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新文档\">更新文档</h3>\n<p>MongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。</p>\n<p>update() 方法用于更新已存在的文档。语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">update</span>(</span><br><span class=\"line\">   &lt;query&gt;,</span><br><span class=\"line\">   &lt;update&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     multi: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>query : update的查询条件，类似sql update查询内where后面的。</li>\n<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li>\n<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>\n<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li>writeConcern :可选，抛出异常的级别。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.coll2.<span class=\"built_in\">update</span>(&#123;<span class=\"string\">&quot;title&quot;</span>:<span class=\"string\">&quot;MongoDB&quot;</span>&#125;,&#123;$set:&#123;<span class=\"string\">&quot;likes&quot;</span>:<span class=\"string\">&quot;0&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>db.collection.updateOne() 向指定集合更新单个文档<br>\ndb.collection.updateMany() 向指定集合更新多个文档</p>\n</blockquote>\n<p>save() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">save</span>(</span><br><span class=\"line\">   &lt;document&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>document : 文档数据。</li>\n<li>writeConcern :可选，抛出异常的级别。</li>\n</ul>\n<h3 id=\"删除文档\">删除文档</h3>\n<p>MongoDB remove() 函数是用来移除集合中的数据。</p>\n<p>MongoDB 数据更新可以使用 update() 函数。在执行 remove() 函数前先执行 find() 命令来判断执行的条件是否正确，这是一个比较好的习惯。</p>\n<p>语法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.<span class=\"built_in\">remove</span>(</span><br><span class=\"line\">   &lt;query&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     justOne: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>query :（可选）删除的文档的条件。</li>\n<li>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li>\n<li>writeConcern :（可选）抛出异常的级别。</li>\n</ul>\n<p>如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：</p>\n<blockquote>\n<p>db.col.remove({})</p>\n</blockquote>\n<p>remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。</p>\n<p>如删除集合下全部文档：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.inventory</span><span class=\"selector-class\">.deleteMany</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>删除 status 等于 A 的全部文档：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.delete<span class=\"constructor\">Many(&#123; <span class=\"params\">status</span> : <span class=\"string\">&quot;A&quot;</span> &#125;)</span></span><br></pre></td></tr></table></figure>\n<p>删除 status 等于 D 的一个文档：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.delete<span class=\"constructor\">One( &#123; <span class=\"params\">status</span>: <span class=\"string\">&quot;D&quot;</span> &#125; )</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB条件操作符\">MongoDB条件操作符</h2>\n<p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p>\n<p>在本章节中，我们将讨论如何在MongoDB中使用条件操作符。</p>\n<p>MongoDB中条件操作符有：</p>\n<ul>\n<li>(&gt;) 大于 - $gt</li>\n<li>(&lt;) 小于 - $lt</li>\n<li>(&gt;=) 大于等于 - $gte</li>\n<li>(&lt;= ) 小于等于 - $lte</li>\n<li>(!=) 不等于 - $ne</li>\n<li>特殊操作符 - $type</li>\n</ul>\n<p><code>MongoDB $type操作符</code></p>\n<p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p>\n<p>MongoDB 中可以使用的类型如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:center\">数字</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Array</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Binary data</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Undefined</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">已废弃。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object id</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Null</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Regular Expression</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Symbol</td>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript (with scope)</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">32-bit integer</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64-bit integer</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Min key</td>\n<td style=\"text-align:center\">255</td>\n<td style=\"text-align:left\">Query with -1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Max key</td>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>如果想获取 “col” 集合中 title 为 String 的数据，你可以使用以下命令：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.<span class=\"builtin-name\">find</span>(&#123;<span class=\"string\">&quot;title&quot;</span> : &#123;<span class=\"variable\">$type</span> : 2&#125;&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">db.col.<span class=\"builtin-name\">find</span>(&#123;<span class=\"string\">&quot;title&quot;</span> : &#123;<span class=\"variable\">$type</span> : <span class=\"string\">&#x27;string&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-Limit与SKip方法\">MongoDB Limit与SKip方法</h2>\n<h3 id=\"Limit\">Limit()</h3>\n<p>如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</p>\n<p>语法:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(NUMBER)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你们没有指定limit()方法中的参数则显示集合中的所有数据。</p>\n</blockquote>\n<h3 id=\"Skip\">Skip()</h3>\n<p>我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>\n<p>语法:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(NUMBER)<span class=\"selector-class\">.skip</span>(NUMBER)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>skip()方法默认参数为 0 。</p>\n</blockquote>\n<h2 id=\"MongoDB排序\">MongoDB排序</h2>\n<p>在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p>\n<p>语法：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.COLLECTION_NAME</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.sort</span>(&#123;KEY:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。</p>\n</blockquote>\n<h2 id=\"MongoDB索引\">MongoDB索引</h2>\n<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。<br>\n这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。<br>\n索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。</p>\n<h3 id=\"创建索引\">创建索引</h3>\n<p>MongoDB使用 createIndex() 方法来创建索引。</p>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.create<span class=\"constructor\">Index(<span class=\"params\">keys</span>, <span class=\"params\">options</span>)</span></span><br></pre></td></tr></table></figure>\n<p>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。<br>\ncreateIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。</p>\n<p>createIndex() 接收可选参数，可选参数列表如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Parameter</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">background</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unique</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dropDups</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sparse</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">expireAfterSeconds</td>\n<td style=\"text-align:left\">integer</td>\n<td style=\"text-align:left\">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\">index version</td>\n<td style=\"text-align:left\">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">weights</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default_language</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">language_override</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查看集合索引\">查看集合索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.getIndexes</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看集合索引大小\">查看集合索引大小</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.totalIndexSize</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除集合所有索引\">删除集合所有索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.dropIndexes</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除集合指定索引\">删除集合指定索引</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"selector-class\">.col</span><span class=\"selector-class\">.dropIndex</span>(<span class=\"string\">&quot;索引名称&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB聚合\">MongoDB聚合</h2>\n<p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。<br>\n有点类似 SQL 语句中的 count(*)。</p>\n<h3 id=\"aggregate\">aggregate()</h3>\n<p>语法：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">COLLECTION_NAME</span>.</span></span>aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure>\n<p>下表展示了一些聚合的表达式:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表达式</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">$sum</td>\n<td style=\"text-align:left\">计算总和。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$avg</td>\n<td style=\"text-align:left\">计算平均值</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$min</td>\n<td style=\"text-align:left\">获取集合中所有文档对应值得最小值。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$max</td>\n<td style=\"text-align:left\">获取集合中所有文档对应值得最大值。\tdb.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$push</td>\n<td style=\"text-align:left\">将值加入一个数组中，不会判断是否有重复的值。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$addToSet</td>\n<td style=\"text-align:left\">将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$first</td>\n<td style=\"text-align:left\">根据资源文档的排序获取第一个文档数据。</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$last</td>\n<td style=\"text-align:left\">根据资源文档的排序获取最后一个文档数据</td>\n<td style=\"text-align:left\">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"管道的概念\">管道的概念</h3>\n<p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。<br>\nMongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。<br>\n表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p>\n<p>这里我们介绍一下聚合框架中常用的几个操作：</p>\n<ul>\n<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li>\n<li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li>\n<li>$limit：用来限制MongoDB聚合管道返回的文档数。</li>\n<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li>\n<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>\n<li>$group：将集合中的文档分组，可用于统计结果。</li>\n<li>$sort：将输入文档排序后输出。</li>\n<li>$geoNear：输出接近某一地理位置的有序文档。</li>\n</ul>\n<p>管道操作符实例</p>\n<p>1、$project实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $project : &#123;</span><br><span class=\"line\">        title : <span class=\"number\">1</span> ,</span><br><span class=\"line\">        author : <span class=\"number\">1</span> ,</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n<p>这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $project : &#123;</span><br><span class=\"line\">        _id : <span class=\"number\">0</span> ,</span><br><span class=\"line\">        title : <span class=\"number\">1</span> ,</span><br><span class=\"line\">        author : <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>2、$match实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.articles.aggregate( [</span><br><span class=\"line\">                        &#123; $match : &#123; score : &#123; $gt : <span class=\"number\">70</span>, $lte : <span class=\"number\">90</span> &#125; &#125; &#125;,</span><br><span class=\"line\">                        &#123; $group: &#123; _id: null, count: &#123; $sum: <span class=\"number\">1</span> &#125; &#125; &#125;</span><br><span class=\"line\">                       ] );</span><br></pre></td></tr></table></figure>\n<p>$match用于获取分数大于70且小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</p>\n<p>3、$skip实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.article.aggregate(</span><br><span class=\"line\">    &#123; $skip : <span class=\"number\">5</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>经过$skip管道操作符处理后，前五个文档被&quot;过滤&quot;掉。</p>\n<h2 id=\"MongoDB复制（副本集）\">MongoDB复制（副本集）</h2>\n<p>MongoDB复制是将数据同步在多个服务器的过程。<br>\n复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。<br>\n复制还允许您从硬件故障和服务中断中恢复数据。</p>\n<p><em><strong>什么是复制?</strong></em></p>\n<ul>\n<li>保障数据的安全性</li>\n<li>数据高可用性 (24*7)</li>\n<li>灾难恢复</li>\n<li>无需停机维护（如备份，重建索引，压缩）</li>\n<li>分布式读取数据</li>\n</ul>\n<h3 id=\"MongoDB复制原理\">MongoDB复制原理</h3>\n<p>mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。<br>\nmongodb各个节点常见的搭配方式为：一主一从、一主多从。<br>\n主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。<br>\nMongoDB复制结构图如下所示：</p>\n<p><img src=\"mongodb%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png\" alt=\"mongodb复制原理.png\"></p>\n<p>以上结构图中，客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性。</p>\n<p>副本集特征：</p>\n<ul>\n<li>N个节点的集群</li>\n<li>任何节点可作为主节点</li>\n<li>所有写入操作都在主节点上</li>\n<li>自动故障转移</li>\n<li>自动恢复</li>\n</ul>\n<h3 id=\"MongoDB副本集设置\">MongoDB副本集设置</h3>\n<p>在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：</p>\n<ol>\n<li>\n<p>关闭正在运行的MongoDB服务器。</p>\n</li>\n<li>\n<p>我们通过指定 --replSet 选项来启动mongoDB。–replSet 基本语法格式如下：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --port <span class=\"string\">&quot;PORT&quot;</span> --dbpath <span class=\"string\">&quot;YOUR_DB_DATA_PATH&quot;</span> --replSet <span class=\"string\">&quot;REPLICA_SET_INSTANCE_NAME&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实例<br>\nmongod --port 27017 --dbpath “D:\\set up\\mongodb\\data” --replSet rs0<br>\n以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。</p>\n</blockquote>\n<ol start=\"3\">\n<li>启动后打开命令提示框并连接上mongoDB服务。<br>\n在Mongo客户端使用命令rs.initiate()来启动一个新的副本集。<br>\n我们可以使用rs.conf()来查看副本集的配置<br>\n查看副本集状态使用 rs.status() 命令</li>\n</ol>\n<h3 id=\"副本集添加成员\">副本集添加成员</h3>\n<p>添加副本集的成员，我们需要使用多台服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。</p>\n<p>语法:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">rs</span><span class=\"selector-class\">.add</span>(<span class=\"attribute\">HOST_NAME</span>:PORT)</span><br></pre></td></tr></table></figure>\n<p>实例:<br>\n假设你已经启动了一个名为 <a href=\"http://mongod1.net\">mongod1.net</a> ，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs.<span class=\"builtin-name\">add</span>(<span class=\"string\">&quot;mongod1.net:27017&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>MongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。<br>\nMongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。</p>\n<h2 id=\"MongoDB分片\">MongoDB分片</h2>\n<h3 id=\"分片\">分片</h3>\n<p>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。<br>\n当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p>\n<h3 id=\"为什么使用分片\">为什么使用分片</h3>\n<ul>\n<li>复制所有的写入操作到主节点</li>\n<li>延迟的敏感数据会在主节点查询</li>\n<li>单个副本集限制在12个节点</li>\n<li>当请求量巨大时会出现内存不足。</li>\n<li>本地磁盘不足</li>\n<li>垂直扩展价格昂贵</li>\n</ul>\n<h3 id=\"MongoDB分片-2\">MongoDB分片</h3>\n<p>下图展示了在MongoDB中使用分片集群结构分布：</p>\n<p><img src=\"mongodb%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4%E7%BB%93%E6%9E%84%E5%88%86%E5%B8%83.png\" alt=\"mongodb分片集群结构分布\"></p>\n<p>上图中主要有如下所述三个主要组件：</p>\n<p>Shard:<br>\n用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障</p>\n<p>Config Server:<br>\nmongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息。</p>\n<p>Query Routers:<br>\n前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。</p>\n<h2 id=\"MongoDB-备份-mongodump-与恢复-mongorestore\">MongoDB 备份(mongodump)与恢复(mongorestore)</h2>\n<h3 id=\"MongoDB数据备份\">MongoDB数据备份</h3>\n<p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。<br>\nmongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>\n<p>语法：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mongodump -h dbhost -d dbname -o dbdirectory</span></span><br></pre></td></tr></table></figure>\n<p>-h：<br>\nMongoDB 所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>\n<p>-d：<br>\n需要备份的数据库实例，例如：test</p>\n<p>-o：<br>\n备份的数据存放位置，例如：c:\\data\\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>\n<p>mongodump 命令可选参数列表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语法</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mongodump --host HOST_NAME --port PORT_NUMBER</td>\n<td style=\"text-align:left\">该命令将备份所有MongoDB数据</td>\n<td style=\"text-align:left\">mongodump --host 127.0.0.1 --port 27017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">mongodump --dbpath /data/db/ --out /data/backup/</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mongodump --collection COLLECTION --db DB_NAME</td>\n<td style=\"text-align:left\">该命令将备份指定数据库的集合。</td>\n<td style=\"text-align:left\">mongodump --collection mycol --db test</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MongoDB数据恢复\">MongoDB数据恢复</h3>\n<p>mongodb使用 mongorestore 命令来恢复备份的数据。</p>\n<p>语法:</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -h <span class=\"attribute\">&lt;hostname&gt;</span><span class=\"attribute\">&lt;:port&gt;</span> -d dbname <span class=\"attribute\">&lt;path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>–host &lt;:port&gt;, -h &lt;:port&gt;：<br>\nMongoDB所在服务器地址，默认为： localhost:27017</p>\n<p>–db , -d ：<br>\n需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>\n<p>–drop：<br>\n恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>\n<p>&lt;path&gt;：<br>\nmongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\\data\\dump\\test。</p>\n<p>你不能同时指定 &lt;path&gt; 和 --dir 选项，–dir也可以设置备份目录。</p>\n<p>–dir：<br>\n指定备份的目录</p>\n<p>你不能同时指定 &lt;path&gt; 和 --dir 选项。</p>\n<h2 id=\"MongoDB-监控\">MongoDB 监控</h2>\n<p>在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。</p>\n<p>MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。</p>\n<h3 id=\"mongostat-命令\">mongostat 命令</h3>\n<p>mongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。</p>\n<p>启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongostat命令</p>\n<h3 id=\"mongotop-命令\">mongotop 命令</h3>\n<p>mongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。</p>\n<p>启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongotop命令</p>\n<h2 id=\"MongoDB-关系\">MongoDB 关系</h2>\n<p>MongoDB 的关系表示多个文档之间在逻辑上的相互联系。<br>\n文档间可以通过嵌入和引用来建立联系。<br>\nMongoDB 中的关系可以是：</p>\n<ul>\n<li>1:1 (1对1)</li>\n<li>1: N (1对多)</li>\n<li>N: 1 (多对1)</li>\n<li>N: N (多对多)</li>\n</ul>\n<p>接下来我们来考虑下用户与用户地址的关系。<br>\n一个用户可以有多个地址，所以是一对多的关系。<br>\n以下是 user 文档的简单结构：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Hanks&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下是 address 文档的简单结构：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000000&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">123456</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入式关系\">嵌入式关系</h3>\n<p>使用嵌入式方法，我们可以把用户地址嵌入到用户的文档中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;address&quot;</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">123456</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"attr\">&quot;building&quot;</span>: <span class=\"string\">&quot;170 A, Acropolis Apt&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;pincode&quot;</span>: <span class=\"number\">456789</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;city&quot;</span>: <span class=\"string\">&quot;Chicago&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">&quot;state&quot;</span>: <span class=\"string\">&quot;Illinois&quot;</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>以上数据保存在单一的文档中，可以比较容易的获取和维护数据。 你可以这样查询用户的地址：</p>\n<blockquote>\n<p>db.users.findOne({“name”:“Tom Benzamin”},{“address”:1})</p>\n</blockquote>\n<p>这种数据结构的缺点是，如果用户和用户地址在不断增加，数据量不断变大，会影响读写性能。</p>\n<h3 id=\"引用式关系\">引用式关系</h3>\n<p>引用式关系是设计数据库时经常用到的方法，这种方法把用户数据文档和用户地址数据文档分开，通过引用文档的 id 字段来建立关系。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;52ffc33cd85242f436000001&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;address_ids&quot;</span>: [</span><br><span class=\"line\">      ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000000&quot;</span>),</span><br><span class=\"line\">      ObjectId(<span class=\"string\">&quot;52ffc4a5d85242602e000001&quot;</span>)</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上实例中，用户文档的 address_ids 字段包含用户地址的对象id（ObjectId）数组。<br>\n我们可以读取这些用户地址的对象id（ObjectId）来获取用户的详细地址信息。<br>\n这种方法需要两次查询，第一次查询用户地址的对象id（ObjectId），第二次通过查询的id获取用户的详细地址信息。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = db.users.<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;Tom Benzamin&quot;</span>&#125;,&#123;<span class=\"string\">&quot;address_ids&quot;</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">var addresses = db.address.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">&quot;_id&quot;</span>:&#123;<span class=\"string\">&quot;$in&quot;</span>:result[<span class=\"string\">&quot;address_ids&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这一句中的 findOne 不能写成 find，因为 find 返回的数据类型是数组，findOne 返回的数据类型是对象。<br>\n如果这一句使用了 find，那么下面一句应该改写为:<br>\nvar addresses = db.address.find({“_id”:{“$in”:result[0][“address_ids”]}})</p>\n</blockquote>\n<h2 id=\"MongoDB-数据库引用\">MongoDB 数据库引用</h2>\n<p>在上一章节MongoDB关系中我们提到了MongoDB的引用来规范数据结构文档。</p>\n<p>MongoDB 引用有两种：</p>\n<ul>\n<li>手动引用（Manual References）</li>\n<li>DBRefs</li>\n</ul>\n<p>考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。<br>\n这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。</p>\n<h3 id=\"使用-DBRefs\">使用 DBRefs</h3>\n<p>DBRef的形式：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; $ref : , $<span class=\"type\">id</span> : , $<span class=\"type\">db</span> :  &#125;</span><br></pre></td></tr></table></figure>\n<p>三个字段表示的意义为：</p>\n<ul>\n<li>$ref：集合名称</li>\n<li>$id：引用的id</li>\n<li>$db: 数据库名称，可选参数</li>\n</ul>\n<p>以下实例中用户数据文档使用了 DBRef, 字段 address：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>:ObjectId(<span class=\"string\">&quot;53402597d852426020000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;address&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;$ref&quot;</span>: <span class=\"string\">&quot;address_home&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;$id&quot;</span>: ObjectId(<span class=\"string\">&quot;534009e4d852427820000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;$db&quot;</span>: <span class=\"string\">&quot;testdb&quot;</span>&#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>address DBRef 字段指定了引用的地址文档是在 testdb 数据库下的 address_home 集合，id 为 534009e4d852427820000002。<br>\n以下代码中，我们通过指定 $ref 参数（address_home 集合）来查找集合中指定id的用户地址信息：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var user = db.users.<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;Tom Benzamin&quot;</span>&#125;)</span><br><span class=\"line\">var dbRef = user.address</span><br><span class=\"line\">db[dbRef.$ref].<span class=\"built_in\">findOne</span>(&#123;<span class=\"string\">&quot;_id&quot;</span>:(dbRef.$id)&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>db[dbRef.$ref].findOne({“_id”:ObjectId(dbRef.$id)})</p>\n</blockquote>\n<p>以上实例返回了 address_home 集合中的地址数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span> : ObjectId(<span class=\"string\">&quot;534009e4d852427820000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;building&quot;</span> : <span class=\"string\">&quot;22 A, Indiana Apt&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;pincode&quot;</span> : <span class=\"number\">123456</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;city&quot;</span> : <span class=\"string\">&quot;Los Angeles&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;California&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-覆盖索引查询\">MongoDB 覆盖索引查询</h2>\n<p>官方的MongoDB的文档中说明，覆盖查询是以下的查询：</p>\n<ul>\n<li>所有的查询字段是索引的一部分</li>\n<li>所有的查询返回字段在同一个索引中</li>\n</ul>\n<p>由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。<br>\n因为索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多。</p>\n<h3 id=\"使用覆盖索引查询\">使用覆盖索引查询</h3>\n<p>为了测试覆盖索引查询，使用以下 users 集合:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;_id&quot;</span>: ObjectId(<span class=\"string\">&quot;53402597d852426020000002&quot;</span>),</span><br><span class=\"line\">   <span class=\"attr\">&quot;contact&quot;</span>: <span class=\"string\">&quot;987654321&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;dob&quot;</span>: <span class=\"string\">&quot;01-01-1991&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;gender&quot;</span>: <span class=\"string\">&quot;M&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;Tom Benzamin&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;user_name&quot;</span>: <span class=\"string\">&quot;tombenzamin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在 users 集合中创建联合索引，字段为 gender 和 user_name :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.createIndex(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在，该索引会覆盖以下查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>也就是说，对于上述查询，MongoDB的不会去数据库文件中查找。相反，它会从索引中提取数据，这是非常快速的数据查询。<br>\n由于我们的索引中不包括 _id 字段，_id在查询中会默认返回，我们可以在MongoDB的查询结果集中排除它。<br>\n下面的实例没有排除_id，查询就不会被覆盖：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>最后，如果是以下的查询，不能使用覆盖索引查询：</p>\n<ul>\n<li>所有索引字段是一个数组</li>\n<li>所有索引字段是一个子文档</li>\n</ul>\n<h2 id=\"MongoDB-查询分析\">MongoDB 查询分析</h2>\n<p>MongoDB 查询分析可以确保我们所建立的索引是否有效，是查询语句性能分析的重要工具。<br>\nMongoDB 查询分析常用函数有：explain() 和 hint()。</p>\n<h3 id=\"explain\">explain()</h3>\n<p>explain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。<br>\n接下来我们在 users 集合中创建 gender 和 user_name 的索引：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.ensureIndex(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在在查询语句中使用 explain ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).explain()</span><br></pre></td></tr></table></figure>\n<p>以上的 explain() 查询返回如下结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;cursor&quot;</span> : <span class=\"string\">&quot;BtreeCursor gender_1_user_name_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;isMultiKey&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;n&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedObjects&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscanned&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedObjectsAllPlans&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nscannedAllPlans&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;scanAndOrder&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;indexOnly&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nYields&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;nChunkSkips&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;millis&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;indexBounds&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;gender&quot;</span> : [</span><br><span class=\"line\">         [</span><br><span class=\"line\">            <span class=\"string\">&quot;M&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;M&quot;</span></span><br><span class=\"line\">         ]</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">&quot;user_name&quot;</span> : [</span><br><span class=\"line\">         [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;$minElement&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;$maxElement&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们看看这个结果集的字段：</p>\n<ul>\n<li>indexOnly: 字段为 true ，表示我们使用了索引。</li>\n<li>cursor：因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。</li>\n<li>n：当前查询返回的文档数量。</li>\n<li>nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。</li>\n<li>millis：当前查询所需时间，毫秒数。</li>\n<li>indexBounds：当前查询具体使用的索引。</li>\n</ul>\n<h3 id=\"hint\">hint()</h3>\n<p>虽然MongoDB查询优化器一般工作的很不错，但是也可以使用 hint 来强制 MongoDB 使用一个指定的索引。<br>\n这种方法某些情形下会提升性能。 一个有索引的 collection 并且执行一个多字段的查询(一些字段已经索引了)。<br>\n如下查询实例指定了使用 gender 和 user_name 索引字段来查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).hint(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>可以使用 explain() 函数来分析以上查询：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;gender:<span class=\"string\">&quot;M&quot;</span>&#125;,&#123;user_name:<span class=\"number\">1</span>,_id:<span class=\"number\">0</span>&#125;).hint(&#123;gender:<span class=\"number\">1</span>,user_name:<span class=\"number\">1</span>&#125;).explain()</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB-原子操作\">MongoDB 原子操作</h2>\n<p>mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。<br>\n但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。<br>\n所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。</p>\n<h3 id=\"原子操作数据模型\">原子操作数据模型</h3>\n<p>考虑下面的例子，图书馆的书籍及结账信息。<br>\n实例说明了在一个相同的文档中如何确保嵌入字段关联原子操作（update：更新）的字段是同步的。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = &#123;</span><br><span class=\"line\">          _id: 123456789,</span><br><span class=\"line\">          title: &quot;MongoDB: The Definitive Guide&quot;,</span><br><span class=\"line\">          author: [ &quot;Kristina Chodorow&quot;, &quot;Mike Dirolf&quot; ],</span><br><span class=\"line\">          published_date: ISODate(&quot;2010-09-24&quot;),</span><br><span class=\"line\">          pages: 216,</span><br><span class=\"line\">          language: &quot;English&quot;,</span><br><span class=\"line\">          publisher_id: &quot;oreilly&quot;,</span><br><span class=\"line\">          available: 3,</span><br><span class=\"line\">          checkout: [ &#123; by: &quot;joe&quot;, date: ISODate(&quot;2012-10-15&quot;) &#125; ]</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>你可以使用 db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。<br>\n在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:</p>\n"},{"title":"Unity学习笔记","catalog":true,"lang":"cn","date":"2021-11-08T02:57:50.000Z","subtitle":"learn with MStudio","header-img":"/img/header_img/nier.png","sticky":997,"_content":"待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","source":"_posts/cn/Unity-Study-Note.md","raw":"---\ntitle: Unity学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-08 10:57:50\nsubtitle: learn with MStudio\nheader-img: /img/header_img/nier.png\ntags:\n- Unity\ncategories:\n- Note\nsticky: 997\n---\n待建设，详见[飞书笔记](https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d)\n\n## Unity编辑器学习\n## 开始学习Unity\n### 准备","slug":"Unity-Study-Note","published":1,"updated":"2021-11-08T02:57:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0y000pwwvoh2180iq7","content":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n","site":{"data":{}},"excerpt":"","more":"<p>待建设，详见<a href=\"https://j6ekhejxp5.feishu.cn/mindnotes/bmncn9WLCx2oZztmsU8B2pvhN7d\">飞书笔记</a></p>\n<h2 id=\"Unity编辑器学习\">Unity编辑器学习</h2>\n<h2 id=\"开始学习Unity\">开始学习Unity</h2>\n<h3 id=\"准备\">准备</h3>\n"},{"title":"使用Hexo搭建博客","catalog":true,"lang":"cn","date":"2021-11-02T05:00:23.000Z","subtitle":null,"header-img":"/img/header_img/nier.png","_content":"> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","source":"_posts/cn/hexo-for-building-blog.md","raw":"---\ntitle: 使用Hexo搭建博客\ncatalog: true\nlang: cn\ndate: 2021-11-02 13:00:23\nsubtitle: \nheader-img: /img/header_img/nier.png\ntags:\n- Hexo\n- Blog\ncategories:\n- [etc.,Hexo]\n---\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 快速开始\n\n### 安装Node.js\n\n```base\n\n```\n\n","slug":"hexo-for-building-blog","published":1,"updated":"2021-11-02T05:00:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg0z000swwvo5wtw3al4","content":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h2 id=\"快速开始\">快速开始</h2>\n<h3 id=\"安装Node-js\">安装Node.js</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"MVT 与 MVC 模型","catalog":true,"lang":"cn","date":"2022-04-18T05:41:47.000Z","subtitle":null,"header-img":"/img/header_img/nier.png","_content":"\n## MVC模型\n\nMVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。\n\nMVC 以一种插件式的、松耦合的方式连接在一起。\n\n+ 模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n+ 视图（V）- 图形界面，负责与用户的交互(页面)。\n+ 控制器（C）- 负责转发请求，对请求进行处理。\n\n![mvc模型](mvc.png)\n\n## MVT模型\n\nMTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同:  \n\n+ M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n+ T 表示模板 (Template)：负责如何把页面(html)展示给用户。\n+ V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。\n\n除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：\n\n简易图：\n![MTV-Diagram.png](MTV-Diagram.png)\n用户操作流程图：\n![mvt.png](mvt.png)\n\n解析：\n\n用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：\n\n+ a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。\n+ b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。\n\n视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。\n","source":"_posts/cn/mvc-and-mvt.md","raw":"---\ntitle: MVT 与 MVC 模型\ncatalog: true\nlang: cn\ndate: 2022-04-18 13:41:47\nsubtitle:\nheader-img: /img/header_img/nier.png\ntags:\n- MVT\n- MVC\ncategories:\n- Note\n---\n\n## MVC模型\n\nMVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。\n\nMVC 以一种插件式的、松耦合的方式连接在一起。\n\n+ 模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n+ 视图（V）- 图形界面，负责与用户的交互(页面)。\n+ 控制器（C）- 负责转发请求，对请求进行处理。\n\n![mvc模型](mvc.png)\n\n## MVT模型\n\nMTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同:  \n\n+ M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n+ T 表示模板 (Template)：负责如何把页面(html)展示给用户。\n+ V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。\n\n除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：\n\n简易图：\n![MTV-Diagram.png](MTV-Diagram.png)\n用户操作流程图：\n![mvt.png](mvt.png)\n\n解析：\n\n用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：\n\n+ a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。\n+ b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。\n\n视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。\n","slug":"mvc-and-mvt","published":1,"updated":"2022-04-18T05:41:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg11000xwwvo6g23emnr","content":"<h2 id=\"MVC模型\">MVC模型</h2>\n<p>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>\n<p>MVC 以一种插件式的、松耦合的方式连接在一起。</p>\n<ul>\n<li>模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>视图（V）- 图形界面，负责与用户的交互(页面)。</li>\n<li>控制器（C）- 负责转发请求，对请求进行处理。</li>\n</ul>\n<p><img src=\"mvc.png\" alt=\"mvc模型\"></p>\n<h2 id=\"MVT模型\">MVT模型</h2>\n<p>MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同:</p>\n<ul>\n<li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li>\n<li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。</li>\n</ul>\n<p>除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：</p>\n<p>简易图：<br>\n<img src=\"MTV-Diagram.png\" alt=\"MTV-Diagram.png\"><br>\n用户操作流程图：<br>\n<img src=\"mvt.png\" alt=\"mvt.png\"></p>\n<p>解析：</p>\n<p>用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：</p>\n<ul>\n<li>a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。</li>\n<li>b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。</li>\n</ul>\n<p>视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MVC模型\">MVC模型</h2>\n<p>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>\n<p>MVC 以一种插件式的、松耦合的方式连接在一起。</p>\n<ul>\n<li>模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>视图（V）- 图形界面，负责与用户的交互(页面)。</li>\n<li>控制器（C）- 负责转发请求，对请求进行处理。</li>\n</ul>\n<p><img src=\"mvc.png\" alt=\"mvc模型\"></p>\n<h2 id=\"MVT模型\">MVT模型</h2>\n<p>MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同:</p>\n<ul>\n<li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li>\n<li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。</li>\n</ul>\n<p>除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：</p>\n<p>简易图：<br>\n<img src=\"MTV-Diagram.png\" alt=\"MTV-Diagram.png\"><br>\n用户操作流程图：<br>\n<img src=\"mvt.png\" alt=\"mvt.png\"></p>\n<p>解析：</p>\n<p>用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：</p>\n<ul>\n<li>a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。</li>\n<li>b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。</li>\n</ul>\n<p>视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p>\n"},{"title":"Python学习笔记","catalog":true,"lang":"cn","date":"2021-11-04T07:25:13.000Z","subtitle":"Python学习笔记","header-img":"/img/header_img/nier.png","sticky":999,"_content":"> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python基本语法\n\n### 编码\n<!-- TODO: 编码 -->\n\n### 标识符\n\n+ 第一个字符必须是字母表中字母或下划线 _ 。\n+ 标识符的其他的部分由字母、数字和下划线组成。\n+ 标识符对大小写敏感。\n+ 非关键字\n\n> 在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\n\n***********************************\n\n### 语句\n\nPython中通常一行表示一个语句，末尾不需加上分号\";\".\n\n```python\nprint(\"hello world\")\n```\n\n***`多行语句`***\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠` \\ `来实现多行语句，例如：\n```py\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n\n但在 [], {}, 或 () 中的多行语句，`不需要使用反斜杠 \\` ，例如：\n```py\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```\n\n***`空行`***\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。  \n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  \n\n> 空行也是程序代码的一部分。\n\n***`同行多条语句`***\n\nPython 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：\n\n```py\nc = 5; print(\"a\"); print(\"b\"); print(c)\n```\n\n***`pass语句`***\nPython pass是空语句，是为了保持程序结构的完整性。  \npass 不做任何事情，一般用做占位语句，如下实例：  \n```Python\nwhile True: \n    pass # 等待键盘中断 (Ctrl+C)\n```\n\n**********************************\n\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 同时分别赋值\n```\n\n在Python中，类型属于对象，变量是没有类型的：  \n```Python\na = 'str'\n```\n\n在以上代码中，'str'是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向'str'这个String类型对象。\n\n***********************************\n\n### 关键字\n\n关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  \n\n```python \nimport keyword\n\nprint(keyword.kwlist)\n```\n\n以上代码的输出结果为（版本Python 3.9.8）：  \n> ['False', 'None', 'True', '\\_\\_peg\\_parser\\_\\_', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n***********************************\n\n### 注释\n\n***`单行注释`***\nPython的单行注释使用`#`号：  \n```python\n# 单行注释\na = 1  # 注释\n```\n\n***`多行注释`***\nPython的多行注释使用` ''' ` 或 ` \"\"\" `:  \n```python\n'''\n多行\n注释\n1\n'''\n\n\"\"\"\n多行注释\n2\n\"\"\"\n\n```\n\n*************************\n\n### 代码块\n\n和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。  \n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n```\n\n如果同一代码块的缩进空格数不一致，会导致运行错误：  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n  print(\"error\")\n```\n\n以上代码的输出结果为：  \n>   File \"&lt;tokenize>\", line 5\n>     print(\"error\")\n>     ^\n> IndentationError: unindent does not match any outer indentation level\n\n***********************************\n\n### 输入输出\n\nPython的内置函数[input()](#input)和[print()](#print)分别表示输入和输出:  \n\n```python\ninput(\"\\n\\n按下 enter 键后退出。\")\n\nprint(\"输出\")\nprint(\"print默认是换行的，如果不需要换行需要在后面参数加上end=''\",end = '')\n```\n\n*******************************\n\n### 导入import\n在 python 用 `import` 或者 `from...import` 来导入相应的模块。\n将整个模块(somemodule)导入，格式为： `import somemodule`\n从某个模块中导入某个函数,格式为： `from somemodule import somefunction`\n从某个模块中导入多个函数,格式为： `from somemodule import firstfunc, secondfunc, thirdfunc`\n将某个模块中的全部函数导入，格式为： `from somemodule import *`\n\n***************************\n\n### 解释器\n<!-- TODO: 解释器 -->\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`immutable的数据类型为： `Number`、`Tuple`、`String`  \n`可变`mutable的数据类型为： `List`、`Set`、`Dictionary`\n\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> &lt;class '\\_\\_main__.A'>  \n> &lt;class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块方法)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块方法)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n\n以上代码的输出结果为：  \n> &lt;class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### 级联\n\nPython按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。\n```python\nprint(\"this \" \"is \" \"string\")\n```\n\n以上代码的输出结果为：  \n> this is string\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] &lt;class 'list'>\n> [] &lt;class 'list'>\n> [1, 5, 9, '7'] &lt;class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的嵌套\n\n列表是可以嵌套的：  \n```python\nmatrix = [\n    [1,2,5],\n    [2,7,8],\n    [4,5,6,7,9],\n    [2,9,7,11]\n]\n```\n\n若要访问该列表的元素只需逐层访问即可：  \n```python\nprint(matrix[2][0])\n\nfor row in matrix:\n    for e in row:\n        print(e, end=\" \")\n    print()\n```\n\n以上代码的输出结果为：  \n> 4  \n> 1 2 5  \n> 2 7 8   \n> 4 5 6 7 9   \n> 2 9 7 11 \n\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n\n使用del可以根据索引删除一个元素或者一个切割\n\n```python\nlst = [1,4,5,9,8,3,1,2,0,11]\ndel lst[0]\nprint(lst)\n\ndel lst[1:-3:2]\nprint(lst)\n\ndel lst[:]\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [4, 5, 9, 8, 3, 1, 2, 0, 11]  \n> [4, 9, 3, 2, 0, 11]  \n> []\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 列表遍历\n\n列表遍历将使用[循环语句](#Python循环语句).\n\n<!--TODO: enumerate()  -->\n\n> 使用[enumerate()](#enumerate)函数可以得到索引和对应值\n\n```py\nlst = [1,2,7,3,6,4]\n\nfor i in lst:\n    print(i,end=\" \")\n\nfor i,value in enumerate(lst):\n    print(i,value)\n```\n\n以上代码的运行结果为：  \n> 1 2 7 3 6 4\n> 1 2\n> 2 7\n> 3 3\n> 4 6\n> 5 4\n\n<!--TODO: zip()  -->\n如果要同时遍历多个列表，可以使用[zip()](#zip)函数：  \n```python\nquestions = ['name', 'quest', 'favorite color']\nanswers = ['lancelot', 'the holy grail', 'blue']\nfor q, a in zip(questions, answers):\n    print('What is your {0}?  It is {1}.'.format(q, a))\n```\n\n以上代码的输出结果为：  \n> What is your name?  It is lancelot.  \n> What is your quest?  It is the holy grail.  \n> What is your favorite color?  It is blue.\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> test.py in &lt;module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in &lt;module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in &lt;module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n****************************************************\n\n## Python运算符\n\nPython的运算符可以分为以下几类：  \n\n+ [算术运算符](#算术运算符)\n+ [比较(关系)运算符](#比较(关系)运算符)\n+ [赋值运算符](#赋值运算符)\n+ [逻辑运算符](#逻辑运算符)\n+ [位运算符](#位运算符)\n+ [成员运算符](#成员运算符)\n+ [身份运算符](#身份运算符)\n\n> [运算符优先级](#运算符优先级)\n\n### 算术运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| + | 加 |\n| - | 减 |\n| * | 乘 |\n| / | 除 |\n| % | 取模 |\n| ** | 幂 |\n| // | 整除 |\n\n### 比较(关系)运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| == | 等于 |\n| > | 大于 |\n| < | 小于 |\n| != | 不等于 |\n| >= | 大于等于 |\n| <= | 小于等于 |\n\n### 赋值运算符\n| 运算符 | 描述 | 说明 |\n| :--: | :----- | :--- |\n| = | 简单的赋值运算符 | 将运算符右侧的值赋予左侧 |\n| += | 加法赋值运算符 | a+=b等价于a=a+b |\n| -= | 减法赋值运算符 | a-=b等价于a=a-b |\n| *= | 乘法赋值运算符 | a*=b等价于a=a*b |\n| /= | 除法赋值运算符 | a/=b等价于a=a/b |\n| %= | 取模赋值运算符 | a%=b等价于a=a%b |\n| **= | 幂赋值运算符 | a**=b等价于a=a**b |\n| //= | 取整赋值运算符 | a//=b等价于a=a//b |\n| := | 海象运算符 | `Python3.8`版本新增运算符。可在表达式内部为变量赋值。|\n\n> 海象运算符的使用：  \n> ```python\n> if (n := len(a)) > 10:  \n>    print(f\"List is too long ({n} elements, expected <= 10)\")\n> ```\n\n\n### 逻辑运算符\n\n| 运算符 | 逻辑表达式 | 描述 |\n| :--: | :----- | :----- | \n| and | x and y\t| 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。|\n| or | x or y | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。|\n| not | not x | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 |\n\n### 位运算符\n按位运算符是把数字看作二进制来进行计算的。\n\n| 运算符 | 描述 | 实例 |\n| :--: | :---| :---- |\n| `&` | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100 |\n| `|` | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0  | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101 |\n| `^` | 按位异或运算符：当两对应的二进位相异时，结果为1，否则为0  | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001 |\n| `~` | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 | `(~a )` 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。|\n| `<<` | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。| `a << 2` 输出结果 240 ，二进制解释： 1111 0000 |\n| `>>` | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111 |\n\n\n### 成员运算符\n\n| 运算符 | 描述 |\n| :--: | :------- |\n| in | 如果在指定的序列中找到值返回 True，否则返回 False。|\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。|\n\n### 身份运算符\n身份运算符用于比较两个对象的存储单元\n\n| 运算符 | 描述 | 实例 |\n| :---: | :----- | :----- |\n| is | is 是判断两个标识符是不是引用自一个对象 | x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象 | x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。|\n\n### 运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符 | 描述 |\n| :--: | :------ |\n| `**` | 指数 (最高优先级) |\n| `~ + -` | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //` | 乘，除，求余数和取整除 |\n| `+ -` | 加法减法 |\n| `>> <<` | 右移，左移运算符 |\n| `&` | 位 'AND' |\n| `^ |` | 位运算符 |\n| `<= < > >=`\t | 比较运算符 |\n| `== !=` | 等于运算符 |\n| `= %= /= //= -= += *= **=` | 赋值运算符 |\n| `is is not` | 身份运算符 |\n| `in not in` | 成员运算符 |\n| `not and or` | 逻辑运算符 |\n\n**************************************\n\n## Python条件控制\n\nPython条件控制使用if、elif和else关键字,一般流程图如下： \n![if流程图](if-1.png)\n\n共有三种模式：  \n\n***if***\n```python\nif (<condition_expr>) :\n    # statement_block_1\n# statement_block_other\n```\n***if-else***\n```python\nif (<condition_expr>) :\n    # statement_block_1\nelse :\n    # statement_block_else\n# statement_block_other\n```\n***if-elif-else***\n```python\nif (<condition_expr_1>) :\n    # statement_block_1\nelif (<condition_expr_2>) :\n    # statement_block_2\n# ……\nelse :\n    # statement_block_else\n# statement_block_other\n```\n上述代码的流程如下：  \n![if-elif-else](if-2.png)\n\nPython条件控制还支持if条件的`嵌套`：  \n```python\nif (<expr>):\n    if (<expr_2>):\n        # statement_block_1\n    else:\n        # statement_block_2\n    # statement_block_3\nelse:\n    # ……\n```\n\n*************************************\n\n## Python循环语句\n\n循环语句将在条件成立时循环执行。流程图如下：  \n![loop-1](loop-1.jpg)\nPython的循环语句有两种形式：  \n\n***`while`***\n> 循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  \n\n```python\nwhile (<condition_expr>):\n    # loop_statement_block\nelse:\n    # false_statement\n```\n\n> 可以使用`while True`来实现无限循环\n\n***`for`***\nPython for 循环可以遍历任何可迭代对象([序列](#Python序列sequence))\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n经常和for配合的一个函数为[range()](#range):  \nrange()函数会生成一个数字序列：  \n```python\n>>>for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n```\n\n\n如果要提前结束循环，需要使用关键字`break`跳出当前循环:  \n```python\nx = 10\nwhile x >= 3 :\n    print(x, end=\" \")\n    if x == 6 :\n        break\n    x -= 1\n```\n以上代码循环到x==6时就会停止:  \n> 10 9 8 7 6  \n\n如果只是跳过一次循环，使用关键字`continue`可以跳过本次循环，进入下次循环:  \n```python\nx = 10\nwhile x >= 3:\n    x -= 1\n    if x == 6:\n        continue\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 9 8 7 5 4 3 2\n\nbreak和continue在循环中的作用如下图：  \n![break-continue](break-continue.jpg)\n> break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。  \n> continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。\n\n*****************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n***************************************\n\n## Python迭代器与生成器\n\n### 迭代器iterator\n迭代是访问集合元素的一种方式。  \n迭代器是一个可以记住遍历的位置的对象。 \n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前`不会后退`。   \n\n迭代器有两个基本的方法：`iter()` 和 `next()`。  \niter()用于创建迭代器对象，next()用于控制迭代器前进。  \n字符串，列表或元组对象都可用于创建迭代器：  \n```python\nlst = [1,5,6,4,7,8]\nit = iter(lst)   # 创建迭代器对象\nprint(type(it))\nprint(next(it))  # 输出迭代器的下一个元素\nprint(next(it))\n```\n以上代码的输出结果为：  \n> &lt;class 'list_iterator'>\n> 1\n> 5\n\n迭代器对象可以使用常规for语句进行遍历：  \n```python\nlst = [1,2,3,4,5]\nit = iter(lst)\nfor i in it:\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 1 2 3 4 5 \n\n#### 自定义迭代器\n把一个类作为一个迭代器使用需要在类中实现两个方法 \\_\\_iter\\_\\_() 与 \\_\\_next\\_\\_() 。  \n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 \\_\\_init\\_\\_(), 它会在对象初始化的时候执行。有关面向对象编程请看：[Python面向对象](#Python面向对象)  \n`__iter__()` 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 \\_\\_next\\_\\_() 方法并通过 StopIteration 异常标识迭代的完成。  \n`__next__()` 方法会返回下一个迭代器对象。  \n\n> ***`StopIteration`***\n> StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 \\_\\_next\\_\\_() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 \n\n以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：  \n```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:    # 设置循环上限\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x, end=\" \")\n```\n执行输出结果为：  \n> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n\n****************************\n\n### 生成器generator\n\n在Python中，使用了`yield`的函数被称为生成器。  \n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。  \n在调用生成器运行的过程中，每次遇到 yield 时函数会`暂停并保存当前所有的运行信息`，***返回 yield 的值***, 并在下一次执行 next() 方法时从当前位置继续运行。  \n\n以下实例使用生成器实现斐波那契数列：  \n```python\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        break\n```\n以上代码的输出结果为：  \n> 0 1 1 2 3 5 8 13 21 34 55\n\n*****************************************************\n\n## Python函数\n\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。  \n函数能提高应用的模块性，和代码的重复利用率。  \n\n除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。\n\n### 定义一个函数\n\n函数的组成有以下几条规则:  \n+ 函数以`def`关键字开头，后接`函数标识符`名称和`参数列表`\n+ 函数内容以冒号`:`开始，下面的函数体缩进\n+ 以`return [表达式]`结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None\n\n下图是一个简单的函数形式说明:  \n![函数说明](function-1.png)\n总结来说，Python的函数语法格式如下：  \n```Python\ndef 函数名(参数列表):\n    函数体\n```\n\n### 参数\n\n在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的`参数传递`来说也对应着两种：  \n+ **可变类型**：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  \n+ **不可变类型**：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。\n\n> python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\nPython的函数`参数`共有下面四种类型：  \n+ 必需参数\n+ 关键字参数\n+ 默认参数\n+ 不定长参数\n\n***`必需参数`***\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。  \n***`关键字参数`***\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。  \n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。  \n***`默认参数`***\n调用函数时，如果没有传递参数，则会使用默认参数。\n***`不定长参数`***\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：  \n```py\ndef functionname([formal_args,] [*var_args_tuple,] [**var_args_dict] ):\n   function_suite\n   return [expression]\n```\n加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。  \n加了两个星号 ** 的参数会以字典的形式导入。\n\n下面结合函数的使用来理解这四种参数类型：  \n\n### 函数的使用\n使用函数只需要直接使用函数名并传入对应参数就可以调用了。\n\n```python\ndef function1(a,b,c):\n    print(a,b,c)\n    return\n    \nfunction1(1,2,3)  # 必需参数的使用，参数按顺序对应传入\nfunction1(1, c = \"5\", b = 2)  # 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入\n\ndef function2(a,b,c = 5):   # 默认参数，在函数声明时指定其默认值\n    print(a,b,c)\n    return\n\nfunction2(2,3)       # 默认参数在调用时不指定则使用默认值\n\ndef function3(a,b,*args_tuple):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_tuple)\n    return\n\nfunction3(1,2,3,4,5,6)\n\ndef function4(a,b,**args_dict):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_dict)\n    return\n\nfunction4(1,2,c = 3,d = 4,e = 5,f = 6)\n```\n\n以上代码的输出结果为：  \n> 1 2 3  \n> 1 2 5  \n> 2 3 5  \n> 1 2 (3, 4, 5, 6)  \n> 1 2 {'c': 3, 'd': 4, 'e': 5, 'f': 6}  \n\n声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数`必须用关键字`传入。\n```Python\ndef function1(a,b,*,c):\n    print(a,b,c)\n    return\n\nfunction1(1,2,c=5)\n```\n\n以上代码的输出结果为：  \n> 1 2 5\n\n### 匿名函数\n\nPython使用lambda关键字来创建匿名函数。  \n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。  \nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  \n\nlambda 函数的语法只包含一个语句，如下：  \n```Python\nlambda [arg1 [,arg2,.....argn]]:expression\n```\n\n使用实例来增进理解：  \n```python\nsum = lambda arg1,arg2:arg1+arg2    # 一个简单的匿名函数使用\n\nprint(sum(1,2))\n```\n\n以上代码的输出结果为：  \n> 3\n\n### return语句\nreturn作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。  \n```python\ndef function1(a,b):\n    return a+b\n\nc = function1(1,2)\nprint(c)\n```\n\n以上代码的输出结果为：  \n> 3\n\n### 强制位置参数\nPython3.8 新增了一个函数形参语法` / `用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:  \n```python\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\nf(10, 20, 30, d=40, e=50, f=60)  # 这种使用方式是正确的\n# 下面两种是错误的使用\nf(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n```\n****************************************\n\n## Python推导式\n\nPython的推导式应用于简化规律的列表或元组等序列的创建：  \n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  \n> 需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。\n\n\n简单语法是：  \n```Python\nnew_lst = [var for var in varrange if varexpr]\n```\n\n比如我们想得到一个偶数数列：  \n```python\nlst = [x for x in range(20) if x % 2 == 0]\n\nprint(lst)\n\ntup = (x*2 for x in range(10))   # 括号生成的是生成器对象\n\nprint(type(tup))\nprint(tuple(tup))\n```\n\n以上代码的输出结果为：  \n> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n> &lt;class 'generator'>\n> (0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\n\n推导式的更多使用建议自己上手尝试一下：  \n```python \nlst = [y for y in (x * 3 for x in range(10)) if y % 2 == 1]\n\nprint(lst)\n\nlst = [[x, y] for x in range(5) for y in range(5)]\n\nprint(lst)\n\nve = [\"x\",\"xx\",\"xxx\",\"xxxx\"]\nlst = [len(v) for v in ve]  # 推导式还可以对匿名变量使用函数\n\nprint(lst)\n\nlst = [str(round(355/113, i)) for i in range(1, 6)]   # 使用复杂表达式和嵌套函数\n\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [3, 9, 15, 21, 27]\n> [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]\n> [1, 2, 3, 4]\n> ['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n***********************\n\n## Python模块\n\n模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。  \n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。\n\n下面是一个使用 python 标准库中模块的例子。\n```python \nimport sys\n \nprint('命令行参数如下:')\nfor i in sys.argv:\n   print(i)\n\nprint('\\n\\nPython 路径为：', sys.path, '\\n')\n```\n\n> + import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  \n> + sys.argv 是一个包含命令行参数的列表。  \n> + sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  \n\n### import语句\n\n想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：  \n```python\nimport module1[,module2...]\n```\n\n当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  \n\n下面是自定义模块的使用:  \n这里先定义一个模块  \n```python\n# file_name:  test_module.py\n\ndef function(a,b):\n    return a+b\n\nprint('file_name: test_module.py')\n```\n然后再其他文件里导入\n```python\n# file_name:  test.py\n\nimport test_module\n\nprint('file_name: test.py')\n\nprint(test_module.function(1,2))     # 使用模块定义的方法\n```\n\n以上代码的运行结果为：    \n> file_name: test_module.py\n> file_name: test.py\n> 3\n\n可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  \n\n并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。  \n![模块只会被导入一次，执行一次](module-1.png)\n\n> 当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？  \n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。    \n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。  \n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。  \n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：  \n```python\nimport sys\n\nprint(sys.path)\n```\n\n以上代码的输出结果为：  \n> ['g:\\\\Codes\\\\Python\\\\testpy', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles\\\\lib\\\\python', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\DLLs', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39', '', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\Pythonwin', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Administrator\\\\.ipython']\n\nsys.path 输出是一个列表，其中第一项是当前目录。  \n\n如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：  \n```python\nimport test_module\n\nfun = test_module.function\n\nprint(fun(1,2))\n```\n\n### from...import语句\n\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：  \n```Python\nfrom modname import name1[, name2[, ... nameN]]\n```\n这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 \n \n而如果要把一个模块所有成员导入当前的命名空间中，语法如下：  \n```python\nfrom modname import *\n```\n\n这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如'\\_a'此类。\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。\n\n### 深入模块\n\n前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。  \n我们一般使用这些可执行代码来初始化模块。  \n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。  \n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。  \n从另一个方面，当你确实知道你在做什么的话，你也可以通过 `modname.itemname` 这样的表示法来访问模块内的函数。  \n\n但是需要注意：  \n> 在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  \n\n### __name__属性\n\n一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用\\_\\_name\\_\\_属性来使该程序块仅在该模块自身运行时执行。  \n> 注意是前后`两个下划线`\n\n```python\n# file_name:  test_module.py\nif __name__ == '__main__':\n    print('test_module_main')\nelse:\n    print('file_name: test_module.py')\n```\n\n每个模块都有一个\\_\\_name\\_\\_属性，当其值是'\\_\\_main\\_\\_'时，表明该模块自身在运行，否则是被引入。\n\n### dir()函数\n\n内置的函数 [`dir()`](#dir) 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:  \n```python\nimport test_module,sys\nprint(dir(test_module))\nprint(dir(sys))\n```\n\n以上代码的输出结果为：  \n> ['\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'function']  \n> ['\\_\\_breakpointhook\\_\\_', '\\_\\_displayhook\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_excepthook\\_\\_', '\\_\\_interactivehook\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', '\\_\\_stderr\\_\\_', '\\_\\_stdin\\_\\_', '\\_\\_stdout\\_\\_', '\\_\\_unraisablehook\\_\\_', '\\_base\\_executable', '\\_clear\\_type\\_cache', '\\_current\\_frames', '\\_debugmallocstats', '\\_enablelegacywindowsfsencoding', '\\_framework', '\\_getframe', '\\_git', '\\_home', '\\_xoptions', 'addaudithook', 'api\\_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'platlibdir', 'prefix', 'ps1', 'ps2', 'ps3', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions', 'winver']\n\n如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:\n```Python\nprint(dir())\n```\n\n> ['\\_\\_annotations\\_\\_', '\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_']\n\n### 其他模块\n\n除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看[Python库参考文档](#Python库参考文档)。  \n\n有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。  \n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。  \n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:  \n```python\nimport sys\nprint(sys.ps1)\nprint(sys.ps2)\n```\n\n### 包\n\n包是一种管理 Python 模块命名空间的形式，采用\"点模块名称\"。  \n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。  \n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  \n\n在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。  \n目录只有包含一个叫做 \\_\\_init\\_\\_.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。\n最简单的情况，放一个空的 :file:\\_\\_init\\_\\_.py就可以了。  \n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。  \n\n注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。  \nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。  \n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  \n\n如果我们使用 from sound.effects import * 会发生什么呢？  \nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。  \n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。  \n在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。  \n为了解决这个问题，我们只需要提供一个精确包的索引。  \n导入语句遵循如下规则：如果包定义文件 \\_\\_init\\_\\_.py 存在一个叫做 \\_\\_all\\_\\_ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。  \n作为包的作者，可别忘了在更新包之后保证 \\_\\_all\\_\\_ 也更新了啊。  \n\\_\\_all\\_\\_是一个存储模块名字符串的列表。  \n\n*************************************\n\n## Python输入输出\n\n再前面我们已经接触过Python的输入[input()](#input)和输出[print()](#print)了，本章主要是介绍输入输出的进阶技巧。  \n\n### 输出格式美化\n\nPython两种输出值的方式: 表达式语句和 print() 函数。  \n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。  \n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。  \n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  \n> + str()： 函数返回一个用户易读的表达形式。\n> + repr()： 产生一个解释器易读的表达形式。\n\n下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：  \n```Python\n>>> a = '1' \n>>> str(a)\n'1'\n>>> repr(a)\n\"'1'\"\n>>> print(a)\n1\n>>> print(str(a))\n1\n>>> print(repr(a))\n'1'\n>>> s = f'{str(a)},{repr(a)}'\n>>> print(s)\n1,'1'\n>>> #  repr() 函数可以保留转义字符串中的特殊字符\n>>> hello = 'hello, world\\n'      \n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> hellos_1 = str(hello)\n>>> print(hellos_1)\nhello, world\n\n>>> repr((x, y, ('Go','Python')))      \n\"(32.5, 40000, ('Go', 'Python'))\"\n```\n\n关于str()和repr()的更多区别请参见[str()和repr()的区别](str()和repr()的区别)\n\n其他关于字符串格式化内容请参见: [字符串格式化](#字符串格式化)\n\n### 读取输入\n\nPython 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。\n\n***********************************************\n\n## Python文件读写操作\n\n### 读和写文件\n\n[open()](#open)函数将会返回一个file对象，其基本语法如下：  \n```python\nopen(filename, mode)\n```\n\n+ filename : 包含了你要访问的文件的字符串值。\n+ mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n不同模式打开文件的完全列表：  \n\n| 模式 | 描述 |\n| :-: | :----- |\n| r | 以`只读`方式打开文件。文件的指针将会放在文件的`开头`。这是`默认`模式。 |\n| rb | 以`二进制`格式打开一个文件用于`只读`。文件指针将会放在文件的`开头`。 |\n| r+ | 打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| rb+ | 以`二进制`格式打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| w | 打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb | 以`二进制`格式打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| w+ | 打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb+ | 以`二进制`格式打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| a | 打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| ab | 以`二进制`格式打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| a+ | 打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。文件打开时会是追加模式。如果该文件`不存在则创建`新文件用于读写。 |\n| ab+ | 以`二进制格式`打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。如果该文件`不存在则创建`新文件用于读写。 |\n\n总结来说模式的情况有三种：  \n+ 基础模式： 也就是 `r` `w` `a` (read、write、append)\n+ 二进制模式：  在基础模式上加上`b`表示以二进制格式打开文件(byte)\n+ 读写模式：  在以上两种模式上加上`+`表示打开的文件可读写\n\n| 模式 | r | r+ | w | w+ | a | a+ |\n| :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n| 读 | √ | √ |   | √ |   | √ |\n| 写 |   | √ | √ | √ | √ | √ |\n| 创建 |   |   | √ | √ | √ | √ |\n| 覆盖 |   |   | √ | √ |   |   |\n| 指针在开始 | √ | √ | √ | √ |   |   |\n| 指针在结尾 |   |   |   |   | √ | √ |\n\n![读写模式](rwa-1.png)\n\n下面是一个读写文件的实例:  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a\")\n    f.write(\"a模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式再写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> Traceback (most recent call last):\n>   File \"\\\\testpy\\\\quick.py\", line 6, in &lt;module>\n>     f = open(r\"testpy\\\\test.txt\", \"r\")\n> FileNotFoundError: [Errno 2] No such file or directory: 'testpy\\\\test.txt'\n> w模式写入\n> w模式写入a模式写入\n> w模式再写入\n\n可以看到下图文件结构的改变\n![读写测试-前](rw_test_1.png)\n![读写测试-后](rw_test_2.png)\n\n以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。\n\n> 这里有几个需要注意的点: \n> + 文件的路径，由于带有反斜杠\\\\，会被转义，所以需要使用r-string\n> + 打开的文件需要使用f.close()关闭或者使用[with...as...](#with关键字)代码块\n> + 读写文件通常需要在try...except里进行\n\n如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：  \n![文字乱码](rw-problem.png)\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：  \nvscode选择右下角的编码格式改变：\n![vscode选择编码](vscode.png)\n![vscode选择编码-2](vscode-2.png)\n![vscode选择编码-3](vscode-3.png)\n![文字乱码解决](solute.png)\n\n还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：  \n```python\nf = open(r\"testpy\\test.txt\", \"w\", encoding=\"utf-8\")\n# ...\nf.close()\n```\n\n\n关于上面实例使用的文件对象的方法，请看下节。  \n\n### 文件对象的方法\n<!-- TODO: 文件对象方法 -->\n\n#### [`f.read()`](#read)\n\n为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。  \nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  \n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read(2))\n    print(f.read(1))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n以上代码的输出结果为：  \n> 写入  \n> 字\n\n可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  \n> 这是因为read()同时会向后移动指针size个字符.\n\n但是这时候有人又有问题了：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a+\")\n    print(f.read(2))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？\n> 这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。\n\n如果你打开文件的方式没有读的权限，那么会报出以下的错误：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n> Traceback (most recent call last): \n>   File \"\\\\testpy\\\\quick.py\", line 18, in &lt;module>  \n>     print(f.read())\n> `io.UnsupportedOperation: not readable`\n\n#### [`f.readline()`](#readline)\nf.readline() 会从文件中读取单独的一行。换行符为 '\\n'。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"a\", encoding=\"utf-8\")\n    f.write(\"写入字符串1\\n\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(repr(f.readline()))\n    print(repr(f.readline()))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> '写入字符串\\n'  \n> '写入字符串1\\n'  \n\n可以看到调用readline()和read()一样都会向后移动指针\n\n还可以使用迭代文件对象的方式遍历每一行：  \n```python\nimport traceback\n\ntry:\n    # 使用with...as在代码块结束时会自动关闭文件对象\n    with open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            print(line, end=\"\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入字符串  \n> 写入字符串1\n\n#### [`f.readlines()`](#readlines)\n\nf.readlines() 将返回该文件中包含的所有行。  \n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(f.readlines())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> ['写入字符串\\n', '写入字符串1']\n\n#### [`f.write()`](#write)\n\nf.write(string) 将 string 写入到文件中, 然后返回写入的字符数。\n```Python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符\n\n#### [`f.tell()`](#tell)\n\nf.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f'当前游标处于第{f.tell()}字节处')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处\n\n一些常用编码一个字符所占的字节数：  \n| 编码 | 中文 | 英文 | 其他说明 |\n| :--: | :--: | :--: | :-- |\n| ASCII | 2 | 1 |  |\n| Unicode | 2 | 2 | 英文符号只占1个字节 |\n| GB2312 | 2 | 2 | |\n| GBK | 2 | 1 | |\n| ISO-8859-1 | 1 | 1 | |\n| UTF-8 | 3 | 1 | |\n| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |\n| UTF-32 | 4 | 4 |  |\n\n#### [`f.seek()`](#seek)\n\n如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。\n\noffset 是偏移量；\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：\n\n+ seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符\n+ seek(x,1) ： 表示从当前位置往后移动x个字符\n+ seek(-x,2)：表示从文件的结尾往前移动x个字符\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0))\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0, 2))\n        print(f\"当前游标处于第{f.tell()}字节处\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处  \n> 0  \n> 当前游标处于第0字节处  \n> 12  \n> 当前游标处于第12字节处\n\n#### [`f.close()`](#close)\n\n在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。  \n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。\n\n\n### pickle模块\n\npython的pickle模块实现了基本的数据序列和反序列化。  \n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。  \n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  \n\n下面通过一个简单实例来说明pickle模块：  \n```python\nimport pickle\n\n# 使用pickle模块将数据对象保存到文件\ndata1 = {\"a\": [1, 2.0, 3, 4 + 6j], \"b\": (\"string\", u\"Unicode string\"), \"c\": None}\n\noutput = open(\"data.pkl\", \"wb\")\n\nselfref_list = [1, 2, 3]\nselfref_list.append(selfref_list)\n\n# Pickle dictionary using protocol 0.\npickle.dump(data1, output)\n\n# Pickle the list using the highest protocol available.\npickle.dump(selfref_list, output, 1)\n\noutput.close()\n```\n\n上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：  \n```python\npickle.dump(obj, file, [,protocol])\n```\n\n它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。\n\n```python\nimport pickle\n\npkl_file = open(\"data.pkl\", \"rb\")\n\n# 使用pickle模块从文件中重构python对象\ndata1 = pickle.load(pkl_file)\nprint(data1)\ndata2 = pickle.load(pkl_file)\nprint(data2)\n\npkl_file.close()\n```\n\n以上代码的输出结果为：  \n> {'a': [1, 2.0, 3, (4+6j)], 'b': ('string', 'Unicode string'), 'c': None}  \n> [1, 2, 3]\n\n上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：  \n```python\nany_x = pickle.load(file)\n```\n\n*************************\n\n## Python os模块\n<!-- TODO: os模块方法 -->\n\n### os模块常用方法\n\n[os模块](#Python-os模块方法)提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.access(\"./testpy/test.txt\", os.F_OK))\nprint(os.access(\"./testpy/test.txt1111\", os.F_OK))\nprint(os.access(\"./testpy/data.pkl\", os.R_OK))\nprint(os.access(\"./testpy/test.pkl\", os.W_OK))\nprint(os.access(\"./testpy/test.pkl\", os.X_OK))\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\nTrue\nFalse\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n# 返回你的当前工作目录\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.getcwd())\nos.chdir(\"../\")\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\ng:\\Codes\\Python\\\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os, stat\n\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\nos.chmod(\"./testpy/data.pkl\", stat.S_IREAD)\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfd = os.open(\"./testpy/test3.txt\", os.O_CREAT | os.O_RDWR)\nos.write(fd, str.encode(\"This is test\\n\"))\nos.close(fd)\n\nfd = os.open(\"./testpy/test3.txt\", os.O_RDONLY)\nprint(os.read(fd, 10))\nos.close(fd)\n```\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nb'This is te'\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nfd = os.open(\"./test.txt\",os.O_RDONLY)\nos.closerange(fd,fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 打开文件\nfd = os.open(\"foo.txt\", os.O_RDWR | os.O_CREAT)\n# 复制文件描述符\nd_fd = os.dup(fd)\n# 使用复制的文件描述符写入文件\nos.write(d_fd, \"This is test\".encode())\n# 关闭文件\nos.closerange(fd, d_fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n# os.fdopen()\n# 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。\n# 该方法是内置函数 open() 的别名;\n# 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nimport os\n\npath = \"./testpy/test.txt\"\n\nprint(os.stat(path))\n\ninfo = os.lstat(path)\n\nprint(info)\nprint(f\"st_uid = {info.st_uid}\")\n\nfd = os.open(path, os.O_RDWR)\ninfo = os.fstat(fd)\n\nprint(info)\nos.close(fd)\n```\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nst_uid = 0\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nos.link(src, dst)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\npath = \"./\"\nprint(os.listdir(path))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/\"\n\nos.makedirs(path, 0o777)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/test_mkdir\"\n\nos.mkdir(path)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nr,w = os.pipe()\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nwith os.popen(\"mkdir test_popen\",\"r\",1) as f:\n    print(f)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n<os._wrap_close object at 0x000001D8FC929430>\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.system(r\"adb devices\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n\nos.remove(\"./testpy/test.txt\")\n\n# 移除后列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test.txt', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.removedirs(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.rmdir(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.listdir())\n\nos.rename(\"test_pack\", \"test_rename\")\n\nprint(os.listdir())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'test_popen', 'unable', 'workspace.code-workspace', '__pycache__']\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_popen', 'test_rename', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nprint (\"当前目录为: %s\" %os.getcwd())\n\n# 列出目录\nprint (\"目录为: %s\"%os.listdir(os.getcwd()))\n\n# 重命名 \"aa1.txt\"\nos.renames(\"aa1.txt\",\"newdir/aanew.txt\")\n\nprint (\"重命名成功。\")\n\n# 列出重命名的文件 \"aa1.txt\"\nprint (\"目录为: %s\" %os.listdir(os.getcwd()))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n当前目录为: /tmp\n目录为:\n [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','newdir','amrood.admin' ]\n重命名成功。\n目录为:\n [  'a1.txt','resume.doc','a3.py','Administrator','newdir','amrood.admin' ]\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfor root, dirs, files in os.walk(\".\", topdown=False):\n    for name in files:\n        print(os.path.join(root, name))\n    for name in dirs:\n        print(os.path.join(root, name))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n.\\.vscode\\settings.json\n.\\testpy\\data.pkl\n.\\testpy\\quick.py\n.\\testpy\\quick2.py\n.\\testpy\\test1.txt\n.\\testpy\\test2.txt\n.\\testpy\\test3.txt\n.\\testpy\\test_unicode.txt\n.\\test_pack\\test_py.py\n.\\test_pack\\__init__.py\n.\\unable\\__pycache__\\un_test.cpython-39.pyc\n.\\unable\\un_test.py\n.\\unable\\__pycache__\n.\\__pycache__\\test_module.cpython-39.pyc\n.\\auto.py\n.\\data.pkl\n.\\dp1.py\n.\\foo.txt\n.\\test.py\n.\\test.txt\n.\\test_module.py\n.\\workspace.code-workspace\n.\\.vscode\n.\\testpy\n.\\test_pack\n.\\test_popen\n.\\unable\n.\\__pycache__\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n \n# 输出默认值 ..\nprint(os.pardir)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n### path模块\n\nos.path 模块主要用于获取文件的属性。  \n以下是 os.path 模块的几种常用方法：  \n\n| 方法 | 说明 |\n| :--: | :------------------- |\n| os.path.`abspath`(path) | 返回绝对路径 |\n| os.path.`basename`(path) | 返回文件名 |\n| os.path.`commonprefix`(list) | 返回list(多个路径)中，所有path共有的最长的路径 |\n| os.path.`dirname`(path) | 返回文件路径 |\n| os.path.`exists`(path) | 路径存在则返回True,路径损坏返回False |\n| os.path.`expanduser`(path) | 把path中包含的\"~\"和\"~user\"转换成用户目录 |\n| os.path.`expandvars`(path) | 根据环境变量的值替换path中包含的\"$name\"和\"${name}\" |\n| os.path.`getatime`(path) | 返回最近访问时间（浮点型秒数） |\n| os.path.`getmtime`(path) | 返回最近文件修改时间 |\n| os.path.`getctime`(path) | 返回文件 path 创建时间 |\n| os.path.`getsize`(path) | 返回文件大小，如果文件不存在就返回错误 |\n| os.path.`isabs`(path) | 判断是否为绝对路径 |\n| os.path.`isfile`(path) | 判断路径是否为文件 |\n| os.path.`isdir`(path) | 判断路径是否为目录 |\n| os.path.`islink`(path) | 判断路径是否为链接 |\n| os.path.`ismount`(path) | 判断路径是否为挂载点 |\n| os.path.`join`(path1[, path2[, ...]]) | 把目录和文件名合成一个路径 |\n| os.path.`normcase`(path) | 转换path的大小写和斜杠 |\n| os.path.`normpath`(path) | 规范path字符串形式 |\n| os.path.`realpath`(path) | 返回path的真实路径 |\n| os.path.`relpath`(path[, start]) | 从start开始计算相对路径 |\n| os.path.`samefile`(path1, path2) | 判断目录或文件是否相同 |\n| os.path.`sameopenfile`(fp1, fp2) | 判断fp1和fp2是否指向同一文件 |\n| os.path.`samestat`(stat1, stat2) | 判断stat tuple stat1和stat2是否指向同一个文件 |\n| os.path.`split`(path) | 把路径分割成 dirname 和 basename，返回一个元组 |\n| os.path.`splitdrive`(path) | 一般用在 windows 下，返回驱动器名和路径组成的元组 |\n| os.path.`splitext`(path) | 分割路径中的文件名与拓展名 |\n| os.path.`walk`(path, visit, arg) | 遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数 |\n| os.path.`supports_unicode_filenames` | 设置是否支持unicode路径名 |\n\n<!--TODO: ### os.open()与open()的区别 -->\n\n<!--TODO: ### os.popen()与os.system()的区别 -->\n\n***************************\n\n## Python错误与异常处理\n\nPython有两种错误：语法错误和异常。  \nPython [assert](#assert-断言)（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。\n\n### 语法错误\nPython 的语法错误或者称之为解析错，会报出以下的错误：  \n\n```python\nprint('a)\n\n```\n\n```python\nline 1\n    print('a)\n             ^\nSyntaxError: EOL while scanning string literal\n```\n\n```python\nprint('a') print('b')\n```\n\n```python\nline 1\n    print('a') print('b')\n               ^\nSyntaxError: invalid syntax\n```\n\n如上，程序会报出语法错误`SyntaxError`，后面跟着的是错误的提示信息。  \n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。\n\n### 异常\n\n即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。  \n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  \n\n```Python\n>>> 10 * (1/0)             # 0 不能作为除数，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nZeroDivisionError: division by zero\n>>> 4 + spam*3             # spam 未定义，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nNameError: name 'spam' is not defined\n>>> '2' + 2               # int 不能与 str 相加，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n异常类型和异常信息会显示出来，例子中的异常类型有：`ZeroDivisionError`、`NameError`、`TypeError`  \n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。\n\n### 异常处理\n\n异常处理的格式是：  \n```python\ntry:\n    <code_segment>\nexcept [ErrorType]:\n    <solute_segment>\n[...\nexcept:\n    <solute_segment>\n]\n[else:\n    <code_segment>]\n[finally:\n    <code_segment>]\n```\n\n异常处理的工作流程如下：\n+ try代码块为要执行的代码，被先执行;\n+ 如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;\n+ 如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;\n+ 如果try代码块没有产生异常则执行else代码块(如果有);\n+ 最后执行finally代码块, finally 语句无论异常是否发生都会执行。\n\n> 一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:\n> ```python\n> except (RuntimeError, TypeError, NameError):\n>     pass\n> ```\n\n### 抛出异常\n\npython使用raise关键字向上层抛出异常:  \n\n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise ValueError\nexcept ValueError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。 \nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。  \nraise后面如果不跟具体异常，这样会向上抛出`RuntimeError`:  \n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise\nexcept RuntimeError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n异常输出：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\" , line 4, in <module>\n    raise\nRuntimeError: No active exception to reraise\n```\n\n### 自定义异常\n\n用户可以通过[继承](#继承)Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:  \n```Python\nclass MyError(Exception):\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ntry:\n    raise MyError(0)\nexcept MyError as e:\n    print(\"error code:\", e.value)\n\nraise MyError(\"MyError\")\n```\n\n以上代码的输出结果为：  \n> error code: 0\n> Traceback (most recent call last):\n  File \"&lt;stdin>\", line 14, in &lt;module>\n    raise MyError(\"MyError\")\n> \\_\\_main\\_\\_.MyError: 'MyError'  \n\n\n> 大多数的异常的名字都以\"Error\"结尾，就跟标准的异常命名一样。\n\n### assert(断言)\n\nPython assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。  \n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  \n\n语法格式为：  \n```python\nassert expression\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError\n```\n\nassert 后面也可以紧跟参数:  \n```python\nassert expression [, arguments]\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError(arguments)\n```\n\n下面是实例：  \n```python\nassert True\nprint(\"正常运行\")\nassert False\n```\n\n输出结果为：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert False\nAssertionError\n```\n\n带参数的实例：  \n```python\nassert 1>2, \"1大于2是错误的\"\n```\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert 1 > 2, \"1大于2是错误的\"\nAssertionError: 1大于2是错误的\n```\n\n以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：\n```python\nimport sys\nassert ('linux' in sys.platform), \"该代码只能在 Linux 下执行\"\n\n# 接下来要执行的代码\n```\n\n### with关键字\n\nPython 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。  \nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。  \n在处理文件对象时使用 with 关键字是一种很好的做法。  \n我们可以看下以下几种代码实例：  \n不使用 with，也不使用 try…except…finally\n```python\nfile = open('./test.txt', 'w')\nfile.write('hello world !')\nfile.close()\n```\n\n以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  \n\n```python\nfile = open('./test.txt', 'w')\ntry:\n    file.write('hello world')\nfinally:\n    file.close()\n```\n\n以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。\n\n使用 with 关键字：\n```python\nwith open('./test.txt', 'w') as file:\n    file.write('hello world !')\n```\n\n使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。  \n我们可以在执行 with 关键字后检验文件是否关闭：\n```python\nwith open(\"./test.txt\") as f:\n    print(f.closed)\nprint(f.closed)\n```\n\n以上代码输出结果为：  \n> False  \n> True\n\nwith 语句实现原理建立在上下文管理器之上。  \n上下文管理器是一个实现 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法的类。  \n使用 with 语句确保在嵌套块的末尾调用 \\_\\_exit\\_\\_ 方法。  \n这个概念类似于 try...finally 块的使用。\n\n> 在文件对象中定义了 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法，即文件对象也实现了上下文管理器，首先调用 \\_\\_enter\\_\\_ 方法，然后执行 with 语句中的代码，最后调用 \\_\\_exit\\_\\_ 方法。 即使出现错误，也会调用 \\_\\_exit\\_\\_ 方法，也就是会关闭文件流。\n\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n\n*****************************\n\n## Python面向对象\n\n### 面向对象技术简介\n\n+ 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n+ 方法：类中定义的函数。\n+ 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\n+ 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。\n+ 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\n+ 局部变量：定义在方法中的变量，只作用于当前实例的类。\n+ 实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。\n+ 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\n+ 实例化：创建一个类的实例，类的具体对象。\n+ 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\n\n### 定义类\n\n```python\nclass ClassName:\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。\n\n### 类对象\n\n类对象支持两种操作：属性引用和实例化。\n属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。\n类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:  \n\n```Python\nclass MyClass:\n    \"\"\"一个简单的类实例\"\"\"\n    i = 12345\n    def f(self):\n        return 'hello world'\n\n# 实例化类\nx = MyClass()\n \n# 访问类的属性和方法\nprint(\"MyClass 类的属性 i 为：\", x.i)\nprint(\"MyClass 类的方法 f 输出为：\", x.f())\n```\n\n以上代码的运行结果是：  \n> MyClass 类的属性 i 为： 12345  \n> MyClass 类的方法 f 输出为： hello world\n\n类有一个名为 \\_\\_init\\_\\_() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：  \n\n```python\ndef __init__(self):\n    self.data = []\n```\n\n类定义了 \\_\\_init\\_\\_() 方法，类的实例化操作会自动调用 \\_\\_init\\_\\_() 方法。  \n当然， \\_\\_init\\_\\_() 方法可以有参数，参数通过 \\_\\_init\\_\\_() 传递到类的实例化操作上。例如:\n\n```python \nclass Complex:\n    def __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\nx = Complex(3.0, -4.5)\nprint(x.r, x.i)   # 输出结果：3.0 -4.5\n```\n\n***self代表类的实例，而非类***\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。\n\n```python\nclass Test:\n    def prt(self):\n        print(self)\n        print(self.__class__)\n \nt = Test()\nt.prt()\n```\n\n以上代码的运行结果为：  \n> &lt;\\_\\_main\\_\\_.Test instance at 0x0000025D089CCFD0>\n> \\_\\_main\\_\\_.Test\n\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。\n\nself 不是 python 关键字，我们把他换成其他也是可以正常执行的\n\n### 类的方法\n\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。\n\n```python\n#类定义\nclass people:\n    #定义基本属性\n    name = ''\n    age = 0\n    #定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    #定义构造方法\n    def __init__(self,n,a,w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))\n \n# 实例化类\np = people('sam',10,30)\np.speak()\n```\n\n以上代码的输出结果为：  \n> sam 说: 我 10 岁。\n\n### 继承\n\n派生类的定义语法如下：  \n\n```python\nclass DerivedClassName(BaseClassName):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。\n\nBaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:  \n```python\nclass DerivedClassName(modname.BaseClassName):\n```\n\n单继承：  \n\n```python\n#类定义\nclass people:\n    #定义基本属性\n    name = ''\n    age = 0\n    #定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    #定义构造方法\n    def __init__(self,n,a,w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))\n \n#单继承示例\nclass student(people):\n    grade = ''\n    def __init__(self,n,a,w,g):\n        #调用父类的构函\n        people.__init__(self,n,a,w)\n        self.grade = g\n    #覆写父类的方法\n    def speak(self):\n        print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade))\n \n\ns = student('ken',10,60,3)\ns.speak()\n```\n\n以上代码的输出结果为：  \n> ken 说: 我 10 岁了，我在读 3 年级\n\n### 多继承\n\nPython同样有限的支持多继承形式。多继承的类定义形如下例:  \n```python\nclass DerivedClassName(Base1, Base2, Base3):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。\n\n```python\n# 类定义\nclass people:\n    # 定义基本属性\n    name = \"\"\n    age = 0\n    # 定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    # 定义构造方法\n    def __init__(self, n, a, w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" % (self.name, self.age))\n\n\n# 单继承示例\nclass student(people):\n    grade = \"\"\n\n    def __init__(self, n, a, w, g):\n        # 调用父类的构函\n        people.__init__(self, n, a, w)\n        self.grade = g\n\n    # 覆写父类的方法\n    def speak(self):\n        print(\"%s 说: 我 %d 岁了，我在读 %d 年级\" % (self.name, self.age, self.grade))\n\n\n# 另一个类，多重继承之前的准备\nclass speaker:\n    topic = \"\"\n    name = \"\"\n\n    def __init__(self, n, t):\n        self.name = n\n        self.topic = t\n\n    def speak(self):\n        print(\"我叫 %s，我是一个演说家，我演讲的主题是 %s\" % (self.name, self.topic))\n\n\n# 多重继承\nclass sample(speaker, student):\n    a = \"\"\n\n    def __init__(self, n, a, w, g, t):\n        student.__init__(self, n, a, w, g)\n        speaker.__init__(self, n, t)\n\n\ntest = sample(\"Tim\", 25, 80, 4, \"Python\")\ntest.speak()  # 方法名同，默认调用的是在括号中参数位置排前父类的方法\n```\n\n以上代码的运行结果为：  \n> 我叫 Tim，我是一个演说家，我演讲的主题是 Python\n\n### 方法重写\n\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下：\n\n```python\nclass Parent:        # 定义父类\n   def myMethod(self):\n      print ('调用父类方法')\n \nclass Child(Parent): # 定义子类\n   def myMethod(self):\n      print ('调用子类方法')\n \nc = Child()          # 子类实例\nc.myMethod()         # 子类调用重写方法\nsuper(Child,c).myMethod() # 用子类对象调用父类已被覆盖的方法\n```\n<!-- TODO: super() -->\n[`super()`](#super) 函数是用于调用父类(超类)的一个方法。  \n执行以上程序输出结果为：\n> 调用子类方法  \n> 调用父类方法\n\n### 类属性和方法\n\n**类的私有属性**\n\\_\\_private\\_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.\\_\\_private\\_attrs。\n\n**类的方法**\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。  \nself 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。\n\n**类的私有方法**\n\\_\\_private\\_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.\\_\\_private\\_methods。\n\n```python\nclass JustCounter:\n    __secretCount = 0  # 私有变量\n    publicCount = 0    # 公开变量\n \n    def count(self):\n        self.__secretCount += 1\n        self.publicCount += 1\n        print (self.__secretCount)\n \ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint (counter.publicCount)\nprint (counter.__secretCount)  # 报错，实例不能访问私有变量\n```\n\n以上代码的输出结果为：  \n> 1  \n> 2  \n> 2  \n> Traceback (most recent call last):    \n>   File \"test.py\", line 16, in &lt;module>  \n>     print (counter.__secretCount)  # 报错，实例不能访问私有变量  \n> AttributeError: 'JustCounter' object has no attribute '__secretCount'  \n\n### 私有变量\n\n那种仅限从一个对象内部访问的“私有”实例变量在 Python 中并不存在。 但是，大多数 Python 代码都遵循这样一个约定：带有一个下划线的名称 (例如 \\_spam) 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。 这应当被视为一个实现细节，可能不经通知即加以改变。  \n由于存在对于类私有成员的有效使用场景（例如避免名称与子类所定义的名称相冲突），因此存在对此种机制的有限支持，称为 名称改写。 任何形式为 \\_\\_spam 的标识符（至少带有两个前缀下划线，至多一个后缀下划线）的文本将被替换为 \\_classname\\_\\_spam，其中 classname 为去除了前缀下划线的当前类名称。 这种改写不考虑标识符的句法位置，只要它出现在类定义内部就会进行。\n\n名称改写有助于让子类重载方法而不破坏类内方法调用。\n\n<!-- TODO：私有变量 -->\n\n### 类的专有方法\n\n+ \\_\\_init\\_\\_ : 构造函数，在生成对象时调用\n+ \\_\\_del\\_\\_ : 析构函数，释放对象时使用\n+ \\_\\_repr\\_\\_ : 打印，转换\n+ \\_\\_setitem\\_\\_ : 按照索引赋值\n+ \\_\\_getitem\\_\\_: 按照索引获取值\n+ \\_\\_len\\_\\_: 获得长度\n+ \\_\\_cmp\\_\\_: 比较运算\n+ \\_\\_call\\_\\_: 函数调用\n+ \\_\\_add\\_\\_: 加运算\n+ \\_\\_sub\\_\\_: 减运算\n+ \\_\\_mul\\_\\_: 乘运算\n+ \\_\\_truediv\\_\\_: 除运算\n+ \\_\\_mod\\_\\_: 求余运算\n+ \\_\\_pow\\_\\_: 乘方\n\n### 运算符重载\n\nPython同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下：\n\n```python\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n \n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n \nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint (v1 + v2)\n```\n\n以上代码的运行结果为：  \n> Vector(7,8)\n\n********************************\n\n## Python命名空间和作用域\n\n### 命名空间\n\n先看看官方文档的一段话：\n\n> A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。\n> \n> 命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。\n\n命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。  \n我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。\n\n一般有三种命名空间：  \n\n+ 内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。\n+ 全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。\n+ 局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）\n\n![命名空间](命名空间.png)\n\n命名空间查找顺序:  \n假设我们要使用变量 test，则 Python 的查找顺序为：**局部的命名空间去 -> 全局命名空间 -> 内置命名空间**。\n如果找不到变量 test，它将放弃查找并引发一个 NameError 异常:\n\n```python\nNameError: name 'test' is not defined。\n```\n\n命名空间的生命周期：  \n命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。   \n因此，我们无法从外部命名空间访问内部命名空间的对象。\n\n```python\n# var1 是全局名称\nvar1 = 5\ndef some_func():\n \n    # var2 是局部名称\n    var2 = 6\n    def some_inner_func():\n \n        # var3 是内嵌的局部名称\n        var3 = 7\n```\n\n如下图所示，相同的对象名称可以存在于多个命名空间中。\n\n![命名空间-2](命名空间-2.png)\n\n### 作用域\n\n> A scope is a textual region of a Python program where a namespace is directly accessible. \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace.\n\n作用域就是一个 Python 程序可以直接访问命名空间的正文区域。  \n在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。  \nPython 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。  \n\n变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：\n\n+ L（Local）：最内层，包含局部变量，比如一个函数/方法内部。\n+ E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。\n+ G（Global）：当前脚本的最外层，比如当前模块的全局变量。\n+ B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。\n\n在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。\n\n![作用域](作用域.png)\n\n```python\ng_count = 0  # 全局作用域\ndef outer():\n    o_count = 1  # 闭包函数外的函数中\n    def inner():\n        i_count = 2  # 局部作用域\n```\n\n内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:  \n\n```python\nimport builtins\nprint(dir(builtins))\n```\n\n以上代码的输出结果为：  \n> ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '\\_\\_build_class\\_\\_', '\\_\\_debug\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_import\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n\nPython 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问.\n\n```python\nif True:\n    test = \"test\"\nprint(test)\n```\n\n以上代码的输出结果为：  \n> test\n\n实例中 test 变量定义在 if 语句块中，但外部还是可以访问的。  \n如果将 test 定义在函数中，则它就是局部变量，外部不能访问：\n\n```python\ndef test_func():\n    test = \"test\"\n    return None\n\nprint(test)\n```\n\n以上代码的运行结果为：  \n> Traceback (most recent call last):\n>   File \"&lt;stdin>\", line 1, in &lt;module>\n> NameError: name 'test' is not defined\n\n从报错的信息上看，说明了 test 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。\n\n### 全局变量和局部变量\n\n定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。  \n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。  \n\n```python\ntotal = 0 # 这是一个全局变量\n# 可写函数说明\ndef sum( arg1, arg2 ):\n    #返回2个参数的和.\"\n    total = arg1 + arg2 # total在这里是局部变量.\n    print (\"函数内是局部变量 : \", total)\n    return total\n \n#调用sum函数\nsum( 10, 20 )\nprint (\"函数外是全局变量 : \", total)\n```\n\n以上实例输出结果：\n> 函数内是局部变量 :  30   \n> 函数外是全局变量 :  0\n\n### global和nonlocal关键字\n\n当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。\n\n```python\nnum = 1\ndef fun1():\n    global num  # 需要使用 global 关键字声明\n    print(num) \n    num = 123\n    print(num)\nfun1()\nprint(num)\n```\n\n以上代码的运行结果为：  \n> 1  \n> 123  \n> 123\n\n如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：\n\n```python\ndef outer():\n    num = 10\n    def inner():\n        nonlocal num   # nonlocal关键字声明\n        num = 100\n        print(num)\n    inner()\n    print(num)\nouter()\n```\n\n以上代码的运行结果为：  \n> 100  \n> 100\n\n************************************\n\n## Python标准库概览\n\n### 操作系统接口\n\n`os模块`提供了不少与操作系统相关联的函数。更多请参见：[Python os模块](#Python-os模块)和[Python os模块方法](#Python-os模块方法)\n\n> 建议使用 \"import os\" 风格而非 \"from os import *\"。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。\n\n针对日常的文件和目录管理任务，`shutil模块`提供了一个易于使用的高级接口，更多请见：[Python shutil模块](Python-shutil模块方法)\n\n### 文件通配符\n\n`glob模块`提供了一个函数用于从目录通配符搜索中生成文件列表：  \n\n```python\nimport glob\nprint(glob.glob('*.py'))\n```\n\n```python\n['quick.py', 'quick2.py']\n```\n\n### 命令行参数\n\n通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 \"python demo.py one two three\" 后可以得到以下输出结果:  \n\n```python\n>>> import sys\n>>> print(sys.argv)\n['demo.py', 'one', 'two', 'three']\n```\n\n### 错误输出重定向和程序终止\n\nsys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。   \n大多脚本的定向终止都使用 \"sys.exit()\"。\n\n```python\nimport sys\n\nsys.stderr.write(\"stderr.write_test\\n\")\n\nsys.exit()\n\nprint(0)\n```\n\n```\nstderr.write_test\n\n```\n\n### 字符串正则匹配\n\n`re模块`为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:\n\n```python\nimport re\nprint(re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest'))\nprint(re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat'))\n```\n\n以上代码的运行结果为：  \n> ['foot', 'fell', 'fastest']   \n> 'cat in the hat'\n\n如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:\n\n```python\n>>> 'tea for too'.replace('too', 'two')\n'tea for two'\n```\n\n更多关于正则表达式表达见后文[正则表达式](#Python正则表达式)\n\n### 数学\n\npython提供了`math模块`对简单数学支持，以及`random模块`对随机数的支持。\n\n### 访问互联网\n\n有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib。\n\n### 日期和时间\n\n`datetime模块`为日期和时间处理同时提供了简单和复杂的方法。  \n支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。\n该模块还支持时区处理:  \n\n```python\n# dates are easily constructed and formatted\nimport datetime\n\nnow = datetime.date.today()\nprint(now)\nprint(datetime.date(2023, 12, 2))\nprint(now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\"))\n\n# dates support calendar arithmetic\nbirthday = datetime.date(1964, 7, 31)\nage = now - birthday\nprint(age.days)\n```\n\n```\n2022-02-21\n2023-12-02\n02-21-22. 21 Feb 2022 is a Monday on the 21 day of February.\n21024\n```\n\n### 数据压缩\n\n以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。\n\n```python\nimport zlib\n\ns = b\"witch which has which witches wrist watch\"\nprint(len(s))\n\nt = zlib.compress(s)\nprint(len(t))\n\nprint(zlib.decompress(t))\nprint(zlib.crc32(s))\n```\n\n```\n41\n37\nb'witch which has which witches wrist watch'\n226805979\n```\n\n### 性能度量\n\n有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。\n例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。\n\n```python\n>>> from timeit import Timer\n>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\n>>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791\n```\n\n相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具。\n\n### 测试模块\n\n开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试  \n`doctest模块`提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。  \n测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。   \n通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:\n\n```python\ndef average(values):\n    \"\"\"Computes the arithmetic mean of a list of numbers.\n\n    >>> print(average([20, 30, 70]))\n    40.0\n    \"\"\"\n    return sum(values) / len(values)\n\nimport doctest\ndoctest.testmod()   # 自动验证嵌入测试\n```\n\n以上代码的运行结果为：  \n> TestResults(failed=0, attempted=1)\n\n`unittest模块`不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集:\n\n```python\nimport unittest\n\nclass TestStatisticalFunctions(unittest.TestCase):\n\n    def test_average(self):\n        self.assertEqual(average([20, 30, 70]), 40.0)\n        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n        self.assertRaises(ZeroDivisionError, average, [])\n        self.assertRaises(TypeError, average, 20, 30, 70)\n\nunittest.main() # Calling from the command line invokes all tests\n```\n\n*************************************\n\n## Python正则表达式\n\n正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。  \n`re 模块`使 Python 语言拥有全部的正则表达式功能。  \n\ncompile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。  \nre 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。  \n\n本章节主要介绍 Python 中常用的正则表达式处理函数，如果你对正则表达式不了解，可以查看[正则表达式](/cn/regex)。\n\n### re.match函数\n\nre.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。\n\n函数语法：\n```python\nre.match(pattern, string, flags=0)\n```\n\n函数参数说明：  \n+ pattern : 匹配的正则表达式\n+ string : 要匹配的字符串。\n+ flags : 可选参数，标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：[正则表达式修饰符](#正则表达式修饰符)\n\n匹配成功re.match方法返回一个匹配的对象，否则返回None。  \n\n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。  \n+ group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。\n+ groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。\n\n以下是实例：  \n\n```python\nimport re\n\nprint(re.match(\"www\", \"www.baidu.com\").span())  # 在起始位置匹配\nprint(re.match(\"com\", \"www.baidu.com\"))  # 不在起始位置匹配\n\nline = \"Cats are smarter than dogs\"\n# .* 表示任意匹配除换行符（\\n、\\r）之外的任何单个或多个字符\n# (.*?) 表示\"非贪婪\"模式，只保存第一个匹配到的子串\nmatchObj = re.match(r\"(.*) are (.*?) .*\", line, re.M | re.I)\n\nif matchObj:\n    print(\"matchObj.group() : \", matchObj.group())\n    print(\"matchObj.group(1) : \", matchObj.group(1))\n    print(\"matchObj.group(2) : \", matchObj.group(2))\n    print(\"matchObj.groups() : \", matchObj.groups())\nelse:\n    print(\"No match!!\")\n```\n\n以上代码的运行结果为：  \n> (0, 3)  \n> None  \n> matchObj.group() :  Cats are smarter than dogs  \n> matchObj.group(1) :  Cats  \n> matchObj.group(2) :  smarter  \n> matchObj.groups() :  ('Cats', 'smarter')\n\n\n### re.search函数\n\nre.search扫描整个字符串并返回第一个成功的匹配。\n\n函数语法：\n\n```python \nre.search(pattern, string, flags=0)\n```\n\n函数参数说明：  \n+ pattern : 匹配的正则表达式\n+ string : 要匹配的字符串\n+ flags : 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：[正则表达式修饰符](#正则表达式修饰符)\n\n匹配成功re.search方法返回一个匹配的对象，否则返回None。   \n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。\n\n<!-- TODO: 正则表达式补全 -->\n\n**********************************\n\n## Python操作MySQL\n\nMySQL是最流行的关系型数据库管理系统。\nPython连接mysql数据库的方法有`mysql-connector`和`PyMySQL`两种，接下来我们来介绍这两个模块。\n\n```base\npython -m pip install mysql-connector\n```\n\n```base\npython -m pip install PyMySQL\n```\n\n使用以下代码测试mysql-connector/pymysql是否安装成功：  \n\n```python\nimport mysql.connector\n```\n\n```python\nimport pymysql\n```\n\n执行以上代码，如果没有产生错误，表明安装成功。\n\n两个模块的方法基本一致.\n\n### 创建数据库连接\n\n可以使用以下代码来连接数据库：  \n\n```python\nimport mysql.connector\n\ndb = mysql.connector.connect(\n    host = \"localhost\",   # 数据库主机地址\n    user = \"yourusername\",    # 数据库用户名\n    passwd = \"yourpassword\"    #  数据库密码 \n)\n\nprint(db)\n```\n\n如果出现以下错误：  \n```\nmysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported\n```\n\n是因为你的 MySQL 是 8.0 以上版本，密码插件验证方式发生了变化，早期版本为 mysql_native_password，8.0 版本为 caching_sha2_password，所以需要做些改变：\n\n```python\ndb = mysql.connector.connect(\n    host = \"localhost\",   # 数据库主机地址\n    user = \"yourusername\",    # 数据库用户名\n    passwd = \"yourpassword\",    #  数据库密码 \n    database = \"yourdatabase\",   # 选择数据库\n    auth_plugin=\"mysql_native_password\"     # 选择密码插件验证方式为mysql_native_password\n)\n```\n\n或者修改mysql的my.ini配置：\n\n```python\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\n```\n\n### 数据库操作\n\n在连接好数据库后，我们使用cursor.execute(sql)来执行数据库操作,并用迭代器打印结果：  \n\n```python\n# 假设以连接好数据库db = mysql.connector.connect()\n\ncursor= db.cursor()\n\ncursor.execute(\"use mydb\")\n\ncursor.execute(\"show tables\")\n\nfor x in cursor:\n    print(x)\n```\n\n执行的sql语句参见[mysql](/cn/mysql)\n\n<!-- TODO: mysql博客 -->\n\n当使用sql语句导致数据表内容有更新时，必须使用db.commit()提交\n\n> cursor.rowcount为更改的行数\n\ncursor.execute()只会执行一次数据操作，如果要执行批量插入修改等操作，需要使用executemany(sql,args_tuple_list)方法。该方法的第二参数是一个元组列表,包含要操作的数据。如：  \n\n```python\nsql = \"insert into testtable (name,value) values (%s,%s)\"\nval = [\n    ('name1','1'),\n    ('name2','2'),\n    ('name3','3'),\n    ('name4','4')\n]\n\ncursor.executemany(sql,val)\n\ndb.commit()\n\nprint(mycursor.rowcount, \"记录插入成功。\")\n```\n\n> mycursor.lastrowid表示最新数据记录的ID\n\n如果使用查询，可以使用fetchall()获取所有记录，或者fetchone/fetchmany等选择性获取。\n\nfetchall返回的是一个列表，记录存储为元组。\n\n#### 使用预处理格式（占位符格式）\n\n可以查看一下execute()方法的定义：\n\n```python\nclass MySQLCursor(CursorBase):\n    '''\n        省略很多方法和变量\n    '''\n \n    def execute(self, operation, params=None, multi=False):\n        \"\"\"Executes the given operation\n \n        Executes the given operation substituting any markers with\n        the given parameters.\n \n        For example, getting all rows where id is 5:\n          cursor.execute(\"SELECT * FROM t1 WHERE id = %s\", (5,))\n \n        The multi argument should be set to True when executing multiple\n        statements in one operation. If not set and multiple results are\n        found, an InterfaceError will be raised.\n \n        If warnings where generated, and connection.get_warnings is True, then\n        self._warnings will be a list containing these warnings.\n \n        Returns an iterator when multi is True, otherwise None.\n        \"\"\"\n```\n\n第1个参数是要执行的SQL语句，其中，参数位置先使用占位符来占位.   \n第2个参数是一个tuple（元组），元素值就是SQL占位符对应的参数，注意只有一个参数的时候，要写成(xxx,)，后面的逗号不要忘记。  \n第3个参数是一个bool值，表示第一个参数是不是多个SQL语句，如果是的话，就传入True，否则传入False。\n\n**注意，在SQL中的占位符，统一写%s, 具体的类型，是在tuple中，传入的参数元素类型决定**\n\n#### 关闭数据库连接\n\n使用db.close()关闭数据库连接\n\n#### 数据库回滚\n\n如果数据库发生错误，建议使用db.rollback()进行回滚\n\n***********************************\n\n## Python多线程\n\n多线程类似于同时执行多个不同程序，多线程运行有如下优点：\n\n+ 使用线程可以把占据长时间的程序中的任务放到后台去处理。\n+ 用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。\n+ 程序的运行速度可能加快。\n+ 在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。\n\n每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。  \n每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。  \n指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。  \n\n+ 线程可以被抢占（中断）。\n+ 在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） -- 这就是线程的退让。\n\n线程可以分为:\n\n+ 内核线程：由操作系统内核创建和撤销。\n+ 用户线程：不需要内核支持而在用户程序中实现的线程。\n\nPython3 线程中常用的两个模块为：\n\n+ \\_thread\n+ threading(推荐使用)\n\nthread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用\"thread\" 模块。为了兼容性，Python3 将 thread 重命名为 \"\\_thread\"。\n\nPython3 通过两个标准库 \\_thread 和 threading 提供对线程的支持。  \n\\_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。  \nthreading 模块除了包含 \\_thread 模块中的所有方法外，还提供的其他方法：\n\n+ threading.currentThread(): 返回当前的线程变量。\n+ threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。\n+ threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。\n\n除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:\n\n+ run(): 用以表示线程活动的方法。\n+ start():启动线程活动。\n+ join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。\n+ isAlive(): 返回线程是否活动的。\n+ getName(): 返回线程名。\n+ setName(): 设置线程名。\n\n### \\_thread模块\n\nPython中使用线程有两种方式：函数或者用类来包装线程对象。\n\n函数式：调用 \\_thread 模块中的`start_new_thread`()函数来产生新线程。语法如下:   \n\n```python\n_thread.start_new_thread ( function, args[, kwargs] )\n```\n\n参数说明:\n\n+ function - 线程函数。\n+ args - 传递给线程函数的参数,他必须是个tuple类型。\n+ kwargs - 可选参数。\n\n以下是一个实例：  \n\n```python\nimport _thread\nimport time\n\n\n# 为线程定义一个函数\ndef print_time(threadName, delay, loopTime):\n    count = 0\n    while count < loopTime:\n        time.sleep(delay)\n        count += 1\n        print(\"%s: %s\" % (threadName, time.ctime(time.time())))\n\n\n# 创建两个线程\ntry:\n    _thread.start_new_thread(print_time, (\"Thread-1\", 2, 5))\n    _thread.start_new_thread(print_time, (\"Thread-2\", 4, 6))\nexcept:\n    print(\"Error: 无法启动线程\")\n\nwhile 1:\n    pass\n```\n\n以上代码的输出结果为：  \n\n> Thread-1: Tue Mar 22 16:16:05 2022\n> Thread-2: Tue Mar 22 16:16:07 2022\n> Thread-1: Tue Mar 22 16:16:07 2022\n> Thread-1: Tue Mar 22 16:16:09 2022\n> Thread-2: Tue Mar 22 16:16:11 2022\n> Thread-1: Tue Mar 22 16:16:11 2022\n> Thread-1: Tue Mar 22 16:16:13 2022\n> Thread-2: Tue Mar 22 16:16:15 2022\n> Thread-2: Tue Mar 22 16:16:19 2022\n> Thread-2: Tue Mar 22 16:16:23 2022\n> Thread-2: Tue Mar 22 16:16:27 2022\n\n### treading模块\n\n我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：\n\n```Python\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, delay):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.delay = delay\n    def run(self):\n        print (\"开始线程：\" + self.name)\n        print_time(self.name, self.delay, 5)\n        print (\"退出线程：\" + self.name)\n\ndef print_time(threadName, delay, counter):\n    while counter:\n        if exitFlag:\n            threadName.exit()\n        time.sleep(delay)\n        print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n        counter -= 1\n\n# 创建新线程\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# 开启新线程\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint (\"退出主线程\")\n```\n\n以上代码的运行结果为： \n\n> 开始线程：Thread-1  \n> 开始线程：Thread-2\n> Thread-1: Tue Mar 22 16:31:08 2022\n> Thread-1: Tue Mar 22 16:31:09 2022\n> Thread-2: Tue Mar 22 16:31:09 2022\n> Thread-1: Tue Mar 22 16:31:10 2022\n> Thread-1: Tue Mar 22 16:31:11 2022\n> Thread-2: Tue Mar 22 16:31:11 2022\n> Thread-1: Tue Mar 22 16:31:12 2022\n> 退出线程：Thread-1\n> Thread-2: Tue Mar 22 16:31:13 2022\n> Thread-2: Tue Mar 22 16:31:16 2022\n> Thread-2: Tue Mar 22 16:31:18 2022\n> 退出线程：Thread-2\n> 退出主线程\n\n### 线程同步\n\n如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。  \n使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：\n\n多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。  \n考虑这样一种情况：一个列表里所有元素都是0，线程\"set\"从后向前把所有元素改成1，而线程\"print\"负责从前往后读取列表并打印。  \n那么，可能线程\"set\"开始改的时候，线程\"print\"便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。  \n锁有两种状态——锁定和未锁定。每当一个线程比如\"set\"要访问共享数据时，必须先获得锁定；如果已经有别的线程比如\"print\"获得锁定了，那么就让线程\"set\"暂停，也就是同步阻塞；等到线程\"print\"访问完毕，释放锁以后，再让线程\"set\"继续。  \n经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。\n\n```Python\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, delay):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.delay = delay\n    def run(self):\n        print (\"开启线程： \" + self.name)\n        # 获取锁，用于线程同步\n        threadLock.acquire()\n        print_time(self.name, self.delay, 3)\n        # 释放锁，开启下一个线程\n        threadLock.release()\n\ndef print_time(threadName, delay, counter):\n    while counter:\n        time.sleep(delay)\n        print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n        counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# 创建新线程\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# 开启新线程\nthread1.start()\nthread2.start()\n\n# 添加线程到线程列表\nthreads.append(thread1)\nthreads.append(thread2)\n\n# 等待所有线程完成\nfor t in threads:\n    t.join()\nprint (\"退出主线程\")\n```\n\n### 线程优先级队列\n\nPython 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。  \n这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。  \nQueue 模块中的常用方法:\n\n+ Queue.qsize() 返回队列的大小\n+ Queue.empty() 如果队列为空，返回True,反之False\n+ Queue.full() 如果队列满了，返回True,反之False\n+ Queue.full 与 maxsize 大小对应\n+ Queue.get([block[, timeout]])获取队列，timeout等待时间\n+ Queue.get_nowait() 相当Queue.get(False)\n+ Queue.put(item) 写入队列，timeout等待时间\n+ Queue.put_nowait(item) 相当Queue.put(item, False)\n+ Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号\n+ Queue.join() 实际上意味着等到队列为空，再执行别的操作\n\n\n```Python\n\nimport queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, q):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.q = q\n    def run(self):\n        print (\"开启线程：\" + self.name)\n        process_data(self.name, self.q)\n        print (\"退出线程：\" + self.name)\n\ndef process_data(threadName, q):\n    while not exitFlag:\n        queueLock.acquire()\n        if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print (\"%s processing %s\" % (threadName, data))\n        else:\n            queueLock.release()\n        time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# 创建新线程\nfor tName in threadList:\n    thread = myThread(threadID, tName, workQueue)\n    thread.start()\n    threads.append(thread)\n    threadID += 1\n\n# 填充队列\nqueueLock.acquire()\nfor word in nameList:\n    workQueue.put(word)\nqueueLock.release()\n\n# 等待队列清空\nwhile not workQueue.empty():\n    pass\n\n# 通知线程是时候退出\nexitFlag = 1\n\n# 等待所有线程完成\nfor t in threads:\n    t.join()\nprint (\"退出主线程\")\n```\n\n*************************************\n\n## Python MongoDB\n\nMongoDB 是目前最流行的 NoSQL 数据库之一，使用的数据类型 BSON（类似 JSON）。  \n关于MongoDB 数据库以查看这篇[MongoDB博客](/cn/mongodb)。\n\nmongoDB下载：<https://www.mongodb.com/try/download/community>\n\n<!-- TODO： mongodb blog -->\n\n*************************************\n\n<!-- TODO: argparse -->\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<!-- TODO: dir() 和 help() -->\n\n******************************\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n## Python os模块方法\n\n********************************\n\n## Python math模块方法\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块方法\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n## Python shutil模块方法\n\n**************************************\n\n## Python re模块方法\n\n**************************************\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>\n\n*************************************\n\n### str()和repr()的区别","source":"_posts/cn/Python-Note.md","raw":"---\ntitle: Python学习笔记\ncatalog: true\nlang: cn\ndate: 2021-11-04 15:25:13\nsubtitle: Python学习笔记\nheader-img: /img/header_img/nier.png\ntags:\n- Python\ncategories:\n- Note\nsticky: 999\n---\n> Python3和Python2在部分使用上有区别，详情请参见官方文档\n> 本文使用的是`Python3`\n\n## python安装\n\n1. 访问[Python官网](https://www.python.org/)并下载Python  \nwindows下载地址<https://www.python.org/downloads/windows/>  \n安装完成后打开命令提示符窗口输入`python`查看是否安装成功。  \n2. 配置环境变量\n3. 安装IDE/编辑器:vscode  \n    + Pycharm\n    + Rider \n4. 创建py文件\n\n## python基本语法\n\n### 编码\n<!-- TODO: 编码 -->\n\n### 标识符\n\n+ 第一个字符必须是字母表中字母或下划线 _ 。\n+ 标识符的其他的部分由字母、数字和下划线组成。\n+ 标识符对大小写敏感。\n+ 非关键字\n\n> 在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。\n\n***********************************\n\n### 语句\n\nPython中通常一行表示一个语句，末尾不需加上分号\";\".\n\n```python\nprint(\"hello world\")\n```\n\n***`多行语句`***\n\nPython 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠` \\ `来实现多行语句，例如：\n```py\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n\n但在 [], {}, 或 () 中的多行语句，`不需要使用反斜杠 \\` ，例如：\n```py\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```\n\n***`空行`***\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。  \n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。  \n\n> 空行也是程序代码的一部分。\n\n***`同行多条语句`***\n\nPython 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：\n\n```py\nc = 5; print(\"a\"); print(\"b\"); print(c)\n```\n\n***`pass语句`***\nPython pass是空语句，是为了保持程序结构的完整性。  \npass 不做任何事情，一般用做占位语句，如下实例：  \n```Python\nwhile True: \n    pass # 等待键盘中断 (Ctrl+C)\n```\n\n**********************************\n\n### 变量赋值\n\n使用等号为变量赋值：\n\n```py\na = 1\nb = 2.0\nc = \"str\"\n```\n\n也可以同时为多个变量赋值：\n\n```py\na = b = c = 1   # 从右到左依次赋值   \na, b, c = 1, 2.0, \"str\"   # 同时分别赋值\n```\n\n在Python中，类型属于对象，变量是没有类型的：  \n```Python\na = 'str'\n```\n\n在以上代码中，'str'是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向'str'这个String类型对象。\n\n***********************************\n\n### 关键字\n\n关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：  \n\n```python \nimport keyword\n\nprint(keyword.kwlist)\n```\n\n以上代码的输出结果为（版本Python 3.9.8）：  \n> ['False', 'None', 'True', '\\_\\_peg\\_parser\\_\\_', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\n***********************************\n\n### 注释\n\n***`单行注释`***\nPython的单行注释使用`#`号：  \n```python\n# 单行注释\na = 1  # 注释\n```\n\n***`多行注释`***\nPython的多行注释使用` ''' ` 或 ` \"\"\" `:  \n```python\n'''\n多行\n注释\n1\n'''\n\n\"\"\"\n多行注释\n2\n\"\"\"\n\n```\n\n*************************\n\n### 代码块\n\n和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。  \n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n```\n\n如果同一代码块的缩进空格数不一致，会导致运行错误：  \n\n```python\nif True:\n    print (\"True\")\nelse:\n    print (\"False\")\n  print(\"error\")\n```\n\n以上代码的输出结果为：  \n>   File \"&lt;tokenize>\", line 5\n>     print(\"error\")\n>     ^\n> IndentationError: unindent does not match any outer indentation level\n\n***********************************\n\n### 输入输出\n\nPython的内置函数[input()](#input)和[print()](#print)分别表示输入和输出:  \n\n```python\ninput(\"\\n\\n按下 enter 键后退出。\")\n\nprint(\"输出\")\nprint(\"print默认是换行的，如果不需要换行需要在后面参数加上end=''\",end = '')\n```\n\n*******************************\n\n### 导入import\n在 python 用 `import` 或者 `from...import` 来导入相应的模块。\n将整个模块(somemodule)导入，格式为： `import somemodule`\n从某个模块中导入某个函数,格式为： `from somemodule import somefunction`\n从某个模块中导入多个函数,格式为： `from somemodule import firstfunc, secondfunc, thirdfunc`\n将某个模块中的全部函数导入，格式为： `from somemodule import *`\n\n***************************\n\n### 解释器\n<!-- TODO: 解释器 -->\n\n************************************************************\n\n\n## Python基本数据类型\n\nPython中的变量不需要声明。每个变量在使用前都必须赋值，**变量赋值以后该变量才会被创建**。  \n在Python中，变量就是变量，它“没有类型”，数据类型指的是**变量所指的内存中对象的类型**。  \n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。 \n> 一个变量可以通过赋值指向不同类型的对象。\n\npython中有六个标准的数据类型：\n\n- [Number](#Number数字)\n- [Tuple](#Tuple元组)\n- [String](#String字符串)\n- [List](#List列表)\n- [Set](#Set集合)\n- [Dictionary](#Dictionary字典)\n\n其中`不可变`immutable的数据类型为： `Number`、`Tuple`、`String`  \n`可变`mutable的数据类型为： `List`、`Set`、`Dictionary`\n\n\n在解释这六个数据类型前，有两个方法需要介绍：\n\n### `type()` 和 `isinstance()`\n\nPython内置的 **type()** 函数可以用来查询变量所指的对象类型。  \ntype()函数有两个重载方法：  \n\n```python\ntype(object) -> type # the object's type\ntype(name, bases, dict) -> object # a new type object\n```\n\n如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。  \n\n而 **isinstance()** 函数用来判断一个对象是否是一个已知的类型。  \n使用方法：\n\n```python\nisinstance(object, classinfo) -> bool\n```\n\n> 参数：\n> + object - 实例对象  \n> + classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组\n> > classinfo为基本类型时,可以是`int`，`float`，`bool`，`complex`，`str`(字符串)，`list`，`dict`(字典)，`set`，`tuple`。  \n> > 要注意的是，classinfo 的字符串是 `str` 而不是 `string`，字典也是简写 `dict`。\n\n#### isinstance() 与 type() 区别：\n\ntype() 不会认为子类是一种父类类型，`不考虑`**继承**关系。  \nisinstance() 会认为子类是一种父类类型，`考虑`**继承**关系。  \n如果要判断两个类型是否相同推荐使用` isinstance() `。  \n\n```python\n# 示例代码\nclass A:\n    pass\nclass B(A):\n    pass\n\na = A()\nb = B()\n\nprint(isinstance(a,A))\nprint(isinstance(b,A))\nprint(type(a))\nprint(type(b))\nprint(type(a)==A)\nprint(type(b)==A)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> &lt;class '\\_\\_main__.A'>  \n> &lt;class '\\_\\_main__.B'>  \n> True  \n> False  \n\n\n### Number数字\n\n数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。\n\npython数字类型包括：`整型int`、`浮点型float`、`布尔型bool`、`复数型complex`。  \n\n> 其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long\n\n#### 具体类型\n##### int\n\nint通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。  \n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：\n\n```python\n>>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n```\n\n##### float\n\n浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）  \n以下变量都表示为float类型：\n\n```python\n>>> number1 = 0.0\n>>> number2 = 13.10\n>>> number3 = 1.2e2\n>>> number4 = 2.5e+3\n>>> number5 = 9.\n>>> number6 = -2.1E-5\n```\n\n> Python对**绝对值小于**`0.0001`的浮点数使用科学计数法显示：  \n> ```python \n> >>> 0.0001\n> 0.0001\n> >>> 0.00001\n> 1e-05\n> ```\n> \n> 另一个临界点是`1e+16`:\n> ```python\n> >>> 1000000000000000.0  \n> 1000000000000000.0\n> >>> 10000000000000000.0 \n> 1e+16\n> ```\n> \n> float的正常最多位为16位小数，比如：\n> ```python\n> >>> 1 / 3.0\n> 0.3333333333333333\n> >>> 9.9999999999999999 \n> 10.0\n> >>> 9.999999999999999 \n> 9.999999999999998\n> >>> 9.99999999999999\n> 9.99999999999999\n> ```\n> \n> 这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:[python float 精度问题](#float精度问题)  \n\n\n##### bool\n\nbool用来表示真假的状态，`True`表示真，`False`表示假，注意`区分大小写`。  \nPython3中，bool是int的`子类`；  \n> 在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。\n\n*True* 和 *False* 可以和数字相加，`True==1` `False==0`会返回***True***，但可以通过`is`来判断类型。\n\n```python\nprint(issubclass(bool, int))\nprint(True==1)\nprint(False==0)\nprint(True+1)\nprint(False+1)\nprint(1 is True)\nprint(0 is False)\n```\n\n以上代码的输出结果为：  \n> True  \n> True  \n> True  \n> 2  \n> 1  \n> False  \n> False\n\n> 注意：从Python3.8开始，使用***is***和***is not***运算符时，会抛出`SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?`语法警告信息。\n\n##### complex\n\n复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### 数值运算\n\nPython 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。   \n表达式的语法很直白： `+`加法, `-`减法, `*`乘法, `/`除法, `//`整除, `%`取余, `**`乘方/幂\n\n```python\n# 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示\n>>> 5 + 4 # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方/幂\n32\n```\n\n在混合运算中，Python会把整型转换成浮点数后参加运算。  \n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：\n\n```python\n>>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7/2.0\n3.0\n```\n\n\n#### 数字类型转换\n\nPython各数字类型间支持互相转换。  \nPython的数字类型转化和创建都可以直接将***数据类型作为函数名***即可。  \n\n注意强制类型转换可能会导致***数据损失***。  \n\n```python\n>>> int(1.2)\n1   \n>>> int(2.0) \n2   \n>>> float(1) \n1.0 \n>>> float(1.1)\n1.1\n>>> bool(1) \nTrue\n>>> bool(0)\nFalse\n>>> bool(2)\nTrue\n>>> bool(-1)\nTrue\n>>> bool(True)\nTrue\n>>> complex(1,2)\n(1+2j)\n>>> complex(2)\n(2+0j)\n>>> complex(1.2,True)\n(1.2+1j)\n```\n\n#### 常用函数\n\n##### [Python的内置函数](#Python内置函数)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [max()](#max) | 返回给定参数的`最大值`，如`max([1,2,3,5,1])`返回`5`，参数可以为序列 |\n| 2 | [min()](#min) | 返回给定参数的`最小值`，如`min([1,2,3,5,-1])`返回`-1`，参数可以为序列 |\n| 3 | [round()](#round) | 给定浮点数和保留位数，返回浮点数的`四舍五入`值，如`round(3.526,2)`返回3.53。**其实准确的说是保留值将保留到离上一位更近的一端。** |\n| 4 | [abs()](#abs) | 返回数字的`绝对值`，如`abs(-10)`返回`10`，如果参数是一个复数，则返回它的大小 |\n\n##### [Python的math模块](#Python-math模块方法)  \n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [fabs()](#fabs) | fabs也返回数字的`绝对值`，相较abs()更具局限性，只作用于浮点型或整型，`math.fabs(-10)`将返回10.0 |\n| 2 | [ceil()](#ceil) | 返回数字的`上入整数`，如`math.ceil(2.1)`返回`3` |\n| 3 | [floor()](#floor) | 返回数字的`下舍整数`，如`math.floor(2.1)`返回`2` | \n| 4 | [exp()](#exp) | 返回`e的x次幂`即指数(e^x)，如`math.exp(1)`返回2.718281828459045 |\n| 5 | [log()](#log) | 返回`给定底数的对数值`，如`math.log(100,10)`返回2.0 |\n| 6 | [log10()](#log10) | 返回`以10为底的对数值`，如`math.log10(100)`返回2.0 |\n| 7 | [modf()](#modf) | 返回数字的`整数和小数部分`，如`math.modf(-100.03)`返回(-0.030000000000001137, -100.0) |\n| 8 | [pow()](#pow) | 返回`幂运算结果`，如`math.pow(2,3)`返回8.0，效果等同`**`运算 |\n| 9 | [sqrt()](#sqrt) | 返回数字的`平方根`，如`math.sqrt(4)`返回2.0 |\n| | `三角函数` |\n| 1 | [sin()](#sin) | 返回弧度的`正弦值`，如`math.sin(math.pi/2)`返回1.0 |\n| 2 | [asin()](#asin) | 返回弧度的`反正弦弧度值`，如`math.asin(0)`返回0.0 |\n| 3 | [cos()](#cos) | 返回弧度的`余弦值`，如`math.cos(math.pi)`返回-1.0 |\n| 4 | [acos()](#acos) | 返回弧度的`反余弦弧度值`，如`math.acos(-1)`返回3.141592653589793 |\n| 5 | [tan()](#tan) | 返回弧度的`正切值`，如`math.tan(math.pi/4)`返回0.9999999999999999 |\n| 6 | [atan()](#atan) | 返回弧度的`反正切弧度值`，如`math.atan(0)`返回0.0 |\n| 7 | [degress()](#degress) | 将`弧度转换为角度`,如`math.degrees(math.pi/2)`，返回90.0 |\n| 8 | [radians()](#radians) | 将`角度转换为弧度`,如`math.radians(180)`，返回3.141592653589793 |\n\n\n##### [Python的random模块](#Python-random模块方法)\n| 序号 | 函数 | 返回值 / 描述  |\n| :-: |:--: | :------------ |\n| 1 | [choice()](#choice) | 从`序列`的元素中`随机挑选一个元素`，比如`random.choice(range(10))`，返回从0到9中随机挑选的一个整数。 |\n| 2 | [randrange()](#randrange) | `random.randrange([start,]stop[,step])`从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如`random.randrange(1,100,2)`表示从1-100中选取一个奇数 |\n| 3 | [random()](#random) | 在`[0,1)范围`内，随机生成下一个实数。`random.random()` |\n| 4 | [uniform()](#uniform) | 在`[x,y]范围`内，随机生成下一个实数。`random.uniform(x,y)` |\n| 5 | [seed()](#seed) | `改变随机数生成器的种子`seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。`random.seed()` |\n| 6 | [shuffle()](#shuffle) | 将`序列`的所有元素`随机排序`。`random.shuffle(list)` |\n\n\n#### 相关常量\n| 常量 | 描述 |\n| :--:| :---------|\n| pi | 圆周率，数学常量 pi `math.pi = 3.141592653589793` |\n| e | 自然常数，数学常量 e `math.e = 2.718281828459045` |\n\n********************************************************\n\n### Tuple元组\n\nPython中元组是不可变的数据类型，即元组中的元素不能被修改。  \n\n#### 元组的创建\n元组的创建方式有两种：\n```python\n# 直接使用小括号创建，元素间使用逗号隔开\ntuple1 = (1, 5, 6, 7)\n# 元组中的元素类型可以混合\ntuple2 = (1, \"1\", 1.0, (1, 2), [1])\n```\n\n```python\n# 使用tuple方法创建\nlist = [1,5,7]\ntuple3 = tuple(lst)\n```\n\n创建***空元组***：  \n```python\ntuple1 = ()\ntuple2 = tuple()\n```\n\n创建`只有一个元素`的元组时，需要在元素后添加一个**逗号**`,` ， 否则括号会被当成运算符使用！！:  \n```python\n>>> tuple1 = (1,)\n>>> print(type(tuple1))\n<class 'tuple'>   # 加上逗号，类型为元组\n\n>>> tuple2 = (1)\n>>> print(type(tuple2))\n<class 'int'>   # 不加逗号，类型为整型\n```\n\n#### 元组的索引和截取\n\n因为元组也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\ntuple_test = (1, 5, 6, 7, 11, 3)\n\n# 正向索引\nprint(tuple_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(tuple_test[-1])   # 读取倒数第1个元素\n```\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\ntuple_test =  (6, 8, 9, 7, 2, 23, 1, 1, 13)\nprint(tuple_test)\n\n# 截取\nprint(tuple_test[1:])     # 截取元组从索引为1的元素开始后的所有元素\nprint(tuple_test[1:3])    # 截取元组索引区间[1,3)，即第二到第三个元素间的片段\nprint(tuple_test[1:-1])    # 截取元组第二到倒数第二个元素间的片段\nprint(tuple_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(tuple_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(tuple_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\n```\n\n以上代码的运行结果为：  \n> (6, 8, 9, 7, 2, 23, 1, 1, 13)  \n> (8, 9, 7, 2, 23, 1, 1, 13)   \n> (8, 9)  \n> (8, 9, 7, 2, 23, 1, 1)  \n> (8, 7, 23, 1)  \n> ()  \n> (13, 1, 1, 23, 2, 7, 9)  \n\n\n#### 元组运算\n\n元组运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint((2, 6, 9, 8, 2) + (1, 6, 11))\n```\n\n以上代码的输出结果为：  \n> (2, 6, 9, 8, 2, 1, 6, 11)\n\n***`*运算`***\n\n```python\nprint((\"a\", \"b\") * 4)\n```\n\n以上代码的输出结果为：  \n> ('a', 'b', 'a', 'b', 'a', 'b', 'a', 'b')\n\n\n***`in运算`***\n\n```python\nprint(5 in (1,2,6,4,6,5))\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[元组的索引和截取](#元组的索引和截取)\n\n#### 常用函数\n\n<br>\n\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n\n```python\n>>> tuple1 = (1, 2, 5)\n>>> len(tuple1)\n3\n```\n\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n\n```python\n>>> tuple2 = (5, 9, 6)\n>>> max(tuple2)\n9\n```\n\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n\n```python\n>>> tuple3 = (5, 9, 6)\n>>> min(tuple3)\n5\n```\n\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n\n```python\n>>> list1= ['1', '2', '4', '3']\n>>> tuple1=tuple(list1)\n>>> tuple1\n('1', '2', '4', '3')\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n\n***********************************************\n\n### String字符串\n\nPython string是不可变的数据类型。\n\n#### 字符串创建\n\n我们使用引号`( ' 或 \" )`来创建字符串。\n```python\nstr1 = \"a1\"\nstr2 = 'b5555'\n```\n\npython中没有传统的单字符char类型，在Python中单字符也作为字符串使用\n```python\nprint(type('a'))\n```\n\n以上代码的输出结果为：  \n> &lt;class 'str'>\n\n\n还可以使用三引号`( \"\"\" 或 '''  )`来创建多行字符串  \n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。  \n```python\npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n```\n\n以上代码的结果为：  \n> 这是一个多行字符串的实例  \n> 多行字符串可以使用制表符  \n> TAB ( \t )。  \n> 也可以使用换行符 [   \n>  ]。   \n\n三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的`WYSIWYG（所见即所得）`格式的。  \n一个典型的用例是，当你需要一块`HTML或者SQL`时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。  \n```python\nerrHTML = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TITLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\ncursor.execute('''\nCREATE TABLE users (  \nlogin VARCHAR(8), \nuid INTEGER,\nprid INTEGER)\n''')\n```\n\n\n#### 字符串访问\n\n字符串的访问和元组类似，使用切片运算和索引定位。   \n\n> 字符串可以被看成是`特殊的元组`\n\n***索引***\n```python\nstr_test = \"sajldfj*(&5\"\n\n# 正向索引\nprint(str_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(str_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 'j'  \n> '5'\n\n***截取***\n```python\nstr_test =  \"hello world\"\nprint(str_test)\n\n# 截取\nprint(str_test[1:])     # 截取字符串从索引为1的元素开始后的所有元素\nprint(str_test[1:3])    # 截取字符串索引区间[1,3)，即第二到第三个元素间的片段\nprint(str_test[:-1])     # 从字符串起始截取到倒数第一个元素前的片段\nprint(str_test[1:-1])    # 截取字符串第二到倒数第二个元素间的片段\nprint(str_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(str_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(str_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(str_test[::-1])      # 逆向输出字符串\n```\n\n以上代码的运行结果为：  \n> hello world  \n> ello world  \n> el  \n> hello worl\n> ello worl  \n> el ol  \n>   \n> dlrow oll  \n> dlrow olleh\n\n\n#### 字符串运算\n\n字符串运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint(\"hello\"+\" world\")\n```\n\n以上代码的输出结果为：  \n> hello world\n\n***`*运算`***\n\n```python\nprint(\"a\" * 4)\n```\n\n以上代码的输出结果为：  \n> aaaa\n\n\n***`in运算`***\n\n```python\nprint('a' in \"hello world\")\n```\n\n以上代码的运行结果为：  \n> False\n\n***`切片运算`***\n见上文的[字符串访问](#字符串访问)\n\n\n#### 字符串格式化\n\n##### 转义字符\n普通字符串中使用反斜杠`(\\)`做特殊字符的转义字符：  \n更多请见下文[Python转义字符](#Python转义字符)\n\n##### r-string\nr-string将输出`原始字符串`，转义字符将不生效。  \n使用方法是在字符串引号前加上 ` r/R `：  \n```python\nprint(r\"row string\")\nprint(r\"\\n jh\\nj\")\n```\n\n以上代码的运行结果为：  \n> row string\n> \\n jh\\nj\n\n##### 级联\n\nPython按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。\n```python\nprint(\"this \" \"is \" \"string\")\n```\n\n以上代码的输出结果为：  \n> this is string\n\n##### %格式\n%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。  \n```python\nprint (\"插入点1： %s 。插入点2： %d 。\" % ('string', 222))\n```\n\n以上代码的输出结果为：  \n> 插入点1： string 。插入点2： 222 。\n\n***python字符串格式化符号***\n\n| 符号 | 描述 |\n| :--: | :------------------|\n|  %c  | 格式化字符及其ASCII码 |\n|  %s  | 格式化字符串 |\n|  %d  | 格式化整数 |\n|  %u  | 格式化无符号整型 |\n|  %o  | 格式化无符号八进制数 |\n|  %x  | 格式化无符号十六进制数 |\n|  %X  | 格式化无符号十六进制数（大写） |\n|  %f  | 格式化浮点数字，可指定小数点后的精度 |\n|  %e  | 用科学计数法格式化浮点数 |\n|  %E  | 作用同%e，用科学计数法格式化浮点数 |\n|  %g  | %f和%e的简写 |\n|  %G  | %f 和 %E 的简写 |\n|  %p  | 用十六进制数格式化变量的地址 |\n\n***格式化操作符辅助指令***\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f\n| 符号 | 功能 |\n| :--: | :----- |\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| <sp> | \t在正数前面显示空格 |\n| #\t| 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0\t| 显示的数字前面填充'0'而不是默认的空格 |\n| % |\t'%%'输出一个单一的'%' |\n| (var)\t| 映射变量(字典参数) |\n| m.n. | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n##### format函数\nPython格式化字符串的函数[` str.format() `](#format)，它增强了字符串格式化的功能。\n```python\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))\n```\n\n以上代码的输出结果为：  \n> world hello world\n\n更多使用方法请看[format()](#format)\n\n##### f-string\nf-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。  \nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:  \n\n```python\na = 56\nprint(f\"a = {a}\")\n```\n\n以上代码的输出结果为:  \n> a = 56\n\n在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：  \n```python\nx = 1\nprint(f\"{x+1=}\")\n```\n\n以上代码的输出结果为：  \n> x+1=2\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [encode()](#encode) | `str.encode(encoding='UTF-8',errors='strict')`以 encoding 指定的编码格式`编码字符串`，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace' |\n| 2 | [decode()](#decode) | `bytes.decode(encoding=\"utf-8\", errors=\"strict\")`Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来`解码`给定的 `bytes` 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 |\n| 3 | [len()](#len) | 返回字符串的`长度` |\n| 4 | [max()](#max) | 返回字符串的`最大的字母` |\n| 5 | [min()](#min) | 返回字符串的`最小的字母` |\n|  | ----- | ***检查\\检测 方法*** |\n| 1 | [count()](#count) | `str.count(s,beg=0,end=len(str))`返回某段子字符串在字符串里的`出现次数`，beg和end可以指定范围 |\n| 2 | [startswith()](#startswith) |  `str.startswith(substr,beg=0,end=len(str))`检查字符串在指定范围内`是否以substr开始`，如果是返回True，否则返回False |\n| 3 | [endswith()](#endswith) |  `str.endswith(suffix,beg=0,end=len(str))`检查字符串在指定范围内`是否以suffix结束`，如果是返回True，否则返回False |\n| 4 | [find()](#find) | `str.find(s,beg=0,end=len(str))`检测在指定范围内str中`是否包含子字符串`s，如果成功则`返回开始的索引值`，否则返回-1 |\n| 5 | [rfind()](#rfind) | `str.rfind(s,beg=0,end=len(str))`类似于find()函数，不过是从`右边开始查找`. |\n| 6 | [index()](#index) | `str.index(s,beg=0,end=len(str))`和find()方法一样，用于检测`是否包含子字符串`，不同的是如果不包含则会报一个异常 |\n| 7 | [rindex()](#rindex) | `str.rindex(s,beg=0,end=len(str))`类似于 index()，不过是从`右边开始`. |\n| 8 | [isalnum()](#isalnum) | 如果字符串至少有一个字符并且`所有字符都是字母或数字`则返回True，否则返回 False |\n| 9 | [isalpha()](#isalpha) | 如果字符串至少有一个字符并且`所有字符都是字母或中文字`则返回True，否则返回 False |\n| 10 | [isdigit()](#isdigit) | 如果字符串`只包含数字`则返回True，否则返回False |\n| 11 | [isnumeric()](#isnumeric) | 如果字符串`只包含数字字符`则返回True，否则返回False |\n| 12 | [isspace()](#isspace) | 如果字符串中`只包含空白`则返回True，否则返回False |\n| 13 | [isdecimal()](#isdecimal) | 检查字符串是否`只包含十进制字符`，如果是返回True，否则返回False。 |\n| 14 | [islower()](#islower) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是小写`，则返回 True，否则返回 False |\n| 15 | [isupper()](#isupper) | 如果字符串中包含至少一个区分大小写的字符，并且所有这些`(区分大小写的)字符都是大写`，则返回 True，否则返回 False |\n| 16 | [istitle()](#istitle) | 检查字符串`是否是标题化`的，是则返回 True，否则返回 False |\n|  | ----- | ***字符串操作 方法*** |\n| 1 | [replace()](#replace) | `str.replace(old,new[,max])`把将字符串中的`old替换成new`,如果max指定，则替换不超过max次。 |\n| 2 | [join()](#join) | `str.join(sequence)`将`序列`中的元素`以指定的字符连接`生成一个新的字符串。 |\n| 3 | [split()](#split) | `str.split(s=\"\", num=str.count(s))`通过`指定分隔符对字符串进行切片`，返回分割后的字符串列表。 |\n| 4 | [splitlines()](#splitlines) | `str.([keependsplitliness])`按照`行分隔`('\\r', '\\r\\n', \\n')，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。 |\n| 5 | [lstrip()](#lstrip) | `str.lstrip(chars=\"\")`将`截掉字符串左边/开始的指定字符`，默认为空格。 |\n| 6 | [strip()](#strip) | `str.strip(chars=\"\")`将`截掉字符串两端的指定字符`，即在字符串上执行lstrip()和rstrip()。 |\n| 7 | [rstrip()](#rstrip) | `str.rstrip(chars=\"\")`将`截掉字符串右边/末尾的指定字符`，默认为空格。 |\n| 8 | [capitalize()](#caplitalize) |  将字符串的`第一个字符`转换为`大写` |\n| 9 | [lower()](#lower) |  将字符串的`所有大写字符`转换为`小写` |\n| 10 | [upper()](#upper) |  将字符串的`所有小写字符`转换为`大写` |\n| 11 | [swapcase()](#swapcase) |  将字符串中`大写转换为小写，小写转换为大写` |\n| 12 | [title()](#title) |  返回`\"标题化\"`的字符串,就是说所有单词都是以大写开始，其余字母均为小写 |\n| 13 | [ljust()](#ljust) | `str.ljust(width,fillchar)`返回一个指定宽度为width且`左对齐右边填充`fillchar的字符串 |\n| 14 | [center()](#center) | `str.center(width,fillchar)`返回一个指定宽度为width且`居中两边填充`fillchar的字符串 |\n| 15 | [rjust()](#rjust) | `str.rjust(width,fillchar)`返回一个指定宽度为width且`右对齐左边填充`fillchar的字符串 |\n| 16 | [zfill()](#zfill) | `str.zfill(width)`返回一个指定宽度为width且`右对齐左边填充0`的字符串，等价于rjust(width,'0') |\n| 17 | [expandtabs()](#expandtabs) | `str.expandtabs(tabsize=8)`把字符串中的`tab符号转为空格`，tab符号默认的空格数是8。 |\n| 18 | [maketrans()](#maketrans) | `str.maketrans(intab,outtab)`用于`创建字符映射的转换表`，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 |\n| 19 | [translate()](#translate) | `str.translate(table, deletechars=\"\")`根据给出的`表转换`str的字符, 要过滤掉的字符放到 deletechars 参数中 |\n\n<!-- TODO: string常用函数 -->\n\n#### Python转义字符\n\n| 转义字符 | 描述 |\n| :-- | :-- |\n| \\\\(在行尾时) | 续行符 |\t\n| \\\\\\\\ | 反斜杠符号 |\n| \\\\' | 单引号 |\n| \\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车，将 \\\\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\\\r 后面的内容完全替换完成。 |\n| \\\\f | 换页 |\n| \\\\yyy | 八进制数，y代表0~7的字符，例如：\\\\012 代表换行。 |\n| \\\\xyy | 十六进制数，以\\\\x开头,y代表的字符，例如\\\\x0a 代表换行 |\n\n************************************************\n\n### List列表\n\nList是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。  \n列表是可变的数据类型，即其内的数据可以被改变。  \n\n#### 创建列表\n创建列表的方式有三种：\n+ 使用方括号`[]`创建\n+ 使用`list()`函数创建\n+ 使用`推导式`创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nlst1 = [1,\"7\",2.589,(1,\"2\")]\nlst2 = []\n\nseq = (1,5,9,\"7\")\nlst3 = list(seq)\n\nprint(lst1,type(lst1))\nprint(lst2,type(lst2))\nprint(lst3,type(lst3))\n\n# 使用推导式创建\nlst4 = [x**2 for x in (4,5,9,8,11) if x <= 10]\nprint(lst4)\n```\n\n以上代码的运行结果为：  \n> [1, '7', 2.589, (1, '2')] &lt;class 'list'>\n> [] &lt;class 'list'>\n> [1, 5, 9, '7'] &lt;class 'list'>\n> [16, 25, 81, 64]\n\n#### 列表的嵌套\n\n列表是可以嵌套的：  \n```python\nmatrix = [\n    [1,2,5],\n    [2,7,8],\n    [4,5,6,7,9],\n    [2,9,7,11]\n]\n```\n\n若要访问该列表的元素只需逐层访问即可：  \n```python\nprint(matrix[2][0])\n\nfor row in matrix:\n    for e in row:\n        print(e, end=\" \")\n    print()\n```\n\n以上代码的输出结果为：  \n> 4  \n> 1 2 5  \n> 2 7 8   \n> 4 5 6 7 9   \n> 2 9 7 11 \n\n\n#### 列表的索引和截取\n\n因为列表也是一个序列，所以我们可以使用[`切片运算符`](#切片运算符)来进行索引和截取：  \n\n***索引***\n```python\nlist_test = [1, 5, 6, 7, 11, 3]\n\n# 正向索引\nprint(list_test[2])   # 读取第3个元素 / 读取索引为2的元素\n# 逆向索引\nprint(list_test[-1])   # 读取倒数第1个元素\n```\n\n以上代码的输出结果为：  \n> 6  \n> 3\n\n***截取***\n```python\nlist_test =  [6, 8, 9, 7, 2, 23, 1, 1, 13]\nprint(list_test)\n\n# 截取\nprint(list_test[1:])     # 截取列表从索引为1的元素开始后的所有元素\nprint(list_test[1:3])    # 截取列表索引区间[1,3)，即第二到第三个元素间的片段\nprint(list_test[1:-1])    # 截取列表第二到倒数第二个元素间的片段\nprint(list_test[1:-1:2])   # 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取\nprint(list_test[1:-1:-1])  # 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段\nprint(list_test[-1:1:-1])   # 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取\nprint(list_test[-1::-1])   # 第二个参数为空，表示移动到列表末尾\n```\n\n以上代码的运行结果为：  \n> [6, 8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9, 7, 2, 23, 1, 1, 13]  \n> [8, 9]  \n> [8, 9, 7, 2, 23, 1, 1]  \n> [8, 7, 23, 1]  \n> []  \n> [13, 1, 1, 23, 2, 7, 9]   \n> [13, 1, 1, 23, 2, 7, 9, 8, 6]   \n\n#### 修改列表元素\n\n因为列表属于可变的数据类型，所以其元素可以修改：  \n```python\nlst = [1,5,6]\nlst[1] = 7\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [1,7,6]\n\n***使用del***删除列表元素：  \n\n使用del可以根据索引删除一个元素或者一个切割\n\n```python\nlst = [1,4,5,9,8,3,1,2,0,11]\ndel lst[0]\nprint(lst)\n\ndel lst[1:-3:2]\nprint(lst)\n\ndel lst[:]\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [4, 5, 9, 8, 3, 1, 2, 0, 11]  \n> [4, 9, 3, 2, 0, 11]  \n> []\n\n#### 列表运算\n\n列表运算满足[序列运算规则](#序列运算)：  \n\n***`+运算`***\n\n```python\nprint([2, 6, 9, 8, 2] + [1, 6, 11])\n```\n\n以上代码的输出结果为：  \n> [2, 6, 9, 8, 2, 1, 6, 11]\n\n***`*运算`***\n\n```python\nprint([\"a\", \"b\"] * 4)\n```\n\n以上代码的输出结果为：  \n> ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\n\n\n***`in运算`***\n\n```python\nprint(5 in [1,2,6,4,6,5])\n```\n\n以上代码的运行结果为：  \n> True\n\n***`切片运算`***\n见上文的[列表的索引和截取](#列表的索引和截取)\n\n#### 列表遍历\n\n列表遍历将使用[循环语句](#Python循环语句).\n\n<!--TODO: enumerate()  -->\n\n> 使用[enumerate()](#enumerate)函数可以得到索引和对应值\n\n```py\nlst = [1,2,7,3,6,4]\n\nfor i in lst:\n    print(i,end=\" \")\n\nfor i,value in enumerate(lst):\n    print(i,value)\n```\n\n以上代码的运行结果为：  \n> 1 2 7 3 6 4\n> 1 2\n> 2 7\n> 3 3\n> 4 6\n> 5 4\n\n<!--TODO: zip()  -->\n如果要同时遍历多个列表，可以使用[zip()](#zip)函数：  \n```python\nquestions = ['name', 'quest', 'favorite color']\nanswers = ['lancelot', 'the holy grail', 'blue']\nfor q, a in zip(questions, answers):\n    print('What is your {0}?  It is {1}.'.format(q, a))\n```\n\n以上代码的输出结果为：  \n> What is your name?  It is lancelot.  \n> What is your quest?  It is the holy grail.  \n> What is your favorite color?  It is blue.\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | 返回列表的`长度` |\n| 2 | [max()](#max) | 返回列表的`最大的元素` |\n| 3 | [min()](#min) | 返回列表的`最小的元素` |\n|  | ----- | ***列表操作 方法*** |\n| 1 | [reverse()](#reverse) | `lst.reverse()`,`反向列表`中元素 |\n| 2 | [append()](#append) | `lst.append(obj)`,在lst列表`末尾添加`新的对象obj |\n| 3 | [pop()](#pop) | `lst.pop(index=-1)`,`移除列表中的一个元素`（默认最后一个元素），并且返回该元素的值 |\n| 4 | [count()](#count) | `lst.count(obj)`,统计obj`元素`在列表lst中`出现的次数` |\n| 5 | [extend()](#extend) | `lst.extend(seq)`,在lst`列表末尾`一次性`追加另一个序列`seq中的多个值（用新列表扩展原来的列表） |\n| 6 | [index()](#index) | `lst.index(obj)`,从lst列表中找出obj值的`第一个匹配项的索引`位置 |\n| 7 | [remove()](#remove) | `lst.remove(obj)`,`移除`列表中某个值的`第一个匹配项` |\n| 8 | [insert()](#insert) | `lst.insert(index,obj)`,将对象obj`插入列表指定索引位置` |\n| 9 | [sort()](#sort) | `lst.sort(key=None,reverse=False)`,对原列表进行`排序` |\n| 10 | [clear()](#clear) | `lst.clear()`,`清空列表` |\n| 11 | [copy()](#copy) | `lst.copy()`,`复制列表` |\n\n<!-- TODO: list常用函数 -->\n\n************************************\n\n### Set集合\n\n集合（set）是一个无序的不重复元素序列。  \n在Python中是可变的数据结构之一。\n\n#### 创建集合\n可以使用大括号 `{ }` 或者 `set()` 函数创建集合  \n> 注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n基本功能是进行成员关系测试和删除重复元素。\n\n```python\nset1 = {1,5,6}\nset2 = set([1,2,63,7,5,1])\n\nprint(set1)\nprint(set2)\n```\n\n以上代码的输出结果为：  \n> {1, 5, 6}\n> {1, 2, 5, 7, 63}\n\n集合还可以通过推导式来创建(更多推导式相关请看[Python推导式](#Python推导式))\n\n```python\nset1 = {x ** 2 for x in (2, 4, 6)}\nprint(set1)\n```\n\n以上代码的输出结果为：  \n> {4, 16, 36}\n\n#### 操作集合\n##### 添加元素\n```python\nset1 = {1,5,9,8}\n\nset1.add(2)\nprint(set1)\n\nset1.add(1)\nprint(set1)\n\nset1.update({11,13})\nprint(set1)\n\nset1.update(['1','2'],['3','4'])\nprint(set1)\n```\n\n以上代码的运行结果为：  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9}  \n> {1, 2, 5, 8, 9, 11, 13}  \n> {1, 2, 5, '3', 8, 9, 11, 13, '4', '2', '1'}  \n\n##### 移除元素\n```python\nset1 = {3,6,8,9,2,7}\nset1.remove(3)\nprint(set1)\n\nset1.discard('4')   # 使用discard移除不存在的元素不会发生错误\nprint(set1)\n\nx = set1.pop()\nprint(x)\nprint(set1)\n\nset1.remove('4')  # 使用remove移除不存在的元素会发生错误\n```\n\n以上代码的输出结果为：  \n> {2, 6, 7, 8, 9}\n> {2, 6, 7, 8, 9}\n> 2\n> {6, 7, 8, 9}\n> Traceback (most recent call last)\n> test.py in &lt;module>\n> ----> set1.remove('4')\n> \n> KeyError: '4'\n\n#### 集合运算\n\n***`数学集合运算`***\n\n```python\na = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(b)\nprint(f\"a-b = {a-b}\")   # 差集\nprint(f\"a|b = {a|b}\")   # 并集\nprint(f\"a&b = {a&b}\")   # 交集\nprint(f\"a^b = {a^b}\")   # 异或集\n```\n\n以上代码的输出结果为：  \n> {'a', 'b', 'd', 'r', 'c'}\n> {'a', 'c', 'l', 'm', 'z'}\n> a-b = {'r', 'd', 'b'}\n> a-b = {'a', 'b', 'd', 'r', 'c', 'l', 'm', 'z'}\n> a-b = {'c', 'a'}\n> a-b = {'l', 'b', 'd', 'r', 'm', 'z'}\n\n***`in运算`***\n```python\nprint(3 in {3,5})\n```\n\n以上代码的输出结果为：  \n> True\n\n#### 常用函数\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [add()](#add) | `set1.add(x)`为集合`添加元素`x |\n| 2 | [clear()](#clear) | `set1.clear()` `清空集合`中的所有元素 |\n| 3 | [copy()](#copy) | `set1.copy()`返回一个集合的`拷贝` |\n| 4 | [difference()](#difference) | `set1.difference(set2)`返回多个`集合的差集`,即包含在set1，但不在set2的元素集 |\n| 5 | [difference_update()](#difference_update) | `set1.difference_update(set2)`用于`移除两个集合中都存在的元素` |\n| 6 | [discard()](#discard) | `set1.discard(value)` 用于`移除指定的集合元素` |\n| 7 | [intersection()](#intersection) | `set1.intersection(set2[,...])` 返回集合的`交集` |\n| 8 | [intersection_update()](#intersection_update) | `set1.intersection_update(set2[,...])` 用于将`交集更新`到原集合中 |\n| 9 | [isdisjoint()](#isdisjoint) | `set1.sidisjoint(set2)` 判断两个集合`是否包含相同的元素`，如果没有返回 True，否则返回 False |\n| 10 | [issubset()](#issubset) | `set1.issubset(set2)` 判断指定集合`是否为`该方法参数集合的`子集`。 |\n| 11 | [issuperset()](#issuperset) | `set1.issuperset(set2)` 判断指定集合`是否为`该方法参数集合的`父集`。 |\n| 12 | [pop()](#pop) | `set1.pop()` 用于`随机移除`一个元素。 |\n| 13 | [remove()](#remove) | `set1.remove(x)` `移除指定元素` |\n| 14 | [symmetric_difference()](#symmetric_difference) | `set1.symmetric_difference(set2)` 返回两个集合中`不重复的元素集合`，即会移除两个集合中都存在的元素 |\n| 15 | [symmetric_difference_update()](#symmetric_difference_update) | `set1.symmetric_difference_update(set2)` 返回两个集合中`不重复的元素集合并更新至原集合` |\n| 16 | [union()](#union) | `set1.union(set2)` 返回两个集合的`并集` |\n| 17 | [update()](#update) | `set1.update(x)` 给集合`添加元素` | \n\n<!-- TODO： set常用函数 -->\n\n\n************************************\n\n### Dictionary字典\n\n> 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n\n字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。\n\n`键(key)必须使用不可变类型。`\n\n在同一个字典中，键(key)必须是唯一的。\n\n#### 创建字典\n\n创建字典的方法有三种：  \n+ 使用花括号`{}`创建\n+ 使用`dict()`方法创建\n+ 使用`推导式`创建\n\n```python\ndict1 = {\"1\": \"2\", \"code\": \"3\", 1: 5}\n\n# 直接从键值对序列中构建字典\ndict2 = dict([('Baidu', 1), ('Google', 2), ('Taobao', 3)])\ndict3 = dict(Baidu=1, Google=2, Taobao=3)\n\n# 使用推导式创建字典\ndict4 = {x: x**2 for x in (2, 4, 6)}\n\n# 创建空字典\ndict5 = {}\ndict6 = dict()\n\nprint(dict1)\nprint(dict2)\nprint(dict3)\nprint(dict4)\nprint(dict5)\nprint(dict6)\n\n```\n\n以上代码的输出结果为：  \n> {'1': '2', 'code': '3', 1: 5}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {'Baidu': 1, 'Google': 2, 'Taobao': 3}  \n> {2: 4, 4: 16, 6: 36}  \n> {}  \n> {}  \n\n#### 字典操作\n\n***`访问值`***\n要访问字典的值只需要将键值填入字典后的方括号中：  \n```Python\ndict1 = {'a':1,'b':2}\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 1\n\n如果访问的键值不存在，则会返回错误：  \n```python\ndict1 = {'a':1,'b':2}\nprint(dict1['c'])\n```\n\n以上代码的输出结果为：  \n> KeyError                                  Traceback (most recent call last)\n> test.py in &lt;module>\n>       1 dict1 = {'a':1,'b':2}\n> ----> 2 print(dict1['c'])\n> \n> KeyError: 'c'\n\n***`修改/创建值`***\n要修改字典的值，直接将对应的键值修改即可：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['a'] = 3\nprint(dict1['a'])\n```\n\n以上代码的输出结果为：  \n> 3  \n\n如果该键不存在，则将直接创建这个键值对：  \n```python\ndict1 = {'a':1,'b':2}\ndict1['c'] = 3\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'a': 1, 'b': 2, 'c': 3}\n\n***`删除值`***\n```python\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# 删除键\ndel dict1['a']\nprint(dict1)\n\n# 清空字典\ndict1.clear()\nprint(dict1)\n\n# 删除字典\ndel dict1\nprint(dict1)\n```\n\n以上代码的输出结果为：  \n> {'b': 2, 'c': 3}  \n> {}  \n> \\----------------------------------------------------   \n> NameError                                 Traceback (most recent call last)\n> test.py in &lt;module>\n>      11 # 删除字典\n>      12 del dict1\n> ---> 13 print(dict1)\n> \n> NameError: name 'dict1' is not defined\n\n***`in运算`***\n判断key是否在字典中已存在.\n```Python\ndict1 ={'k':1}\nprint('a' in dict1)\n```\n\n以上代码的输出结果为： \n> False\n\n\n#### 常用函数\n\n\n| 序号 | 方法 | 返回值/描述 |\n| :-: | :--: | :---------- |\n| 1 | [len()](#len) | `len(dict)` 求字典的`键值对个数` |\n| 2 | [clear()](#clear) | `dict.clear()` `清空字典` |\n| 3 | [copy()](#copy) | `dict.copy()` 返回一个字典的`浅复制` |\n| 4 | [fromkeys()](#fromkeys) | `dict.fromkeys(seq[,val])` 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None |\n| 5 | [get()](#get) | `dict.get(key,default=None)` 返回`指定键的值`，如果`键不在字典中返回` default 设置的`默认值` |\n| 6 | [items()](#items) | `dict.items()` 以列表返回一个视图对象 |\n| 7 | [keys()](#keys) | `dict.keys()` 返回一个键视图对象 |\n| 8 | [values()](#values) | `dict.values()` 返回一个值视图对象 |\n| 9 | [setdefault()](#setdefault) | `dict.setdefault()` 和get()类似, 但如果`键不存在于字典中`，将会`添加键`并将`值设为default` |\n| 10 | [update()](#update) | `dict.update(dict2)` 把字典dict2的键/值对更新到dict里 |\n| 11 | [pop()](#pop) | `dict.pop(key[,default])` 删除字典给定键 key 所对应的值，`返回值为被删除的值`。key值必须给出。 否则，返回default值。 |\n| 12 | [popitem()](#popitem) | `dict.popitem()` 随机返回并删除字典中的最后一对键和值。 |\n\n<!-- TODO:dict常用函数 -->\n\n****************************************************\n\n## Python运算符\n\nPython的运算符可以分为以下几类：  \n\n+ [算术运算符](#算术运算符)\n+ [比较(关系)运算符](#比较(关系)运算符)\n+ [赋值运算符](#赋值运算符)\n+ [逻辑运算符](#逻辑运算符)\n+ [位运算符](#位运算符)\n+ [成员运算符](#成员运算符)\n+ [身份运算符](#身份运算符)\n\n> [运算符优先级](#运算符优先级)\n\n### 算术运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| + | 加 |\n| - | 减 |\n| * | 乘 |\n| / | 除 |\n| % | 取模 |\n| ** | 幂 |\n| // | 整除 |\n\n### 比较(关系)运算符\n| 运算符 | 描述 |\n| :--: | :---- |\n| == | 等于 |\n| > | 大于 |\n| < | 小于 |\n| != | 不等于 |\n| >= | 大于等于 |\n| <= | 小于等于 |\n\n### 赋值运算符\n| 运算符 | 描述 | 说明 |\n| :--: | :----- | :--- |\n| = | 简单的赋值运算符 | 将运算符右侧的值赋予左侧 |\n| += | 加法赋值运算符 | a+=b等价于a=a+b |\n| -= | 减法赋值运算符 | a-=b等价于a=a-b |\n| *= | 乘法赋值运算符 | a*=b等价于a=a*b |\n| /= | 除法赋值运算符 | a/=b等价于a=a/b |\n| %= | 取模赋值运算符 | a%=b等价于a=a%b |\n| **= | 幂赋值运算符 | a**=b等价于a=a**b |\n| //= | 取整赋值运算符 | a//=b等价于a=a//b |\n| := | 海象运算符 | `Python3.8`版本新增运算符。可在表达式内部为变量赋值。|\n\n> 海象运算符的使用：  \n> ```python\n> if (n := len(a)) > 10:  \n>    print(f\"List is too long ({n} elements, expected <= 10)\")\n> ```\n\n\n### 逻辑运算符\n\n| 运算符 | 逻辑表达式 | 描述 |\n| :--: | :----- | :----- | \n| and | x and y\t| 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。|\n| or | x or y | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。|\n| not | not x | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 |\n\n### 位运算符\n按位运算符是把数字看作二进制来进行计算的。\n\n| 运算符 | 描述 | 实例 |\n| :--: | :---| :---- |\n| `&` | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | `(a & b)` 输出结果 12 ，二进制解释： 0000 1100 |\n| `|` | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0  | `(a | b)` 输出结果 61 ，二进制解释： 0011 1101 |\n| `^` | 按位异或运算符：当两对应的二进位相异时，结果为1，否则为0  | `(a ^ b)` 输出结果 49 ，二进制解释： 0011 0001 |\n| `~` | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 | `(~a )` 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。|\n| `<<` | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。| `a << 2` 输出结果 240 ，二进制解释： 1111 0000 |\n| `>>` | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | `a >> 2` 输出结果 15 ，二进制解释： 0000 1111 |\n\n\n### 成员运算符\n\n| 运算符 | 描述 |\n| :--: | :------- |\n| in | 如果在指定的序列中找到值返回 True，否则返回 False。|\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。|\n\n### 身份运算符\n身份运算符用于比较两个对象的存储单元\n\n| 运算符 | 描述 | 实例 |\n| :---: | :----- | :----- |\n| is | is 是判断两个标识符是不是引用自一个对象 | x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象 | x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。|\n\n### 运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符 | 描述 |\n| :--: | :------ |\n| `**` | 指数 (最高优先级) |\n| `~ + -` | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| `* / % //` | 乘，除，求余数和取整除 |\n| `+ -` | 加法减法 |\n| `>> <<` | 右移，左移运算符 |\n| `&` | 位 'AND' |\n| `^ |` | 位运算符 |\n| `<= < > >=`\t | 比较运算符 |\n| `== !=` | 等于运算符 |\n| `= %= /= //= -= += *= **=` | 赋值运算符 |\n| `is is not` | 身份运算符 |\n| `in not in` | 成员运算符 |\n| `not and or` | 逻辑运算符 |\n\n**************************************\n\n## Python条件控制\n\nPython条件控制使用if、elif和else关键字,一般流程图如下： \n![if流程图](if-1.png)\n\n共有三种模式：  \n\n***if***\n```python\nif (<condition_expr>) :\n    # statement_block_1\n# statement_block_other\n```\n***if-else***\n```python\nif (<condition_expr>) :\n    # statement_block_1\nelse :\n    # statement_block_else\n# statement_block_other\n```\n***if-elif-else***\n```python\nif (<condition_expr_1>) :\n    # statement_block_1\nelif (<condition_expr_2>) :\n    # statement_block_2\n# ……\nelse :\n    # statement_block_else\n# statement_block_other\n```\n上述代码的流程如下：  \n![if-elif-else](if-2.png)\n\nPython条件控制还支持if条件的`嵌套`：  \n```python\nif (<expr>):\n    if (<expr_2>):\n        # statement_block_1\n    else:\n        # statement_block_2\n    # statement_block_3\nelse:\n    # ……\n```\n\n*************************************\n\n## Python循环语句\n\n循环语句将在条件成立时循环执行。流程图如下：  \n![loop-1](loop-1.jpg)\nPython的循环语句有两种形式：  \n\n***`while`***\n> 循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。  \n\n```python\nwhile (<condition_expr>):\n    # loop_statement_block\nelse:\n    # false_statement\n```\n\n> 可以使用`while True`来实现无限循环\n\n***`for`***\nPython for 循环可以遍历任何可迭代对象([序列](#Python序列sequence))\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n经常和for配合的一个函数为[range()](#range):  \nrange()函数会生成一个数字序列：  \n```python\n>>>for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n```\n\n\n如果要提前结束循环，需要使用关键字`break`跳出当前循环:  \n```python\nx = 10\nwhile x >= 3 :\n    print(x, end=\" \")\n    if x == 6 :\n        break\n    x -= 1\n```\n以上代码循环到x==6时就会停止:  \n> 10 9 8 7 6  \n\n如果只是跳过一次循环，使用关键字`continue`可以跳过本次循环，进入下次循环:  \n```python\nx = 10\nwhile x >= 3:\n    x -= 1\n    if x == 6:\n        continue\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 9 8 7 5 4 3 2\n\nbreak和continue在循环中的作用如下图：  \n![break-continue](break-continue.jpg)\n> break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。  \n> continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。\n\n*****************************************\n\n## Python序列sequence\n\n### 序列运算\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n#### +运算/拼接\n#### *运算/复制\n#### in运算\n#### 切片运算符\n\n***************************************\n\n## Python迭代器与生成器\n\n### 迭代器iterator\n迭代是访问集合元素的一种方式。  \n迭代器是一个可以记住遍历的位置的对象。 \n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前`不会后退`。   \n\n迭代器有两个基本的方法：`iter()` 和 `next()`。  \niter()用于创建迭代器对象，next()用于控制迭代器前进。  \n字符串，列表或元组对象都可用于创建迭代器：  \n```python\nlst = [1,5,6,4,7,8]\nit = iter(lst)   # 创建迭代器对象\nprint(type(it))\nprint(next(it))  # 输出迭代器的下一个元素\nprint(next(it))\n```\n以上代码的输出结果为：  \n> &lt;class 'list_iterator'>\n> 1\n> 5\n\n迭代器对象可以使用常规for语句进行遍历：  \n```python\nlst = [1,2,3,4,5]\nit = iter(lst)\nfor i in it:\n    print(x, end=\" \")\n```\n以上代码的输出结果为：  \n> 1 2 3 4 5 \n\n#### 自定义迭代器\n把一个类作为一个迭代器使用需要在类中实现两个方法 \\_\\_iter\\_\\_() 与 \\_\\_next\\_\\_() 。  \n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 \\_\\_init\\_\\_(), 它会在对象初始化的时候执行。有关面向对象编程请看：[Python面向对象](#Python面向对象)  \n`__iter__()` 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 \\_\\_next\\_\\_() 方法并通过 StopIteration 异常标识迭代的完成。  \n`__next__()` 方法会返回下一个迭代器对象。  \n\n> ***`StopIteration`***\n> StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 \\_\\_next\\_\\_() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 \n\n以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：  \n```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:    # 设置循环上限\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x, end=\" \")\n```\n执行输出结果为：  \n> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n\n****************************\n\n### 生成器generator\n\n在Python中，使用了`yield`的函数被称为生成器。  \n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。  \n在调用生成器运行的过程中，每次遇到 yield 时函数会`暂停并保存当前所有的运行信息`，***返回 yield 的值***, 并在下一次执行 next() 方法时从当前位置继续运行。  \n\n以下实例使用生成器实现斐波那契数列：  \n```python\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        break\n```\n以上代码的输出结果为：  \n> 0 1 1 2 3 5 8 13 21 34 55\n\n*****************************************************\n\n## Python函数\n\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。  \n函数能提高应用的模块性，和代码的重复利用率。  \n\n除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。\n\n### 定义一个函数\n\n函数的组成有以下几条规则:  \n+ 函数以`def`关键字开头，后接`函数标识符`名称和`参数列表`\n+ 函数内容以冒号`:`开始，下面的函数体缩进\n+ 以`return [表达式]`结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None\n\n下图是一个简单的函数形式说明:  \n![函数说明](function-1.png)\n总结来说，Python的函数语法格式如下：  \n```Python\ndef 函数名(参数列表):\n    函数体\n```\n\n### 参数\n\n在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的`参数传递`来说也对应着两种：  \n+ **可变类型**：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。  \n+ **不可变类型**：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。\n\n> python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。\n\nPython的函数`参数`共有下面四种类型：  \n+ 必需参数\n+ 关键字参数\n+ 默认参数\n+ 不定长参数\n\n***`必需参数`***\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。  \n***`关键字参数`***\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。  \n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。  \n***`默认参数`***\n调用函数时，如果没有传递参数，则会使用默认参数。\n***`不定长参数`***\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：  \n```py\ndef functionname([formal_args,] [*var_args_tuple,] [**var_args_dict] ):\n   function_suite\n   return [expression]\n```\n加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。  \n加了两个星号 ** 的参数会以字典的形式导入。\n\n下面结合函数的使用来理解这四种参数类型：  \n\n### 函数的使用\n使用函数只需要直接使用函数名并传入对应参数就可以调用了。\n\n```python\ndef function1(a,b,c):\n    print(a,b,c)\n    return\n    \nfunction1(1,2,3)  # 必需参数的使用，参数按顺序对应传入\nfunction1(1, c = \"5\", b = 2)  # 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入\n\ndef function2(a,b,c = 5):   # 默认参数，在函数声明时指定其默认值\n    print(a,b,c)\n    return\n\nfunction2(2,3)       # 默认参数在调用时不指定则使用默认值\n\ndef function3(a,b,*args_tuple):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_tuple)\n    return\n\nfunction3(1,2,3,4,5,6)\n\ndef function4(a,b,**args_dict):   # 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入\n    print(a,b,args_dict)\n    return\n\nfunction4(1,2,c = 3,d = 4,e = 5,f = 6)\n```\n\n以上代码的输出结果为：  \n> 1 2 3  \n> 1 2 5  \n> 2 3 5  \n> 1 2 (3, 4, 5, 6)  \n> 1 2 {'c': 3, 'd': 4, 'e': 5, 'f': 6}  \n\n声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数`必须用关键字`传入。\n```Python\ndef function1(a,b,*,c):\n    print(a,b,c)\n    return\n\nfunction1(1,2,c=5)\n```\n\n以上代码的输出结果为：  \n> 1 2 5\n\n### 匿名函数\n\nPython使用lambda关键字来创建匿名函数。  \n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。  \nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。  \n\nlambda 函数的语法只包含一个语句，如下：  \n```Python\nlambda [arg1 [,arg2,.....argn]]:expression\n```\n\n使用实例来增进理解：  \n```python\nsum = lambda arg1,arg2:arg1+arg2    # 一个简单的匿名函数使用\n\nprint(sum(1,2))\n```\n\n以上代码的输出结果为：  \n> 3\n\n### return语句\nreturn作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。  \n```python\ndef function1(a,b):\n    return a+b\n\nc = function1(1,2)\nprint(c)\n```\n\n以上代码的输出结果为：  \n> 3\n\n### 强制位置参数\nPython3.8 新增了一个函数形参语法` / `用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:  \n```python\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\nf(10, 20, 30, d=40, e=50, f=60)  # 这种使用方式是正确的\n# 下面两种是错误的使用\nf(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n```\n****************************************\n\n## Python推导式\n\nPython的推导式应用于简化规律的列表或元组等序列的创建：  \n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。  \n> 需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。\n\n\n简单语法是：  \n```Python\nnew_lst = [var for var in varrange if varexpr]\n```\n\n比如我们想得到一个偶数数列：  \n```python\nlst = [x for x in range(20) if x % 2 == 0]\n\nprint(lst)\n\ntup = (x*2 for x in range(10))   # 括号生成的是生成器对象\n\nprint(type(tup))\nprint(tuple(tup))\n```\n\n以上代码的输出结果为：  \n> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n> &lt;class 'generator'>\n> (0, 2, 4, 6, 8, 10, 12, 14, 16, 18)\n\n推导式的更多使用建议自己上手尝试一下：  \n```python \nlst = [y for y in (x * 3 for x in range(10)) if y % 2 == 1]\n\nprint(lst)\n\nlst = [[x, y] for x in range(5) for y in range(5)]\n\nprint(lst)\n\nve = [\"x\",\"xx\",\"xxx\",\"xxxx\"]\nlst = [len(v) for v in ve]  # 推导式还可以对匿名变量使用函数\n\nprint(lst)\n\nlst = [str(round(355/113, i)) for i in range(1, 6)]   # 使用复杂表达式和嵌套函数\n\nprint(lst)\n```\n\n以上代码的输出结果为：  \n> [3, 9, 15, 21, 27]\n> [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]\n> [1, 2, 3, 4]\n> ['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n***********************\n\n## Python模块\n\n模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。  \n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。\n\n下面是一个使用 python 标准库中模块的例子。\n```python \nimport sys\n \nprint('命令行参数如下:')\nfor i in sys.argv:\n   print(i)\n\nprint('\\n\\nPython 路径为：', sys.path, '\\n')\n```\n\n> + import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。  \n> + sys.argv 是一个包含命令行参数的列表。  \n> + sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。  \n\n### import语句\n\n想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：  \n```python\nimport module1[,module2...]\n```\n\n当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。  \n\n下面是自定义模块的使用:  \n这里先定义一个模块  \n```python\n# file_name:  test_module.py\n\ndef function(a,b):\n    return a+b\n\nprint('file_name: test_module.py')\n```\n然后再其他文件里导入\n```python\n# file_name:  test.py\n\nimport test_module\n\nprint('file_name: test.py')\n\nprint(test_module.function(1,2))     # 使用模块定义的方法\n```\n\n以上代码的运行结果为：    \n> file_name: test_module.py\n> file_name: test.py\n> 3\n\n可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。  \n\n并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。  \n![模块只会被导入一次，执行一次](module-1.png)\n\n> 当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？  \n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。    \n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。  \n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。  \n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：  \n```python\nimport sys\n\nprint(sys.path)\n```\n\n以上代码的输出结果为：  \n> ['g:\\\\Codes\\\\Python\\\\testpy', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles', 'c:\\\\Users\\\\Administrator\\\\.vscode\\\\extensions\\\\ms-toolsai.jupyter-2021.11.1001550889\\\\pythonFiles\\\\lib\\\\python', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\DLLs', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39', '', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\Pythonwin', 'C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Administrator\\\\.ipython']\n\nsys.path 输出是一个列表，其中第一项是当前目录。  \n\n如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：  \n```python\nimport test_module\n\nfun = test_module.function\n\nprint(fun(1,2))\n```\n\n### from...import语句\n\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：  \n```Python\nfrom modname import name1[, name2[, ... nameN]]\n```\n这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。 \n \n而如果要把一个模块所有成员导入当前的命名空间中，语法如下：  \n```python\nfrom modname import *\n```\n\n这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如'\\_a'此类。\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。\n\n### 深入模块\n\n前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。  \n我们一般使用这些可执行代码来初始化模块。  \n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。  \n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。  \n从另一个方面，当你确实知道你在做什么的话，你也可以通过 `modname.itemname` 这样的表示法来访问模块内的函数。  \n\n但是需要注意：  \n> 在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。  \n\n### __name__属性\n\n一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用\\_\\_name\\_\\_属性来使该程序块仅在该模块自身运行时执行。  \n> 注意是前后`两个下划线`\n\n```python\n# file_name:  test_module.py\nif __name__ == '__main__':\n    print('test_module_main')\nelse:\n    print('file_name: test_module.py')\n```\n\n每个模块都有一个\\_\\_name\\_\\_属性，当其值是'\\_\\_main\\_\\_'时，表明该模块自身在运行，否则是被引入。\n\n### dir()函数\n\n内置的函数 [`dir()`](#dir) 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:  \n```python\nimport test_module,sys\nprint(dir(test_module))\nprint(dir(sys))\n```\n\n以上代码的输出结果为：  \n> ['\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'function']  \n> ['\\_\\_breakpointhook\\_\\_', '\\_\\_displayhook\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_excepthook\\_\\_', '\\_\\_interactivehook\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', '\\_\\_stderr\\_\\_', '\\_\\_stdin\\_\\_', '\\_\\_stdout\\_\\_', '\\_\\_unraisablehook\\_\\_', '\\_base\\_executable', '\\_clear\\_type\\_cache', '\\_current\\_frames', '\\_debugmallocstats', '\\_enablelegacywindowsfsencoding', '\\_framework', '\\_getframe', '\\_git', '\\_home', '\\_xoptions', 'addaudithook', 'api\\_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'platlibdir', 'prefix', 'ps1', 'ps2', 'ps3', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions', 'winver']\n\n如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:\n```Python\nprint(dir())\n```\n\n> ['\\_\\_annotations\\_\\_', '\\_\\_builtins\\_\\_', '\\_\\_cached\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_file\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_']\n\n### 其他模块\n\n除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看[Python库参考文档](#Python库参考文档)。  \n\n有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。  \n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。  \n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:  \n```python\nimport sys\nprint(sys.ps1)\nprint(sys.ps2)\n```\n\n### 包\n\n包是一种管理 Python 模块命名空间的形式，采用\"点模块名称\"。  \n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。  \n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。  \n\n在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。  \n目录只有包含一个叫做 \\_\\_init\\_\\_.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。\n最简单的情况，放一个空的 :file:\\_\\_init\\_\\_.py就可以了。  \n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。  \n\n注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。  \nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。  \n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。  \n\n如果我们使用 from sound.effects import * 会发生什么呢？  \nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。  \n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。  \n在 Windows 平台平台上，我们无法确定一个叫做 ECHO.py 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。  \n为了解决这个问题，我们只需要提供一个精确包的索引。  \n导入语句遵循如下规则：如果包定义文件 \\_\\_init\\_\\_.py 存在一个叫做 \\_\\_all\\_\\_ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。  \n作为包的作者，可别忘了在更新包之后保证 \\_\\_all\\_\\_ 也更新了啊。  \n\\_\\_all\\_\\_是一个存储模块名字符串的列表。  \n\n*************************************\n\n## Python输入输出\n\n再前面我们已经接触过Python的输入[input()](#input)和输出[print()](#print)了，本章主要是介绍输入输出的进阶技巧。  \n\n### 输出格式美化\n\nPython两种输出值的方式: 表达式语句和 print() 函数。  \n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。  \n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。  \n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。  \n> + str()： 函数返回一个用户易读的表达形式。\n> + repr()： 产生一个解释器易读的表达形式。\n\n下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：  \n```Python\n>>> a = '1' \n>>> str(a)\n'1'\n>>> repr(a)\n\"'1'\"\n>>> print(a)\n1\n>>> print(str(a))\n1\n>>> print(repr(a))\n'1'\n>>> s = f'{str(a)},{repr(a)}'\n>>> print(s)\n1,'1'\n>>> #  repr() 函数可以保留转义字符串中的特殊字符\n>>> hello = 'hello, world\\n'      \n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> hellos_1 = str(hello)\n>>> print(hellos_1)\nhello, world\n\n>>> repr((x, y, ('Go','Python')))      \n\"(32.5, 40000, ('Go', 'Python'))\"\n```\n\n关于str()和repr()的更多区别请参见[str()和repr()的区别](str()和repr()的区别)\n\n其他关于字符串格式化内容请参见: [字符串格式化](#字符串格式化)\n\n### 读取输入\n\nPython 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。\n\n***********************************************\n\n## Python文件读写操作\n\n### 读和写文件\n\n[open()](#open)函数将会返回一个file对象，其基本语法如下：  \n```python\nopen(filename, mode)\n```\n\n+ filename : 包含了你要访问的文件的字符串值。\n+ mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n不同模式打开文件的完全列表：  \n\n| 模式 | 描述 |\n| :-: | :----- |\n| r | 以`只读`方式打开文件。文件的指针将会放在文件的`开头`。这是`默认`模式。 |\n| rb | 以`二进制`格式打开一个文件用于`只读`。文件指针将会放在文件的`开头`。 |\n| r+ | 打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| rb+ | 以`二进制`格式打开一个文件用于`读写`。文件指针将会放在文件的`开头`。 |\n| w | 打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb | 以`二进制`格式打开一个文件只用于`写入`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| w+ | 打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| wb+ | 以`二进制`格式打开一个文件用于`读写`。如果该文件已`存在则打开`文件，并从`开头`开始编辑，即`原有内容会被删除`。如果该文件`不存在则创建`新文件。 |\n| a | 打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| ab | 以`二进制`格式打开一个文件用于`追加`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。也就是说，新的内容将会被`写入到已有内容之后`。如果该文件`不存在则创建`新文件进行写入。 |\n| a+ | 打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。文件打开时会是追加模式。如果该文件`不存在则创建`新文件用于读写。 |\n| ab+ | 以`二进制格式`打开一个文件用于`读写`。如果该文件已`存在`，文件指针将会放在文件的`结尾`。如果该文件`不存在则创建`新文件用于读写。 |\n\n总结来说模式的情况有三种：  \n+ 基础模式： 也就是 `r` `w` `a` (read、write、append)\n+ 二进制模式：  在基础模式上加上`b`表示以二进制格式打开文件(byte)\n+ 读写模式：  在以上两种模式上加上`+`表示打开的文件可读写\n\n| 模式 | r | r+ | w | w+ | a | a+ |\n| :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n| 读 | √ | √ |   | √ |   | √ |\n| 写 |   | √ | √ | √ | √ | √ |\n| 创建 |   |   | √ | √ | √ | √ |\n| 覆盖 |   |   | √ | √ |   |   |\n| 指针在开始 | √ | √ | √ | √ |   |   |\n| 指针在结尾 |   |   |   |   | √ | √ |\n\n![读写模式](rwa-1.png)\n\n下面是一个读写文件的实例:  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a\")\n    f.write(\"a模式写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"w模式再写入\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> Traceback (most recent call last):\n>   File \"\\\\testpy\\\\quick.py\", line 6, in &lt;module>\n>     f = open(r\"testpy\\\\test.txt\", \"r\")\n> FileNotFoundError: [Errno 2] No such file or directory: 'testpy\\\\test.txt'\n> w模式写入\n> w模式写入a模式写入\n> w模式再写入\n\n可以看到下图文件结构的改变\n![读写测试-前](rw_test_1.png)\n![读写测试-后](rw_test_2.png)\n\n以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。\n\n> 这里有几个需要注意的点: \n> + 文件的路径，由于带有反斜杠\\\\，会被转义，所以需要使用r-string\n> + 打开的文件需要使用f.close()关闭或者使用[with...as...](#with关键字)代码块\n> + 读写文件通常需要在try...except里进行\n\n如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：  \n![文字乱码](rw-problem.png)\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：  \nvscode选择右下角的编码格式改变：\n![vscode选择编码](vscode.png)\n![vscode选择编码-2](vscode-2.png)\n![vscode选择编码-3](vscode-3.png)\n![文字乱码解决](solute.png)\n\n还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：  \n```python\nf = open(r\"testpy\\test.txt\", \"w\", encoding=\"utf-8\")\n# ...\nf.close()\n```\n\n\n关于上面实例使用的文件对象的方法，请看下节。  \n\n### 文件对象的方法\n<!-- TODO: 文件对象方法 -->\n\n#### [`f.read()`](#read)\n\n为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。  \nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。  \n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"r\")\n    print(f.read(2))\n    print(f.read(1))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n以上代码的输出结果为：  \n> 写入  \n> 字\n\n可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取  \n> 这是因为read()同时会向后移动指针size个字符.\n\n但是这时候有人又有问题了：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    f.write(\"写入字符串\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"a+\")\n    print(f.read(2))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？\n> 这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。\n\n如果你打开文件的方式没有读的权限，那么会报出以下的错误：  \n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test.txt\", \"w\")\n    print(f.read())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n> Traceback (most recent call last): \n>   File \"\\\\testpy\\\\quick.py\", line 18, in &lt;module>  \n>     print(f.read())\n> `io.UnsupportedOperation: not readable`\n\n#### [`f.readline()`](#readline)\nf.readline() 会从文件中读取单独的一行。换行符为 '\\n'。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"a\", encoding=\"utf-8\")\n    f.write(\"写入字符串1\\n\")\n    f.close()\nexcept:\n    traceback.print_exc()\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(repr(f.readline()))\n    print(repr(f.readline()))\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> '写入字符串\\n'  \n> '写入字符串1\\n'  \n\n可以看到调用readline()和read()一样都会向后移动指针\n\n还可以使用迭代文件对象的方式遍历每一行：  \n```python\nimport traceback\n\ntry:\n    # 使用with...as在代码块结束时会自动关闭文件对象\n    with open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            print(line, end=\"\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入字符串  \n> 写入字符串1\n\n#### [`f.readlines()`](#readlines)\n\nf.readlines() 将返回该文件中包含的所有行。  \n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。\n\n```python\nimport traceback\n\nf = None\n\ntry:\n    f = open(r\"testpy\\test2.txt\", \"r\", encoding=\"utf-8\")\n    print(f.readlines())\n    f.close()\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> ['写入字符串\\n', '写入字符串1']\n\n#### [`f.write()`](#write)\n\nf.write(string) 将 string 写入到文件中, 然后返回写入的字符数。\n```Python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符\n\n#### [`f.tell()`](#tell)\n\nf.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f'当前游标处于第{f.tell()}字节处')\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处\n\n一些常用编码一个字符所占的字节数：  \n| 编码 | 中文 | 英文 | 其他说明 |\n| :--: | :--: | :--: | :-- |\n| ASCII | 2 | 1 |  |\n| Unicode | 2 | 2 | 英文符号只占1个字节 |\n| GB2312 | 2 | 2 | |\n| GBK | 2 | 1 | |\n| ISO-8859-1 | 1 | 1 | |\n| UTF-8 | 3 | 1 | |\n| UTF-16 | 2 | 2 | Unicode扩展区的一些汉字存储需要4个字节 |\n| UTF-32 | 4 | 4 |  |\n\n#### [`f.seek()`](#seek)\n\n如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。\n\noffset 是偏移量；\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：\n\n+ seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符\n+ seek(x,1) ： 表示从当前位置往后移动x个字符\n+ seek(-x,2)：表示从文件的结尾往前移动x个字符\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：\n\n```python\nimport traceback\n\ntry:\n    with open(r\"testpy\\test2.txt\", \"w\", encoding=\"utf-8\") as f:\n        print(f'写入{f.write(\"写入测试\")}个字符')\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0))\n        print(f\"当前游标处于第{f.tell()}字节处\")\n        print(f.seek(0, 2))\n        print(f\"当前游标处于第{f.tell()}字节处\")\nexcept:\n    traceback.print_exc()\n\n```\n\n以上代码的输出结果为：  \n> 写入4个字符  \n> 当前游标处于第12字节处  \n> 0  \n> 当前游标处于第0字节处  \n> 12  \n> 当前游标处于第12字节处\n\n#### [`f.close()`](#close)\n\n在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。  \n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。\n\n\n### pickle模块\n\npython的pickle模块实现了基本的数据序列和反序列化。  \n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。  \n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。  \n\n下面通过一个简单实例来说明pickle模块：  \n```python\nimport pickle\n\n# 使用pickle模块将数据对象保存到文件\ndata1 = {\"a\": [1, 2.0, 3, 4 + 6j], \"b\": (\"string\", u\"Unicode string\"), \"c\": None}\n\noutput = open(\"data.pkl\", \"wb\")\n\nselfref_list = [1, 2, 3]\nselfref_list.append(selfref_list)\n\n# Pickle dictionary using protocol 0.\npickle.dump(data1, output)\n\n# Pickle the list using the highest protocol available.\npickle.dump(selfref_list, output, 1)\n\noutput.close()\n```\n\n上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：  \n```python\npickle.dump(obj, file, [,protocol])\n```\n\n它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。\n\n```python\nimport pickle\n\npkl_file = open(\"data.pkl\", \"rb\")\n\n# 使用pickle模块从文件中重构python对象\ndata1 = pickle.load(pkl_file)\nprint(data1)\ndata2 = pickle.load(pkl_file)\nprint(data2)\n\npkl_file.close()\n```\n\n以上代码的输出结果为：  \n> {'a': [1, 2.0, 3, (4+6j)], 'b': ('string', 'Unicode string'), 'c': None}  \n> [1, 2, 3]\n\n上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：  \n```python\nany_x = pickle.load(file)\n```\n\n*************************\n\n## Python os模块\n<!-- TODO: os模块方法 -->\n\n### os模块常用方法\n\n[os模块](#Python-os模块方法)提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：  \n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[access()](#access)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.access(\"./testpy/test.txt\", os.F_OK))\nprint(os.access(\"./testpy/test.txt1111\", os.F_OK))\nprint(os.access(\"./testpy/data.pkl\", os.R_OK))\nprint(os.access(\"./testpy/test.pkl\", os.W_OK))\nprint(os.access(\"./testpy/test.pkl\", os.X_OK))\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\nTrue\nFalse\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[getcwd()](#getcwd)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n# 返回你的当前工作目录\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chdir()](#chdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.getcwd())\nos.chdir(\"../\")\nprint(os.getcwd())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\ng:\\Codes\\Python\\testpy\ng:\\Codes\\Python\\\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[chmod()](#chmod)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os, stat\n\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\nos.chmod(\"./testpy/data.pkl\", stat.S_IREAD)\nprint(os.access(\"./testpy/data.pkl\", os.W_OK))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nTrue\nFalse\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[open()](#open)\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfd = os.open(\"./testpy/test3.txt\", os.O_CREAT | os.O_RDWR)\nos.write(fd, str.encode(\"This is test\\n\"))\nos.close(fd)\n\nfd = os.open(\"./testpy/test3.txt\", os.O_RDONLY)\nprint(os.read(fd, 10))\nos.close(fd)\n```\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n\n```python\nb'This is te'\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[write()](#write)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[read()](#read)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[close()](#close)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[closerange()](#closerange)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nfd = os.open(\"./test.txt\",os.O_RDONLY)\nos.closerange(fd,fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup()](#dup)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 打开文件\nfd = os.open(\"foo.txt\", os.O_RDWR | os.O_CREAT)\n# 复制文件描述符\nd_fd = os.dup(fd)\n# 使用复制的文件描述符写入文件\nos.write(d_fd, \"This is test\".encode())\n# 关闭文件\nos.closerange(fd, d_fd)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[dup2()](#dup2)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fdopen()](#fdopen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n# os.fdopen()\n# 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。\n# 该方法是内置函数 open() 的别名;\n# 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[stat()](#stat)\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nimport os\n\npath = \"./testpy/test.txt\"\n\nprint(os.stat(path))\n\ninfo = os.lstat(path)\n\nprint(info)\nprint(f\"st_uid = {info.st_uid}\")\n\nfd = os.open(path, os.O_RDWR)\ninfo = os.fstat(fd)\n\nprint(info)\nos.close(fd)\n```\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n\n```python\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\nst_uid = 0\nos.stat_result(st_mode=33206, st_ino=1407374883563448, \nst_dev=2427623123, st_nlink=1, st_uid=0, st_gid=0, st_size=0, \nst_atime=1642992982, st_mtime=1642992982, st_ctime=1642908751)\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[lstat()](#lstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fstat()](#fstat)\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[fsync()](#fsync)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[link()](#link)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nos.link(src, dst)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[listdir()](#listdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\npath = \"./\"\nprint(os.listdir(path))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[makedirs()](#makedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/\"\n\nos.makedirs(path, 0o777)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[mkdir()](#mkdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\npath = \"./testpy/test_makedirs1/test_makedirs2/test_mkdir\"\n\nos.mkdir(path)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pipe()](#pipe)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nr,w = os.pipe()\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[popen()](#popen)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nwith os.popen(\"mkdir test_popen\",\"r\",1) as f:\n    print(f)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n<os._wrap_close object at 0x000001D8FC929430>\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[system()](#system)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.system(r\"adb devices\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[remove()](#remove)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\n# 列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n\nos.remove(\"./testpy/test.txt\")\n\n# 移除后列出目录\nprint(\"目录为: %s\" % os.listdir(os.getcwd() + \"/testpy/\"))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test.txt', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n目录为: ['data.pkl', 'quick.py', 'quick2.py', 'test1.txt', 'test2.txt', 'test3.txt', 'test_makedirs1', 'test_unicode.txt']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[removedirs()](#removedirs)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.removedirs(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rmdir()](#rmdir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nos.rmdir(r\"./testpy/test_makedirs1/test_makedirs2/test_mkdir\")\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[rename()](#rename)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nprint(os.listdir())\n\nos.rename(\"test_pack\", \"test_rename\")\n\nprint(os.listdir())\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_pack', 'test_popen', 'unable', 'workspace.code-workspace', '__pycache__']\n['.vscode', 'auto.py', 'data.pkl', 'dp1.py', 'foo.txt', 'test.py', 'test.txt', 'testpy', 'test_module.py', 'test_popen', 'test_rename', 'unable', 'workspace.code-workspace', '__pycache__']\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[renames()](#renames)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\nprint (\"当前目录为: %s\" %os.getcwd())\n\n# 列出目录\nprint (\"目录为: %s\"%os.listdir(os.getcwd()))\n\n# 重命名 \"aa1.txt\"\nos.renames(\"aa1.txt\",\"newdir/aanew.txt\")\n\nprint (\"重命名成功。\")\n\n# 列出重命名的文件 \"aa1.txt\"\nprint (\"目录为: %s\" %os.listdir(os.getcwd()))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n当前目录为: /tmp\n目录为:\n [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','newdir','amrood.admin' ]\n重命名成功。\n目录为:\n [  'a1.txt','resume.doc','a3.py','Administrator','newdir','amrood.admin' ]\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[walk()](#walk)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n\nfor root, dirs, files in os.walk(\".\", topdown=False):\n    for name in files:\n        print(os.path.join(root, name))\n    for name in dirs:\n        print(os.path.join(root, name))\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n.\\.vscode\\settings.json\n.\\testpy\\data.pkl\n.\\testpy\\quick.py\n.\\testpy\\quick2.py\n.\\testpy\\test1.txt\n.\\testpy\\test2.txt\n.\\testpy\\test3.txt\n.\\testpy\\test_unicode.txt\n.\\test_pack\\test_py.py\n.\\test_pack\\__init__.py\n.\\unable\\__pycache__\\un_test.cpython-39.pyc\n.\\unable\\un_test.py\n.\\unable\\__pycache__\n.\\__pycache__\\test_module.cpython-39.pyc\n.\\auto.py\n.\\data.pkl\n.\\dp1.py\n.\\foo.txt\n.\\test.py\n.\\test.txt\n.\\test_module.py\n.\\workspace.code-workspace\n.\\.vscode\n.\\testpy\n.\\test_pack\n.\\test_popen\n.\\unable\n.\\__pycache__\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n\n[pardir()](#pardir)\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\nimport os\n \n# 输出默认值 ..\nprint(os.pardir)\n```\n</td>\n<td style = \"vertical-align : middle;\">\n\n```python\n..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n\n</tbody>\n</table>\n\n### path模块\n\nos.path 模块主要用于获取文件的属性。  \n以下是 os.path 模块的几种常用方法：  \n\n| 方法 | 说明 |\n| :--: | :------------------- |\n| os.path.`abspath`(path) | 返回绝对路径 |\n| os.path.`basename`(path) | 返回文件名 |\n| os.path.`commonprefix`(list) | 返回list(多个路径)中，所有path共有的最长的路径 |\n| os.path.`dirname`(path) | 返回文件路径 |\n| os.path.`exists`(path) | 路径存在则返回True,路径损坏返回False |\n| os.path.`expanduser`(path) | 把path中包含的\"~\"和\"~user\"转换成用户目录 |\n| os.path.`expandvars`(path) | 根据环境变量的值替换path中包含的\"$name\"和\"${name}\" |\n| os.path.`getatime`(path) | 返回最近访问时间（浮点型秒数） |\n| os.path.`getmtime`(path) | 返回最近文件修改时间 |\n| os.path.`getctime`(path) | 返回文件 path 创建时间 |\n| os.path.`getsize`(path) | 返回文件大小，如果文件不存在就返回错误 |\n| os.path.`isabs`(path) | 判断是否为绝对路径 |\n| os.path.`isfile`(path) | 判断路径是否为文件 |\n| os.path.`isdir`(path) | 判断路径是否为目录 |\n| os.path.`islink`(path) | 判断路径是否为链接 |\n| os.path.`ismount`(path) | 判断路径是否为挂载点 |\n| os.path.`join`(path1[, path2[, ...]]) | 把目录和文件名合成一个路径 |\n| os.path.`normcase`(path) | 转换path的大小写和斜杠 |\n| os.path.`normpath`(path) | 规范path字符串形式 |\n| os.path.`realpath`(path) | 返回path的真实路径 |\n| os.path.`relpath`(path[, start]) | 从start开始计算相对路径 |\n| os.path.`samefile`(path1, path2) | 判断目录或文件是否相同 |\n| os.path.`sameopenfile`(fp1, fp2) | 判断fp1和fp2是否指向同一文件 |\n| os.path.`samestat`(stat1, stat2) | 判断stat tuple stat1和stat2是否指向同一个文件 |\n| os.path.`split`(path) | 把路径分割成 dirname 和 basename，返回一个元组 |\n| os.path.`splitdrive`(path) | 一般用在 windows 下，返回驱动器名和路径组成的元组 |\n| os.path.`splitext`(path) | 分割路径中的文件名与拓展名 |\n| os.path.`walk`(path, visit, arg) | 遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数 |\n| os.path.`supports_unicode_filenames` | 设置是否支持unicode路径名 |\n\n<!--TODO: ### os.open()与open()的区别 -->\n\n<!--TODO: ### os.popen()与os.system()的区别 -->\n\n***************************\n\n## Python错误与异常处理\n\nPython有两种错误：语法错误和异常。  \nPython [assert](#assert-断言)（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。\n\n### 语法错误\nPython 的语法错误或者称之为解析错，会报出以下的错误：  \n\n```python\nprint('a)\n\n```\n\n```python\nline 1\n    print('a)\n             ^\nSyntaxError: EOL while scanning string literal\n```\n\n```python\nprint('a') print('b')\n```\n\n```python\nline 1\n    print('a') print('b')\n               ^\nSyntaxError: invalid syntax\n```\n\n如上，程序会报出语法错误`SyntaxError`，后面跟着的是错误的提示信息。  \n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。\n\n### 异常\n\n即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。  \n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:  \n\n```Python\n>>> 10 * (1/0)             # 0 不能作为除数，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nZeroDivisionError: division by zero\n>>> 4 + spam*3             # spam 未定义，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nNameError: name 'spam' is not defined\n>>> '2' + 2               # int 不能与 str 相加，触发异常\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n异常类型和异常信息会显示出来，例子中的异常类型有：`ZeroDivisionError`、`NameError`、`TypeError`  \n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。\n\n### 异常处理\n\n异常处理的格式是：  \n```python\ntry:\n    <code_segment>\nexcept [ErrorType]:\n    <solute_segment>\n[...\nexcept:\n    <solute_segment>\n]\n[else:\n    <code_segment>]\n[finally:\n    <code_segment>]\n```\n\n异常处理的工作流程如下：\n+ try代码块为要执行的代码，被先执行;\n+ 如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;\n+ 如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;\n+ 如果try代码块没有产生异常则执行else代码块(如果有);\n+ 最后执行finally代码块, finally 语句无论异常是否发生都会执行。\n\n> 一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:\n> ```python\n> except (RuntimeError, TypeError, NameError):\n>     pass\n> ```\n\n### 抛出异常\n\npython使用raise关键字向上层抛出异常:  \n\n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise ValueError\nexcept ValueError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。 \nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。  \nraise后面如果不跟具体异常，这样会向上抛出`RuntimeError`:  \n```python\ntry:\n    x = int(input(\"请输入一个小于10的数字\"))\n    if x >= 10:\n        raise\nexcept RuntimeError:\n    print(\"输入数字大于等于10\")\nelse:\n    print(\"正确\")\n```\n\n异常输出：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\" , line 4, in <module>\n    raise\nRuntimeError: No active exception to reraise\n```\n\n### 自定义异常\n\n用户可以通过[继承](#继承)Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:  \n```Python\nclass MyError(Exception):\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ntry:\n    raise MyError(0)\nexcept MyError as e:\n    print(\"error code:\", e.value)\n\nraise MyError(\"MyError\")\n```\n\n以上代码的输出结果为：  \n> error code: 0\n> Traceback (most recent call last):\n  File \"&lt;stdin>\", line 14, in &lt;module>\n    raise MyError(\"MyError\")\n> \\_\\_main\\_\\_.MyError: 'MyError'  \n\n\n> 大多数的异常的名字都以\"Error\"结尾，就跟标准的异常命名一样。\n\n### assert(断言)\n\nPython assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。  \n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。  \n\n语法格式为：  \n```python\nassert expression\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError\n```\n\nassert 后面也可以紧跟参数:  \n```python\nassert expression [, arguments]\n```\n\n等价于\n```python\nif not expression:\n    raise AssertionError(arguments)\n```\n\n下面是实例：  \n```python\nassert True\nprint(\"正常运行\")\nassert False\n```\n\n输出结果为：  \n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert False\nAssertionError\n```\n\n带参数的实例：  \n```python\nassert 1>2, \"1大于2是错误的\"\n```\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    assert 1 > 2, \"1大于2是错误的\"\nAssertionError: 1大于2是错误的\n```\n\n以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：\n```python\nimport sys\nassert ('linux' in sys.platform), \"该代码只能在 Linux 下执行\"\n\n# 接下来要执行的代码\n```\n\n### with关键字\n\nPython 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。  \nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。  \n在处理文件对象时使用 with 关键字是一种很好的做法。  \n我们可以看下以下几种代码实例：  \n不使用 with，也不使用 try…except…finally\n```python\nfile = open('./test.txt', 'w')\nfile.write('hello world !')\nfile.close()\n```\n\n以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：  \n\n```python\nfile = open('./test.txt', 'w')\ntry:\n    file.write('hello world')\nfinally:\n    file.close()\n```\n\n以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。\n\n使用 with 关键字：\n```python\nwith open('./test.txt', 'w') as file:\n    file.write('hello world !')\n```\n\n使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。  \n我们可以在执行 with 关键字后检验文件是否关闭：\n```python\nwith open(\"./test.txt\") as f:\n    print(f.closed)\nprint(f.closed)\n```\n\n以上代码输出结果为：  \n> False  \n> True\n\nwith 语句实现原理建立在上下文管理器之上。  \n上下文管理器是一个实现 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法的类。  \n使用 with 语句确保在嵌套块的末尾调用 \\_\\_exit\\_\\_ 方法。  \n这个概念类似于 try...finally 块的使用。\n\n> 在文件对象中定义了 \\_\\_enter\\_\\_ 和 \\_\\_exit\\_\\_ 方法，即文件对象也实现了上下文管理器，首先调用 \\_\\_enter\\_\\_ 方法，然后执行 with 语句中的代码，最后调用 \\_\\_exit\\_\\_ 方法。 即使出现错误，也会调用 \\_\\_exit\\_\\_ 方法，也就是会关闭文件流。\n\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n\n*****************************\n\n## Python面向对象\n\n### 面向对象技术简介\n\n+ 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\n+ 方法：类中定义的函数。\n+ 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\n+ 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。\n+ 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\n+ 局部变量：定义在方法中的变量，只作用于当前实例的类。\n+ 实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。\n+ 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\n+ 实例化：创建一个类的实例，类的具体对象。\n+ 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\n\n### 定义类\n\n```python\nclass ClassName:\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。\n\n### 类对象\n\n类对象支持两种操作：属性引用和实例化。\n属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。\n类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:  \n\n```Python\nclass MyClass:\n    \"\"\"一个简单的类实例\"\"\"\n    i = 12345\n    def f(self):\n        return 'hello world'\n\n# 实例化类\nx = MyClass()\n \n# 访问类的属性和方法\nprint(\"MyClass 类的属性 i 为：\", x.i)\nprint(\"MyClass 类的方法 f 输出为：\", x.f())\n```\n\n以上代码的运行结果是：  \n> MyClass 类的属性 i 为： 12345  \n> MyClass 类的方法 f 输出为： hello world\n\n类有一个名为 \\_\\_init\\_\\_() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：  \n\n```python\ndef __init__(self):\n    self.data = []\n```\n\n类定义了 \\_\\_init\\_\\_() 方法，类的实例化操作会自动调用 \\_\\_init\\_\\_() 方法。  \n当然， \\_\\_init\\_\\_() 方法可以有参数，参数通过 \\_\\_init\\_\\_() 传递到类的实例化操作上。例如:\n\n```python \nclass Complex:\n    def __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\nx = Complex(3.0, -4.5)\nprint(x.r, x.i)   # 输出结果：3.0 -4.5\n```\n\n***self代表类的实例，而非类***\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。\n\n```python\nclass Test:\n    def prt(self):\n        print(self)\n        print(self.__class__)\n \nt = Test()\nt.prt()\n```\n\n以上代码的运行结果为：  \n> &lt;\\_\\_main\\_\\_.Test instance at 0x0000025D089CCFD0>\n> \\_\\_main\\_\\_.Test\n\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。\n\nself 不是 python 关键字，我们把他换成其他也是可以正常执行的\n\n### 类的方法\n\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。\n\n```python\n#类定义\nclass people:\n    #定义基本属性\n    name = ''\n    age = 0\n    #定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    #定义构造方法\n    def __init__(self,n,a,w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))\n \n# 实例化类\np = people('sam',10,30)\np.speak()\n```\n\n以上代码的输出结果为：  \n> sam 说: 我 10 岁。\n\n### 继承\n\n派生类的定义语法如下：  \n\n```python\nclass DerivedClassName(BaseClassName):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。\n\nBaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:  \n```python\nclass DerivedClassName(modname.BaseClassName):\n```\n\n单继承：  \n\n```python\n#类定义\nclass people:\n    #定义基本属性\n    name = ''\n    age = 0\n    #定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    #定义构造方法\n    def __init__(self,n,a,w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))\n \n#单继承示例\nclass student(people):\n    grade = ''\n    def __init__(self,n,a,w,g):\n        #调用父类的构函\n        people.__init__(self,n,a,w)\n        self.grade = g\n    #覆写父类的方法\n    def speak(self):\n        print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade))\n \n\ns = student('ken',10,60,3)\ns.speak()\n```\n\n以上代码的输出结果为：  \n> ken 说: 我 10 岁了，我在读 3 年级\n\n### 多继承\n\nPython同样有限的支持多继承形式。多继承的类定义形如下例:  \n```python\nclass DerivedClassName(Base1, Base2, Base3):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n```\n\n需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。\n\n```python\n# 类定义\nclass people:\n    # 定义基本属性\n    name = \"\"\n    age = 0\n    # 定义私有属性,私有属性在类外部无法直接进行访问\n    __weight = 0\n    # 定义构造方法\n    def __init__(self, n, a, w):\n        self.name = n\n        self.age = a\n        self.__weight = w\n\n    def speak(self):\n        print(\"%s 说: 我 %d 岁。\" % (self.name, self.age))\n\n\n# 单继承示例\nclass student(people):\n    grade = \"\"\n\n    def __init__(self, n, a, w, g):\n        # 调用父类的构函\n        people.__init__(self, n, a, w)\n        self.grade = g\n\n    # 覆写父类的方法\n    def speak(self):\n        print(\"%s 说: 我 %d 岁了，我在读 %d 年级\" % (self.name, self.age, self.grade))\n\n\n# 另一个类，多重继承之前的准备\nclass speaker:\n    topic = \"\"\n    name = \"\"\n\n    def __init__(self, n, t):\n        self.name = n\n        self.topic = t\n\n    def speak(self):\n        print(\"我叫 %s，我是一个演说家，我演讲的主题是 %s\" % (self.name, self.topic))\n\n\n# 多重继承\nclass sample(speaker, student):\n    a = \"\"\n\n    def __init__(self, n, a, w, g, t):\n        student.__init__(self, n, a, w, g)\n        speaker.__init__(self, n, t)\n\n\ntest = sample(\"Tim\", 25, 80, 4, \"Python\")\ntest.speak()  # 方法名同，默认调用的是在括号中参数位置排前父类的方法\n```\n\n以上代码的运行结果为：  \n> 我叫 Tim，我是一个演说家，我演讲的主题是 Python\n\n### 方法重写\n\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下：\n\n```python\nclass Parent:        # 定义父类\n   def myMethod(self):\n      print ('调用父类方法')\n \nclass Child(Parent): # 定义子类\n   def myMethod(self):\n      print ('调用子类方法')\n \nc = Child()          # 子类实例\nc.myMethod()         # 子类调用重写方法\nsuper(Child,c).myMethod() # 用子类对象调用父类已被覆盖的方法\n```\n<!-- TODO: super() -->\n[`super()`](#super) 函数是用于调用父类(超类)的一个方法。  \n执行以上程序输出结果为：\n> 调用子类方法  \n> 调用父类方法\n\n### 类属性和方法\n\n**类的私有属性**\n\\_\\_private\\_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.\\_\\_private\\_attrs。\n\n**类的方法**\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。  \nself 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。\n\n**类的私有方法**\n\\_\\_private\\_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.\\_\\_private\\_methods。\n\n```python\nclass JustCounter:\n    __secretCount = 0  # 私有变量\n    publicCount = 0    # 公开变量\n \n    def count(self):\n        self.__secretCount += 1\n        self.publicCount += 1\n        print (self.__secretCount)\n \ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint (counter.publicCount)\nprint (counter.__secretCount)  # 报错，实例不能访问私有变量\n```\n\n以上代码的输出结果为：  \n> 1  \n> 2  \n> 2  \n> Traceback (most recent call last):    \n>   File \"test.py\", line 16, in &lt;module>  \n>     print (counter.__secretCount)  # 报错，实例不能访问私有变量  \n> AttributeError: 'JustCounter' object has no attribute '__secretCount'  \n\n### 私有变量\n\n那种仅限从一个对象内部访问的“私有”实例变量在 Python 中并不存在。 但是，大多数 Python 代码都遵循这样一个约定：带有一个下划线的名称 (例如 \\_spam) 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。 这应当被视为一个实现细节，可能不经通知即加以改变。  \n由于存在对于类私有成员的有效使用场景（例如避免名称与子类所定义的名称相冲突），因此存在对此种机制的有限支持，称为 名称改写。 任何形式为 \\_\\_spam 的标识符（至少带有两个前缀下划线，至多一个后缀下划线）的文本将被替换为 \\_classname\\_\\_spam，其中 classname 为去除了前缀下划线的当前类名称。 这种改写不考虑标识符的句法位置，只要它出现在类定义内部就会进行。\n\n名称改写有助于让子类重载方法而不破坏类内方法调用。\n\n<!-- TODO：私有变量 -->\n\n### 类的专有方法\n\n+ \\_\\_init\\_\\_ : 构造函数，在生成对象时调用\n+ \\_\\_del\\_\\_ : 析构函数，释放对象时使用\n+ \\_\\_repr\\_\\_ : 打印，转换\n+ \\_\\_setitem\\_\\_ : 按照索引赋值\n+ \\_\\_getitem\\_\\_: 按照索引获取值\n+ \\_\\_len\\_\\_: 获得长度\n+ \\_\\_cmp\\_\\_: 比较运算\n+ \\_\\_call\\_\\_: 函数调用\n+ \\_\\_add\\_\\_: 加运算\n+ \\_\\_sub\\_\\_: 减运算\n+ \\_\\_mul\\_\\_: 乘运算\n+ \\_\\_truediv\\_\\_: 除运算\n+ \\_\\_mod\\_\\_: 求余运算\n+ \\_\\_pow\\_\\_: 乘方\n\n### 运算符重载\n\nPython同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下：\n\n```python\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n \n   def __str__(self):\n      return 'Vector (%d, %d)' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n \nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint (v1 + v2)\n```\n\n以上代码的运行结果为：  \n> Vector(7,8)\n\n********************************\n\n## Python命名空间和作用域\n\n### 命名空间\n\n先看看官方文档的一段话：\n\n> A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。\n> \n> 命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。\n\n命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。  \n我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。\n\n一般有三种命名空间：  \n\n+ 内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。\n+ 全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。\n+ 局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）\n\n![命名空间](命名空间.png)\n\n命名空间查找顺序:  \n假设我们要使用变量 test，则 Python 的查找顺序为：**局部的命名空间去 -> 全局命名空间 -> 内置命名空间**。\n如果找不到变量 test，它将放弃查找并引发一个 NameError 异常:\n\n```python\nNameError: name 'test' is not defined。\n```\n\n命名空间的生命周期：  \n命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。   \n因此，我们无法从外部命名空间访问内部命名空间的对象。\n\n```python\n# var1 是全局名称\nvar1 = 5\ndef some_func():\n \n    # var2 是局部名称\n    var2 = 6\n    def some_inner_func():\n \n        # var3 是内嵌的局部名称\n        var3 = 7\n```\n\n如下图所示，相同的对象名称可以存在于多个命名空间中。\n\n![命名空间-2](命名空间-2.png)\n\n### 作用域\n\n> A scope is a textual region of a Python program where a namespace is directly accessible. \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace.\n\n作用域就是一个 Python 程序可以直接访问命名空间的正文区域。  \n在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。  \nPython 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。  \n\n变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：\n\n+ L（Local）：最内层，包含局部变量，比如一个函数/方法内部。\n+ E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。\n+ G（Global）：当前脚本的最外层，比如当前模块的全局变量。\n+ B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。\n\n在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。\n\n![作用域](作用域.png)\n\n```python\ng_count = 0  # 全局作用域\ndef outer():\n    o_count = 1  # 闭包函数外的函数中\n    def inner():\n        i_count = 2  # 局部作用域\n```\n\n内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:  \n\n```python\nimport builtins\nprint(dir(builtins))\n```\n\n以上代码的输出结果为：  \n> ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '\\_\\_build_class\\_\\_', '\\_\\_debug\\_\\_', '\\_\\_doc\\_\\_', '\\_\\_import\\_\\_', '\\_\\_loader\\_\\_', '\\_\\_name\\_\\_', '\\_\\_package\\_\\_', '\\_\\_spec\\_\\_', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n\nPython 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问.\n\n```python\nif True:\n    test = \"test\"\nprint(test)\n```\n\n以上代码的输出结果为：  \n> test\n\n实例中 test 变量定义在 if 语句块中，但外部还是可以访问的。  \n如果将 test 定义在函数中，则它就是局部变量，外部不能访问：\n\n```python\ndef test_func():\n    test = \"test\"\n    return None\n\nprint(test)\n```\n\n以上代码的运行结果为：  \n> Traceback (most recent call last):\n>   File \"&lt;stdin>\", line 1, in &lt;module>\n> NameError: name 'test' is not defined\n\n从报错的信息上看，说明了 test 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。\n\n### 全局变量和局部变量\n\n定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。  \n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。  \n\n```python\ntotal = 0 # 这是一个全局变量\n# 可写函数说明\ndef sum( arg1, arg2 ):\n    #返回2个参数的和.\"\n    total = arg1 + arg2 # total在这里是局部变量.\n    print (\"函数内是局部变量 : \", total)\n    return total\n \n#调用sum函数\nsum( 10, 20 )\nprint (\"函数外是全局变量 : \", total)\n```\n\n以上实例输出结果：\n> 函数内是局部变量 :  30   \n> 函数外是全局变量 :  0\n\n### global和nonlocal关键字\n\n当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。\n\n```python\nnum = 1\ndef fun1():\n    global num  # 需要使用 global 关键字声明\n    print(num) \n    num = 123\n    print(num)\nfun1()\nprint(num)\n```\n\n以上代码的运行结果为：  \n> 1  \n> 123  \n> 123\n\n如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：\n\n```python\ndef outer():\n    num = 10\n    def inner():\n        nonlocal num   # nonlocal关键字声明\n        num = 100\n        print(num)\n    inner()\n    print(num)\nouter()\n```\n\n以上代码的运行结果为：  \n> 100  \n> 100\n\n************************************\n\n## Python标准库概览\n\n### 操作系统接口\n\n`os模块`提供了不少与操作系统相关联的函数。更多请参见：[Python os模块](#Python-os模块)和[Python os模块方法](#Python-os模块方法)\n\n> 建议使用 \"import os\" 风格而非 \"from os import *\"。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。\n\n针对日常的文件和目录管理任务，`shutil模块`提供了一个易于使用的高级接口，更多请见：[Python shutil模块](Python-shutil模块方法)\n\n### 文件通配符\n\n`glob模块`提供了一个函数用于从目录通配符搜索中生成文件列表：  \n\n```python\nimport glob\nprint(glob.glob('*.py'))\n```\n\n```python\n['quick.py', 'quick2.py']\n```\n\n### 命令行参数\n\n通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 \"python demo.py one two three\" 后可以得到以下输出结果:  \n\n```python\n>>> import sys\n>>> print(sys.argv)\n['demo.py', 'one', 'two', 'three']\n```\n\n### 错误输出重定向和程序终止\n\nsys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。   \n大多脚本的定向终止都使用 \"sys.exit()\"。\n\n```python\nimport sys\n\nsys.stderr.write(\"stderr.write_test\\n\")\n\nsys.exit()\n\nprint(0)\n```\n\n```\nstderr.write_test\n\n```\n\n### 字符串正则匹配\n\n`re模块`为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:\n\n```python\nimport re\nprint(re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest'))\nprint(re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat'))\n```\n\n以上代码的运行结果为：  \n> ['foot', 'fell', 'fastest']   \n> 'cat in the hat'\n\n如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:\n\n```python\n>>> 'tea for too'.replace('too', 'two')\n'tea for two'\n```\n\n更多关于正则表达式表达见后文[正则表达式](#Python正则表达式)\n\n### 数学\n\npython提供了`math模块`对简单数学支持，以及`random模块`对随机数的支持。\n\n### 访问互联网\n\n有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib。\n\n### 日期和时间\n\n`datetime模块`为日期和时间处理同时提供了简单和复杂的方法。  \n支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。\n该模块还支持时区处理:  \n\n```python\n# dates are easily constructed and formatted\nimport datetime\n\nnow = datetime.date.today()\nprint(now)\nprint(datetime.date(2023, 12, 2))\nprint(now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\"))\n\n# dates support calendar arithmetic\nbirthday = datetime.date(1964, 7, 31)\nage = now - birthday\nprint(age.days)\n```\n\n```\n2022-02-21\n2023-12-02\n02-21-22. 21 Feb 2022 is a Monday on the 21 day of February.\n21024\n```\n\n### 数据压缩\n\n以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。\n\n```python\nimport zlib\n\ns = b\"witch which has which witches wrist watch\"\nprint(len(s))\n\nt = zlib.compress(s)\nprint(len(t))\n\nprint(zlib.decompress(t))\nprint(zlib.crc32(s))\n```\n\n```\n41\n37\nb'witch which has which witches wrist watch'\n226805979\n```\n\n### 性能度量\n\n有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。\n例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。\n\n```python\n>>> from timeit import Timer\n>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\n>>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791\n```\n\n相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具。\n\n### 测试模块\n\n开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试  \n`doctest模块`提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。  \n测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。   \n通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:\n\n```python\ndef average(values):\n    \"\"\"Computes the arithmetic mean of a list of numbers.\n\n    >>> print(average([20, 30, 70]))\n    40.0\n    \"\"\"\n    return sum(values) / len(values)\n\nimport doctest\ndoctest.testmod()   # 自动验证嵌入测试\n```\n\n以上代码的运行结果为：  \n> TestResults(failed=0, attempted=1)\n\n`unittest模块`不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集:\n\n```python\nimport unittest\n\nclass TestStatisticalFunctions(unittest.TestCase):\n\n    def test_average(self):\n        self.assertEqual(average([20, 30, 70]), 40.0)\n        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n        self.assertRaises(ZeroDivisionError, average, [])\n        self.assertRaises(TypeError, average, 20, 30, 70)\n\nunittest.main() # Calling from the command line invokes all tests\n```\n\n*************************************\n\n## Python正则表达式\n\n正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。  \n`re 模块`使 Python 语言拥有全部的正则表达式功能。  \n\ncompile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。  \nre 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。  \n\n本章节主要介绍 Python 中常用的正则表达式处理函数，如果你对正则表达式不了解，可以查看[正则表达式](/cn/regex)。\n\n### re.match函数\n\nre.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。\n\n函数语法：\n```python\nre.match(pattern, string, flags=0)\n```\n\n函数参数说明：  \n+ pattern : 匹配的正则表达式\n+ string : 要匹配的字符串。\n+ flags : 可选参数，标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：[正则表达式修饰符](#正则表达式修饰符)\n\n匹配成功re.match方法返回一个匹配的对象，否则返回None。  \n\n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。  \n+ group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。\n+ groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。\n\n以下是实例：  \n\n```python\nimport re\n\nprint(re.match(\"www\", \"www.baidu.com\").span())  # 在起始位置匹配\nprint(re.match(\"com\", \"www.baidu.com\"))  # 不在起始位置匹配\n\nline = \"Cats are smarter than dogs\"\n# .* 表示任意匹配除换行符（\\n、\\r）之外的任何单个或多个字符\n# (.*?) 表示\"非贪婪\"模式，只保存第一个匹配到的子串\nmatchObj = re.match(r\"(.*) are (.*?) .*\", line, re.M | re.I)\n\nif matchObj:\n    print(\"matchObj.group() : \", matchObj.group())\n    print(\"matchObj.group(1) : \", matchObj.group(1))\n    print(\"matchObj.group(2) : \", matchObj.group(2))\n    print(\"matchObj.groups() : \", matchObj.groups())\nelse:\n    print(\"No match!!\")\n```\n\n以上代码的运行结果为：  \n> (0, 3)  \n> None  \n> matchObj.group() :  Cats are smarter than dogs  \n> matchObj.group(1) :  Cats  \n> matchObj.group(2) :  smarter  \n> matchObj.groups() :  ('Cats', 'smarter')\n\n\n### re.search函数\n\nre.search扫描整个字符串并返回第一个成功的匹配。\n\n函数语法：\n\n```python \nre.search(pattern, string, flags=0)\n```\n\n函数参数说明：  \n+ pattern : 匹配的正则表达式\n+ string : 要匹配的字符串\n+ flags : 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：[正则表达式修饰符](#正则表达式修饰符)\n\n匹配成功re.search方法返回一个匹配的对象，否则返回None。   \n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。\n\n<!-- TODO: 正则表达式补全 -->\n\n**********************************\n\n## Python操作MySQL\n\nMySQL是最流行的关系型数据库管理系统。\nPython连接mysql数据库的方法有`mysql-connector`和`PyMySQL`两种，接下来我们来介绍这两个模块。\n\n```base\npython -m pip install mysql-connector\n```\n\n```base\npython -m pip install PyMySQL\n```\n\n使用以下代码测试mysql-connector/pymysql是否安装成功：  \n\n```python\nimport mysql.connector\n```\n\n```python\nimport pymysql\n```\n\n执行以上代码，如果没有产生错误，表明安装成功。\n\n两个模块的方法基本一致.\n\n### 创建数据库连接\n\n可以使用以下代码来连接数据库：  \n\n```python\nimport mysql.connector\n\ndb = mysql.connector.connect(\n    host = \"localhost\",   # 数据库主机地址\n    user = \"yourusername\",    # 数据库用户名\n    passwd = \"yourpassword\"    #  数据库密码 \n)\n\nprint(db)\n```\n\n如果出现以下错误：  \n```\nmysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported\n```\n\n是因为你的 MySQL 是 8.0 以上版本，密码插件验证方式发生了变化，早期版本为 mysql_native_password，8.0 版本为 caching_sha2_password，所以需要做些改变：\n\n```python\ndb = mysql.connector.connect(\n    host = \"localhost\",   # 数据库主机地址\n    user = \"yourusername\",    # 数据库用户名\n    passwd = \"yourpassword\",    #  数据库密码 \n    database = \"yourdatabase\",   # 选择数据库\n    auth_plugin=\"mysql_native_password\"     # 选择密码插件验证方式为mysql_native_password\n)\n```\n\n或者修改mysql的my.ini配置：\n\n```python\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\n```\n\n### 数据库操作\n\n在连接好数据库后，我们使用cursor.execute(sql)来执行数据库操作,并用迭代器打印结果：  \n\n```python\n# 假设以连接好数据库db = mysql.connector.connect()\n\ncursor= db.cursor()\n\ncursor.execute(\"use mydb\")\n\ncursor.execute(\"show tables\")\n\nfor x in cursor:\n    print(x)\n```\n\n执行的sql语句参见[mysql](/cn/mysql)\n\n<!-- TODO: mysql博客 -->\n\n当使用sql语句导致数据表内容有更新时，必须使用db.commit()提交\n\n> cursor.rowcount为更改的行数\n\ncursor.execute()只会执行一次数据操作，如果要执行批量插入修改等操作，需要使用executemany(sql,args_tuple_list)方法。该方法的第二参数是一个元组列表,包含要操作的数据。如：  \n\n```python\nsql = \"insert into testtable (name,value) values (%s,%s)\"\nval = [\n    ('name1','1'),\n    ('name2','2'),\n    ('name3','3'),\n    ('name4','4')\n]\n\ncursor.executemany(sql,val)\n\ndb.commit()\n\nprint(mycursor.rowcount, \"记录插入成功。\")\n```\n\n> mycursor.lastrowid表示最新数据记录的ID\n\n如果使用查询，可以使用fetchall()获取所有记录，或者fetchone/fetchmany等选择性获取。\n\nfetchall返回的是一个列表，记录存储为元组。\n\n#### 使用预处理格式（占位符格式）\n\n可以查看一下execute()方法的定义：\n\n```python\nclass MySQLCursor(CursorBase):\n    '''\n        省略很多方法和变量\n    '''\n \n    def execute(self, operation, params=None, multi=False):\n        \"\"\"Executes the given operation\n \n        Executes the given operation substituting any markers with\n        the given parameters.\n \n        For example, getting all rows where id is 5:\n          cursor.execute(\"SELECT * FROM t1 WHERE id = %s\", (5,))\n \n        The multi argument should be set to True when executing multiple\n        statements in one operation. If not set and multiple results are\n        found, an InterfaceError will be raised.\n \n        If warnings where generated, and connection.get_warnings is True, then\n        self._warnings will be a list containing these warnings.\n \n        Returns an iterator when multi is True, otherwise None.\n        \"\"\"\n```\n\n第1个参数是要执行的SQL语句，其中，参数位置先使用占位符来占位.   \n第2个参数是一个tuple（元组），元素值就是SQL占位符对应的参数，注意只有一个参数的时候，要写成(xxx,)，后面的逗号不要忘记。  \n第3个参数是一个bool值，表示第一个参数是不是多个SQL语句，如果是的话，就传入True，否则传入False。\n\n**注意，在SQL中的占位符，统一写%s, 具体的类型，是在tuple中，传入的参数元素类型决定**\n\n#### 关闭数据库连接\n\n使用db.close()关闭数据库连接\n\n#### 数据库回滚\n\n如果数据库发生错误，建议使用db.rollback()进行回滚\n\n***********************************\n\n## Python多线程\n\n多线程类似于同时执行多个不同程序，多线程运行有如下优点：\n\n+ 使用线程可以把占据长时间的程序中的任务放到后台去处理。\n+ 用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。\n+ 程序的运行速度可能加快。\n+ 在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。\n\n每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。  \n每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。  \n指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。  \n\n+ 线程可以被抢占（中断）。\n+ 在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） -- 这就是线程的退让。\n\n线程可以分为:\n\n+ 内核线程：由操作系统内核创建和撤销。\n+ 用户线程：不需要内核支持而在用户程序中实现的线程。\n\nPython3 线程中常用的两个模块为：\n\n+ \\_thread\n+ threading(推荐使用)\n\nthread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用\"thread\" 模块。为了兼容性，Python3 将 thread 重命名为 \"\\_thread\"。\n\nPython3 通过两个标准库 \\_thread 和 threading 提供对线程的支持。  \n\\_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。  \nthreading 模块除了包含 \\_thread 模块中的所有方法外，还提供的其他方法：\n\n+ threading.currentThread(): 返回当前的线程变量。\n+ threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。\n+ threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。\n\n除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:\n\n+ run(): 用以表示线程活动的方法。\n+ start():启动线程活动。\n+ join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。\n+ isAlive(): 返回线程是否活动的。\n+ getName(): 返回线程名。\n+ setName(): 设置线程名。\n\n### \\_thread模块\n\nPython中使用线程有两种方式：函数或者用类来包装线程对象。\n\n函数式：调用 \\_thread 模块中的`start_new_thread`()函数来产生新线程。语法如下:   \n\n```python\n_thread.start_new_thread ( function, args[, kwargs] )\n```\n\n参数说明:\n\n+ function - 线程函数。\n+ args - 传递给线程函数的参数,他必须是个tuple类型。\n+ kwargs - 可选参数。\n\n以下是一个实例：  \n\n```python\nimport _thread\nimport time\n\n\n# 为线程定义一个函数\ndef print_time(threadName, delay, loopTime):\n    count = 0\n    while count < loopTime:\n        time.sleep(delay)\n        count += 1\n        print(\"%s: %s\" % (threadName, time.ctime(time.time())))\n\n\n# 创建两个线程\ntry:\n    _thread.start_new_thread(print_time, (\"Thread-1\", 2, 5))\n    _thread.start_new_thread(print_time, (\"Thread-2\", 4, 6))\nexcept:\n    print(\"Error: 无法启动线程\")\n\nwhile 1:\n    pass\n```\n\n以上代码的输出结果为：  \n\n> Thread-1: Tue Mar 22 16:16:05 2022\n> Thread-2: Tue Mar 22 16:16:07 2022\n> Thread-1: Tue Mar 22 16:16:07 2022\n> Thread-1: Tue Mar 22 16:16:09 2022\n> Thread-2: Tue Mar 22 16:16:11 2022\n> Thread-1: Tue Mar 22 16:16:11 2022\n> Thread-1: Tue Mar 22 16:16:13 2022\n> Thread-2: Tue Mar 22 16:16:15 2022\n> Thread-2: Tue Mar 22 16:16:19 2022\n> Thread-2: Tue Mar 22 16:16:23 2022\n> Thread-2: Tue Mar 22 16:16:27 2022\n\n### treading模块\n\n我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：\n\n```Python\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, delay):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.delay = delay\n    def run(self):\n        print (\"开始线程：\" + self.name)\n        print_time(self.name, self.delay, 5)\n        print (\"退出线程：\" + self.name)\n\ndef print_time(threadName, delay, counter):\n    while counter:\n        if exitFlag:\n            threadName.exit()\n        time.sleep(delay)\n        print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n        counter -= 1\n\n# 创建新线程\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# 开启新线程\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint (\"退出主线程\")\n```\n\n以上代码的运行结果为： \n\n> 开始线程：Thread-1  \n> 开始线程：Thread-2\n> Thread-1: Tue Mar 22 16:31:08 2022\n> Thread-1: Tue Mar 22 16:31:09 2022\n> Thread-2: Tue Mar 22 16:31:09 2022\n> Thread-1: Tue Mar 22 16:31:10 2022\n> Thread-1: Tue Mar 22 16:31:11 2022\n> Thread-2: Tue Mar 22 16:31:11 2022\n> Thread-1: Tue Mar 22 16:31:12 2022\n> 退出线程：Thread-1\n> Thread-2: Tue Mar 22 16:31:13 2022\n> Thread-2: Tue Mar 22 16:31:16 2022\n> Thread-2: Tue Mar 22 16:31:18 2022\n> 退出线程：Thread-2\n> 退出主线程\n\n### 线程同步\n\n如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。  \n使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：\n\n多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。  \n考虑这样一种情况：一个列表里所有元素都是0，线程\"set\"从后向前把所有元素改成1，而线程\"print\"负责从前往后读取列表并打印。  \n那么，可能线程\"set\"开始改的时候，线程\"print\"便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。  \n锁有两种状态——锁定和未锁定。每当一个线程比如\"set\"要访问共享数据时，必须先获得锁定；如果已经有别的线程比如\"print\"获得锁定了，那么就让线程\"set\"暂停，也就是同步阻塞；等到线程\"print\"访问完毕，释放锁以后，再让线程\"set\"继续。  \n经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。\n\n```Python\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, delay):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.delay = delay\n    def run(self):\n        print (\"开启线程： \" + self.name)\n        # 获取锁，用于线程同步\n        threadLock.acquire()\n        print_time(self.name, self.delay, 3)\n        # 释放锁，开启下一个线程\n        threadLock.release()\n\ndef print_time(threadName, delay, counter):\n    while counter:\n        time.sleep(delay)\n        print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n        counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# 创建新线程\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# 开启新线程\nthread1.start()\nthread2.start()\n\n# 添加线程到线程列表\nthreads.append(thread1)\nthreads.append(thread2)\n\n# 等待所有线程完成\nfor t in threads:\n    t.join()\nprint (\"退出主线程\")\n```\n\n### 线程优先级队列\n\nPython 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。  \n这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。  \nQueue 模块中的常用方法:\n\n+ Queue.qsize() 返回队列的大小\n+ Queue.empty() 如果队列为空，返回True,反之False\n+ Queue.full() 如果队列满了，返回True,反之False\n+ Queue.full 与 maxsize 大小对应\n+ Queue.get([block[, timeout]])获取队列，timeout等待时间\n+ Queue.get_nowait() 相当Queue.get(False)\n+ Queue.put(item) 写入队列，timeout等待时间\n+ Queue.put_nowait(item) 相当Queue.put(item, False)\n+ Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号\n+ Queue.join() 实际上意味着等到队列为空，再执行别的操作\n\n\n```Python\n\nimport queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n    def __init__(self, threadID, name, q):\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.q = q\n    def run(self):\n        print (\"开启线程：\" + self.name)\n        process_data(self.name, self.q)\n        print (\"退出线程：\" + self.name)\n\ndef process_data(threadName, q):\n    while not exitFlag:\n        queueLock.acquire()\n        if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print (\"%s processing %s\" % (threadName, data))\n        else:\n            queueLock.release()\n        time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# 创建新线程\nfor tName in threadList:\n    thread = myThread(threadID, tName, workQueue)\n    thread.start()\n    threads.append(thread)\n    threadID += 1\n\n# 填充队列\nqueueLock.acquire()\nfor word in nameList:\n    workQueue.put(word)\nqueueLock.release()\n\n# 等待队列清空\nwhile not workQueue.empty():\n    pass\n\n# 通知线程是时候退出\nexitFlag = 1\n\n# 等待所有线程完成\nfor t in threads:\n    t.join()\nprint (\"退出主线程\")\n```\n\n*************************************\n\n## Python MongoDB\n\nMongoDB 是目前最流行的 NoSQL 数据库之一，使用的数据类型 BSON（类似 JSON）。  \n关于MongoDB 数据库以查看这篇[MongoDB博客](/cn/mongodb)。\n\nmongoDB下载：<https://www.mongodb.com/try/download/community>\n\n<!-- TODO： mongodb blog -->\n\n*************************************\n\n<!-- TODO: argparse -->\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<!-- TODO: dir() 和 help() -->\n\n******************************\n\n## Python内置函数\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n\n### abs()\n\nabs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。  \n\n语法：  \n> \n> ```python\n> abs(x)\n> ```\n> \n> **参数说明：**  \n> + `x` : 数值表达式，可以是int,float,bool,complex\n> \n> **返回值：**  \n> 返回对应参数的类型，注意如果是复数返回的是其`模`。\n\n用例：  \n```python\nprint(abs(-1))\nprint(abs(-1.0))\nprint(abs(3+4j))\nprint(abs(False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> 1.0\n> 5.0\n> 0\n\n*************************************************\n\n### format()\n\nformat 基本语法是通过 {} 和 : 来代替以前的 % 。 \n\n语法：  \n> \n> ```python\n> S.format(*args: object, **kwargs: object) -> str\n> ```\n> \n> **参数说明：**  \n> + S :  需要格式化的字符串\n> + *args/**kwargs :  传入的参数值表\n> \n> **返回值：**  \n> 返回格式化后的字符串\n\n用例：  \n```python\n# 不设置指定位置，按默认顺序\nprint(\"{} {}\".format(\"hello\", \"world\"))    \n\n# 设置指定位置\nprint(\"{1} {0} {1}\".format(\"hello\", \"world\"))  \n\n# 直接设置参数\nprint(\"网站名：{name}, 地址 {url}\".format(name=\"百度\", url=\"https://www.baidu.com\"))   \n\n# 通过字典设置参数\nsite = {\"name\": \"谷歌\", \"url\": \"https://www.google.com\"}\nprint(\"网站名：{name}, 地址 {url}\".format(**site))\n \n# 通过列表索引设置参数\nmy_list = ['哔哩哔哩', 'https://www.bilibili.com']\nprint(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list))  # \"0\" 是必须的\n\n# 还可以传入对象\nclass TestValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = TestValue(13)\nprint('value 为: {0.value}'.format(my_value))  # \"0\" 是可选的\nprint('value 为: {.value}'.format(my_value))  # \"0\" 是可选的，等同上行\n\n# 使用大括号转义大括号\nprint(\"{} 元素对应的位置是 {{0}}\".format(\"a\"))\n```\n\n以上代码运行后的输出结果为：  \n> hello  \n> world hello world   \n> 网站名：百度, 地址 https://www.baidu.com  \n> 网站名：谷歌, 地址 https://www.google.com  \n> 网站名：哔哩哔哩, 地址 https://www.bilibili.com  \n> value 为: 13  \n> value 为: 13  \n> a 元素对应的位置是 {0}  \n\n\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n\n***还可以使用format函数进行数字格式化***\n\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]f}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2f}\".format(3.1415926))\nprint(\"{:.4f}\".format(math.e))\nprint(\"{:+.2f}\".format(3.1415926))\nprint(\"{:+.2f}\".format(-3.1415926))\n```\n</td>\n<td>\n\n```python\n3.14\n2.7183\n+3.14\n-3.14\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[c][s][n]d}</code>\n</td>\n<td>\n\n```python\nprint(\"{:0>5d}\".format(101))\nprint(\"{:s<4d}\".format(1))\nprint(\"{:>4d}\".format(1))\nprint(\"{:.^5d}\".format(1))\n```\n</td>\n<td>\n\n```python\n00101\n1sss\n   1\n..1..\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:,}</code>\n</td>\n<td>\n\n```python\nprint(\"{:,}\".format(13000000))\nprint(\"{:,}\".format(1000.7651))\n```\n</td>\n<td>\n\n```python\n13,000,000\n1,000\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]%}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2%}\".format(1.2))\nprint(\"{:.1%}\".format(0.25))\nprint(\"{:+.2%}\".format(-0.25))\nprint(\"{:+.2%}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n120.00%\n25.0%\n-25.00%\n+25.00%\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[+].[n]e}</code>\n</td>\n<td>\n\n```python\nprint(\"{:.2e}\".format(1.2))\nprint(\"{:.1e}\".format(0.25))\nprint(\"{:+.2e}\".format(-0.25))\nprint(\"{:+.2e}\".format(0.25))\n```\n</td>\n<td>\n\n```python\n1.20e+00\n2.5e-01\n-2.50e-01\n+2.50e-01\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>{:[]}</code>\n</td>\n<td>\n\n```python\nprint(\"{:b}\".format(11))\nprint(\"{:d}\".format(11))\nprint(\"{:o}\".format(11))\nprint(\"{:x}\".format(11))\nprint(\"{:#x}\".format(11))\nprint(\"{:#X}\".format(11))\n```\n</td>\n<td>\n\n```python\n1011\n11\n13\nb\n0xb\n0XB\n```\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n\n*************************************************\n\n\n### len()\n\nPython len() 方法返回对象（字符、列表、元组等）长度或项目个数。\n\n语法：  \n> \n> ```python\n> len( s )\n> ```\n> \n> **参数说明：**  \n> + s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）\n> \n> **返回值：**  \n> 返回对象长度。\n\n用例：  \n```python\nlen((1,2,6,8,7))\nlen([])\nlen(\"abfasdfja\")\n```\n\n以上代码运行后的输出结果为：  \n> 5  \n> 0  \n> 9\n\n*************************************************\n\n\n### max()\n\nmax() 方法返回给定参数的最大值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> max( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最大值。\n\n用例：  \n```python\nprint(max(1, 5, 3))\nprint(max([-1, 6, 2]))\nprint(max(\"asdfghj\"))\nprint(max((1, 2, 6)))\nprint(max([1, 2, 6], [1, 3, 4]))\nprint(max([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(max(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(max(True, 1))\nprint(max(1, True))\nprint(max(False,0))\nprint(max(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> 6\n> s\n> 6\n> [1, 3, 4]\n> [2, 1, 9, 4]\n> babc\n> \n> True\n> 1\n> False\n> 0\n\n`max(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最大值时，若最大值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n### min()\n\nmin() 方法返回给定参数的最小值，参数可以为序列。\n\n语法：  \n> \n> ```python\n> min( x, y, z, .... )\n> ```\n> \n> **参数说明：**  \n> + x,y,z: 数值表达式，可以为序列  \n> \n> **返回值：**  \n> 返回给定参数的最小值。\n\n用例：  \n```python\nprint(min(1, 5, 3))\nprint(min([-1, 6, 2]))\nprint(min(\"asdfghj\"))\nprint(min((1, 2, 6)))\nprint(min([1, 2, 6], [1, 3, 4]))\nprint(min([1, 2, 6, 5, 3], [2, 1, 9, 4]))\nprint(min(\"abcdefg\",\"abcd\",\"babc\"))\n\nprint(min(True, 1))\nprint(min(1, True))\nprint(min(False,0))\nprint(min(0, False))\n```\n\n以上代码运行后的输出结果为：  \n> 1\n> -1\n> a\n> 1\n> [1, 2, 6]\n> [1, 2, 6, 5, 3]\n> abcd\n> True\n> 1\n> False\n> 0\n\n`min(x, y[, z...]):Number|Sequence` 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。  \n\n求最小值时，若最小值为`True和1`或者`False和0`，将取决于`参数顺序`，更先的成为返回值。  \n  \n> 关于大小的比较，请查看[数值比较](#数值比较)\n\n*************************************************\n\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> pow(x,y[,z])\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> + z :  数值表达式(**可选参数，默认值为 `1`**）\n> \n> **返回值：**  \n> 函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z\n\n用例：  \n```python\nprint(pow(2, 3))\nprint(pow(2.5, 3))\nprint(pow(2, 3, 2))\n```\n\n以上代码运行后的输出结果为：  \n> 8\n> 15.625\n> 0\n\n\n> 还有一个math模块的pow函数:[pow()](#pow-2)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### round()\n\nround()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。  \n精度要求高的，不建议使用该函数。    \n\n语法：  \n> \n> ```python\n> round(x[,n])\n> ```\n> \n> **参数说明：**  \n> + x : 数字表达式。\n> + n : 表示保留的小数点位数，(**可选参数，默认值为 `0`**）。\n> \n> **返回值：**  \n> 返回浮点数x保留位数后的最近端点数\n\n用例：  \n```python\nprint(round(10.23))\nprint(round(10.53))\nprint(round(1.531,2))\nprint(round(1.564,1))\nprint(round(1.325,2))     # 由于精度问题，实际值不足1.325，所以round(x,2)==1.32\nprint(round(-0.5))         # 由于精度问题更偏向0，所以round(-0.5)==0\nprint(round(-1.236,2))\nprint(round(-2.165,2))\n```\n\n以上代码运行后的输出结果为：  \n> 10\n> 11\n> 1.53\n> 1.6\n> 1.32\n> 0\n> -1.24\n> -2.17\n\n注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见[round()关于四舍五入不成功的问题](#round-关于四舍五入不成功的问题)\n\n*************************************************\n\n### tuple()\n\ntuple 函数将可迭代系列（如列表）转换为元组。\n\n语法：  \n> \n> ```python\n> tuple(iterable)\n> ```\n> \n> **参数说明：**  \n> + iterable :  要转换为元组的可迭代序列。\n> \n> **返回值：**  \n> 返回元组。\n\n用例：  \n```python\ntup = tuple([1,2,6])\nprint(tup)\n```\n\n以上代码运行后的输出结果为：  \n> (1,2,6)\n\n*************************************************\n\n## Python os模块方法\n\n********************************\n\n## Python math模块方法\n<!-- TODO:三角函数 -->\n\n> 导入模块\n> ```python\n> import math\n> ```\n\n### acos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### asin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### atan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n### ceil()\n\nceil()函数返回`上入整数`，即大于或等于 x 的的最小整数。\n\n语法：  \n> \n> ```python\n> math.ceil(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回上入整数  \n\n用例：  \n```python\nprint(math.ceil(4.5))\nprint(math.ceil(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 5\n> -4\n\n*************************************************\n\n### cos()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### degress()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### exp()\n\nexp()方法返回x的指数,e^x。\n\n语法：  \n> \n> ```python\n> math.exp(x)   ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回x的指数\n\n用例：  \n```python\nprint(math.exp(1))\nprint(math.exp(math.pi))\n```\n\n以上代码运行后的输出结果为：  \n> 2.718281828459045\n> 23.140692632779267\n\n*************************************************\n\n### fabs()\n\n返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中\n\n语法：  \n> \n> ```python \n> math.fabs(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数学表达式\n> \n> **返回值：**  \n> 返回数字的绝对值，浮点数\n\n用例：  \n```python\nprint(math.fabs(-1.2))\nprint(math.fabs(-1))\n```\n\n以上代码运行后的输出结果为：  \n> 1.2\n> 1.0\n\n*************************************************\n\n### floor()\n\nfloor()函数返回`下舍整数`，即小于或等于 x 的的最大整数。\n\n语法：  \n> \n> ```python\n> math.floor(x)\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回下舍整数  \n\n用例：  \n```python\nprint(math.floor(4.5))\nprint(math.floor(-4.5))\n```\n\n以上代码运行后的输出结果为：  \n> 4\n> -5\n\n*************************************************\n\n\n\n### log()\n\nlog() 方法返回x的对数，默认为自然对数，即以e为底，x > 0。\n\n语法：  \n> \n> ```python\n> math.log(x[,y=math.e]) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> + y :  底数(**可选参数，默认值为`e`**)\n> \n> **返回值：**  \n> 返回x的对数，浮点数\n\n用例：  \n```python\nprint(math.log(1))\nprint(math.log(math.e))\nprint(math.log(100, 10))\nprint(math.log(8, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 0.0\n> 1.0\n> 2.0\n> 1.892789260714372\n  \n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### log10()\n\nlog10() 方法返回以10为基数的x对数，x > 0。\n\n语法：  \n> \n> ```python\n> math.log10(x) -> float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式，`x > 0`\n> \n> **返回值：**  \n> 返回以10为基数的x对数\n\n用例：  \n```python\nprint(math.log10(1000))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n> 如果参数为负数，会返回`ValueError`: math domain error\n\n*************************************************\n\n### modf()\n\nmodf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。\n\n语法：  \n> \n> ```python\n> math.modf(x) -> tuple\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回元组包含x的整数部分和小数部分\n\n用例：  \n```python\nprint(math.modf(100.1))\nprint(math.modf(-1.52))\nprint(math.modf(1))\n```\n\n以上代码运行后的输出结果为：  \n> (0.09999999999999432, 100.0)\n> (-0.52, -1.0)\n> (0.0, 1.0)\n\n*************************************************\n\n### pow()\n\npow() 方法返回 x^y（x的y次方） 的值。\n\n语法：  \n> \n> ```python\n> math.pow(x,y)  ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> + y :  数值表达式\n> \n> **返回值：**  \n> 返回x的y次方值\n\n用例：  \n```python\nprint(math.pow(2, 3))\nprint(math.pow(2.5, 3))\n```\n\n以上代码运行后的输出结果为：  \n> 8.0\n> 15.625\n\n\n> 还有一个内置的pow函数:[pow()](#pow)   \n> pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。\n\n*************************************************\n\n### radians()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sin()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n### sqrt()\n\nsqrt() 方法返回数字x的平方根。\n\n语法：  \n> \n> ```python\n> math.sqrt(x)    ->  float\n> ```\n> \n> **参数说明：**  \n> + x :  数值表达式\n> \n> **返回值：**  \n> 返回数字x的平方根。\n\n用例：  \n```python\nprint(math.sqrt(9))\n```\n\n以上代码运行后的输出结果为：  \n> 3.0\n\n*************************************************\n\n### tan()\n\nxxxxxxxxxx\n\n语法：  \n> \n> ```python\n> \n> ```\n> \n> **参数说明：**  \n> + x :  \n> \n> **返回值：**  \n> \n\n用例：  \n```python\n\n```\n\n以上代码运行后的输出结果为：  \n> \n\n*************************************************\n\n\n\n## Python random模块方法\n> 导入模块\n> ```python\n> import random\n> ```\n\n### choice()\n\nchoice() 方法从序列的元素中随机挑选一个元素返回。\n\n语法：  \n> \n> ```python\n> random.choice(seq)\n> ```\n> \n> **参数说明：**  \n> + seq :  可序列对象，可以是一个列表、元组、字符串\n> \n> **返回值：**  \n> 返回一个随机项\n\n用例：  \n```python\nprint(random.choice(\"asdfghjk\"))\nprint(random.choice((1,3,5,9,3)))\nprint(random.choice([1,36,5,4,6,9]))\nprint(random.choice(range(10)))  # 返回从0到9中随机挑选的一个整数。\n```\n\n*****************************************\n\n### random()\n\nrandom() 方法返回随机生成的一个实数，它在`[0,1)`范围内。\n\n语法：  \n> \n> ```python\n> random.random()\n> ```\n> \n> **参数说明：**  \n> 无  \n> \n> **返回值：**  \n> 返回随机生成的一个实数，它在[0,1)范围内。\n\n用例：  \n```python\nrandom.random()\n```\n\n*****************************************\n\n### randrange()\n\nrandrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。  \n\n语法：  \n> \n> ```python\n> random.randrange ([start,] stop [,step])\n> ```\n> \n> **参数说明：**  \n> + start :  指定范围内的开始值，`包含`在范围内。(**可选参数，默认值为`0`**)\n> + stop :  指定范围内的结束值，`不包含`在范围内。\n> + step :  指定递增基数。 (**可选参数，默认值为`1`**)\n> \n> **返回值：**  \n> 从给定的范围返回随机项。\n\n用例：  \n```python\nrandom.randrange(100)   # 从0-100中随机选取一个数\nrandom.randrange(0,100, 2)   # 从0-100中随机选取一个偶数\nrandom.randrange(0,100, 4)  # 从0-100中随机选取一个能被4整除的整数\nrandom.randrange(1,100, 3)  # 从0-100中随机选取一个能被3整除后余1的数\n```\n\n\n*****************************************\n\n### seed()\n\n改变随机数生成器的种子seed。**可以在调用其他随机模块函数之前调用此函数**。  \n\n语法：  \n> \n> ```python\n> random.seed([x])\n> ```\n> \n> **参数说明：**  \n> + x :  (**可选参数**)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\n> \n> **返回值：**  \n> 无\n\n用例：  \n```python\nrandom.seed()\nprint (\"使用默认种子生成随机数：\", random.random())\nprint (\"使用默认种子生成随机数：\", random.random())\n\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\nrandom.seed(10)\nprint (\"使用整数 10 种子生成随机数：\", random.random())\n\nrandom.seed(\"hello\",2)\nprint (\"使用字符串种子生成随机数：\", random.random())\n```\n\n以上代码运行后的输出结果为：  \n> 使用默认种子生成随机数： 0.9506421767605476\n> 使用默认种子生成随机数： 0.20706442655860602\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用整数 10 种子生成随机数： 0.5714025946899135\n> 使用字符串种子生成随机数： 0.3537754404730722\n\n*****************************************\n\n### shuffle()\n\n将序列的所有元素随机排序\n\n语法：  \n> \n> ```python\n> random.shuffle(lst)\n> ```\n> \n> **参数说明：**  \n> + lst :  列表 \n> \n> **返回值：**  \n> 返回None\n\n用例：  \n```python\nlist1 = [1,2,3,4,6]\nrandom.shuffle(list1)\nprint(list1)\n```\n\n以上代码运行后的输出结果为：  \n> [3, 2, 4, 1, 6]\n\n*****************************************\n\n\n### uniform()\n\nuniform() 方法将随机生成下一个实数，它在 `[x,y]` 范围内。\n\n语法：  \n> \n> ```python\n> random.uniform(x,y)\n> ```\n> \n> **参数说明：**  \n> + x :  随机数的最小值，`包含`该值。\n> + y :  随机数的最大值，`包含`该值。\n> \n> **返回值：**  \n> 返回一个浮点数 N，取值范围为如果 <kbd>x<y</kbd> 则`x <= N <= y`，如果 <kbd>y<x</kbd> 则`y <= N <= x`。\n\n用例：  \n```python\nrandom.uniform(1,2)\n```\n\n\n*****************************************\n\n## Python shutil模块方法\n\n**************************************\n\n## Python re模块方法\n\n**************************************\n\n<!-- TODO：新建文章记录错误 -->\n\n## Python常见问题\n### float精度问题\nPython的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：  \n\n```python\n>>> 10000000000000001.0 \n1e+16\n>>> 10000000000000001.0 - 1\n1e+16\n>>> 10000000000000001.0 - 2 \n9999999999999998.0\n>>> 10000000000000002.0 - 2 \n1e+16\n>>> 10000000000000003.0 - 2 \n1.0000000000000002e+16\n\n>>> 9.9999999999999999 \n10.0\n>>> 9.999999999999999 \n9.999999999999998\n>>> 9.99999999999999\n9.99999999999999\n```\n\n解决精度问题的方法是使用`decimal`包\n\n*****************************************\n\n### round()关于四舍五入不成功的问题\n\n本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。 \n <!-- TODO:round精度问题补全  -->\n更多请见：<https://www.runoob.com/w3cnote/python-round-func-note.html>\n\n*************************************\n\n### str()和repr()的区别","slug":"Python-Note","published":1,"updated":"2021-11-04T07:25:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg11000ywwvo5lug7jt8","content":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>\n本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\">python安装</h2>\n<ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>\nwindows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>\n安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。</li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode\n<ul>\n<li>Pycharm</li>\n<li>Rider</li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python基本语法\">python基本语法</h2>\n<h3 id=\"编码\">编码</h3>\n<!-- TODO: 编码 -->\n<h3 id=\"标识符\">标识符</h3>\n<ul>\n<li>第一个字符必须是字母表中字母或下划线 _ 。</li>\n<li>标识符的其他的部分由字母、数字和下划线组成。</li>\n<li>标识符对大小写敏感。</li>\n<li>非关键字</li>\n</ul>\n<blockquote>\n<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>\n</blockquote>\n<hr>\n<h3 id=\"语句\">语句</h3>\n<p>Python中通常一行表示一个语句，末尾不需加上分号&quot;;&quot;.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>多行语句</code></strong></em></p>\n<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠<code>\\</code>来实现多行语句，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure>\n<p>但在 [], {}, 或 () 中的多行语句，<code>不需要使用反斜杠 \\</code> ，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = [<span class=\"string\">&#x27;item_one&#x27;</span>, <span class=\"string\">&#x27;item_two&#x27;</span>, <span class=\"string\">&#x27;item_three&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;item_four&#x27;</span>, <span class=\"string\">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>空行</code></strong></em><br>\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>\n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\n<blockquote>\n<p>空行也是程序代码的一部分。</p>\n</blockquote>\n<p><em><strong><code>同行多条语句</code></strong></em></p>\n<p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = <span class=\"number\">5</span>; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"built_in\">print</span>(<span class=\"string\">&quot;b&quot;</span>); <span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>pass语句</code></strong></em><br>\nPython pass是空语句，是为了保持程序结构的完整性。<br>\npass 不做任何事情，一般用做占位语句，如下实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"变量赋值\">变量赋值</h3>\n<p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 同时分别赋值</span></span><br></pre></td></tr></table></figure>\n<p>在Python中，类型属于对象，变量是没有类型的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在以上代码中，'str’是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向’str’这个String类型对象。</p>\n<hr>\n<h3 id=\"关键字\">关键字</h3>\n<p>关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为（版本Python 3.9.8）：</p>\n<blockquote>\n<p>[‘False’, ‘None’, ‘True’, ‘__peg_parser__’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p>\n</blockquote>\n<hr>\n<h3 id=\"注释\">注释</h3>\n<p><em><strong><code>单行注释</code></strong></em><br>\nPython的单行注释使用<code>#</code>号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\">a = <span class=\"number\">1</span>  <span class=\"comment\"># 注释</span></span><br></pre></td></tr></table></figure>\n<p><em><strong><code>多行注释</code></strong></em><br>\nPython的多行注释使用<code>'''</code> 或 <code>&quot;&quot;&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">注释</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">多行注释</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"代码块\">代码块</h3>\n<p>和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。<br>\n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>如果同一代码块的缩进空格数不一致，会导致运行错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>File “&lt;tokenize&gt;”, line 5<br>\nprint(“error”)<br>\n^<br>\nIndentationError: unindent does not match any outer indentation level</p>\n</blockquote>\n<hr>\n<h3 id=\"输入输出\">输入输出</h3>\n<p>Python的内置函数<a href=\"#input\">input()</a>和<a href=\"#print\">print()</a>分别表示输入和输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">input</span>(<span class=\"string\">&quot;\\n\\n按下 enter 键后退出。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输出&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;print默认是换行的，如果不需要换行需要在后面参数加上end=&#x27;&#x27;&quot;</span>,end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"导入import\">导入import</h3>\n<p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。<br>\n将整个模块(somemodule)导入，格式为： <code>import somemodule</code><br>\n从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code><br>\n从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>\n将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p>\n<hr>\n<h3 id=\"解释器\">解释器</h3>\n<!-- TODO: 解释器 -->\n<hr>\n<h2 id=\"Python基本数据类型\">Python基本数据类型</h2>\n<p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>\n在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>\n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。</p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number%E6%95%B0%E5%AD%97\">Number</a></li>\n<li><a href=\"#Tuple%E5%85%83%E7%BB%84\">Tuple</a></li>\n<li><a href=\"#String%E5%AD%97%E7%AC%A6%E4%B8%B2\">String</a></li>\n<li><a href=\"#List%E5%88%97%E8%A1%A8\">List</a></li>\n<li><a href=\"#Set%E9%9B%86%E5%90%88\">Set</a></li>\n<li><a href=\"#Dictionary%E5%AD%97%E5%85%B8\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>immutable的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br>\n<code>可变</code>mutable的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><code>type()</code> 和 <code>isinstance()</code></h3>\n<p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>\ntype()函数有两个重载方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。</p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>\n使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象</li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组</li>\n</ul>\n<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>\n要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\">isinstance() 与 type() 区别：</h4>\n<p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>\nisinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>\n如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True<br>\nTrue<br>\n&lt;class ‘__main__.A’&gt;<br>\n&lt;class ‘__main__.B’&gt;<br>\nTrue<br>\nFalse</p>\n</blockquote>\n<h3 id=\"Number数字\">Number数字</h3>\n<p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。</p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\">具体类型</h4>\n<h5 id=\"int\">int</h5>\n<p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>\n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\">float</h5>\n<p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>\n以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure>\n<p>另一个临界点是<code>1e+16</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure>\n<p>float的正常最多位为16位小数，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98\">python float 精度问题</a></p>\n</blockquote>\n<h5 id=\"bool\">bool</h5>\n<p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>\nPython3中，bool是int的<code>子类</code>；</p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<em><strong>True</strong></em>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True<br>\nTrue<br>\nTrue<br>\n2<br>\n1<br>\nFalse<br>\nFalse</p>\n</blockquote>\n<blockquote>\n<p>注意：从Python3.8开始，使用<em><strong>is</strong></em>和<em><strong>is not</strong></em>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\">complex</h5>\n<p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\">数值运算</h4>\n<p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>\n表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>\n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\">数字类型转换</h4>\n<p>Python各数字类型间支持互相转换。<br>\nPython的数字类型转化和创建都可以直接将<em><strong>数据类型作为函数名</strong></em>即可。</p>\n<p>注意强制类型转换可能会导致<em><strong>数据损失</strong></em>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\">常用函数</h4>\n<h5 id=\"Python的内置函数\"><a href=\"#Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\">Python的内置函数</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Python的math模块\"><a href=\"#Python-math%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python的math模块</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Python的random模块\"><a href=\"#Python-random%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python的random模块</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"相关常量\">相关常量</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"Tuple元组\">Tuple元组</h3>\n<p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。</p>\n<h4 id=\"元组的创建\">元组的创建</h4>\n<p>元组的创建方式有两种：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<em><strong>空元组</strong></em>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"元组的索引和截取\">元组的索引和截取</h4>\n<p>因为元组也是一个序列，所以我们可以使用<a href=\"#%E5%88%87%E7%89%87%E8%BF%90%E7%AE%97%E7%AC%A6\"><code>切片运算符</code></a>来进行索引和截取：</p>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>6<br>\n3</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>\n(8, 9, 7, 2, 23, 1, 1, 13)<br>\n(8, 9)<br>\n(8, 9, 7, 2, 23, 1, 1)<br>\n(8, 7, 23, 1)<br>\n()<br>\n(13, 1, 1, 23, 2, 7, 9)</p>\n</blockquote>\n<h4 id=\"元组运算\">元组运算</h4>\n<p>元组运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%85%83%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E6%88%AA%E5%8F%96\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-2\">常用函数</h4>\n<br>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"String字符串\">String字符串</h3>\n<p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\">字符串创建</h4>\n<p>我们使用引号<code>( ' 或 &quot; )</code>来创建字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>&lt;class ‘str’&gt;</p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 '''  )</code>来创建多行字符串<br>\n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure>\n<p>以上代码的结果为：</p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>\n多行字符串可以使用制表符<br>\nTAB ( \t )。<br>\n也可以使用换行符 [<br>\n]。</p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>\n一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串访问\">字符串访问</h4>\n<p>字符串的访问和元组类似，使用切片运算和索引定位。</p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>‘j’<br>\n‘5’</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>hello world<br>\nello world<br>\nel<br>\nhello worl<br>\nello worl<br>\nel ol</p>\n<p>dlrow oll<br>\ndlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\">字符串运算</h4>\n<p>字符串运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AE%BF%E9%97%AE\">字符串访问</a></p>\n<h4 id=\"字符串格式化\">字符串格式化</h4>\n<h5 id=\"转义字符\">转义字符</h5>\n<p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>\n更多请见下文<a href=\"#Python%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\">Python转义字符</a></p>\n<h5 id=\"r-string\">r-string</h5>\n<p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>\n使用方法是在字符串引号前加上 <code>r/R</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>row string<br>\n\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"级联\">级联</h5>\n<p>Python按字面意义级联字符串，如 &quot;this &quot; &quot;is &quot; “string” 会被自动转换为 this is string。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;this &quot;</span> <span class=\"string\">&quot;is &quot;</span> <span class=\"string\">&quot;string&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>this is string</p>\n</blockquote>\n<h5 id=\"格式\">%格式</h5>\n<p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><em><strong>python字符串格式化符号</strong></em></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>格式化操作符辅助指令</strong></em><br>\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">用做左对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><sp></td>\n<td style=\"text-align:left\">在正数前面显示空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:left\">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">‘%%‘输出一个单一的’%’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(var)</td>\n<td style=\"text-align:left\">映射变量(字典参数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m.n.</td>\n<td style=\"text-align:left\">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"format函数\">format函数</h5>\n<p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\">f-string</h5>\n<p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>\nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:</p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-3\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding='UTF-8',errors='strict')</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>检查\\检测 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>字符串操作 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,‘0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\">Python转义字符</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\’</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\&quot;</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"List列表\">List列表</h3>\n<p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>\n列表是可变的数据类型，即其内的数据可以被改变。</p>\n<h4 id=\"创建列表\">创建列表</h4>\n<p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python%E6%8E%A8%E5%AF%BC%E5%BC%8F\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] &lt;class ‘list’&gt;<br>\n[] &lt;class ‘list’&gt;<br>\n[1, 5, 9, ‘7’] &lt;class ‘list’&gt;<br>\n[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的嵌套\">列表的嵌套</h4>\n<p>列表是可以嵌套的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>若要访问该列表的元素只需逐层访问即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(matrix[<span class=\"number\">2</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> row:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>4<br>\n1 2 5<br>\n2 7 8<br>\n4 5 6 7 9<br>\n2 9 7 11</p>\n</blockquote>\n<h4 id=\"列表的索引和截取\">列表的索引和截取</h4>\n<p>因为列表也是一个序列，所以我们可以使用<a href=\"#%E5%88%87%E7%89%87%E8%BF%90%E7%AE%97%E7%AC%A6\"><code>切片运算符</code></a>来进行索引和截取：</p>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>6<br>\n3</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>\n[8, 9, 7, 2, 23, 1, 1, 13]<br>\n[8, 9]<br>\n[8, 9, 7, 2, 23, 1, 1]<br>\n[8, 7, 23, 1]<br>\n[]<br>\n[13, 1, 1, 23, 2, 7, 9]<br>\n[13, 1, 1, 23, 2, 7, 9, 8, 6]</p>\n</blockquote>\n<h4 id=\"修改列表元素\">修改列表元素</h4>\n<p>因为列表属于可变的数据类型，所以其元素可以修改：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><em><strong>使用del</strong></em>删除列表元素：</p>\n<p>使用del可以根据索引删除一个元素或者一个切割</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">1</span>:-<span class=\"number\">3</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[4, 5, 9, 8, 3, 1, 2, 0, 11]<br>\n[4, 9, 3, 2, 0, 11]<br>\n[]</p>\n</blockquote>\n<h4 id=\"列表运算\">列表运算</h4>\n<p>列表运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%88%97%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E6%88%AA%E5%8F%96\">列表的索引和截取</a></p>\n<h4 id=\"列表遍历\">列表遍历</h4>\n<p>列表遍历将使用<a href=\"#Python%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\">循环语句</a>.</p>\n<!--TODO: enumerate()  -->\n<blockquote>\n<p>使用<a href=\"#enumerate\">enumerate()</a>函数可以得到索引和对应值</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(lst):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,value)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>1 2 7 3 6 4<br>\n1 2<br>\n2 7<br>\n3 3<br>\n4 6<br>\n5 4</p>\n</blockquote>\n<!--TODO: zip()  -->\n<p>如果要同时遍历多个列表，可以使用<a href=\"#zip\">zip()</a>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;quest&#x27;</span>, <span class=\"string\">&#x27;favorite color&#x27;</span>]</span><br><span class=\"line\">answers = [<span class=\"string\">&#x27;lancelot&#x27;</span>, <span class=\"string\">&#x27;the holy grail&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q, a <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(questions, answers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(q, a))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>What is your name?  It is lancelot.<br>\nWhat is your quest?  It is the holy grail.<br>\nWhat is your favorite color?  It is blue.</p>\n</blockquote>\n<h4 id=\"常用函数-4\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>列表操作 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\">Set集合</h3>\n<p>集合（set）是一个无序的不重复元素序列。<br>\n在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\">创建集合</h4>\n<p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合</p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{1, 5, 6}<br>\n{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python%E6%8E%A8%E5%AF%BC%E5%BC%8F\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\">操作集合</h4>\n<h5 id=\"添加元素\">添加元素</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>\n{1, 2, 5, 8, 9}<br>\n{1, 2, 5, 8, 9, 11, 13}<br>\n{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}</p>\n</blockquote>\n<h5 id=\"移除元素\">移除元素</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>\n{2, 6, 7, 8, 9}<br>\n2<br>\n{6, 7, 8, 9}<br>\nTraceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n----&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\">集合运算</h4>\n<p><em><strong><code>数学集合运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>\n{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>\na-b = {‘r’, ‘d’, ‘b’}<br>\na-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>\na-b = {‘c’, ‘a’}<br>\na-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-5\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\">Dictionary字典</h3>\n<blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\">创建字典</h4>\n<p>创建字典的方法有三种：</p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>\n{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>\n{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>\n{2: 4, 4: 16, 6: 36}<br>\n{}<br>\n{}</p>\n</blockquote>\n<h4 id=\"字典操作\">字典操作</h4>\n<p><em><strong><code>访问值</code></strong></em><br>\n要访问字典的值只需要将键值填入字典后的方括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n1 dict1 = {‘a’:1,‘b’:2}<br>\n----&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><em><strong><code>修改/创建值</code></strong></em><br>\n要修改字典的值，直接将对应的键值修改即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><em><strong><code>删除值</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>\n{}<br>\n----------------------------------------------------<br>\nNameError                                 Traceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n11 # 删除字典<br>\n12 del dict1<br>\n—&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em><br>\n判断key是否在字典中已存在.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-6\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h2 id=\"Python运算符\">Python运算符</h2>\n<p>Python的运算符可以分为以下几类：</p>\n<ul>\n<li><a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算术运算符</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83(%E5%85%B3%E7%B3%BB)%E8%BF%90%E7%AE%97%E7%AC%A6\">比较(关系)运算符</a></li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a></li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a></li>\n<li><a href=\"#%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6\">成员运算符</a></li>\n<li><a href=\"#%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6\">身份运算符</a></li>\n</ul>\n<blockquote>\n<p><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\">运算符优先级</a></p>\n</blockquote>\n<h3 id=\"算术运算符\">算术运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">取模</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:left\">幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:left\">整除</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"比较-关系-运算符\">比较(关系)运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">小于等于</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"赋值运算符\">赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\">将运算符右侧的值赋予左侧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\">a+=b等价于a=a+b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\">a-=b等价于a=a-b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\">a*=b等价于a=a*b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\">a/=b等价于a=a/b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\">a%=b等价于a=a%b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\">a**=b等价于a=a**b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:left\">取整赋值运算符</td>\n<td style=\"text-align:left\">a//=b等价于a=a//b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:=</td>\n<td style=\"text-align:left\">海象运算符</td>\n<td style=\"text-align:left\"><code>Python3.8</code>版本新增运算符。可在表达式内部为变量赋值。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>海象运算符的使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n := <span class=\"built_in\">len</span>(a)) &gt; <span class=\"number\">10</span>:  </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;List is too long (<span class=\"subst\">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:left\">x and y</td>\n<td style=\"text-align:left\">布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:left\">x or y</td>\n<td style=\"text-align:left\">布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:left\">not x</td>\n<td style=\"text-align:left\">布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"位运算符\">位运算符</h3>\n<p>按位运算符是把数字看作二进制来进行计算的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>|</code></td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0</td>\n<td style=\"text-align:left\"><code>(a | b)</code> 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为1，否则为0</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>\n<td style=\"text-align:left\"><code>(~a )</code> 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把&quot;&gt;&gt;“左边的运算数的各二进位全部右移若干位，”&gt;&gt;&quot;右边的数指定移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"成员运算符\">成员运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"身份运算符\">身份运算符</h3>\n<p>身份运算符用于比较两个对象的存储单元</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is not</td>\n<td style=\"text-align:left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^ |</code></td>\n<td style=\"text-align:left\">位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>== !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Python条件控制\">Python条件控制</h2>\n<p>Python条件控制使用if、elif和else关键字,一般流程图如下：<br>\n<img src=\"if-1.png\" alt=\"if流程图\"></p>\n<p>共有三种模式：</p>\n<p><em><strong>if</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>if-else</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>if-elif-else</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr_1&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (&lt;condition_expr_2&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\"><span class=\"comment\"># ……</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p>上述代码的流程如下：<br>\n<img src=\"if-2.png\" alt=\"if-elif-else\"></p>\n<p>Python条件控制还支持if条件的<code>嵌套</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;expr&gt;):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (&lt;expr_2&gt;):</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\">    <span class=\"comment\"># statement_block_3</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># ……</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python循环语句\">Python循环语句</h2>\n<p>循环语句将在条件成立时循环执行。流程图如下：<br>\n<img src=\"loop-1.jpg\" alt=\"loop-1\"><br>\nPython的循环语句有两种形式：</p>\n<p><em><strong><code>while</code></strong></em></p>\n<blockquote>\n<p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;condition_expr&gt;):</span><br><span class=\"line\">    <span class=\"comment\"># loop_statement_block</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># false_statement</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用<code>while True</code>来实现无限循环</p>\n</blockquote>\n<p><em><strong><code>for</code></strong></em><br>\nPython for 循环可以遍历任何可迭代对象(<a href=\"#Python%E5%BA%8F%E5%88%97sequence\">序列</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &lt;variable&gt; <span class=\"keyword\">in</span> &lt;sequence&gt;:</span><br><span class=\"line\">    &lt;statements&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>\n<p>经常和for配合的一个函数为<a href=\"#range\">range()</a>:<br>\nrange()函数会生成一个数字序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>如果要提前结束循环，需要使用关键字<code>break</code>跳出当前循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span> :</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>以上代码循环到x==6时就会停止:</p>\n<blockquote>\n<p>10 9 8 7 6</p>\n</blockquote>\n<p>如果只是跳过一次循环，使用关键字<code>continue</code>可以跳过本次循环，进入下次循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>9 8 7 5 4 3 2</p>\n</blockquote>\n<p>break和continue在循环中的作用如下图：<br>\n<img src=\"break-continue.jpg\" alt=\"break-continue\"></p>\n<blockquote>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。<br>\ncontinue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n</blockquote>\n<hr>\n<h2 id=\"Python序列sequence\">Python序列sequence</h2>\n<h3 id=\"序列运算\">序列运算</h3>\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\">+运算/拼接</h4>\n<h4 id=\"运算-复制\">*运算/复制</h4>\n<h4 id=\"in运算\">in运算</h4>\n<h4 id=\"切片运算符\">切片运算符</h4>\n<hr>\n<h2 id=\"Python迭代器与生成器\">Python迭代器与生成器</h2>\n<h3 id=\"迭代器iterator\">迭代器iterator</h3>\n<p>迭代是访问集合元素的一种方式。<br>\n迭代器是一个可以记住遍历的位置的对象。<br>\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前<code>不会后退</code>。</p>\n<p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br>\niter()用于创建迭代器对象，next()用于控制迭代器前进。<br>\n字符串，列表或元组对象都可用于创建迭代器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)   <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(it))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))  <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>&lt;class ‘list_iterator’&gt;<br>\n1<br>\n5</p>\n</blockquote>\n<p>迭代器对象可以使用常规for语句进行遍历：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 3 4 5</p>\n</blockquote>\n<h4 id=\"自定义迭代器\">自定义迭代器</h4>\n<p>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。<br>\n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。有关面向对象编程请看：<a href=\"#Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\">Python面向对象</a><br>\n<code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。<br>\n<code>__next__()</code> 方法会返回下一个迭代器对象。</p>\n<blockquote>\n<p><em><strong><code>StopIteration</code></strong></em><br>\nStopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p>\n</blockquote>\n<p>以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">20</span>:    <span class=\"comment\"># 设置循环上限</span></span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"> </span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = <span class=\"built_in\">iter</span>(myclass)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>执行输出结果为：</p>\n<blockquote>\n<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</p>\n</blockquote>\n<hr>\n<h3 id=\"生成器generator\">生成器generator</h3>\n<p>在Python中，使用了<code>yield</code>的函数被称为生成器。<br>\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br>\n在调用生成器运行的过程中，每次遇到 yield 时函数会<code>暂停并保存当前所有的运行信息</code>，<em><strong>返回 yield 的值</strong></em>, 并在下一次执行 next() 方法时从当前位置继续运行。</p>\n<p>以下实例使用生成器实现斐波那契数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>):</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(f), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n</blockquote>\n<hr>\n<h2 id=\"Python函数\">Python函数</h2>\n<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>\n函数能提高应用的模块性，和代码的重复利用率。</p>\n<p>除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。</p>\n<h3 id=\"定义一个函数\">定义一个函数</h3>\n<p>函数的组成有以下几条规则:</p>\n<ul>\n<li>函数以<code>def</code>关键字开头，后接<code>函数标识符</code>名称和<code>参数列表</code></li>\n<li>函数内容以冒号<code>:</code>开始，下面的函数体缩进</li>\n<li>以<code>return [表达式]</code>结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None</li>\n</ul>\n<p>下图是一个简单的函数形式说明:<br>\n<img src=\"function-1.png\" alt=\"函数说明\"><br>\n总结来说，Python的函数语法格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名(<span class=\"params\">参数列表</span>):</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\">参数</h3>\n<p>在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的<code>参数传递</code>来说也对应着两种：</p>\n<ul>\n<li><strong>可变类型</strong>：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。</li>\n<li><strong>不可变类型</strong>：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。</li>\n</ul>\n<blockquote>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n</blockquote>\n<p>Python的函数<code>参数</code>共有下面四种类型：</p>\n<ul>\n<li>必需参数</li>\n<li>关键字参数</li>\n<li>默认参数</li>\n<li>不定长参数</li>\n</ul>\n<p><em><strong><code>必需参数</code></strong></em><br>\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br>\n<em><strong><code>关键字参数</code></strong></em><br>\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。<br>\n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>\n<em><strong><code>默认参数</code></strong></em><br>\n调用函数时，如果没有传递参数，则会使用默认参数。<br>\n<em><strong><code>不定长参数</code></strong></em><br>\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span>(<span class=\"params\">[formal_args,] [*var_args_tuple,] [**var_args_dict] </span>):</span></span><br><span class=\"line\">   function_suite</span><br><span class=\"line\">   <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n<p>加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。<br>\n加了两个星号 ** 的参数会以字典的形式导入。</p>\n<p>下面结合函数的使用来理解这四种参数类型：</p>\n<h3 id=\"函数的使用\">函数的使用</h3>\n<p>使用函数只需要直接使用函数名并传入对应参数就可以调用了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  <span class=\"comment\"># 必需参数的使用，参数按顺序对应传入</span></span><br><span class=\"line\">function1(<span class=\"number\">1</span>, c = <span class=\"string\">&quot;5&quot;</span>, b = <span class=\"number\">2</span>)  <span class=\"comment\"># 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function2</span>(<span class=\"params\">a,b,c = <span class=\"number\">5</span></span>):</span>   <span class=\"comment\"># 默认参数，在函数声明时指定其默认值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)       <span class=\"comment\"># 默认参数在调用时不指定则使用默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function3</span>(<span class=\"params\">a,b,*args_tuple</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function4</span>(<span class=\"params\">a,b,**args_dict</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_dict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function4(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c = <span class=\"number\">3</span>,d = <span class=\"number\">4</span>,e = <span class=\"number\">5</span>,f = <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 3<br>\n1 2 5<br>\n2 3 5<br>\n1 2 (3, 4, 5, 6)<br>\n1 2 {‘c’: 3, ‘d’: 4, ‘e’: 5, ‘f’: 6}</p>\n</blockquote>\n<p>声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数<code>必须用关键字</code>传入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,*,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 5</p>\n</blockquote>\n<h3 id=\"匿名函数\">匿名函数</h3>\n<p>Python使用lambda关键字来创建匿名函数。<br>\n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。<br>\nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</p>\n<p>lambda 函数的语法只包含一个语句，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>\n<p>使用实例来增进理解：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2    <span class=\"comment\"># 一个简单的匿名函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"return语句\">return语句</h3>\n<p>return作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\">c = function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"强制位置参数\">强制位置参数</h3>\n<p>Python3.8 新增了一个函数形参语法<code>/</code>用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。<br>\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">a, b, /, c, d, *, e, f</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b, c, d, e, f)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)  <span class=\"comment\"># 这种使用方式是正确的</span></span><br><span class=\"line\"><span class=\"comment\"># 下面两种是错误的使用</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, b=<span class=\"number\">20</span>, c=<span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)   <span class=\"comment\"># b 不能使用关键字参数的形式</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, f=<span class=\"number\">60</span>)           <span class=\"comment\"># e 必须使用关键字参数的形式</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python推导式\">Python推导式</h2>\n<p>Python的推导式应用于简化规律的列表或元组等序列的创建：<br>\n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。</p>\n<blockquote>\n<p>需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。</p>\n</blockquote>\n<p>简单语法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_lst = [var <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> varrange <span class=\"keyword\">if</span> varexpr]</span><br></pre></td></tr></table></figure>\n<p>比如我们想得到一个偶数数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">tup = (x*<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))   <span class=\"comment\"># 括号生成的是生成器对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tup))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>(tup))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]<br>\n&lt;class ‘generator’&gt;<br>\n(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)</p>\n</blockquote>\n<p>推导式的更多使用建议自己上手尝试一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> (x * <span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)) <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [[x, y] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">ve = [<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;xx&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;xxxx&quot;</span>]</span><br><span class=\"line\">lst = [<span class=\"built_in\">len</span>(v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> ve]  <span class=\"comment\"># 推导式还可以对匿名变量使用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [<span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(<span class=\"number\">355</span>/<span class=\"number\">113</span>, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]   <span class=\"comment\"># 使用复杂表达式和嵌套函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[3, 9, 15, 21, 27]<br>\n[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]<br>\n[1, 2, 3, 4]<br>\n[‘3.1’, ‘3.14’, ‘3.142’, ‘3.1416’, ‘3.14159’]</p>\n</blockquote>\n<hr>\n<h2 id=\"Python模块\">Python模块</h2>\n<p>模块是一个包含所有你定义的函数和变量的文件，<a href=\"http://xn--g6qy6dca976psl2a.py\">其后缀名是.py</a>。<br>\n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p>\n<p>下面是一个使用 python 标准库中模块的例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\nPython 路径为：&#x27;</span>, sys.path, <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>import sys 引入 python 标准库中的 <a href=\"http://sys.py\">sys.py</a> 模块；这是引入某一模块的方法。</li>\n<li>sys.argv 是一个包含命令行参数的列表。</li>\n<li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。</li>\n</ul>\n</blockquote>\n<h3 id=\"import语句\">import语句</h3>\n<p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> module1[,module2...]</span><br></pre></td></tr></table></figure>\n<p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。</p>\n<p>下面是自定义模块的使用:<br>\n这里先定义一个模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后再其他文件里导入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test.py&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test_module.function(<span class=\"number\">1</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 使用模块定义的方法</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>file_name: test_module.py<br>\nfile_name: <a href=\"http://test.py\">test.py</a><br>\n3</p>\n</blockquote>\n<p>可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。</p>\n<p>并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。<br>\n<img src=\"module-1.png\" alt=\"模块只会被导入一次，执行一次\"></p>\n<blockquote>\n<p>当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？<br>\n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。<br>\n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。<br>\n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。<br>\n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘g:\\Codes\\Python\\testpy’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles\\lib\\python’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\python39.zip’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\DLLs’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39’, ‘’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\Pythonwin’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\extensions’, ‘C:\\Users\\Administrator\\.ipython’]</p>\n</blockquote>\n<p>sys.path 输出是一个列表，其中第一项是当前目录。</p>\n<p>如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\">fun = test_module.function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"from…import语句\">from…import语句</h3>\n<p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>\n<p>这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。</p>\n<p>而如果要把一个模块所有成员导入当前的命名空间中，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如’_a’此类。<br>\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n<h3 id=\"深入模块\">深入模块</h3>\n<p>前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。<br>\n我们一般使用这些可执行代码来初始化模块。<br>\n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。<br>\n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。<br>\n从另一个方面，当你确实知道你在做什么的话，你也可以通过 <code>modname.itemname</code> 这样的表示法来访问模块内的函数。</p>\n<p>但是需要注意：</p>\n<blockquote>\n<p>在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n</blockquote>\n<h3 id=\"name-属性\">__name__属性</h3>\n<p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。</p>\n<blockquote>\n<p>注意是前后<code>两个下划线</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;test_module_main&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>每个模块都有一个__name__属性，当其值是’__main__'时，表明该模块自身在运行，否则是被引入。</p>\n<h3 id=\"dir-函数\">dir()函数</h3>\n<p>内置的函数 <a href=\"#dir\"><code>dir()</code></a> 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module,sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(test_module))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(sys))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘__builtins__’, ‘__cached__’, ‘__doc__’, ‘__file__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘function’]<br>\n[‘__breakpointhook__’, ‘__displayhook__’, ‘__doc__’, ‘__excepthook__’, ‘__interactivehook__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘__stderr__’, ‘__stdin__’, ‘__stdout__’, ‘__unraisablehook__’, ‘_base_executable’, ‘_clear_type_cache’, ‘_current_frames’, ‘_debugmallocstats’, ‘_enablelegacywindowsfsencoding’, ‘_framework’, ‘_getframe’, ‘_git’, ‘_home’, ‘_xoptions’, ‘addaudithook’, ‘api_version’, ‘argv’, ‘audit’, ‘base_exec_prefix’, ‘base_prefix’, ‘breakpointhook’, ‘builtin_module_names’, ‘byteorder’, ‘call_tracing’, ‘copyright’, ‘displayhook’, ‘dllhandle’, ‘dont_write_bytecode’, ‘exc_info’, ‘excepthook’, ‘exec_prefix’, ‘executable’, ‘exit’, ‘flags’, ‘float_info’, ‘float_repr_style’, ‘get_asyncgen_hooks’, ‘get_coroutine_origin_tracking_depth’, ‘getallocatedblocks’, ‘getdefaultencoding’, ‘getfilesystemencodeerrors’, ‘getfilesystemencoding’, ‘getprofile’, ‘getrecursionlimit’, ‘getrefcount’, ‘getsizeof’, ‘getswitchinterval’, ‘gettrace’, ‘getwindowsversion’, ‘hash_info’, ‘hexversion’, ‘implementation’, ‘int_info’, ‘intern’, ‘is_finalizing’, ‘maxsize’, ‘maxunicode’, ‘meta_path’, ‘modules’, ‘path’, ‘path_hooks’, ‘path_importer_cache’, ‘platform’, ‘platlibdir’, ‘prefix’, ‘ps1’, ‘ps2’, ‘ps3’, ‘pycache_prefix’, ‘set_asyncgen_hooks’, ‘set_coroutine_origin_tracking_depth’, ‘setprofile’, ‘setrecursionlimit’, ‘setswitchinterval’, ‘settrace’, ‘stderr’, ‘stdin’, ‘stdout’, ‘thread_info’, ‘unraisablehook’, ‘version’, ‘version_info’, ‘warnoptions’, ‘winver’]</p>\n</blockquote>\n<p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>())</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[‘__annotations__’, ‘__builtins__’, ‘__cached__’, ‘__doc__’, ‘__file__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’]</p>\n</blockquote>\n<h3 id=\"其他模块\">其他模块</h3>\n<p>除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看<a href=\"#Python%E5%BA%93%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\">Python库参考文档</a>。</p>\n<p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。<br>\n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。<br>\n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"包\">包</h3>\n<p>包是一种管理 Python 模块命名空间的形式，采用&quot;点模块名称&quot;。<br>\n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。<br>\n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。</p>\n<p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。<br>\n目录只有包含一个叫做 __init__.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。<br>\n最简单的情况，放一个空的 :file:__init__.py就可以了。<br>\n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。</p>\n<p>注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。<br>\nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。<br>\n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</p>\n<p>如果我们使用 from sound.effects import * 会发生什么呢？<br>\nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。<br>\n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。<br>\n在 Windows 平台平台上，我们无法确定一个叫做 <a href=\"http://ECHO.py\">ECHO.py</a> 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。<br>\n为了解决这个问题，我们只需要提供一个精确包的索引。<br>\n导入语句遵循如下规则：如果包定义文件 __init__.py 存在一个叫做 __all__ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。<br>\n作为包的作者，可别忘了在更新包之后保证 __all__ 也更新了啊。<br>\n__all__是一个存储模块名字符串的列表。</p>\n<hr>\n<h2 id=\"Python输入输出\">Python输入输出</h2>\n<p>再前面我们已经接触过Python的输入<a href=\"#input\">input()</a>和输出<a href=\"#print\">print()</a>了，本章主要是介绍输入输出的进阶技巧。</p>\n<h3 id=\"输出格式美化\">输出格式美化</h3>\n<p>Python两种输出值的方式: 表达式语句和 print() 函数。<br>\n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。<br>\n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。<br>\n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。</p>\n<blockquote>\n<ul>\n<li>str()： 函数返回一个用户易读的表达形式。</li>\n<li>repr()： 产生一个解释器易读的表达形式。</li>\n</ul>\n</blockquote>\n<p>下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(a)</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>(a)</span><br><span class=\"line\"><span class=\"string\">&quot;&#x27;1&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(a))</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(a)&#125;</span>,<span class=\"subst\">&#123;<span class=\"built_in\">repr</span>(a)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#  repr() 函数可以保留转义字符串中的特殊字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">&#x27;hello, world\\n&#x27;</span>      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos = <span class=\"built_in\">repr</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos)</span><br><span class=\"line\"><span class=\"string\">&#x27;hello, world\\n&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos_1 = <span class=\"built_in\">str</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos_1)</span><br><span class=\"line\">hello, world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>((x, y, (<span class=\"string\">&#x27;Go&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>)))      </span><br><span class=\"line\"><span class=\"string\">&quot;(32.5, 40000, (&#x27;Go&#x27;, &#x27;Python&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>\n<p>关于str()和repr()的更多区别请参见<a href=\"str()%E5%92%8Crepr()%E7%9A%84%E5%8C%BA%E5%88%AB\">str()和repr()的区别</a></p>\n<p>其他关于字符串格式化内容请参见: <a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\">字符串格式化</a></p>\n<h3 id=\"读取输入\">读取输入</h3>\n<p>Python 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p>\n<hr>\n<h2 id=\"Python文件读写操作\">Python文件读写操作</h2>\n<h3 id=\"读和写文件\">读和写文件</h3>\n<p><a href=\"#open\">open()</a>函数将会返回一个file对象，其基本语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(filename, mode)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filename : 包含了你要访问的文件的字符串值。</li>\n<li>mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读®。</li>\n</ul>\n<p>不同模式打开文件的完全列表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">以<code>只读</code>方式打开文件。文件的指针将会放在文件的<code>开头</code>。这是<code>默认</code>模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>只读</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。文件打开时会是追加模式。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab+</td>\n<td style=\"text-align:left\">以<code>二进制格式</code>打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n</tbody>\n</table>\n<p>总结来说模式的情况有三种：</p>\n<ul>\n<li>基础模式： 也就是 <code>r</code> <code>w</code> <code>a</code> (read、write、append)</li>\n<li>二进制模式：  在基础模式上加上<code>b</code>表示以二进制格式打开文件(byte)</li>\n<li>读写模式：  在以上两种模式上加上<code>+</code>表示打开的文件可读写</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">r</th>\n<th style=\"text-align:center\">r+</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:center\">w+</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">a+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">覆盖</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在开始</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在结尾</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"rwa-1.png\" alt=\"读写模式\"></p>\n<p>下面是一个读写文件的实例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;a模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式再写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “\\testpy\\<a href=\"http://quick.py\">quick.py</a>”, line 6, in &lt;module&gt;<br>\nf = open(r&quot;testpy\\test.txt&quot;, “r”)<br>\nFileNotFoundError: [Errno 2] No such file or directory: ‘testpy\\test.txt’<br>\nw模式写入<br>\nw模式写入a模式写入<br>\nw模式再写入</p>\n</blockquote>\n<p>可以看到下图文件结构的改变<br>\n<img src=\"rw_test_1.png\" alt=\"读写测试-前\"><br>\n<img src=\"rw_test_2.png\" alt=\"读写测试-后\"></p>\n<p>以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。</p>\n<blockquote>\n<p>这里有几个需要注意的点:</p>\n<ul>\n<li>文件的路径，由于带有反斜杠\\，会被转义，所以需要使用r-string</li>\n<li>打开的文件需要使用f.close()关闭或者使用<a href=\"#with%E5%85%B3%E9%94%AE%E5%AD%97\">with…as…</a>代码块</li>\n<li>读写文件通常需要在try…except里进行</li>\n</ul>\n</blockquote>\n<p>如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：<br>\n<img src=\"rw-problem.png\" alt=\"文字乱码\"><br>\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：<br>\nvscode选择右下角的编码格式改变：<br>\n<img src=\"vscode.png\" alt=\"vscode选择编码\"><br>\n<img src=\"vscode-2.png\" alt=\"vscode选择编码-2\"><br>\n<img src=\"vscode-3.png\" alt=\"vscode选择编码-3\"><br>\n<img src=\"solute.png\" alt=\"文字乱码解决\"></p>\n<p>还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>关于上面实例使用的文件对象的方法，请看下节。</p>\n<h3 id=\"文件对象的方法\">文件对象的方法</h3>\n<!-- TODO: 文件对象方法 -->\n<h4 id=\"f-read\"><a href=\"#read\"><code>f.read()</code></a></h4>\n<p>为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。<br>\nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入<br>\n字</p>\n</blockquote>\n<p>可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取</p>\n<blockquote>\n<p>这是因为read()同时会向后移动指针size个字符.</p>\n</blockquote>\n<p>但是这时候有人又有问题了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？</p>\n<blockquote>\n<p>这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。</p>\n</blockquote>\n<p>如果你打开文件的方式没有读的权限，那么会报出以下的错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “\\testpy\\<a href=\"http://quick.py\">quick.py</a>”, line 18, in &lt;module&gt;<br>\nprint(f.read())<br>\n<code>io.UnsupportedOperation: not readable</code></p>\n</blockquote>\n<h4 id=\"f-readline\"><a href=\"#readline\"><code>f.readline()</code></a></h4>\n<p>f.readline() 会从文件中读取单独的一行。换行符为 ‘\\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串1\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>‘写入字符串\\n’<br>\n‘写入字符串1\\n’</p>\n</blockquote>\n<p>可以看到调用readline()和read()一样都会向后移动指针</p>\n<p>还可以使用迭代文件对象的方式遍历每一行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 使用with...as在代码块结束时会自动关闭文件对象</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入字符串<br>\n写入字符串1</p>\n</blockquote>\n<h4 id=\"f-readlines\"><a href=\"#readlines\"><code>f.readlines()</code></a></h4>\n<p>f.readlines() 将返回该文件中包含的所有行。<br>\n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.readlines())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘写入字符串\\n’, ‘写入字符串1’]</p>\n</blockquote>\n<h4 id=\"f-write\"><a href=\"#write\"><code>f.write()</code></a></h4>\n<p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符</p>\n</blockquote>\n<h4 id=\"f-tell\"><a href=\"#tell\"><code>f.tell()</code></a></h4>\n<p>f.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符<br>\n当前游标处于第12字节处</p>\n</blockquote>\n<p>一些常用编码一个字符所占的字节数：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编码</th>\n<th style=\"text-align:center\">中文</th>\n<th style=\"text-align:center\">英文</th>\n<th style=\"text-align:left\">其他说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ASCII</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Unicode</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">英文符号只占1个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GB2312</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GBK</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ISO-8859-1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-8</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-16</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">Unicode扩展区的一些汉字存储需要4个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-32</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"f-seek\"><a href=\"#seek\"><code>f.seek()</code></a></h4>\n<p>如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>\n<p>offset 是偏移量；<br>\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：</p>\n<ul>\n<li>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符</li>\n<li>seek(x,1) ： 表示从当前位置往后移动x个字符</li>\n<li>seek(-x,2)：表示从文件的结尾往前移动x个字符<br>\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符<br>\n当前游标处于第12字节处<br>\n0<br>\n当前游标处于第0字节处<br>\n12<br>\n当前游标处于第12字节处</p>\n</blockquote>\n<h4 id=\"f-close\"><a href=\"#close\"><code>f.close()</code></a></h4>\n<p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。<br>\n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</p>\n<h3 id=\"pickle模块\">pickle模块</h3>\n<p>python的pickle模块实现了基本的数据序列和反序列化。<br>\n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。<br>\n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p>\n<p>下面通过一个简单实例来说明pickle模块：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块将数据对象保存到文件</span></span><br><span class=\"line\">data1 = &#123;<span class=\"string\">&quot;a&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">6j</span>], <span class=\"string\">&quot;b&quot;</span>: (<span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">u&quot;Unicode string&quot;</span>), <span class=\"string\">&quot;c&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">selfref_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">selfref_list.append(selfref_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle dictionary using protocol 0.</span></span><br><span class=\"line\">pickle.dump(data1, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle the list using the highest protocol available.</span></span><br><span class=\"line\">pickle.dump(selfref_list, output, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">output.close()</span><br></pre></td></tr></table></figure>\n<p>上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickle.dump(obj, file, [,protocol])</span><br></pre></td></tr></table></figure>\n<p>它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块从文件中重构python对象</span></span><br><span class=\"line\">data1 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data1)</span><br><span class=\"line\">data2 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data2)</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’: [1, 2.0, 3, (4+6j)], ‘b’: (‘string’, ‘Unicode string’), ‘c’: None}<br>\n[1, 2, 3]</p>\n</blockquote>\n<p>上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">any_x = pickle.load(file)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-os模块\">Python os模块</h2>\n<!-- TODO: os模块方法 -->\n<h3 id=\"os模块常用方法\">os模块常用方法</h3>\n<p><a href=\"#Python-os%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">os模块</a>提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#access\">access()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt1111&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.R_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.X_OK))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#getcwd\">getcwd()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 返回你的当前工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#chdir\">chdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br><span class=\"line\">os.chdir(<span class=\"string\">&quot;../&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br><span class=\"line\">g:\\Codes\\Python\\</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#chmod\">chmod()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os, stat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\">os.chmod(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, stat.S_IREAD)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#open\">open()</a></p>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_CREAT | os.O_RDWR)</span><br><span class=\"line\">os.write(fd, <span class=\"built_in\">str</span>.encode(<span class=\"string\">&quot;This is test\\n&quot;</span>))</span><br><span class=\"line\">os.close(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_RDONLY)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.read(fd, <span class=\"number\">10</span>))</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;This is te&#x27;</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#write\">write()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#read\">read()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#close\">close()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#closerange\">closerange()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>,os.O_RDONLY)</span><br><span class=\"line\">os.closerange(fd,fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#dup\">dup()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;foo.txt&quot;</span>, os.O_RDWR | os.O_CREAT)</span><br><span class=\"line\"><span class=\"comment\"># 复制文件描述符</span></span><br><span class=\"line\">d_fd = os.dup(fd)</span><br><span class=\"line\"><span class=\"comment\"># 使用复制的文件描述符写入文件</span></span><br><span class=\"line\">os.write(d_fd, <span class=\"string\">&quot;This is test&quot;</span>.encode())</span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">os.closerange(fd, d_fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#dup2\">dup2()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fdopen\">fdopen()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># os.fdopen()</span></span><br><span class=\"line\"><span class=\"comment\"># 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法是内置函数 open() 的别名;</span></span><br><span class=\"line\"><span class=\"comment\"># 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#stat\">stat()</a></p>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.stat(path))</span><br><span class=\"line\"></span><br><span class=\"line\">info = os.lstat(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;st_uid = <span class=\"subst\">&#123;info.st_uid&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(path, os.O_RDWR)</span><br><span class=\"line\">info = os.fstat(fd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">st_uid = <span class=\"number\">0</span></span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#lstat\">lstat()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fstat\">fstat()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fsync\">fsync()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#link\">link()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.link(src, dst)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#listdir\">listdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">path = <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir(path))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#makedirs\">makedirs()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(path, <span class=\"number\">0o777</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#mkdir\">mkdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.mkdir(path)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#pipe\">pipe()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">r,w = os.pipe()</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#popen\">popen()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> os.popen(<span class=\"string\">&quot;mkdir test_popen&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;os._wrap_close <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D8FC929430</span>&gt;</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#system\">system()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.system(<span class=\"string\">r&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#remove\">remove()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">os.remove(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除后列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#removedirs\">removedirs()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.removedirs(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#rmdir\">rmdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.rmdir(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#rename\">rename()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br><span class=\"line\"></span><br><span class=\"line\">os.rename(<span class=\"string\">&quot;test_pack&quot;</span>, <span class=\"string\">&quot;test_rename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;test_rename&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#renames\">renames()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;当前目录为: %s&quot;</span> %os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span>%os.listdir(os.getcwd()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重命名 &quot;aa1.txt&quot;</span></span><br><span class=\"line\">os.renames(<span class=\"string\">&quot;aa1.txt&quot;</span>,<span class=\"string\">&quot;newdir/aanew.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;重命名成功。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出重命名的文件 &quot;aa1.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span> %os.listdir(os.getcwd()))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前目录为: /tmp</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;aa1.txt&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br><span class=\"line\">重命名成功。</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#walk\">walk()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>, topdown=<span class=\"literal\">False</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\.vscode\\settings.json</span><br><span class=\"line\">.\\testpy\\data.pkl</span><br><span class=\"line\">.\\testpy\\quick.py</span><br><span class=\"line\">.\\testpy\\quick2.py</span><br><span class=\"line\">.\\testpy\\test1.txt</span><br><span class=\"line\">.\\testpy\\test2.txt</span><br><span class=\"line\">.\\testpy\\test3.txt</span><br><span class=\"line\">.\\testpy\\test_unicode.txt</span><br><span class=\"line\">.\\test_pack\\test_py.py</span><br><span class=\"line\">.\\test_pack\\__init__.py</span><br><span class=\"line\">.\\unable\\__pycache__\\un_test.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\unable\\un_test.py</span><br><span class=\"line\">.\\unable\\__pycache__</span><br><span class=\"line\">.\\__pycache__\\test_module.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\auto.py</span><br><span class=\"line\">.\\data.pkl</span><br><span class=\"line\">.\\dp1.py</span><br><span class=\"line\">.\\foo.txt</span><br><span class=\"line\">.\\test.py</span><br><span class=\"line\">.\\test.txt</span><br><span class=\"line\">.\\test_module.py</span><br><span class=\"line\">.\\workspace.code-workspace</span><br><span class=\"line\">.\\.vscode</span><br><span class=\"line\">.\\testpy</span><br><span class=\"line\">.\\test_pack</span><br><span class=\"line\">.\\test_popen</span><br><span class=\"line\">.\\unable</span><br><span class=\"line\">.\\__pycache__</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#pardir\">pardir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 输出默认值 ..</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.pardir)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"path模块\">path模块</h3>\n<p>os.path 模块主要用于获取文件的属性。<br>\n以下是 os.path 模块的几种常用方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">os.path.<code>abspath</code>(path)</td>\n<td style=\"text-align:left\">返回绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>basename</code>(path)</td>\n<td style=\"text-align:left\">返回文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>commonprefix</code>(list)</td>\n<td style=\"text-align:left\">返回list(多个路径)中，所有path共有的最长的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>dirname</code>(path)</td>\n<td style=\"text-align:left\">返回文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>exists</code>(path)</td>\n<td style=\"text-align:left\">路径存在则返回True,路径损坏返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expanduser</code>(path)</td>\n<td style=\"text-align:left\">把path中包含的&quot;~“和”~user&quot;转换成用户目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expandvars</code>(path)</td>\n<td style=\"text-align:left\">根据环境变量的值替换path中包含的&quot;$name&quot;和&quot;${name}&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getatime</code>(path)</td>\n<td style=\"text-align:left\">返回最近访问时间（浮点型秒数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getmtime</code>(path)</td>\n<td style=\"text-align:left\">返回最近文件修改时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getctime</code>(path)</td>\n<td style=\"text-align:left\">返回文件 path 创建时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getsize</code>(path)</td>\n<td style=\"text-align:left\">返回文件大小，如果文件不存在就返回错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isabs</code>(path)</td>\n<td style=\"text-align:left\">判断是否为绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isfile</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isdir</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>islink</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>ismount</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为挂载点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>join</code>(path1[, path2[, …]])</td>\n<td style=\"text-align:left\">把目录和文件名合成一个路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normcase</code>(path)</td>\n<td style=\"text-align:left\">转换path的大小写和斜杠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normpath</code>(path)</td>\n<td style=\"text-align:left\">规范path字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>realpath</code>(path)</td>\n<td style=\"text-align:left\">返回path的真实路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>relpath</code>(path[, start])</td>\n<td style=\"text-align:left\">从start开始计算相对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samefile</code>(path1, path2)</td>\n<td style=\"text-align:left\">判断目录或文件是否相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>sameopenfile</code>(fp1, fp2)</td>\n<td style=\"text-align:left\">判断fp1和fp2是否指向同一文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samestat</code>(stat1, stat2)</td>\n<td style=\"text-align:left\">判断stat tuple stat1和stat2是否指向同一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>split</code>(path)</td>\n<td style=\"text-align:left\">把路径分割成 dirname 和 basename，返回一个元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitdrive</code>(path)</td>\n<td style=\"text-align:left\">一般用在 windows 下，返回驱动器名和路径组成的元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitext</code>(path)</td>\n<td style=\"text-align:left\">分割路径中的文件名与拓展名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>walk</code>(path, visit, arg)</td>\n<td style=\"text-align:left\">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>supports_unicode_filenames</code></td>\n<td style=\"text-align:left\">设置是否支持unicode路径名</td>\n</tr>\n</tbody>\n</table>\n<!--TODO: ### os.open()与open()的区别 -->\n<!--TODO: ### os.popen()与os.system()的区别 -->\n<hr>\n<h2 id=\"Python错误与异常处理\">Python错误与异常处理</h2>\n<p>Python有两种错误：语法错误和异常。<br>\nPython <a href=\"#assert-%E6%96%AD%E8%A8%80\">assert</a>（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。</p>\n<h3 id=\"语法错误\">语法错误</h3>\n<p>Python 的语法错误或者称之为解析错，会报出以下的错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\">             ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">               ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p>如上，程序会报出语法错误<code>SyntaxError</code>，后面跟着的是错误的提示信息。<br>\n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。</p>\n<h3 id=\"异常\">异常</h3>\n<p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。<br>\n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * (<span class=\"number\">1</span>/<span class=\"number\">0</span>)             <span class=\"comment\"># 0 不能作为除数，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4</span> + spam*<span class=\"number\">3</span>             <span class=\"comment\"># spam 未定义，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;spam&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;2&#x27;</span> + <span class=\"number\">2</span>               <span class=\"comment\"># int 不能与 str 相加，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n<p>异常类型和异常信息会显示出来，例子中的异常类型有：<code>ZeroDivisionError</code>、<code>NameError</code>、<code>TypeError</code><br>\n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。<br>\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。</p>\n<h3 id=\"异常处理\">异常处理</h3>\n<p>异常处理的格式是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;</span><br><span class=\"line\"><span class=\"keyword\">except</span> [ErrorType]:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">[...</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">]</span><br><span class=\"line\">[<span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br></pre></td></tr></table></figure>\n<p>异常处理的工作流程如下：</p>\n<ul>\n<li>try代码块为要执行的代码，被先执行;</li>\n<li>如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;</li>\n<li>如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;</li>\n<li>如果try代码块没有产生异常则执行else代码块(如果有);</li>\n<li>最后执行finally代码块, finally 语句无论异常是否发生都会执行。</li>\n</ul>\n<blockquote>\n<p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">except</span> (RuntimeError, TypeError, NameError):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"抛出异常\">抛出异常</h3>\n<p>python使用raise关键字向上层抛出异常:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。<br>\nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。<br>\nraise后面如果不跟具体异常，这样会向上抛出<code>RuntimeError</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>异常输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span> , line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">raise</span></span><br><span class=\"line\">RuntimeError: No active exception to reraise</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义异常\">自定义异常</h3>\n<p>用户可以通过<a href=\"#%E7%BB%A7%E6%89%BF\">继承</a>Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span>(<span class=\"params\">Exception</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">repr</span>(self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> MyError(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> MyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error code:&quot;</span>, e.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> MyError(<span class=\"string\">&quot;MyError&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>error code: 0<br>\nTraceback (most recent call last):<br>\nFile “&lt;stdin&gt;”, line 14, in &lt;module&gt;<br>\nraise MyError(“MyError”)<br>\n__main__.MyError: ‘MyError’</p>\n</blockquote>\n<blockquote>\n<p>大多数的异常的名字都以&quot;Error&quot;结尾，就跟标准的异常命名一样。</p>\n</blockquote>\n<h3 id=\"assert-断言\">assert(断言)</h3>\n<p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。<br>\n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。</p>\n<p>语法格式为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure>\n<p>assert 后面也可以紧跟参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression [, arguments]</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure>\n<p>下面是实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正常运行&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure>\n<p>带参数的实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br><span class=\"line\">AssertionError: <span class=\"number\">1</span>大于<span class=\"number\">2</span>是错误的</span><br></pre></td></tr></table></figure>\n<p>以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">assert</span> (<span class=\"string\">&#x27;linux&#x27;</span> <span class=\"keyword\">in</span> sys.platform), <span class=\"string\">&quot;该代码只能在 Linux 下执行&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来要执行的代码</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"with关键字\">with关键字</h3>\n<p>Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。<br>\nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。<br>\n在处理文件对象时使用 with 关键字是一种很好的做法。<br>\n我们可以看下以下几种代码实例：<br>\n不使用 with，也不使用 try…except…finally</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。</p>\n<p>使用 with 关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。<br>\n我们可以在执行 with 关键字后检验文件是否关闭：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.closed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.closed)</span><br></pre></td></tr></table></figure>\n<p>以上代码输出结果为：</p>\n<blockquote>\n<p>False<br>\nTrue</p>\n</blockquote>\n<p>with 语句实现原理建立在上下文管理器之上。<br>\n上下文管理器是一个实现 __enter__ 和 __exit__ 方法的类。<br>\n使用 with 语句确保在嵌套块的末尾调用 __exit__ 方法。<br>\n这个概念类似于 try…finally 块的使用。</p>\n<blockquote>\n<p>在文件对象中定义了 __enter__ 和 __exit__ 方法，即文件对象也实现了上下文管理器，首先调用 __enter__ 方法，然后执行 with 语句中的代码，最后调用 __exit__ 方法。 即使出现错误，也会调用 __exit__ 方法，也就是会关闭文件流。</p>\n</blockquote>\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n<hr>\n<h2 id=\"Python面向对象\">Python面向对象</h2>\n<h3 id=\"面向对象技术简介\">面向对象技术简介</h3>\n<ul>\n<li>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>\n<li>方法：类中定义的函数。</li>\n<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>\n<li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</li>\n<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>\n<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>\n<li>实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li>\n<li>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟&quot;是一个（is-a）&quot;关系（例图，Dog是一个Animal）。</li>\n<li>实例化：创建一个类的实例，类的具体对象。</li>\n<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>\n</ul>\n<h3 id=\"定义类\">定义类</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。</p>\n<h3 id=\"类对象\">类对象</h3>\n<p>类对象支持两种操作：属性引用和实例化。<br>\n属性引用使用和 Python 中所有的属性引用一样的标准语法：<a href=\"http://obj.name\">obj.name</a>。<br>\n类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;一个简单的类实例&quot;&quot;&quot;</span></span><br><span class=\"line\">    i = <span class=\"number\">12345</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">x = MyClass()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 访问类的属性和方法</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;MyClass 类的属性 i 为：&quot;</span>, x.i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;MyClass 类的方法 f 输出为：&quot;</span>, x.f())</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果是：</p>\n<blockquote>\n<p>MyClass 类的属性 i 为： 12345<br>\nMyClass 类的方法 f 输出为： hello world</p>\n</blockquote>\n<p>类有一个名为 __init__() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.data = []</span><br></pre></td></tr></table></figure>\n<p>类定义了 __init__() 方法，类的实例化操作会自动调用 __init__() 方法。<br>\n当然， __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Complex</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, realpart, imagpart</span>):</span></span><br><span class=\"line\">        self.r = realpart</span><br><span class=\"line\">        self.i = imagpart</span><br><span class=\"line\">x = Complex(<span class=\"number\">3.0</span>, -<span class=\"number\">4.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.r, x.i)   <span class=\"comment\"># 输出结果：3.0 -4.5</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>self代表类的实例，而非类</strong></em><br>\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prt</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__class__)</span><br><span class=\"line\"> </span><br><span class=\"line\">t = Test()</span><br><span class=\"line\">t.prt()</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>&lt;__main__.Test instance at 0x0000025D089CCFD0&gt;<br>\n__main__.Test</p>\n</blockquote>\n<p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。</p>\n<p>self 不是 python 关键字，我们把他换成其他也是可以正常执行的</p>\n<h3 id=\"类的方法\">类的方法</h3>\n<p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">p = people(<span class=\"string\">&#x27;sam&#x27;</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>)</span><br><span class=\"line\">p.speak()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>sam 说: 我 10 岁。</p>\n</blockquote>\n<h3 id=\"继承\">继承</h3>\n<p>派生类的定义语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">BaseClassName</span>):</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。</p>\n<p>BaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">modname.BaseClassName</span>):</span></span><br></pre></td></tr></table></figure>\n<p>单继承：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#单继承示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span>(<span class=\"params\">people</span>):</span></span><br><span class=\"line\">    grade = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w,g</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#调用父类的构函</span></span><br><span class=\"line\">        people.__init__(self,n,a,w)</span><br><span class=\"line\">        self.grade = g</span><br><span class=\"line\">    <span class=\"comment\">#覆写父类的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">s = student(<span class=\"string\">&#x27;ken&#x27;</span>,<span class=\"number\">10</span>,<span class=\"number\">60</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">s.speak()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>ken 说: 我 10 岁了，我在读 3 年级</p>\n</blockquote>\n<h3 id=\"多继承\">多继承</h3>\n<p>Python同样有限的支持多继承形式。多继承的类定义形如下例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">Base1, Base2, Base3</span>):</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单继承示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span>(<span class=\"params\">people</span>):</span></span><br><span class=\"line\">    grade = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w, g</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的构函</span></span><br><span class=\"line\">        people.__init__(self, n, a, w)</span><br><span class=\"line\">        self.grade = g</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 覆写父类的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 另一个类，多重继承之前的准备</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">speaker</span>:</span></span><br><span class=\"line\">    topic = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, t</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.topic = t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span> % (self.name, self.topic))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多重继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span>(<span class=\"params\">speaker, student</span>):</span></span><br><span class=\"line\">    a = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w, g, t</span>):</span></span><br><span class=\"line\">        student.__init__(self, n, a, w, g)</span><br><span class=\"line\">        speaker.__init__(self, n, t)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test = sample(<span class=\"string\">&quot;Tim&quot;</span>, <span class=\"number\">25</span>, <span class=\"number\">80</span>, <span class=\"number\">4</span>, <span class=\"string\">&quot;Python&quot;</span>)</span><br><span class=\"line\">test.speak()  <span class=\"comment\"># 方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>我叫 Tim，我是一个演说家，我演讲的主题是 Python</p>\n</blockquote>\n<h3 id=\"方法重写\">方法重写</h3>\n<p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;调用父类方法&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;调用子类方法&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 子类实例</span></span><br><span class=\"line\">c.myMethod()         <span class=\"comment\"># 子类调用重写方法</span></span><br><span class=\"line\"><span class=\"built_in\">super</span>(Child,c).myMethod() <span class=\"comment\"># 用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure>\n<!-- TODO: super() -->\n<p><a href=\"#super\"><code>super()</code></a> 函数是用于调用父类(超类)的一个方法。<br>\n执行以上程序输出结果为：</p>\n<blockquote>\n<p>调用子类方法<br>\n调用父类方法</p>\n</blockquote>\n<h3 id=\"类属性和方法\">类属性和方法</h3>\n<p><strong>类的私有属性</strong><br>\n__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p>\n<p><strong>类的方法</strong><br>\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。<br>\nself 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。</p>\n<p><strong>类的私有方法</strong><br>\n__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JustCounter</span>:</span></span><br><span class=\"line\">    __secretCount = <span class=\"number\">0</span>  <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\">    publicCount = <span class=\"number\">0</span>    <span class=\"comment\"># 公开变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__secretCount += <span class=\"number\">1</span></span><br><span class=\"line\">        self.publicCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (self.__secretCount)</span><br><span class=\"line\"> </span><br><span class=\"line\">counter = JustCounter()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (counter.publicCount)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (counter.__secretCount)  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1<br>\n2<br>\n2<br>\nTraceback (most recent call last):<br>\nFile “<a href=\"http://test.py\">test.py</a>”, line 16, in &lt;module&gt;<br>\nprint (counter.__secretCount)  # 报错，实例不能访问私有变量<br>\nAttributeError: ‘JustCounter’ object has no attribute ‘__secretCount’</p>\n</blockquote>\n<h3 id=\"私有变量\">私有变量</h3>\n<p>那种仅限从一个对象内部访问的“私有”实例变量在 Python 中并不存在。 但是，大多数 Python 代码都遵循这样一个约定：带有一个下划线的名称 (例如 _spam) 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。 这应当被视为一个实现细节，可能不经通知即加以改变。<br>\n由于存在对于类私有成员的有效使用场景（例如避免名称与子类所定义的名称相冲突），因此存在对此种机制的有限支持，称为 名称改写。 任何形式为 __spam 的标识符（至少带有两个前缀下划线，至多一个后缀下划线）的文本将被替换为 _classname__spam，其中 classname 为去除了前缀下划线的当前类名称。 这种改写不考虑标识符的句法位置，只要它出现在类定义内部就会进行。</p>\n<p>名称改写有助于让子类重载方法而不破坏类内方法调用。</p>\n<!-- TODO：私有变量 -->\n<h3 id=\"类的专有方法\">类的专有方法</h3>\n<ul>\n<li>__init__ : 构造函数，在生成对象时调用</li>\n<li>__del__ : 析构函数，释放对象时使用</li>\n<li>__repr__ : 打印，转换</li>\n<li>__setitem__ : 按照索引赋值</li>\n<li>__getitem__: 按照索引获取值</li>\n<li>__len__: 获得长度</li>\n<li>__cmp__: 比较运算</li>\n<li>__call__: 函数调用</li>\n<li>__add__: 加运算</li>\n<li>__sub__: 减运算</li>\n<li>__mul__: 乘运算</li>\n<li>__truediv__: 除运算</li>\n<li>__mod__: 求余运算</li>\n<li>__pow__: 乘方</li>\n</ul>\n<h3 id=\"运算符重载\">运算符重载</h3>\n<p>Python同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>Vector(7,8)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python命名空间和作用域\">Python命名空间和作用域</h2>\n<h3 id=\"命名空间\">命名空间</h3>\n<p>先看看官方文档的一段话：</p>\n<blockquote>\n<p>A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。</p>\n<p>命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。</p>\n</blockquote>\n<p>命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。<br>\n我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p>\n<p>一般有三种命名空间：</p>\n<ul>\n<li>内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</li>\n<li>全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li>\n<li>局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li>\n</ul>\n<p><img src=\"%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png\" alt=\"命名空间\"></p>\n<p>命名空间查找顺序:<br>\n假设我们要使用变量 test，则 Python 的查找顺序为：<strong>局部的命名空间去 -&gt; 全局命名空间 -&gt; 内置命名空间</strong>。<br>\n如果找不到变量 test，它将放弃查找并引发一个 NameError 异常:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NameError: name <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined。</span><br></pre></td></tr></table></figure>\n<p>命名空间的生命周期：<br>\n命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。<br>\n因此，我们无法从外部命名空间访问内部命名空间的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># var1 是全局名称</span></span><br><span class=\"line\">var1 = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_func</span>():</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># var2 是局部名称</span></span><br><span class=\"line\">    var2 = <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_inner_func</span>():</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># var3 是内嵌的局部名称</span></span><br><span class=\"line\">        var3 = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>如下图所示，相同的对象名称可以存在于多个命名空间中。</p>\n<p><img src=\"%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-2.png\" alt=\"命名空间-2\"></p>\n<h3 id=\"作用域\">作用域</h3>\n<blockquote>\n<p>A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</p>\n</blockquote>\n<p>作用域就是一个 Python 程序可以直接访问命名空间的正文区域。<br>\n在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。<br>\nPython 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>\n<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：</p>\n<ul>\n<li>L（Local）：最内层，包含局部变量，比如一个函数/方法内部。</li>\n<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>\n<li>G（Global）：当前脚本的最外层，比如当前模块的全局变量。</li>\n<li>B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。</li>\n</ul>\n<p>在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>\n<p><img src=\"%E4%BD%9C%E7%94%A8%E5%9F%9F.png\" alt=\"作用域\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g_count = <span class=\"number\">0</span>  <span class=\"comment\"># 全局作用域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span>():</span></span><br><span class=\"line\">    o_count = <span class=\"number\">1</span>  <span class=\"comment\"># 闭包函数外的函数中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        i_count = <span class=\"number\">2</span>  <span class=\"comment\"># 局部作用域</span></span><br></pre></td></tr></table></figure>\n<p>内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> builtins</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(builtins))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BlockingIOError’, ‘BrokenPipeError’, ‘BufferError’, ‘BytesWarning’, ‘ChildProcessError’, ‘ConnectionAbortedError’, ‘ConnectionError’, ‘ConnectionRefusedError’, ‘ConnectionResetError’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EnvironmentError’, ‘Exception’, ‘False’, ‘FileExistsError’, ‘FileNotFoundError’, ‘FloatingPointError’, ‘FutureWarning’, ‘GeneratorExit’, ‘IOError’, ‘ImportError’, ‘ImportWarning’, ‘IndentationError’, ‘IndexError’, ‘InterruptedError’, ‘IsADirectoryError’, ‘KeyError’, ‘KeyboardInterrupt’, ‘LookupError’, ‘MemoryError’, ‘ModuleNotFoundError’, ‘NameError’, ‘None’, ‘NotADirectoryError’, ‘NotImplemented’, ‘NotImplementedError’, ‘OSError’, ‘OverflowError’, ‘PendingDeprecationWarning’, ‘PermissionError’, ‘ProcessLookupError’, ‘RecursionError’, ‘ReferenceError’, ‘ResourceWarning’, ‘RuntimeError’, ‘RuntimeWarning’, ‘StopAsyncIteration’, ‘StopIteration’, ‘SyntaxError’, ‘SyntaxWarning’, ‘SystemError’, ‘SystemExit’, ‘TabError’, ‘TimeoutError’, ‘True’, ‘TypeError’, ‘UnboundLocalError’, ‘UnicodeDecodeError’, ‘UnicodeEncodeError’, ‘UnicodeError’, ‘UnicodeTranslateError’, ‘UnicodeWarning’, ‘UserWarning’, ‘ValueError’, ‘Warning’, ‘WindowsError’, ‘ZeroDivisionError’, ‘__build_class__’, ‘__debug__’, ‘__doc__’, ‘__import__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘abs’, ‘all’, ‘any’, ‘ascii’, ‘bin’, ‘bool’, ‘breakpoint’, ‘bytearray’, ‘bytes’, ‘callable’, ‘chr’, ‘classmethod’, ‘compile’, ‘complex’, ‘copyright’, ‘credits’, ‘delattr’, ‘dict’, ‘dir’, ‘divmod’, ‘enumerate’, ‘eval’, ‘exec’, ‘exit’, ‘filter’, ‘float’, ‘format’, ‘frozenset’, ‘getattr’, ‘globals’, ‘hasattr’, ‘hash’, ‘help’, ‘hex’, ‘id’, ‘input’, ‘int’, ‘isinstance’, ‘issubclass’, ‘iter’, ‘len’, ‘license’, ‘list’, ‘locals’, ‘map’, ‘max’, ‘memoryview’, ‘min’, ‘next’, ‘object’, ‘oct’, ‘open’, ‘ord’, ‘pow’, ‘print’, ‘property’, ‘quit’, ‘range’, ‘repr’, ‘reversed’, ‘round’, ‘set’, ‘setattr’, ‘slice’, ‘sorted’, ‘staticmethod’, ‘str’, ‘sum’, ‘super’, ‘tuple’, ‘type’, ‘vars’, ‘zip’]</p>\n</blockquote>\n<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    test = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>test</p>\n</blockquote>\n<p>实例中 test 变量定义在 if 语句块中，但外部还是可以访问的。<br>\n如果将 test 定义在函数中，则它就是局部变量，外部不能访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_func</span>():</span></span><br><span class=\"line\">    test = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “&lt;stdin&gt;”, line 1, in &lt;module&gt;<br>\nNameError: name ‘test’ is not defined</p>\n</blockquote>\n<p>从报错的信息上看，说明了 test 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。</p>\n<h3 id=\"全局变量和局部变量\">全局变量和局部变量</h3>\n<p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。<br>\n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = <span class=\"number\">0</span> <span class=\"comment\"># 这是一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 可写函数说明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\"> arg1, arg2 </span>):</span></span><br><span class=\"line\">    <span class=\"comment\">#返回2个参数的和.&quot;</span></span><br><span class=\"line\">    total = arg1 + arg2 <span class=\"comment\"># total在这里是局部变量.</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;函数内是局部变量 : &quot;</span>, total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#调用sum函数</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>( <span class=\"number\">10</span>, <span class=\"number\">20</span> )</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;函数外是全局变量 : &quot;</span>, total)</span><br></pre></td></tr></table></figure>\n<p>以上实例输出结果：</p>\n<blockquote>\n<p>函数内是局部变量 :  30<br>\n函数外是全局变量 :  0</p>\n</blockquote>\n<h3 id=\"global和nonlocal关键字\">global和nonlocal关键字</h3>\n<p>当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> num  <span class=\"comment\"># 需要使用 global 关键字声明</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num) </span><br><span class=\"line\">    num = <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">fun1()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>1<br>\n123<br>\n123</p>\n</blockquote>\n<p>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span>():</span></span><br><span class=\"line\">    num = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> num   <span class=\"comment\"># nonlocal关键字声明</span></span><br><span class=\"line\">        num = <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    inner()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">outer()</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>100<br>\n100</p>\n</blockquote>\n<hr>\n<h2 id=\"Python标准库概览\">Python标准库概览</h2>\n<h3 id=\"操作系统接口\">操作系统接口</h3>\n<p><code>os模块</code>提供了不少与操作系统相关联的函数。更多请参见：<a href=\"#Python-os%E6%A8%A1%E5%9D%97\">Python os模块</a>和<a href=\"#Python-os%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python os模块方法</a></p>\n<blockquote>\n<p>建议使用 “import os” 风格而非 “from os import *”。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。</p>\n</blockquote>\n<p>针对日常的文件和目录管理任务，<code>shutil模块</code>提供了一个易于使用的高级接口，更多请见：<a href=\"Python-shutil%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python shutil模块</a></p>\n<h3 id=\"文件通配符\">文件通配符</h3>\n<p><code>glob模块</code>提供了一个函数用于从目录通配符搜索中生成文件列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"built_in\">print</span>(glob.glob(<span class=\"string\">&#x27;*.py&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行参数\">命令行参数</h3>\n<p>通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 “python <a href=\"http://demo.py\">demo.py</a> one two three” 后可以得到以下输出结果:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(sys.argv)</span><br><span class=\"line\">[<span class=\"string\">&#x27;demo.py&#x27;</span>, <span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误输出重定向和程序终止\">错误输出重定向和程序终止</h3>\n<p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。<br>\n大多脚本的定向终止都使用 “sys.exit()”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.stderr.write(<span class=\"string\">&quot;stderr.write_test\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stderr.write_test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串正则匹配\">字符串正则匹配</h3>\n<p><code>re模块</code>为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.findall(<span class=\"string\">r&#x27;\\bf[a-z]*&#x27;</span>, <span class=\"string\">&#x27;which foot or hand fell fastest&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.sub(<span class=\"string\">r&#x27;(\\b[a-z]+) \\1&#x27;</span>, <span class=\"string\">r&#x27;\\1&#x27;</span>, <span class=\"string\">&#x27;cat in the the hat&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[‘foot’, ‘fell’, ‘fastest’]<br>\n‘cat in the hat’</p>\n</blockquote>\n<p>如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;tea for too&#x27;</span>.replace(<span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;tea for two&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>更多关于正则表达式表达见后文<a href=\"#Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">正则表达式</a></p>\n<h3 id=\"数学\">数学</h3>\n<p>python提供了<code>math模块</code>对简单数学支持，以及<code>random模块</code>对随机数的支持。</p>\n<h3 id=\"访问互联网\">访问互联网</h3>\n<p>有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib。</p>\n<h3 id=\"日期和时间\">日期和时间</h3>\n<p><code>datetime模块</code>为日期和时间处理同时提供了简单和复杂的方法。<br>\n支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。<br>\n该模块还支持时区处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dates are easily constructed and formatted</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">now = datetime.date.today()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.date(<span class=\"number\">2023</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now.strftime(<span class=\"string\">&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dates support calendar arithmetic</span></span><br><span class=\"line\">birthday = datetime.date(<span class=\"number\">1964</span>, <span class=\"number\">7</span>, <span class=\"number\">31</span>)</span><br><span class=\"line\">age = now - birthday</span><br><span class=\"line\"><span class=\"built_in\">print</span>(age.days)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">2022</span>-<span class=\"number\">02</span>-<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"attribute\">2023</span>-<span class=\"number\">12</span>-<span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"attribute\">02</span>-<span class=\"number\">21</span>-<span class=\"number\">22</span>. <span class=\"number\">21</span> Feb <span class=\"number\">2022</span> is a Monday <span class=\"literal\">on</span> the <span class=\"number\">21</span> day of February.</span><br><span class=\"line\"><span class=\"attribute\">21024</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据压缩\">数据压缩</h3>\n<p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">b&quot;witch which has which witches wrist watch&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(s))</span><br><span class=\"line\"></span><br><span class=\"line\">t = zlib.compress(s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(t))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(zlib.decompress(t))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zlib.crc32(s))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">41</span></span><br><span class=\"line\"><span class=\"number\">37</span></span><br><span class=\"line\">b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class=\"line\"><span class=\"number\">226805979</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"性能度量\">性能度量</h3>\n<p>有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。<br>\n例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Timer(<span class=\"string\">&#x27;t=a; a=b; b=t&#x27;</span>, <span class=\"string\">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class=\"line\"><span class=\"number\">0.57535828626024577</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Timer(<span class=\"string\">&#x27;a,b = b,a&#x27;</span>, <span class=\"string\">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class=\"line\"><span class=\"number\">0.54962537085770791</span></span><br></pre></td></tr></table></figure>\n<p>相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具。</p>\n<h3 id=\"测试模块\">测试模块</h3>\n<p>开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试<br>\n<code>doctest模块</code>提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。<br>\n测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。<br>\n通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average</span>(<span class=\"params\">values</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class=\"line\"><span class=\"string\">    40.0</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(values) / <span class=\"built_in\">len</span>(values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> doctest</span><br><span class=\"line\">doctest.testmod()   <span class=\"comment\"># 自动验证嵌入测试</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>TestResults(failed=0, attempted=1)</p>\n</blockquote>\n<p><code>unittest模块</code>不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatisticalFunctions</span>(<span class=\"params\">unittest.TestCase</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_average</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.assertEqual(average([<span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">70</span>]), <span class=\"number\">40.0</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">round</span>(average([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]), <span class=\"number\">1</span>), <span class=\"number\">4.3</span>)</span><br><span class=\"line\">        self.assertRaises(ZeroDivisionError, average, [])</span><br><span class=\"line\">        self.assertRaises(TypeError, average, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">unittest.main() <span class=\"comment\"># Calling from the command line invokes all tests</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python正则表达式\">Python正则表达式</h2>\n<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。<br>\n<code>re 模块</code>使 Python 语言拥有全部的正则表达式功能。</p>\n<p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。<br>\nre 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>\n<p>本章节主要介绍 Python 中常用的正则表达式处理函数，如果你对正则表达式不了解，可以查看<a href=\"/cn/regex\">正则表达式</a>。</p>\n<h3 id=\"re-match函数\">re.match函数</h3>\n<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>\n<p>函数语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(pattern, string, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>函数参数说明：</p>\n<ul>\n<li>pattern : 匹配的正则表达式</li>\n<li>string : 要匹配的字符串。</li>\n<li>flags : 可选参数，标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6\">正则表达式修饰符</a></li>\n</ul>\n<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>\n<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<ul>\n<li>group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</li>\n<li>groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</li>\n</ul>\n<p>以下是实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.match(<span class=\"string\">&quot;www&quot;</span>, <span class=\"string\">&quot;www.baidu.com&quot;</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.match(<span class=\"string\">&quot;com&quot;</span>, <span class=\"string\">&quot;www.baidu.com&quot;</span>))  <span class=\"comment\"># 不在起始位置匹配</span></span><br><span class=\"line\"></span><br><span class=\"line\">line = <span class=\"string\">&quot;Cats are smarter than dogs&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># .* 表示任意匹配除换行符（\\n、\\r）之外的任何单个或多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># (.*?) 表示&quot;非贪婪&quot;模式，只保存第一个匹配到的子串</span></span><br><span class=\"line\">matchObj = re.match(<span class=\"string\">r&quot;(.*) are (.*?) .*&quot;</span>, line, re.M | re.I)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.groups() : &quot;</span>, matchObj.groups())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>(0, 3)<br>\nNone<br>\nmatchObj.group() :  Cats are smarter than dogs<br>\nmatchObj.group(1) :  Cats<br>\nmatchObj.group(2) :  smarter<br>\nmatchObj.groups() :  (‘Cats’, ‘smarter’)</p>\n</blockquote>\n<h3 id=\"re-search函数\">re.search函数</h3>\n<p>re.search扫描整个字符串并返回第一个成功的匹配。</p>\n<p>函数语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.search(pattern, string, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>函数参数说明：</p>\n<ul>\n<li>pattern : 匹配的正则表达式</li>\n<li>string : 要匹配的字符串</li>\n<li>flags : 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6\">正则表达式修饰符</a></li>\n</ul>\n<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。<br>\n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<!-- TODO: 正则表达式补全 -->\n<hr>\n<h2 id=\"Python操作MySQL\">Python操作MySQL</h2>\n<p>MySQL是最流行的关系型数据库管理系统。<br>\nPython连接mysql数据库的方法有<code>mysql-connector</code>和<code>PyMySQL</code>两种，接下来我们来介绍这两个模块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install mysql-connector</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install PyMySQL</span><br></pre></td></tr></table></figure>\n<p>使用以下代码测试mysql-connector/pymysql是否安装成功：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mysql.connector</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，如果没有产生错误，表明安装成功。</p>\n<p>两个模块的方法基本一致.</p>\n<h3 id=\"创建数据库连接\">创建数据库连接</h3>\n<p>可以使用以下代码来连接数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mysql.connector</span><br><span class=\"line\"></span><br><span class=\"line\">db = mysql.connector.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&quot;localhost&quot;</span>,   <span class=\"comment\"># 数据库主机地址</span></span><br><span class=\"line\">    user = <span class=\"string\">&quot;yourusername&quot;</span>,    <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">    passwd = <span class=\"string\">&quot;yourpassword&quot;</span>    <span class=\"comment\">#  数据库密码 </span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(db)</span><br></pre></td></tr></table></figure>\n<p>如果出现以下错误：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"selector-class\">.connector</span><span class=\"selector-class\">.errors</span><span class=\"selector-class\">.NotSupportedError</span>: Authentication plugin <span class=\"string\">&#x27;caching_sha2_password&#x27;</span> is not supported</span><br></pre></td></tr></table></figure>\n<p>是因为你的 MySQL 是 8.0 以上版本，密码插件验证方式发生了变化，早期版本为 mysql_native_password，8.0 版本为 caching_sha2_password，所以需要做些改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db = mysql.connector.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&quot;localhost&quot;</span>,   <span class=\"comment\"># 数据库主机地址</span></span><br><span class=\"line\">    user = <span class=\"string\">&quot;yourusername&quot;</span>,    <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">    passwd = <span class=\"string\">&quot;yourpassword&quot;</span>,    <span class=\"comment\">#  数据库密码 </span></span><br><span class=\"line\">    database = <span class=\"string\">&quot;yourdatabase&quot;</span>,   <span class=\"comment\"># 选择数据库</span></span><br><span class=\"line\">    auth_plugin=<span class=\"string\">&quot;mysql_native_password&quot;</span>     <span class=\"comment\"># 选择密码插件验证方式为mysql_native_password</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者修改mysql的my.ini配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库操作\">数据库操作</h3>\n<p>在连接好数据库后，我们使用cursor.execute(sql)来执行数据库操作,并用迭代器打印结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设以连接好数据库db = mysql.connector.connect()</span></span><br><span class=\"line\"></span><br><span class=\"line\">cursor= db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;use mydb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;show tables&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cursor:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br></pre></td></tr></table></figure>\n<p>执行的sql语句参见<a href=\"/cn/mysql\">mysql</a></p>\n<!-- TODO: mysql博客 -->\n<p>当使用sql语句导致数据表内容有更新时，必须使用db.commit()提交</p>\n<blockquote>\n<p>cursor.rowcount为更改的行数</p>\n</blockquote>\n<p>cursor.execute()只会执行一次数据操作，如果要执行批量插入修改等操作，需要使用executemany(sql,args_tuple_list)方法。该方法的第二参数是一个元组列表,包含要操作的数据。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;insert into testtable (name,value) values (%s,%s)&quot;</span></span><br><span class=\"line\">val = [</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name1&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name2&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name3&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name4&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.executemany(sql,val)</span><br><span class=\"line\"></span><br><span class=\"line\">db.commit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mycursor.rowcount, <span class=\"string\">&quot;记录插入成功。&quot;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>mycursor.lastrowid表示最新数据记录的ID</p>\n</blockquote>\n<p>如果使用查询，可以使用fetchall()获取所有记录，或者fetchone/fetchmany等选择性获取。</p>\n<p>fetchall返回的是一个列表，记录存储为元组。</p>\n<h4 id=\"使用预处理格式（占位符格式）\">使用预处理格式（占位符格式）</h4>\n<p>可以查看一下execute()方法的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQLCursor</span>(<span class=\"params\">CursorBase</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        省略很多方法和变量</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">self, operation, params=<span class=\"literal\">None</span>, multi=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Executes the given operation</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        Executes the given operation substituting any markers with</span></span><br><span class=\"line\"><span class=\"string\">        the given parameters.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        For example, getting all rows where id is 5:</span></span><br><span class=\"line\"><span class=\"string\">          cursor.execute(&quot;SELECT * FROM t1 WHERE id = %s&quot;, (5,))</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        The multi argument should be set to True when executing multiple</span></span><br><span class=\"line\"><span class=\"string\">        statements in one operation. If not set and multiple results are</span></span><br><span class=\"line\"><span class=\"string\">        found, an InterfaceError will be raised.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        If warnings where generated, and connection.get_warnings is True, then</span></span><br><span class=\"line\"><span class=\"string\">        self._warnings will be a list containing these warnings.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        Returns an iterator when multi is True, otherwise None.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>第1个参数是要执行的SQL语句，其中，参数位置先使用占位符来占位.<br>\n第2个参数是一个tuple（元组），元素值就是SQL占位符对应的参数，注意只有一个参数的时候，要写成(xxx,)，后面的逗号不要忘记。<br>\n第3个参数是一个bool值，表示第一个参数是不是多个SQL语句，如果是的话，就传入True，否则传入False。</p>\n<p><strong>注意，在SQL中的占位符，统一写%s, 具体的类型，是在tuple中，传入的参数元素类型决定</strong></p>\n<h4 id=\"关闭数据库连接\">关闭数据库连接</h4>\n<p>使用db.close()关闭数据库连接</p>\n<h4 id=\"数据库回滚\">数据库回滚</h4>\n<p>如果数据库发生错误，建议使用db.rollback()进行回滚</p>\n<hr>\n<h2 id=\"Python多线程\">Python多线程</h2>\n<p>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</p>\n<ul>\n<li>使用线程可以把占据长时间的程序中的任务放到后台去处理。</li>\n<li>用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</li>\n<li>程序的运行速度可能加快。</li>\n<li>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</li>\n</ul>\n<p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>\n每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。<br>\n指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。</p>\n<ul>\n<li>线程可以被抢占（中断）。</li>\n<li>在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。</li>\n</ul>\n<p>线程可以分为:</p>\n<ul>\n<li>内核线程：由操作系统内核创建和撤销。</li>\n<li>用户线程：不需要内核支持而在用户程序中实现的线程。</li>\n</ul>\n<p>Python3 线程中常用的两个模块为：</p>\n<ul>\n<li>_thread</li>\n<li>threading(推荐使用)</li>\n</ul>\n<p>thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用&quot;thread&quot; 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。</p>\n<p>Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。<br>\n_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。<br>\nthreading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p>\n<ul>\n<li>threading.currentThread(): 返回当前的线程变量。</li>\n<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>\n<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>\n</ul>\n<p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</p>\n<ul>\n<li>run(): 用以表示线程活动的方法。</li>\n<li>start():启动线程活动。</li>\n<li>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li>\n<li>isAlive(): 返回线程是否活动的。</li>\n<li>getName(): 返回线程名。</li>\n<li>setName(): 设置线程名。</li>\n</ul>\n<h3 id=\"thread模块\">_thread模块</h3>\n<p>Python中使用线程有两种方式：函数或者用类来包装线程对象。</p>\n<p>函数式：调用 _thread 模块中的<code>start_new_thread</code>()函数来产生新线程。语法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_thread.start_new_thread ( function, args[, kwargs] )</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<ul>\n<li>function - 线程函数。</li>\n<li>args - 传递给线程函数的参数,他必须是个tuple类型。</li>\n<li>kwargs - 可选参数。</li>\n</ul>\n<p>以下是一个实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为线程定义一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, loopTime</span>):</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> count &lt; loopTime:</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建两个线程</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    _thread.start_new_thread(print_time, (<span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    _thread.start_new_thread(print_time, (<span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: 无法启动线程&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>Thread-1: Tue Mar 22 16:16:05 2022<br>\nThread-2: Tue Mar 22 16:16:07 2022<br>\nThread-1: Tue Mar 22 16:16:07 2022<br>\nThread-1: Tue Mar 22 16:16:09 2022<br>\nThread-2: Tue Mar 22 16:16:11 2022<br>\nThread-1: Tue Mar 22 16:16:11 2022<br>\nThread-1: Tue Mar 22 16:16:13 2022<br>\nThread-2: Tue Mar 22 16:16:15 2022<br>\nThread-2: Tue Mar 22 16:16:19 2022<br>\nThread-2: Tue Mar 22 16:16:23 2022<br>\nThread-2: Tue Mar 22 16:16:27 2022</p>\n</blockquote>\n<h3 id=\"treading模块\">treading模块</h3>\n<p>我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, delay</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.delay = delay</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开始线程：&quot;</span> + self.name)</span><br><span class=\"line\">        print_time(self.name, self.delay, <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出线程：&quot;</span> + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, counter</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> counter:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> exitFlag:</span><br><span class=\"line\">            threadName.exit()</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">        counter -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\">thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新线程</span></span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\">thread1.join()</span><br><span class=\"line\">thread2.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>开始线程：Thread-1<br>\n开始线程：Thread-2<br>\nThread-1: Tue Mar 22 16:31:08 2022<br>\nThread-1: Tue Mar 22 16:31:09 2022<br>\nThread-2: Tue Mar 22 16:31:09 2022<br>\nThread-1: Tue Mar 22 16:31:10 2022<br>\nThread-1: Tue Mar 22 16:31:11 2022<br>\nThread-2: Tue Mar 22 16:31:11 2022<br>\nThread-1: Tue Mar 22 16:31:12 2022<br>\n退出线程：Thread-1<br>\nThread-2: Tue Mar 22 16:31:13 2022<br>\nThread-2: Tue Mar 22 16:31:16 2022<br>\nThread-2: Tue Mar 22 16:31:18 2022<br>\n退出线程：Thread-2<br>\n退出主线程</p>\n</blockquote>\n<h3 id=\"线程同步\">线程同步</h3>\n<p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。<br>\n使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p>\n<p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。<br>\n考虑这样一种情况：一个列表里所有元素都是0，线程&quot;set&quot;从后向前把所有元素改成1，而线程&quot;print&quot;负责从前往后读取列表并打印。<br>\n那么，可能线程&quot;set&quot;开始改的时候，线程&quot;print&quot;便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。<br>\n锁有两种状态——锁定和未锁定。每当一个线程比如&quot;set&quot;要访问共享数据时，必须先获得锁定；如果已经有别的线程比如&quot;print&quot;获得锁定了，那么就让线程&quot;set&quot;暂停，也就是同步阻塞；等到线程&quot;print&quot;访问完毕，释放锁以后，再让线程&quot;set&quot;继续。<br>\n经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, delay</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.delay = delay</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开启线程： &quot;</span> + self.name)</span><br><span class=\"line\">        <span class=\"comment\"># 获取锁，用于线程同步</span></span><br><span class=\"line\">        threadLock.acquire()</span><br><span class=\"line\">        print_time(self.name, self.delay, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 释放锁，开启下一个线程</span></span><br><span class=\"line\">        threadLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, counter</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> counter:</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">        counter -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">threadLock = threading.Lock()</span><br><span class=\"line\">threads = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\">thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新线程</span></span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加线程到线程列表</span></span><br><span class=\"line\">threads.append(thread1)</span><br><span class=\"line\">threads.append(thread2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待所有线程完成</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    t.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程优先级队列\">线程优先级队列</h3>\n<p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。<br>\n这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。<br>\nQueue 模块中的常用方法:</p>\n<ul>\n<li>Queue.qsize() 返回队列的大小</li>\n<li>Queue.empty() 如果队列为空，返回True,反之False</li>\n<li>Queue.full() 如果队列满了，返回True,反之False</li>\n<li>Queue.full 与 maxsize 大小对应</li>\n<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>\n<li>Queue.get_nowait() 相当Queue.get(False)</li>\n<li>Queue.put(item) 写入队列，timeout等待时间</li>\n<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>\n<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>\n<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, q</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.q = q</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开启线程：&quot;</span> + self.name)</span><br><span class=\"line\">        process_data(self.name, self.q)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出线程：&quot;</span> + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_data</span>(<span class=\"params\">threadName, q</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> exitFlag:</span><br><span class=\"line\">        queueLock.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> workQueue.empty():</span><br><span class=\"line\">            data = q.get()</span><br><span class=\"line\">            queueLock.release()</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s processing %s&quot;</span> % (threadName, data))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            queueLock.release()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">threadList = [<span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"string\">&quot;Thread-3&quot;</span>]</span><br><span class=\"line\">nameList = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>, <span class=\"string\">&quot;Four&quot;</span>, <span class=\"string\">&quot;Five&quot;</span>]</span><br><span class=\"line\">queueLock = threading.Lock()</span><br><span class=\"line\">workQueue = queue.Queue(<span class=\"number\">10</span>)</span><br><span class=\"line\">threads = []</span><br><span class=\"line\">threadID = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> tName <span class=\"keyword\">in</span> threadList:</span><br><span class=\"line\">    thread = myThread(threadID, tName, workQueue)</span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\">    threads.append(thread)</span><br><span class=\"line\">    threadID += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充队列</span></span><br><span class=\"line\">queueLock.acquire()</span><br><span class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> nameList:</span><br><span class=\"line\">    workQueue.put(word)</span><br><span class=\"line\">queueLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待队列清空</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> workQueue.empty():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通知线程是时候退出</span></span><br><span class=\"line\">exitFlag = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待所有线程完成</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    t.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-MongoDB\">Python MongoDB</h2>\n<p>MongoDB 是目前最流行的 NoSQL 数据库之一，使用的数据类型 BSON（类似 JSON）。<br>\n关于MongoDB 数据库以查看这篇<a href=\"/cn/mongodb\">MongoDB博客</a>。</p>\n<p>mongoDB下载：<a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a></p>\n<!-- TODO： mongodb blog -->\n<hr>\n<!-- TODO: argparse -->\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<!-- TODO: dir() 和 help() -->\n<hr>\n<h2 id=\"Python内置函数\">Python内置函数</h2>\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n<h3 id=\"abs\">abs()</h3>\n<p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1<br>\n1.0<br>\n5.0<br>\n0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\">format()</h3>\n<p>format 基本语法是通过 {} 和 : 来代替以前的 % 。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li>*args/**kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回格式化后的字符串</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>hello<br>\nworld hello world<br>\n网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>\n网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>\n网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>\nvalue 为: 13<br>\nvalue 为: 13<br>\na 元素对应的位置是 {0}</p>\n</blockquote>\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n<p><em><strong>还可以使用format函数进行数字格式化</strong></em></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"len\">len()</h3>\n<p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回对象长度。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n0<br>\n9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\">max()</h3>\n<p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n6<br>\ns<br>\n6<br>\n[1, 3, 4]<br>\n[2, 1, 9, 4]<br>\nbabc</p>\n<p>True<br>\n1<br>\nFalse<br>\n0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。</p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。</p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\">min()</h3>\n<p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1<br>\n-1<br>\na<br>\n1<br>\n[1, 2, 6]<br>\n[1, 2, 6, 5, 3]<br>\nabcd<br>\nTrue<br>\n1<br>\nFalse<br>\n0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。</p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。</p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\">pow()</h3>\n<p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>\n函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>8<br>\n15.625<br>\n0</p>\n</blockquote>\n<blockquote>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>\npow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\">round()</h3>\n<p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>\n精度要求高的，不建议使用该函数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>10<br>\n11<br>\n1.53<br>\n1.6<br>\n1.32<br>\n0<br>\n-1.24<br>\n-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-%E5%85%B3%E4%BA%8E%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\">tuple()</h3>\n<p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回元组。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-os模块方法\">Python os模块方法</h2>\n<hr>\n<h2 id=\"Python-math模块方法\">Python math模块方法</h2>\n<!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"acos\">acos()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"asin\">asin()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"atan\">atan()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"ceil\">ceil()</h3>\n<p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回上入整数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\">cos()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"degress\">degress()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"exp\">exp()</h3>\n<p>exp()方法返回x的指数,e^x。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的指数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>2.718281828459045<br>\n23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\">fabs()</h3>\n<p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1.2<br>\n1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\">floor()</h3>\n<p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回下舍整数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>4<br>\n-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\">log()</h3>\n<p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>0.0<br>\n1.0<br>\n2.0<br>\n1.892789260714372</p>\n</blockquote>\n<blockquote>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\">log10()</h3>\n<p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<blockquote>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\">modf()</h3>\n<p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>\n(-0.52, -1.0)<br>\n(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-2\">pow()</h3>\n<p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的y次方值</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>8.0<br>\n15.625</p>\n</blockquote>\n<blockquote>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>\npow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\">radians()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"sin\">sin()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"sqrt\">sqrt()</h3>\n<p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回数字x的平方根。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\">tan()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h2 id=\"Python-random模块方法\">Python random模块方法</h2>\n<blockquote>\n<p>导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"choice\">choice()</h3>\n<p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回一个随机项</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"random\">random()</h3>\n<p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>\n无</p>\n<p><strong>返回值：</strong><br>\n返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"randrange\">randrange()</h3>\n<p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>\n从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"seed\">seed()</h3>\n<p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n无</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>\n使用默认种子生成随机数： 0.20706442655860602<br>\n使用整数 10 种子生成随机数： 0.5714025946899135<br>\n使用整数 10 种子生成随机数： 0.5714025946899135<br>\n使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\">shuffle()</h3>\n<p>将序列的所有元素随机排序</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>lst :  列表</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回None</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\">uniform()</h3>\n<p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-shutil模块方法\">Python shutil模块方法</h2>\n<hr>\n<h2 id=\"Python-re模块方法\">Python re模块方法</h2>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\">Python常见问题</h2>\n<h3 id=\"float精度问题\">float精度问题</h3>\n<p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</h3>\n<p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。</p>\n <!-- TODO:round精度问题补全  -->\n<p>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n<hr>\n<h3 id=\"str-和repr-的区别\">str()和repr()的区别</h3>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Python3和Python2在部分使用上有区别，详情请参见官方文档<br>\n本文使用的是<code>Python3</code></p>\n</blockquote>\n<h2 id=\"python安装\">python安装</h2>\n<ol>\n<li>访问<a href=\"https://www.python.org/\">Python官网</a>并下载Python<br>\nwindows下载地址<a href=\"https://www.python.org/downloads/windows/\">https://www.python.org/downloads/windows/</a><br>\n安装完成后打开命令提示符窗口输入<code>python</code>查看是否安装成功。</li>\n<li>配置环境变量</li>\n<li>安装IDE/编辑器:vscode\n<ul>\n<li>Pycharm</li>\n<li>Rider</li>\n</ul>\n</li>\n<li>创建py文件</li>\n</ol>\n<h2 id=\"python基本语法\">python基本语法</h2>\n<h3 id=\"编码\">编码</h3>\n<!-- TODO: 编码 -->\n<h3 id=\"标识符\">标识符</h3>\n<ul>\n<li>第一个字符必须是字母表中字母或下划线 _ 。</li>\n<li>标识符的其他的部分由字母、数字和下划线组成。</li>\n<li>标识符对大小写敏感。</li>\n<li>非关键字</li>\n</ul>\n<blockquote>\n<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>\n</blockquote>\n<hr>\n<h3 id=\"语句\">语句</h3>\n<p>Python中通常一行表示一个语句，末尾不需加上分号&quot;;&quot;.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>多行语句</code></strong></em></p>\n<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠<code>\\</code>来实现多行语句，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure>\n<p>但在 [], {}, 或 () 中的多行语句，<code>不需要使用反斜杠 \\</code> ，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = [<span class=\"string\">&#x27;item_one&#x27;</span>, <span class=\"string\">&#x27;item_two&#x27;</span>, <span class=\"string\">&#x27;item_three&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;item_four&#x27;</span>, <span class=\"string\">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>空行</code></strong></em><br>\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>\n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\n<blockquote>\n<p>空行也是程序代码的一部分。</p>\n</blockquote>\n<p><em><strong><code>同行多条语句</code></strong></em></p>\n<p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割 ：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = <span class=\"number\">5</span>; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span>); <span class=\"built_in\">print</span>(<span class=\"string\">&quot;b&quot;</span>); <span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p><em><strong><code>pass语句</code></strong></em><br>\nPython pass是空语句，是为了保持程序结构的完整性。<br>\npass 不做任何事情，一般用做占位语句，如下实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"变量赋值\">变量赋值</h3>\n<p>使用等号为变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2.0</span></span><br><span class=\"line\">c = <span class=\"string\">&quot;str&quot;</span></span><br></pre></td></tr></table></figure>\n<p>也可以同时为多个变量赋值：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\"># 从右到左依次赋值   </span></span><br><span class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"string\">&quot;str&quot;</span>   <span class=\"comment\"># 同时分别赋值</span></span><br></pre></td></tr></table></figure>\n<p>在Python中，类型属于对象，变量是没有类型的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在以上代码中，'str’是String类型，而变量a是没有类型的，它只是一个对象的引用（一个指针），它指向’str’这个String类型对象。</p>\n<hr>\n<h3 id=\"关键字\">关键字</h3>\n<p>关键字又叫保留字，它不能作为任何标识符名称，Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为（版本Python 3.9.8）：</p>\n<blockquote>\n<p>[‘False’, ‘None’, ‘True’, ‘__peg_parser__’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p>\n</blockquote>\n<hr>\n<h3 id=\"注释\">注释</h3>\n<p><em><strong><code>单行注释</code></strong></em><br>\nPython的单行注释使用<code>#</code>号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行注释</span></span><br><span class=\"line\">a = <span class=\"number\">1</span>  <span class=\"comment\"># 注释</span></span><br></pre></td></tr></table></figure>\n<p><em><strong><code>多行注释</code></strong></em><br>\nPython的多行注释使用<code>'''</code> 或 <code>&quot;&quot;&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">注释</span></span><br><span class=\"line\"><span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">多行注释</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"代码块\">代码块</h3>\n<p>和其他语言不同，Python使用缩进表示不同的代码块，而不需要使用大括号<kbd>{}</kbd>。<br>\n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>如果同一代码块的缩进空格数不一致，会导致运行错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;True&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;False&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>File “&lt;tokenize&gt;”, line 5<br>\nprint(“error”)<br>\n^<br>\nIndentationError: unindent does not match any outer indentation level</p>\n</blockquote>\n<hr>\n<h3 id=\"输入输出\">输入输出</h3>\n<p>Python的内置函数<a href=\"#input\">input()</a>和<a href=\"#print\">print()</a>分别表示输入和输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">input</span>(<span class=\"string\">&quot;\\n\\n按下 enter 键后退出。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输出&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;print默认是换行的，如果不需要换行需要在后面参数加上end=&#x27;&#x27;&quot;</span>,end = <span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"导入import\">导入import</h3>\n<p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。<br>\n将整个模块(somemodule)导入，格式为： <code>import somemodule</code><br>\n从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code><br>\n从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code><br>\n将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p>\n<hr>\n<h3 id=\"解释器\">解释器</h3>\n<!-- TODO: 解释器 -->\n<hr>\n<h2 id=\"Python基本数据类型\">Python基本数据类型</h2>\n<p>Python中的变量不需要声明。每个变量在使用前都必须赋值，<strong>变量赋值以后该变量才会被创建</strong>。<br>\n在Python中，变量就是变量，它“没有类型”，数据类型指的是<strong>变量所指的内存中对象的类型</strong>。<br>\n等号（=）运算符左边的是一个变量名，等号（=）运算符右边的是将存储在变量的值。</p>\n<blockquote>\n<p>一个变量可以通过赋值指向不同类型的对象。</p>\n</blockquote>\n<p>python中有六个标准的数据类型：</p>\n<ul>\n<li><a href=\"#Number%E6%95%B0%E5%AD%97\">Number</a></li>\n<li><a href=\"#Tuple%E5%85%83%E7%BB%84\">Tuple</a></li>\n<li><a href=\"#String%E5%AD%97%E7%AC%A6%E4%B8%B2\">String</a></li>\n<li><a href=\"#List%E5%88%97%E8%A1%A8\">List</a></li>\n<li><a href=\"#Set%E9%9B%86%E5%90%88\">Set</a></li>\n<li><a href=\"#Dictionary%E5%AD%97%E5%85%B8\">Dictionary</a></li>\n</ul>\n<p>其中<code>不可变</code>immutable的数据类型为： <code>Number</code>、<code>Tuple</code>、<code>String</code><br>\n<code>可变</code>mutable的数据类型为： <code>List</code>、<code>Set</code>、<code>Dictionary</code></p>\n<p>在解释这六个数据类型前，有两个方法需要介绍：</p>\n<h3 id=\"type-和-isinstance\"><code>type()</code> 和 <code>isinstance()</code></h3>\n<p>Python内置的 <strong>type()</strong> 函数可以用来查询变量所指的对象类型。<br>\ntype()函数有两个重载方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(object) -&gt; type # the object&#x27;s type</span><br><span class=\"line\">type(name, bases, dict) -&gt; object # a new type object</span><br></pre></td></tr></table></figure>\n<p>如果只有一个参数则返回对象的类型，三个参数返回新的类型对象。</p>\n<p>而 <strong>isinstance()</strong> 函数用来判断一个对象是否是一个已知的类型。<br>\n使用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isinstance(object, classinfo) -&gt; bool</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数：</p>\n<ul>\n<li>object - 实例对象</li>\n<li>classinfo - 可以是直接或间接类名、基本类型或者由它们组成的元组</li>\n</ul>\n<blockquote>\n<p>classinfo为基本类型时,可以是<code>int</code>，<code>float</code>，<code>bool</code>，<code>complex</code>，<code>str</code>(字符串)，<code>list</code>，<code>dict</code>(字典)，<code>set</code>，<code>tuple</code>。<br>\n要注意的是，classinfo 的字符串是 <code>str</code> 而不是 <code>string</code>，字典也是简写 <code>dict</code>。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"isinstance-与-type-区别：\">isinstance() 与 type() 区别：</h4>\n<p>type() 不会认为子类是一种父类类型，<code>不考虑</code><strong>继承</strong>关系。<br>\nisinstance() 会认为子类是一种父类类型，<code>考虑</code><strong>继承</strong>关系。<br>\n如果要判断两个类型是否相同推荐使用<code>isinstance()</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">b = B()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(a,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">isinstance</span>(b,A))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)==A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(b)==A)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True<br>\nTrue<br>\n&lt;class ‘__main__.A’&gt;<br>\n&lt;class ‘__main__.B’&gt;<br>\nTrue<br>\nFalse</p>\n</blockquote>\n<h3 id=\"Number数字\">Number数字</h3>\n<p>数字类型是不允许改变的，这就意味着如果改变数字数据类型的值，将重新分配内存空间。</p>\n<p>python数字类型包括：<code>整型int</code>、<code>浮点型float</code>、<code>布尔型bool</code>、<code>复数型complex</code>。</p>\n<blockquote>\n<p>其中在Python3中，只有一种整数类型int，表示为长整型，没有Python2中的Long</p>\n</blockquote>\n<h4 id=\"具体类型\">具体类型</h4>\n<h5 id=\"int\">int</h5>\n<p>int通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作“Long”长整型使用，所以 Python3 没有 Python2 的 Long 类型。<br>\n除了用正常的十进制数，我们还可以使用十六进制或八进制数来代表整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = <span class=\"number\">0xA0F</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">2575</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number=<span class=\"number\">0o37</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number</span><br><span class=\"line\"><span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"float\">float</h5>\n<p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）<br>\n以下变量都表示为float类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number1 = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number2 = <span class=\"number\">13.10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number3 = <span class=\"number\">1.2e2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number4 = <span class=\"number\">2.5e+3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number5 = <span class=\"number\">9.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number6 = -<span class=\"number\">2.1E-5</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python对<strong>绝对值小于</strong><code>0.0001</code>的浮点数使用科学计数法显示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"number\">0.0001</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0.00001</span></span><br><span class=\"line\"><span class=\"number\">1e-05</span></span><br></pre></td></tr></table></figure>\n<p>另一个临界点是<code>1e+16</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1000000000000000.0</span>  </span><br><span class=\"line\"><span class=\"number\">1000000000000000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000000.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br></pre></td></tr></table></figure>\n<p>float的正常最多位为16位小数，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> / <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">0.3333333333333333</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>这里和临界点外有关的数据运算将会产生数据精度和数据损失的相关问题:<a href=\"#float%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98\">python float 精度问题</a></p>\n</blockquote>\n<h5 id=\"bool\">bool</h5>\n<p>bool用来表示真假的状态，<code>True</code>表示真，<code>False</code>表示假，注意<code>区分大小写</code>。<br>\nPython3中，bool是int的<code>子类</code>；</p>\n<blockquote>\n<p>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</p>\n</blockquote>\n<p><em>True</em> 和 <em>False</em> 可以和数字相加，<code>True==1</code> <code>False==0</code>会返回<em><strong>True</strong></em>，但可以通过<code>is</code>来判断类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(<span class=\"built_in\">bool</span>, <span class=\"built_in\">int</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">True</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">False</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span> <span class=\"keyword\">is</span> <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span> <span class=\"keyword\">is</span> <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True<br>\nTrue<br>\nTrue<br>\n2<br>\n1<br>\nFalse<br>\nFalse</p>\n</blockquote>\n<blockquote>\n<p>注意：从Python3.8开始，使用<em><strong>is</strong></em>和<em><strong>is not</strong></em>运算符时，会抛出<code>SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;?</code>语法警告信息。</p>\n</blockquote>\n<h5 id=\"complex\">complex</h5>\n<p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>\n<h4 id=\"数值运算\">数值运算</h4>\n<p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>\n表达式的语法很直白： <code>+</code>加法, <code>-</code>减法, <code>*</code>乘法, <code>/</code>除法, <code>//</code>整除, <code>%</code>取余, <code>**</code>乘方/幂</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释器形式,非解释器需要在表达式外加上print函数才能在输出到终端显示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> <span class=\"comment\"># 加法</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4.3</span> - <span class=\"number\">2</span> <span class=\"comment\"># 减法</span></span><br><span class=\"line\"><span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">7</span>  <span class=\"comment\"># 乘法</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> / <span class=\"number\">4</span>  <span class=\"comment\"># 除法，得到一个浮点数</span></span><br><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> // <span class=\"number\">4</span> <span class=\"comment\"># 除法，得到一个整数</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> % <span class=\"number\">3</span> <span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">5</span> <span class=\"comment\"># 乘方/幂</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br></pre></td></tr></table></figure>\n<p>在混合运算中，Python会把整型转换成浮点数后参加运算。<br>\n比如，整除返回的不一定是整数类型，它和分母分子的数据类型有关：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7.0</span>//<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span>/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字类型转换\">数字类型转换</h4>\n<p>Python各数字类型间支持互相转换。<br>\nPython的数字类型转化和创建都可以直接将<em><strong>数据类型作为函数名</strong></em>即可。</p>\n<p>注意强制类型转换可能会导致<em><strong>数据损失</strong></em>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">2.0</span>) </span><br><span class=\"line\"><span class=\"number\">2</span>   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"number\">1.0</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">float</span>(<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>+<span class=\"number\">2j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>+<span class=\"number\">0j</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">complex</span>(<span class=\"number\">1.2</span>,<span class=\"literal\">True</span>)</span><br><span class=\"line\">(<span class=\"number\">1.2</span>+<span class=\"number\">1j</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用函数\">常用函数</h4>\n<h5 id=\"Python的内置函数\"><a href=\"#Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\">Python的内置函数</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最大值</code>，如<code>max([1,2,3,5,1])</code>返回<code>5</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回给定参数的<code>最小值</code>，如<code>min([1,2,3,5,-1])</code>返回<code>-1</code>，参数可以为序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#round\">round()</a></td>\n<td style=\"text-align:left\">给定浮点数和保留位数，返回浮点数的<code>四舍五入</code>值，如<code>round(3.526,2)</code>返回3.53。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#abs\">abs()</a></td>\n<td style=\"text-align:left\">返回数字的<code>绝对值</code>，如<code>abs(-10)</code>返回<code>10</code>，如果参数是一个复数，则返回它的大小</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Python的math模块\"><a href=\"#Python-math%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python的math模块</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#fabs\">fabs()</a></td>\n<td style=\"text-align:left\">fabs也返回数字的<code>绝对值</code>，相较abs()更具局限性，只作用于浮点型或整型，<code>math.fabs(-10)</code>将返回10.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#ceil\">ceil()</a></td>\n<td style=\"text-align:left\">返回数字的<code>上入整数</code>，如<code>math.ceil(2.1)</code>返回<code>3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#floor\">floor()</a></td>\n<td style=\"text-align:left\">返回数字的<code>下舍整数</code>，如<code>math.floor(2.1)</code>返回<code>2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#exp\">exp()</a></td>\n<td style=\"text-align:left\">返回<code>e的x次幂</code>即指数(e^x)，如<code>math.exp(1)</code>返回2.718281828459045</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#log\">log()</a></td>\n<td style=\"text-align:left\">返回<code>给定底数的对数值</code>，如<code>math.log(100,10)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#log10\">log10()</a></td>\n<td style=\"text-align:left\">返回<code>以10为底的对数值</code>，如<code>math.log10(100)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#modf\">modf()</a></td>\n<td style=\"text-align:left\">返回数字的<code>整数和小数部分</code>，如<code>math.modf(-100.03)</code>返回(-0.030000000000001137, -100.0)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#pow\">pow()</a></td>\n<td style=\"text-align:left\">返回<code>幂运算结果</code>，如<code>math.pow(2,3)</code>返回8.0，效果等同<code>**</code>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sqrt\">sqrt()</a></td>\n<td style=\"text-align:left\">返回数字的<code>平方根</code>，如<code>math.sqrt(4)</code>返回2.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>三角函数</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#sin\">sin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正弦值</code>，如<code>math.sin(math.pi/2)</code>返回1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#asin\">asin()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正弦弧度值</code>，如<code>math.asin(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#cos\">cos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>余弦值</code>，如<code>math.cos(math.pi)</code>返回-1.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#acos\">acos()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反余弦弧度值</code>，如<code>math.acos(-1)</code>返回3.141592653589793</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#tan\">tan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>正切值</code>，如<code>math.tan(math.pi/4)</code>返回0.9999999999999999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#atan\">atan()</a></td>\n<td style=\"text-align:left\">返回弧度的<code>反正切弧度值</code>，如<code>math.atan(0)</code>返回0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#degress\">degress()</a></td>\n<td style=\"text-align:left\">将<code>弧度转换为角度</code>,如<code>math.degrees(math.pi/2)</code>，返回90.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#radians\">radians()</a></td>\n<td style=\"text-align:left\">将<code>角度转换为弧度</code>,如<code>math.radians(180)</code>，返回3.141592653589793</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Python的random模块\"><a href=\"#Python-random%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python的random模块</a></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:left\">返回值 / 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#choice\">choice()</a></td>\n<td style=\"text-align:left\">从<code>序列</code>的元素中<code>随机挑选一个元素</code>，比如<code>random.choice(range(10))</code>，返回从0到9中随机挑选的一个整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#randrange\">randrange()</a></td>\n<td style=\"text-align:left\"><code>random.randrange([start,]stop[,step])</code>从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1，如<code>random.randrange(1,100,2)</code>表示从1-100中选取一个奇数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#random\">random()</a></td>\n<td style=\"text-align:left\">在<code>[0,1)范围</code>内，随机生成下一个实数。<code>random.random()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#uniform\">uniform()</a></td>\n<td style=\"text-align:left\">在<code>[x,y]范围</code>内，随机生成下一个实数。<code>random.uniform(x,y)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#seed\">seed()</a></td>\n<td style=\"text-align:left\"><code>改变随机数生成器的种子</code>seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。<code>random.seed()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#shuffle\">shuffle()</a></td>\n<td style=\"text-align:left\">将<code>序列</code>的所有元素<code>随机排序</code>。<code>random.shuffle(list)</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"相关常量\">相关常量</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pi</td>\n<td style=\"text-align:left\">圆周率，数学常量 pi <code>math.pi = 3.141592653589793</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">自然常数，数学常量 e <code>math.e = 2.718281828459045</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"Tuple元组\">Tuple元组</h3>\n<p>Python中元组是不可变的数据类型，即元组中的元素不能被修改。</p>\n<h4 id=\"元组的创建\">元组的创建</h4>\n<p>元组的创建方式有两种：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接使用小括号创建，元素间使用逗号隔开</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元组中的元素类型可以混合</span></span><br><span class=\"line\">tuple2 = (<span class=\"number\">1</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1.0</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>), [<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tuple方法创建</span></span><br><span class=\"line\"><span class=\"built_in\">list</span> = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">tuple3 = <span class=\"built_in\">tuple</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>创建<em><strong>空元组</strong></em>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple1 = ()</span><br><span class=\"line\">tuple2 = <span class=\"built_in\">tuple</span>()</span><br></pre></td></tr></table></figure>\n<p>创建<code>只有一个元素</code>的元组时，需要在元素后添加一个<strong>逗号</strong><code>,</code> ， 否则括号会被当成运算符使用！！:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple1))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">tuple</span>&#x27;&gt;   # 加上逗号，类型为元组</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">&gt;&gt;&gt; tuple2 = (1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tuple2))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">int</span>&#x27;&gt;   # 不加逗号，类型为整型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"元组的索引和截取\">元组的索引和截取</h4>\n<p>因为元组也是一个序列，所以我们可以使用<a href=\"#%E5%88%87%E7%89%87%E8%BF%90%E7%AE%97%E7%AC%A6\"><code>切片运算符</code></a>来进行索引和截取：</p>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test = (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>6<br>\n3</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple_test =  (<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取元组从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取元组索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取元组第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(tuple_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>(6, 8, 9, 7, 2, 23, 1, 1, 13)<br>\n(8, 9, 7, 2, 23, 1, 1, 13)<br>\n(8, 9)<br>\n(8, 9, 7, 2, 23, 1, 1)<br>\n(8, 7, 23, 1)<br>\n()<br>\n(13, 1, 1, 23, 2, 7, 9)</p>\n</blockquote>\n<h4 id=\"元组运算\">元组运算</h4>\n<p>元组运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>) + (<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>(2, 6, 9, 8, 2, 1, 6, 11)</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>((<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>) * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%85%83%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E6%88%AA%E5%8F%96\">元组的索引和截取</a></p>\n<h4 id=\"常用函数-2\">常用函数</h4>\n<br>\n<table>\n<thead>\n<tr>\n<th>\n序号\n</th>\n<th>\n方法及描述\n</th>\n<th>\n实例\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n1\n</td>\n<td>\n<a href = \"#len\">len(tuple)</a><br>计算元组元素个数\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(tuple1)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n<a href = \"#max\">max(tuple)</a><br>返回元组中元素的最大值\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">max</span>(tuple2)</span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n<a href = \"#min\">min(tuple)</a><br>返回元组中元素的最小值\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple3 = (<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">min</span>(tuple3)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\n<a href = \"#tuple\">tuple(iterable)</a><br>将可迭代系列转换为元组\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list1= [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1=<span class=\"built_in\">tuple</span>(list1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1</span><br><span class=\"line\">(<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"String字符串\">String字符串</h3>\n<p>Python string是不可变的数据类型。</p>\n<h4 id=\"字符串创建\">字符串创建</h4>\n<p>我们使用引号<code>( ' 或 &quot; )</code>来创建字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&quot;a1&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;b5555&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>python中没有传统的单字符char类型，在Python中单字符也作为字符串使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>&lt;class ‘str’&gt;</p>\n</blockquote>\n<p>还可以使用三引号<code>( &quot;&quot;&quot; 或 '''  )</code>来创建多行字符串<br>\n三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para_str = <span class=\"string\">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class=\"line\"><span class=\"string\">多行字符串可以使用制表符</span></span><br><span class=\"line\"><span class=\"string\">TAB ( \\t )。</span></span><br><span class=\"line\"><span class=\"string\">也可以使用换行符 [ \\n ]。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (para_str)</span><br></pre></td></tr></table></figure>\n<p>以上代码的结果为：</p>\n<blockquote>\n<p>这是一个多行字符串的实例<br>\n多行字符串可以使用制表符<br>\nTAB ( \t )。<br>\n也可以使用换行符 [<br>\n]。</p>\n</blockquote>\n<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的<code>WYSIWYG（所见即所得）</code>格式的。<br>\n一个典型的用例是，当你需要一块<code>HTML或者SQL</code>时，这时用字符串组合，特殊字符串转义将会非常的繁琐。而使用三引号多行字符就可以轻松完成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">errHTML = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span></span><br><span class=\"line\"><span class=\"string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/BODY&gt;&lt;/HTML&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users (  </span></span><br><span class=\"line\"><span class=\"string\">login VARCHAR(8), </span></span><br><span class=\"line\"><span class=\"string\">uid INTEGER,</span></span><br><span class=\"line\"><span class=\"string\">prid INTEGER)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串访问\">字符串访问</h4>\n<p>字符串的访问和元组类似，使用切片运算和索引定位。</p>\n<blockquote>\n<p>字符串可以被看成是<code>特殊的元组</code></p>\n</blockquote>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test = <span class=\"string\">&quot;sajldfj*(&amp;5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>‘j’<br>\n‘5’</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_test =  <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取字符串从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取字符串索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[:-<span class=\"number\">1</span>])     <span class=\"comment\"># 从字符串起始截取到倒数第一个元素前的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取字符串第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str_test[::-<span class=\"number\">1</span>])      <span class=\"comment\"># 逆向输出字符串</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>hello world<br>\nello world<br>\nel<br>\nhello worl<br>\nello worl<br>\nel ol</p>\n<p>dlrow oll<br>\ndlrow olleh</p>\n</blockquote>\n<h4 id=\"字符串运算\">字符串运算</h4>\n<p>字符串运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello&quot;</span>+<span class=\"string\">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;a&quot;</span> * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>aaaa</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AE%BF%E9%97%AE\">字符串访问</a></p>\n<h4 id=\"字符串格式化\">字符串格式化</h4>\n<h5 id=\"转义字符\">转义字符</h5>\n<p>普通字符串中使用反斜杠<code>(\\)</code>做特殊字符的转义字符：<br>\n更多请见下文<a href=\"#Python%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\">Python转义字符</a></p>\n<h5 id=\"r-string\">r-string</h5>\n<p>r-string将输出<code>原始字符串</code>，转义字符将不生效。<br>\n使用方法是在字符串引号前加上 <code>r/R</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;row string&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r&quot;\\n jh\\nj&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>row string<br>\n\\n jh\\nj</p>\n</blockquote>\n<h5 id=\"级联\">级联</h5>\n<p>Python按字面意义级联字符串，如 &quot;this &quot; &quot;is &quot; “string” 会被自动转换为 this is string。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;this &quot;</span> <span class=\"string\">&quot;is &quot;</span> <span class=\"string\">&quot;string&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>this is string</p>\n</blockquote>\n<h5 id=\"格式\">%格式</h5>\n<p>%格式化的基本用法是将一个值插入到一个有字符串格式符的位置中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;插入点1： %s 。插入点2： %d 。&quot;</span> % (<span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">222</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>插入点1： string 。插入点2： 222 。</p>\n</blockquote>\n<p><em><strong>python字符串格式化符号</strong></em></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:left\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:left\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:left\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:left\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:left\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:left\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:left\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:left\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>格式化操作符辅助指令</strong></em><br>\n格式化操作符位于%和格式化符号字母中间。    ex. %.2f</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">用做左对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><sp></td>\n<td style=\"text-align:left\">在正数前面显示空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:left\">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">‘%%‘输出一个单一的’%’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(var)</td>\n<td style=\"text-align:left\">映射变量(字典参数)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m.n.</td>\n<td style=\"text-align:left\">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"format函数\">format函数</h5>\n<p>Python格式化字符串的函数<a href=\"#format\"><code>str.format()</code></a>，它增强了字符串格式化的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>world hello world</p>\n</blockquote>\n<p>更多使用方法请看<a href=\"#format\">format()</a></p>\n<h5 id=\"f-string\">f-string</h5>\n<p>f-string 是 python3.6 之后版本添加的，f-string 称之为字面量格式化字符串，是新的格式化字符串的语法。<br>\nf-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为:</p>\n<blockquote>\n<p>a = 56</p>\n</blockquote>\n<p>在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;x+<span class=\"number\">1</span>=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>x+1=2</p>\n</blockquote>\n<h4 id=\"常用函数-3\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#encode\">encode()</a></td>\n<td style=\"text-align:left\"><code>str.encode(encoding='UTF-8',errors='strict')</code>以 encoding 指定的编码格式<code>编码字符串</code>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#decode\">decode()</a></td>\n<td style=\"text-align:left\"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode()方法来<code>解码</code>给定的 <code>bytes</code> 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最大的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回字符串的<code>最小的字母</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>检查\\检测 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>str.count(s,beg=0,end=len(str))</code>返回某段子字符串在字符串里的<code>出现次数</code>，beg和end可以指定范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#startswith\">startswith()</a></td>\n<td style=\"text-align:left\"><code>str.startswith(substr,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以substr开始</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#endswith\">endswith()</a></td>\n<td style=\"text-align:left\"><code>str.endswith(suffix,beg=0,end=len(str))</code>检查字符串在指定范围内<code>是否以suffix结束</code>，如果是返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#find\">find()</a></td>\n<td style=\"text-align:left\"><code>str.find(s,beg=0,end=len(str))</code>检测在指定范围内str中<code>是否包含子字符串</code>s，如果成功则<code>返回开始的索引值</code>，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#rfind\">rfind()</a></td>\n<td style=\"text-align:left\"><code>str.rfind(s,beg=0,end=len(str))</code>类似于find()函数，不过是从<code>右边开始查找</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>str.index(s,beg=0,end=len(str))</code>和find()方法一样，用于检测<code>是否包含子字符串</code>，不同的是如果不包含则会报一个异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rindex\">rindex()</a></td>\n<td style=\"text-align:left\"><code>str.rindex(s,beg=0,end=len(str))</code>类似于 index()，不过是从<code>右边开始</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#isalnum\">isalnum()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或数字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isalpha\">isalpha()</a></td>\n<td style=\"text-align:left\">如果字符串至少有一个字符并且<code>所有字符都是字母或中文字</code>则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#isdigit\">isdigit()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#isnumeric\">isnumeric()</a></td>\n<td style=\"text-align:left\">如果字符串<code>只包含数字字符</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#isspace\">isspace()</a></td>\n<td style=\"text-align:left\">如果字符串中<code>只包含空白</code>则返回True，否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#isdecimal\">isdecimal()</a></td>\n<td style=\"text-align:left\">检查字符串是否<code>只包含十进制字符</code>，如果是返回True，否则返回False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#islower\">islower()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是小写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#isupper\">isupper()</a></td>\n<td style=\"text-align:left\">如果字符串中包含至少一个区分大小写的字符，并且所有这些<code>(区分大小写的)字符都是大写</code>，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#istitle\">istitle()</a></td>\n<td style=\"text-align:left\">检查字符串<code>是否是标题化</code>的，是则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>字符串操作 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#replace\">replace()</a></td>\n<td style=\"text-align:left\"><code>str.replace(old,new[,max])</code>把将字符串中的<code>old替换成new</code>,如果max指定，则替换不超过max次。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#join\">join()</a></td>\n<td style=\"text-align:left\"><code>str.join(sequence)</code>将<code>序列</code>中的元素<code>以指定的字符连接</code>生成一个新的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#split\">split()</a></td>\n<td style=\"text-align:left\"><code>str.split(s=&quot;&quot;, num=str.count(s))</code>通过<code>指定分隔符对字符串进行切片</code>，返回分割后的字符串列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#splitlines\">splitlines()</a></td>\n<td style=\"text-align:left\"><code>str.([keependsplitliness])</code>按照<code>行分隔</code>(‘\\r’, ‘\\r\\n’, \\n’)，返回一个包含各行作为元素的列表，如果参数 keepends为False，则不包含换行符，如果为True，则保留换行符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#lstrip\">lstrip()</a></td>\n<td style=\"text-align:left\"><code>str.lstrip(chars=&quot;&quot;)</code>将<code>截掉字符串左边/开始的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#strip\">strip()</a></td>\n<td style=\"text-align:left\"><code>str.strip(chars=&quot;&quot;)</code>将<code>截掉字符串两端的指定字符</code>，即在字符串上执行lstrip()和rstrip()。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#rstrip\">rstrip()</a></td>\n<td style=\"text-align:left\"><code>str.rstrip(chars=&quot;&quot;)</code>将<code>截掉字符串右边/末尾的指定字符</code>，默认为空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#caplitalize\">capitalize()</a></td>\n<td style=\"text-align:left\">将字符串的<code>第一个字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#lower\">lower()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有大写字符</code>转换为<code>小写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#upper\">upper()</a></td>\n<td style=\"text-align:left\">将字符串的<code>所有小写字符</code>转换为<code>大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#swapcase\">swapcase()</a></td>\n<td style=\"text-align:left\">将字符串中<code>大写转换为小写，小写转换为大写</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#title\">title()</a></td>\n<td style=\"text-align:left\">返回<code>&quot;标题化&quot;</code>的字符串,就是说所有单词都是以大写开始，其余字母均为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#ljust\">ljust()</a></td>\n<td style=\"text-align:left\"><code>str.ljust(width,fillchar)</code>返回一个指定宽度为width且<code>左对齐右边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#center\">center()</a></td>\n<td style=\"text-align:left\"><code>str.center(width,fillchar)</code>返回一个指定宽度为width且<code>居中两边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#rjust\">rjust()</a></td>\n<td style=\"text-align:left\"><code>str.rjust(width,fillchar)</code>返回一个指定宽度为width且<code>右对齐左边填充</code>fillchar的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#zfill\">zfill()</a></td>\n<td style=\"text-align:left\"><code>str.zfill(width)</code>返回一个指定宽度为width且<code>右对齐左边填充0</code>的字符串，等价于rjust(width,‘0’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#expandtabs\">expandtabs()</a></td>\n<td style=\"text-align:left\"><code>str.expandtabs(tabsize=8)</code>把字符串中的<code>tab符号转为空格</code>，tab符号默认的空格数是8。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\"><a href=\"#maketrans\">maketrans()</a></td>\n<td style=\"text-align:left\"><code>str.maketrans(intab,outtab)</code>用于<code>创建字符映射的转换表</code>，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\"><a href=\"#translate\">translate()</a></td>\n<td style=\"text-align:left\"><code>str.translate(table, deletechars=&quot;&quot;)</code>根据给出的<code>表转换</code>str的字符, 要过滤掉的字符放到 deletechars 参数中</td>\n</tr>\n</tbody>\n</table>\n<!-- TODO: string常用函数 -->\n<h4 id=\"Python转义字符\">Python转义字符</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">转义字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\(在行尾时)</td>\n<td style=\"text-align:left\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\</td>\n<td style=\"text-align:left\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\’</td>\n<td style=\"text-align:left\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\&quot;</td>\n<td style=\"text-align:left\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\a</td>\n<td style=\"text-align:left\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">退格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\000</td>\n<td style=\"text-align:left\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\yyy</td>\n<td style=\"text-align:left\">八进制数，y代表0~7的字符，例如：\\012 代表换行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xyy</td>\n<td style=\"text-align:left\">十六进制数，以\\x开头,y代表的字符，例如\\x0a 代表换行</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"List列表\">List列表</h3>\n<p>List是Python中被频繁使用的数据类型，列表的元素可以存储不同的数据类型，甚至可以包含列表元组等。<br>\n列表是可变的数据类型，即其内的数据可以被改变。</p>\n<h4 id=\"创建列表\">创建列表</h4>\n<p>创建列表的方式有三种：</p>\n<ul>\n<li>使用方括号<code>[]</code>创建</li>\n<li>使用<code>list()</code>函数创建</li>\n<li>使用<code>推导式</code>创建(更多推导式相关请看<a href=\"#Python%E6%8E%A8%E5%AF%BC%E5%BC%8F\">Python推导式</a>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst1 = [<span class=\"number\">1</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"number\">2.589</span>,(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>)]</span><br><span class=\"line\">lst2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">seq = (<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">lst3 = <span class=\"built_in\">list</span>(seq)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst1,<span class=\"built_in\">type</span>(lst1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst2,<span class=\"built_in\">type</span>(lst2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst3,<span class=\"built_in\">type</span>(lst3))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建</span></span><br><span class=\"line\">lst4 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x &lt;= <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst4)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[1, ‘7’, 2.589, (1, ‘2’)] &lt;class ‘list’&gt;<br>\n[] &lt;class ‘list’&gt;<br>\n[1, 5, 9, ‘7’] &lt;class ‘list’&gt;<br>\n[16, 25, 81, 64]</p>\n</blockquote>\n<h4 id=\"列表的嵌套\">列表的嵌套</h4>\n<p>列表是可以嵌套的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>],</span><br><span class=\"line\">    [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>],</span><br><span class=\"line\">    [<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>若要访问该列表的元素只需逐层访问即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(matrix[<span class=\"number\">2</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> row:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>4<br>\n1 2 5<br>\n2 7 8<br>\n4 5 6 7 9<br>\n2 9 7 11</p>\n</blockquote>\n<h4 id=\"列表的索引和截取\">列表的索引和截取</h4>\n<p>因为列表也是一个序列，所以我们可以使用<a href=\"#%E5%88%87%E7%89%87%E8%BF%90%E7%AE%97%E7%AC%A6\"><code>切片运算符</code></a>来进行索引和截取：</p>\n<p><em><strong>索引</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">2</span>])   <span class=\"comment\"># 读取第3个元素 / 读取索引为2的元素</span></span><br><span class=\"line\"><span class=\"comment\"># 逆向索引</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>])   <span class=\"comment\"># 读取倒数第1个元素</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>6<br>\n3</p>\n</blockquote>\n<p><em><strong>截取</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_test =  [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:])     <span class=\"comment\"># 截取列表从索引为1的元素开始后的所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:<span class=\"number\">3</span>])    <span class=\"comment\"># 截取列表索引区间[1,3)，即第二到第三个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>])    <span class=\"comment\"># 截取列表第二到倒数第二个元素间的片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:<span class=\"number\">2</span>])   <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长的趋势截取，此时步长为2，即隔位截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[<span class=\"number\">1</span>:-<span class=\"number\">1</span>:-<span class=\"number\">1</span>])  <span class=\"comment\"># 从1到-1索引元素方向，按每次索引递增步长=-1的趋势截取，很明显此时无截取片段</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>:<span class=\"number\">1</span>:-<span class=\"number\">1</span>])   <span class=\"comment\"># 从-1到1索引元素方向，按每次索引递增步长=-1的趋势截取，即为反向截取</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list_test[-<span class=\"number\">1</span>::-<span class=\"number\">1</span>])   <span class=\"comment\"># 第二个参数为空，表示移动到列表末尾</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[6, 8, 9, 7, 2, 23, 1, 1, 13]<br>\n[8, 9, 7, 2, 23, 1, 1, 13]<br>\n[8, 9]<br>\n[8, 9, 7, 2, 23, 1, 1]<br>\n[8, 7, 23, 1]<br>\n[]<br>\n[13, 1, 1, 23, 2, 7, 9]<br>\n[13, 1, 1, 23, 2, 7, 9, 8, 6]</p>\n</blockquote>\n<h4 id=\"修改列表元素\">修改列表元素</h4>\n<p>因为列表属于可变的数据类型，所以其元素可以修改：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">lst[<span class=\"number\">1</span>] = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[1,7,6]</p>\n</blockquote>\n<p><em><strong>使用del</strong></em>删除列表元素：</p>\n<p>使用del可以根据索引删除一个元素或者一个切割</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[<span class=\"number\">1</span>:-<span class=\"number\">3</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> lst[:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[4, 5, 9, 8, 3, 1, 2, 0, 11]<br>\n[4, 9, 3, 2, 0, 11]<br>\n[]</p>\n</blockquote>\n<h4 id=\"列表运算\">列表运算</h4>\n<p>列表运算满足<a href=\"#%E5%BA%8F%E5%88%97%E8%BF%90%E7%AE%97\">序列运算规则</a>：</p>\n<p><em><strong><code>+运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>] + [<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">11</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[2, 6, 9, 8, 2, 1, 6, 11]</p>\n</blockquote>\n<p><em><strong><code>*运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>] * <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’]</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<p><em><strong><code>切片运算</code></strong></em><br>\n见上文的<a href=\"#%E5%88%97%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E6%88%AA%E5%8F%96\">列表的索引和截取</a></p>\n<h4 id=\"列表遍历\">列表遍历</h4>\n<p>列表遍历将使用<a href=\"#Python%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\">循环语句</a>.</p>\n<!--TODO: enumerate()  -->\n<blockquote>\n<p>使用<a href=\"#enumerate\">enumerate()</a>函数可以得到索引和对应值</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(lst):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,value)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>1 2 7 3 6 4<br>\n1 2<br>\n2 7<br>\n3 3<br>\n4 6<br>\n5 4</p>\n</blockquote>\n<!--TODO: zip()  -->\n<p>如果要同时遍历多个列表，可以使用<a href=\"#zip\">zip()</a>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;quest&#x27;</span>, <span class=\"string\">&#x27;favorite color&#x27;</span>]</span><br><span class=\"line\">answers = [<span class=\"string\">&#x27;lancelot&#x27;</span>, <span class=\"string\">&#x27;the holy grail&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q, a <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(questions, answers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class=\"built_in\">format</span>(q, a))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>What is your name?  It is lancelot.<br>\nWhat is your quest?  It is the holy grail.<br>\nWhat is your favorite color?  It is blue.</p>\n</blockquote>\n<h4 id=\"常用函数-4\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\">返回列表的<code>长度</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#max\">max()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最大的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#min\">min()</a></td>\n<td style=\"text-align:left\">返回列表的<code>最小的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">-----</td>\n<td style=\"text-align:left\"><em><strong>列表操作 方法</strong></em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#reverse\">reverse()</a></td>\n<td style=\"text-align:left\"><code>lst.reverse()</code>,<code>反向列表</code>中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#append\">append()</a></td>\n<td style=\"text-align:left\"><code>lst.append(obj)</code>,在lst列表<code>末尾添加</code>新的对象obj</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>lst.pop(index=-1)</code>,<code>移除列表中的一个元素</code>（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#count\">count()</a></td>\n<td style=\"text-align:left\"><code>lst.count(obj)</code>,统计obj<code>元素</code>在列表lst中<code>出现的次数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#extend\">extend()</a></td>\n<td style=\"text-align:left\"><code>lst.extend(seq)</code>,在lst<code>列表末尾</code>一次性<code>追加另一个序列</code>seq中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#index\">index()</a></td>\n<td style=\"text-align:left\"><code>lst.index(obj)</code>,从lst列表中找出obj值的<code>第一个匹配项的索引</code>位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>lst.remove(obj)</code>,<code>移除</code>列表中某个值的<code>第一个匹配项</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#insert\">insert()</a></td>\n<td style=\"text-align:left\"><code>lst.insert(index,obj)</code>,将对象obj<code>插入列表指定索引位置</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#sort\">sort()</a></td>\n<td style=\"text-align:left\"><code>lst.sort(key=None,reverse=False)</code>,对原列表进行<code>排序</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>lst.clear()</code>,<code>清空列表</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>lst.copy()</code>,<code>复制列表</code></td>\n</tr>\n</tbody>\n</table>\n<!-- TODO: list常用函数 -->\n<hr>\n<h3 id=\"Set集合\">Set集合</h3>\n<p>集合（set）是一个无序的不重复元素序列。<br>\n在Python中是可变的数据结构之一。</p>\n<h4 id=\"创建集合\">创建集合</h4>\n<p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合</p>\n<blockquote>\n<p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n</blockquote>\n<p>基本功能是进行成员关系测试和删除重复元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">set2 = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">63</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{1, 5, 6}<br>\n{1, 2, 5, 7, 63}</p>\n</blockquote>\n<p>集合还可以通过推导式来创建(更多推导式相关请看<a href=\"#Python%E6%8E%A8%E5%AF%BC%E5%BC%8F\">Python推导式</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;x ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{4, 16, 36}</p>\n</blockquote>\n<h4 id=\"操作集合\">操作集合</h4>\n<h5 id=\"添加元素\">添加元素</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.add(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update(&#123;<span class=\"number\">11</span>,<span class=\"number\">13</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.update([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>],[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>{1, 2, 5, 8, 9}<br>\n{1, 2, 5, 8, 9}<br>\n{1, 2, 5, 8, 9, 11, 13}<br>\n{1, 2, 5, ‘3’, 8, 9, 11, 13, ‘4’, ‘2’, ‘1’}</p>\n</blockquote>\n<h5 id=\"移除元素\">移除元素</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set1 = &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set1.remove(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.discard(<span class=\"string\">&#x27;4&#x27;</span>)   <span class=\"comment\"># 使用discard移除不存在的元素不会发生错误</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">x = set1.pop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)</span><br><span class=\"line\"></span><br><span class=\"line\">set1.remove(<span class=\"string\">&#x27;4&#x27;</span>)  <span class=\"comment\"># 使用remove移除不存在的元素会发生错误</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{2, 6, 7, 8, 9}<br>\n{2, 6, 7, 8, 9}<br>\n2<br>\n{6, 7, 8, 9}<br>\nTraceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n----&gt; set1.remove(‘4’)</p>\n<p>KeyError: ‘4’</p>\n</blockquote>\n<h4 id=\"集合运算\">集合运算</h4>\n<p><em><strong><code>数学集合运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;abracadabra&#x27;</span>)</span><br><span class=\"line\">b = <span class=\"built_in\">set</span>(<span class=\"string\">&#x27;alacazam&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a-b = <span class=\"subst\">&#123;a-b&#125;</span>&quot;</span>)   <span class=\"comment\"># 差集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a|b = <span class=\"subst\">&#123;a|b&#125;</span>&quot;</span>)   <span class=\"comment\"># 并集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a&amp;b = <span class=\"subst\">&#123;a&amp;b&#125;</span>&quot;</span>)   <span class=\"comment\"># 交集</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a^b = <span class=\"subst\">&#123;a^b&#125;</span>&quot;</span>)   <span class=\"comment\"># 异或集</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’, ‘b’, ‘d’, ‘r’, ‘c’}<br>\n{‘a’, ‘c’, ‘l’, ‘m’, ‘z’}<br>\na-b = {‘r’, ‘d’, ‘b’}<br>\na-b = {‘a’, ‘b’, ‘d’, ‘r’, ‘c’, ‘l’, ‘m’, ‘z’}<br>\na-b = {‘c’, ‘a’}<br>\na-b = {‘l’, ‘b’, ‘d’, ‘r’, ‘m’, ‘z’}</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>True</p>\n</blockquote>\n<h4 id=\"常用函数-5\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#add\">add()</a></td>\n<td style=\"text-align:left\"><code>set1.add(x)</code>为集合<code>添加元素</code>x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>set1.clear()</code> <code>清空集合</code>中的所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>set1.copy()</code>返回一个集合的<code>拷贝</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#difference\">difference()</a></td>\n<td style=\"text-align:left\"><code>set1.difference(set2)</code>返回多个<code>集合的差集</code>,即包含在set1，但不在set2的元素集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#difference_update\">difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.difference_update(set2)</code>用于<code>移除两个集合中都存在的元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#discard\">discard()</a></td>\n<td style=\"text-align:left\"><code>set1.discard(value)</code> 用于<code>移除指定的集合元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#intersection\">intersection()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection(set2[,...])</code> 返回集合的<code>交集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#intersection_update\">intersection_update()</a></td>\n<td style=\"text-align:left\"><code>set1.intersection_update(set2[,...])</code> 用于将<code>交集更新</code>到原集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#isdisjoint\">isdisjoint()</a></td>\n<td style=\"text-align:left\"><code>set1.sidisjoint(set2)</code> 判断两个集合<code>是否包含相同的元素</code>，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#issubset\">issubset()</a></td>\n<td style=\"text-align:left\"><code>set1.issubset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>子集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#issuperset\">issuperset()</a></td>\n<td style=\"text-align:left\"><code>set1.issuperset(set2)</code> 判断指定集合<code>是否为</code>该方法参数集合的<code>父集</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>set1.pop()</code> 用于<code>随机移除</code>一个元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\"><a href=\"#remove\">remove()</a></td>\n<td style=\"text-align:left\"><code>set1.remove(x)</code> <code>移除指定元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference\">symmetric_difference()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference(set2)</code> 返回两个集合中<code>不重复的元素集合</code>，即会移除两个集合中都存在的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\"><a href=\"#symmetric_difference_update\">symmetric_difference_update()</a></td>\n<td style=\"text-align:left\"><code>set1.symmetric_difference_update(set2)</code> 返回两个集合中<code>不重复的元素集合并更新至原集合</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\"><a href=\"#union\">union()</a></td>\n<td style=\"text-align:left\"><code>set1.union(set2)</code> 返回两个集合的<code>并集</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>set1.update(x)</code> 给集合<code>添加元素</code></td>\n</tr>\n</tbody>\n</table>\n<!-- TODO： set常用函数 -->\n<hr>\n<h3 id=\"Dictionary字典\">Dictionary字典</h3>\n<blockquote>\n<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n</blockquote>\n<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>\n<p><code>键(key)必须使用不可变类型。</code></p>\n<p>在同一个字典中，键(key)必须是唯一的。</p>\n<h4 id=\"创建字典\">创建字典</h4>\n<p>创建字典的方法有三种：</p>\n<ul>\n<li>使用花括号<code>&#123;&#125;</code>创建</li>\n<li>使用<code>dict()</code>方法创建</li>\n<li>使用<code>推导式</code>创建</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;3&quot;</span>, <span class=\"number\">1</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接从键值对序列中构建字典</span></span><br><span class=\"line\">dict2 = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;Baidu&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;Google&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;Taobao&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">dict3 = <span class=\"built_in\">dict</span>(Baidu=<span class=\"number\">1</span>, Google=<span class=\"number\">2</span>, Taobao=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用推导式创建字典</span></span><br><span class=\"line\">dict4 = &#123;x: x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建空字典</span></span><br><span class=\"line\">dict5 = &#123;&#125;</span><br><span class=\"line\">dict6 = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict3)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict4)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict5)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict6)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘1’: ‘2’, ‘code’: ‘3’, 1: 5}<br>\n{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>\n{‘Baidu’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>\n{2: 4, 4: 16, 6: 36}<br>\n{}<br>\n{}</p>\n</blockquote>\n<h4 id=\"字典操作\">字典操作</h4>\n<p><em><strong><code>访问值</code></strong></em><br>\n要访问字典的值只需要将键值填入字典后的方括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1</p>\n</blockquote>\n<p>如果访问的键值不存在，则会返回错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>KeyError                                  Traceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n1 dict1 = {‘a’:1,‘b’:2}<br>\n----&gt; 2 print(dict1[‘c’])</p>\n<p>KeyError: ‘c’</p>\n</blockquote>\n<p><em><strong><code>修改/创建值</code></strong></em><br>\n要修改字典的值，直接将对应的键值修改即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<p>如果该键不存在，则将直接创建这个键值对：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">dict1[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’: 1, ‘b’: 2, ‘c’: 3}</p>\n</blockquote>\n<p><em><strong><code>删除值</code></strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除键</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1[<span class=\"string\">&#x27;a&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空字典</span></span><br><span class=\"line\">dict1.clear()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘b’: 2, ‘c’: 3}<br>\n{}<br>\n----------------------------------------------------<br>\nNameError                                 Traceback (most recent call last)<br>\n<a href=\"http://test.py\">test.py</a> in &lt;module&gt;<br>\n11 # 删除字典<br>\n12 del dict1<br>\n—&gt; 13 print(dict1)</p>\n<p>NameError: name ‘dict1’ is not defined</p>\n</blockquote>\n<p><em><strong><code>in运算</code></strong></em><br>\n判断key是否在字典中已存在.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict1 =&#123;<span class=\"string\">&#x27;k&#x27;</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> dict1)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>False</p>\n</blockquote>\n<h4 id=\"常用函数-6\">常用函数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">返回值/描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><a href=\"#len\">len()</a></td>\n<td style=\"text-align:left\"><code>len(dict)</code> 求字典的<code>键值对个数</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><a href=\"#clear\">clear()</a></td>\n<td style=\"text-align:left\"><code>dict.clear()</code> <code>清空字典</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><a href=\"#copy\">copy()</a></td>\n<td style=\"text-align:left\"><code>dict.copy()</code> 返回一个字典的<code>浅复制</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><a href=\"#fromkeys\">fromkeys()</a></td>\n<td style=\"text-align:left\"><code>dict.fromkeys(seq[,val])</code> 返回一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值，默认为None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><a href=\"#get\">get()</a></td>\n<td style=\"text-align:left\"><code>dict.get(key,default=None)</code> 返回<code>指定键的值</code>，如果<code>键不在字典中返回</code> default 设置的<code>默认值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><a href=\"#items\">items()</a></td>\n<td style=\"text-align:left\"><code>dict.items()</code> 以列表返回一个视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><a href=\"#keys\">keys()</a></td>\n<td style=\"text-align:left\"><code>dict.keys()</code> 返回一个键视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><a href=\"#values\">values()</a></td>\n<td style=\"text-align:left\"><code>dict.values()</code> 返回一个值视图对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"><a href=\"#setdefault\">setdefault()</a></td>\n<td style=\"text-align:left\"><code>dict.setdefault()</code> 和get()类似, 但如果<code>键不存在于字典中</code>，将会<code>添加键</code>并将<code>值设为default</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\"><a href=\"#update\">update()</a></td>\n<td style=\"text-align:left\"><code>dict.update(dict2)</code> 把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\"><a href=\"#pop\">pop()</a></td>\n<td style=\"text-align:left\"><code>dict.pop(key[,default])</code> 删除字典给定键 key 所对应的值，<code>返回值为被删除的值</code>。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\"><a href=\"#popitem\">popitem()</a></td>\n<td style=\"text-align:left\"><code>dict.popitem()</code> 随机返回并删除字典中的最后一对键和值。</td>\n</tr>\n</tbody>\n</table>\n<!-- TODO:dict常用函数 -->\n<hr>\n<h2 id=\"Python运算符\">Python运算符</h2>\n<p>Python的运算符可以分为以下几类：</p>\n<ul>\n<li><a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算术运算符</a></li>\n<li><a href=\"#%E6%AF%94%E8%BE%83(%E5%85%B3%E7%B3%BB)%E8%BF%90%E7%AE%97%E7%AC%A6\">比较(关系)运算符</a></li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a></li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a></li>\n<li><a href=\"#%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6\">成员运算符</a></li>\n<li><a href=\"#%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6\">身份运算符</a></li>\n</ul>\n<blockquote>\n<p><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\">运算符优先级</a></p>\n</blockquote>\n<h3 id=\"算术运算符\">算术运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">取模</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:left\">幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:left\">整除</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"比较-关系-运算符\">比较(关系)运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:left\">等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:left\">大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:left\">小于等于</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"赋值运算符\">赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符</td>\n<td style=\"text-align:left\">将运算符右侧的值赋予左侧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:left\">加法赋值运算符</td>\n<td style=\"text-align:left\">a+=b等价于a=a+b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:left\">减法赋值运算符</td>\n<td style=\"text-align:left\">a-=b等价于a=a-b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:left\">乘法赋值运算符</td>\n<td style=\"text-align:left\">a*=b等价于a=a*b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:left\">除法赋值运算符</td>\n<td style=\"text-align:left\">a/=b等价于a=a/b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:left\">取模赋值运算符</td>\n<td style=\"text-align:left\">a%=b等价于a=a%b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:left\">幂赋值运算符</td>\n<td style=\"text-align:left\">a**=b等价于a=a**b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:left\">取整赋值运算符</td>\n<td style=\"text-align:left\">a//=b等价于a=a//b</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:=</td>\n<td style=\"text-align:left\">海象运算符</td>\n<td style=\"text-align:left\"><code>Python3.8</code>版本新增运算符。可在表达式内部为变量赋值。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>海象运算符的使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n := <span class=\"built_in\">len</span>(a)) &gt; <span class=\"number\">10</span>:  </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;List is too long (<span class=\"subst\">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">逻辑表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:left\">x and y</td>\n<td style=\"text-align:left\">布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:left\">x or y</td>\n<td style=\"text-align:left\">布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:left\">not x</td>\n<td style=\"text-align:left\">布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"位运算符\">位运算符</h3>\n<p>按位运算符是把数字看作二进制来进行计算的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td style=\"text-align:left\"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>|</code></td>\n<td style=\"text-align:left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。否则为0</td>\n<td style=\"text-align:left\"><code>(a | b)</code> 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:left\">按位异或运算符：当两对应的二进位相异时，结果为1，否则为0</td>\n<td style=\"text-align:left\"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~</code></td>\n<td style=\"text-align:left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>\n<td style=\"text-align:left\"><code>(~a )</code> 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td style=\"text-align:left\"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移动运算符：把&quot;&gt;&gt;“左边的运算数的各二进位全部右移若干位，”&gt;&gt;&quot;右边的数指定移动的位数</td>\n<td style=\"text-align:left\"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"成员运算符\">成员运算符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"身份运算符\">身份运算符</h3>\n<p>身份运算符用于比较两个对象的存储单元</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td style=\"text-align:left\">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">is not</td>\n<td style=\"text-align:left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td style=\"text-align:left\">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>**</code></td>\n<td style=\"text-align:left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>~ + -</code></td>\n<td style=\"text-align:left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>* / % //</code></td>\n<td style=\"text-align:left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+ -</code></td>\n<td style=\"text-align:left\">加法减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;&gt; &lt;&lt;</code></td>\n<td style=\"text-align:left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;</code></td>\n<td style=\"text-align:left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^ |</code></td>\n<td style=\"text-align:left\">位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;= &lt; &gt; &gt;=</code></td>\n<td style=\"text-align:left\">比较运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>== !=</code></td>\n<td style=\"text-align:left\">等于运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>= %= /= //= -= += *= **=</code></td>\n<td style=\"text-align:left\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is is not</code></td>\n<td style=\"text-align:left\">身份运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>in not in</code></td>\n<td style=\"text-align:left\">成员运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not and or</code></td>\n<td style=\"text-align:left\">逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Python条件控制\">Python条件控制</h2>\n<p>Python条件控制使用if、elif和else关键字,一般流程图如下：<br>\n<img src=\"if-1.png\" alt=\"if流程图\"></p>\n<p>共有三种模式：</p>\n<p><em><strong>if</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>if-else</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>if-elif-else</strong></em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;condition_expr_1&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (&lt;condition_expr_2&gt;) :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\"><span class=\"comment\"># ……</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"comment\"># statement_block_else</span></span><br><span class=\"line\"><span class=\"comment\"># statement_block_other</span></span><br></pre></td></tr></table></figure>\n<p>上述代码的流程如下：<br>\n<img src=\"if-2.png\" alt=\"if-elif-else\"></p>\n<p>Python条件控制还支持if条件的<code>嵌套</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (&lt;expr&gt;):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (&lt;expr_2&gt;):</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># statement_block_2</span></span><br><span class=\"line\">    <span class=\"comment\"># statement_block_3</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># ……</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python循环语句\">Python循环语句</h2>\n<p>循环语句将在条件成立时循环执行。流程图如下：<br>\n<img src=\"loop-1.jpg\" alt=\"loop-1\"><br>\nPython的循环语句有两种形式：</p>\n<p><em><strong><code>while</code></strong></em></p>\n<blockquote>\n<p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;condition_expr&gt;):</span><br><span class=\"line\">    <span class=\"comment\"># loop_statement_block</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># false_statement</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用<code>while True</code>来实现无限循环</p>\n</blockquote>\n<p><em><strong><code>for</code></strong></em><br>\nPython for 循环可以遍历任何可迭代对象(<a href=\"#Python%E5%BA%8F%E5%88%97sequence\">序列</a>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &lt;variable&gt; <span class=\"keyword\">in</span> &lt;sequence&gt;:</span><br><span class=\"line\">    &lt;statements&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>\n<p>经常和for配合的一个函数为<a href=\"#range\">range()</a>:<br>\nrange()函数会生成一个数字序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>如果要提前结束循环，需要使用关键字<code>break</code>跳出当前循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span> :</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span> :</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>以上代码循环到x==6时就会停止:</p>\n<blockquote>\n<p>10 9 8 7 6</p>\n</blockquote>\n<p>如果只是跳过一次循环，使用关键字<code>continue</code>可以跳过本次循环，进入下次循环:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> x &gt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">    x -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>9 8 7 5 4 3 2</p>\n</blockquote>\n<p>break和continue在循环中的作用如下图：<br>\n<img src=\"break-continue.jpg\" alt=\"break-continue\"></p>\n<blockquote>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。<br>\ncontinue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n</blockquote>\n<hr>\n<h2 id=\"Python序列sequence\">Python序列sequence</h2>\n<h3 id=\"序列运算\">序列运算</h3>\n<!-- TODO: 序列运算符 https://blog.csdn.net/bcj296050240/article/details/46313709-->\n<h4 id=\"运算-拼接\">+运算/拼接</h4>\n<h4 id=\"运算-复制\">*运算/复制</h4>\n<h4 id=\"in运算\">in运算</h4>\n<h4 id=\"切片运算符\">切片运算符</h4>\n<hr>\n<h2 id=\"Python迭代器与生成器\">Python迭代器与生成器</h2>\n<h3 id=\"迭代器iterator\">迭代器iterator</h3>\n<p>迭代是访问集合元素的一种方式。<br>\n迭代器是一个可以记住遍历的位置的对象。<br>\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前<code>不会后退</code>。</p>\n<p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br>\niter()用于创建迭代器对象，next()用于控制迭代器前进。<br>\n字符串，列表或元组对象都可用于创建迭代器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)   <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(it))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))  <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(it))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>&lt;class ‘list_iterator’&gt;<br>\n1<br>\n5</p>\n</blockquote>\n<p>迭代器对象可以使用常规for语句进行遍历：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">it = <span class=\"built_in\">iter</span>(lst)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 3 4 5</p>\n</blockquote>\n<h4 id=\"自定义迭代器\">自定义迭代器</h4>\n<p>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。<br>\n如果你已经了解面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。有关面向对象编程请看：<a href=\"#Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\">Python面向对象</a><br>\n<code>__iter__()</code> 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。<br>\n<code>__next__()</code> 方法会返回下一个迭代器对象。</p>\n<blockquote>\n<p><em><strong><code>StopIteration</code></strong></em><br>\nStopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p>\n</blockquote>\n<p>以下实例将创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">20</span>:    <span class=\"comment\"># 设置循环上限</span></span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"> </span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = <span class=\"built_in\">iter</span>(myclass)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x, end=<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>执行输出结果为：</p>\n<blockquote>\n<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</p>\n</blockquote>\n<hr>\n<h3 id=\"生成器generator\">生成器generator</h3>\n<p>在Python中，使用了<code>yield</code>的函数被称为生成器。<br>\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br>\n在调用生成器运行的过程中，每次遇到 yield 时函数会<code>暂停并保存当前所有的运行信息</code>，<em><strong>返回 yield 的值</strong></em>, 并在下一次执行 next() 方法时从当前位置继续运行。</p>\n<p>以下实例使用生成器实现斐波那契数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>):</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"built_in\">next</span>(f), end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n</blockquote>\n<hr>\n<h2 id=\"Python函数\">Python函数</h2>\n<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>\n函数能提高应用的模块性，和代码的重复利用率。</p>\n<p>除了之前见过的Python的内建函数外，我们还可以自己创建函数，也就是自定义函数。</p>\n<h3 id=\"定义一个函数\">定义一个函数</h3>\n<p>函数的组成有以下几条规则:</p>\n<ul>\n<li>函数以<code>def</code>关键字开头，后接<code>函数标识符</code>名称和<code>参数列表</code></li>\n<li>函数内容以冒号<code>:</code>开始，下面的函数体缩进</li>\n<li>以<code>return [表达式]</code>结束函数，并选择性返回一个值给调用方，不带任何表达式的return相当于返回None</li>\n</ul>\n<p>下图是一个简单的函数形式说明:<br>\n<img src=\"function-1.png\" alt=\"函数说明\"><br>\n总结来说，Python的函数语法格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名(<span class=\"params\">参数列表</span>):</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\">参数</h3>\n<p>在之前我们知道了Python有两种数据类型：可变类型和不可变类型，而对Python的<code>参数传递</code>来说也对应着两种：</p>\n<ul>\n<li><strong>可变类型</strong>：类似C++的引用传递，如传递列表、字典时，传递的是“真正的”对象，如果在函数内部修改了这个对象，函数外部也会收到影响而改变。</li>\n<li><strong>不可变类型</strong>：类似C++的值传递，不可变的类型对象传递的只是他们的值，无法影响到外部的对象，在函数内部修改该类型的值，是新生成一个对象修改。</li>\n</ul>\n<blockquote>\n<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>\n</blockquote>\n<p>Python的函数<code>参数</code>共有下面四种类型：</p>\n<ul>\n<li>必需参数</li>\n<li>关键字参数</li>\n<li>默认参数</li>\n<li>不定长参数</li>\n</ul>\n<p><em><strong><code>必需参数</code></strong></em><br>\n必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br>\n<em><strong><code>关键字参数</code></strong></em><br>\n关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。<br>\n使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>\n<em><strong><code>默认参数</code></strong></em><br>\n调用函数时，如果没有传递参数，则会使用默认参数。<br>\n<em><strong><code>不定长参数</code></strong></em><br>\n你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span>(<span class=\"params\">[formal_args,] [*var_args_tuple,] [**var_args_dict] </span>):</span></span><br><span class=\"line\">   function_suite</span><br><span class=\"line\">   <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n<p>加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。<br>\n加了两个星号 ** 的参数会以字典的形式导入。</p>\n<p>下面结合函数的使用来理解这四种参数类型：</p>\n<h3 id=\"函数的使用\">函数的使用</h3>\n<p>使用函数只需要直接使用函数名并传入对应参数就可以调用了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  <span class=\"comment\"># 必需参数的使用，参数按顺序对应传入</span></span><br><span class=\"line\">function1(<span class=\"number\">1</span>, c = <span class=\"string\">&quot;5&quot;</span>, b = <span class=\"number\">2</span>)  <span class=\"comment\"># 关键字参数的使用，参数在使用时可以直接使用关键字，且不必按顺序传入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function2</span>(<span class=\"params\">a,b,c = <span class=\"number\">5</span></span>):</span>   <span class=\"comment\"># 默认参数，在函数声明时指定其默认值</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function2(<span class=\"number\">2</span>,<span class=\"number\">3</span>)       <span class=\"comment\"># 默认参数在调用时不指定则使用默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function3</span>(<span class=\"params\">a,b,*args_tuple</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_tuple)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function4</span>(<span class=\"params\">a,b,**args_dict</span>):</span>   <span class=\"comment\"># 不定长参数，传入时先按顺序给必需参数赋值，多余参数将以元组/字典的方式存放传入</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,args_dict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function4(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c = <span class=\"number\">3</span>,d = <span class=\"number\">4</span>,e = <span class=\"number\">5</span>,f = <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 3<br>\n1 2 5<br>\n2 3 5<br>\n1 2 (3, 4, 5, 6)<br>\n1 2 {‘c’: 3, ‘d’: 4, ‘e’: 5, ‘f’: 6}</p>\n</blockquote>\n<p>声明函数时，参数中星号 * 可以单独出现，如果单独出现星号 * 后的参数<code>必须用关键字</code>传入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b,*,c</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a,b,c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c=<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1 2 5</p>\n</blockquote>\n<h3 id=\"匿名函数\">匿名函数</h3>\n<p>Python使用lambda关键字来创建匿名函数。<br>\n匿名函数不需要像普通函数一样使用def来声明，它是一个表达式，仅仅能在lambda表达式中封装有限的逻辑进去。<br>\nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</p>\n<p>lambda 函数的语法只包含一个语句，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>\n<p>使用实例来增进理解：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2    <span class=\"comment\"># 一个简单的匿名函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"return语句\">return语句</h3>\n<p>return作为函数的结束语句，可以选择性地返回一个表达式，没有表达式的return返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function1</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\">c = function1(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>3</p>\n</blockquote>\n<h3 id=\"强制位置参数\">强制位置参数</h3>\n<p>Python3.8 新增了一个函数形参语法<code>/</code>用来指明符号前的函数形参必须使用必需指定位置参数，不能使用关键字参数的形式。<br>\n在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">a, b, /, c, d, *, e, f</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a, b, c, d, e, f)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)  <span class=\"comment\"># 这种使用方式是正确的</span></span><br><span class=\"line\"><span class=\"comment\"># 下面两种是错误的使用</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, b=<span class=\"number\">20</span>, c=<span class=\"number\">30</span>, d=<span class=\"number\">40</span>, e=<span class=\"number\">50</span>, f=<span class=\"number\">60</span>)   <span class=\"comment\"># b 不能使用关键字参数的形式</span></span><br><span class=\"line\">f(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, f=<span class=\"number\">60</span>)           <span class=\"comment\"># e 必须使用关键字参数的形式</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python推导式\">Python推导式</h2>\n<p>Python的推导式应用于简化规律的列表或元组等序列的创建：<br>\n每个推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的序列。</p>\n<blockquote>\n<p>需要注意的是，使用括号的元组推导式创建后得到的对象是生成器generator对象，需要进一步转换。</p>\n</blockquote>\n<p>简单语法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_lst = [var <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> varrange <span class=\"keyword\">if</span> varexpr]</span><br></pre></td></tr></table></figure>\n<p>比如我们想得到一个偶数数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">tup = (x*<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))   <span class=\"comment\"># 括号生成的是生成器对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tup))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tuple</span>(tup))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]<br>\n&lt;class ‘generator’&gt;<br>\n(0, 2, 4, 6, 8, 10, 12, 14, 16, 18)</p>\n</blockquote>\n<p>推导式的更多使用建议自己上手尝试一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lst = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> (x * <span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)) <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [[x, y] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">ve = [<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;xx&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;xxxx&quot;</span>]</span><br><span class=\"line\">lst = [<span class=\"built_in\">len</span>(v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> ve]  <span class=\"comment\"># 推导式还可以对匿名变量使用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br><span class=\"line\"></span><br><span class=\"line\">lst = [<span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(<span class=\"number\">355</span>/<span class=\"number\">113</span>, i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>)]   <span class=\"comment\"># 使用复杂表达式和嵌套函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(lst)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[3, 9, 15, 21, 27]<br>\n[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]<br>\n[1, 2, 3, 4]<br>\n[‘3.1’, ‘3.14’, ‘3.142’, ‘3.1416’, ‘3.14159’]</p>\n</blockquote>\n<hr>\n<h2 id=\"Python模块\">Python模块</h2>\n<p>模块是一个包含所有你定义的函数和变量的文件，<a href=\"http://xn--g6qy6dca976psl2a.py\">其后缀名是.py</a>。<br>\n模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p>\n<p>下面是一个使用 python 标准库中模块的例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\nPython 路径为：&#x27;</span>, sys.path, <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>import sys 引入 python 标准库中的 <a href=\"http://sys.py\">sys.py</a> 模块；这是引入某一模块的方法。</li>\n<li>sys.argv 是一个包含命令行参数的列表。</li>\n<li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。</li>\n</ul>\n</blockquote>\n<h3 id=\"import语句\">import语句</h3>\n<p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> module1[,module2...]</span><br></pre></td></tr></table></figure>\n<p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。</p>\n<p>下面是自定义模块的使用:<br>\n这里先定义一个模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span>(<span class=\"params\">a,b</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后再其他文件里导入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test.py&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test_module.function(<span class=\"number\">1</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 使用模块定义的方法</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>file_name: test_module.py<br>\nfile_name: <a href=\"http://test.py\">test.py</a><br>\n3</p>\n</blockquote>\n<p>可以看到，在导入模块的时候会自动运行一遍模块的代码。并且我们可以调用模块内定义的函数。</p>\n<p>并且一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。<br>\n<img src=\"module-1.png\" alt=\"模块只会被导入一次，执行一次\"></p>\n<blockquote>\n<p>当我们使用import语句的时候，Python解释器是怎么找到对应的文件的呢？<br>\n这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。<br>\n这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。<br>\n搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。<br>\n搜索路径被存储在sys模块中的path变量，我们可以直接在终端输出查看搜索路径：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.path)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘g:\\Codes\\Python\\testpy’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles’, ‘c:\\Users\\Administrator\\.vscode\\extensions\\ms-toolsai.jupyter-2021.11.1001550889\\pythonFiles\\lib\\python’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\python39.zip’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\DLLs’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39’, ‘’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\win32\\lib’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\Pythonwin’, ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\extensions’, ‘C:\\Users\\Administrator\\.ipython’]</p>\n</blockquote>\n<p>sys.path 输出是一个列表，其中第一项是当前目录。</p>\n<p>如果你打算经常使用一个函数，你可以把它赋给一个本地的名称：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module</span><br><span class=\"line\"></span><br><span class=\"line\">fun = test_module.function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"from…import语句\">from…import语句</h3>\n<p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>\n<p>这个声明不会把整个模块导入到当前的命名空间中，它只会将某模块里的某个成员（函数、变量）引入进来。</p>\n<p>而如果要把一个模块所有成员导入当前的命名空间中，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>这提供了一个简单的方法来导入一个模块中的所有项目。但是那些由单一下划线（_）开头的名字不在此例，如’_a’此类。<br>\n然而这种声明不该被过多地使用。因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n<h3 id=\"深入模块\">深入模块</h3>\n<p>前面我们知道了模块在第一次被导入的时候会被解释器自动执行一遍代码。<br>\n我们一般使用这些可执行代码来初始化模块。<br>\n每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。<br>\n所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。<br>\n从另一个方面，当你确实知道你在做什么的话，你也可以通过 <code>modname.itemname</code> 这样的表示法来访问模块内的函数。</p>\n<p>但是需要注意：</p>\n<blockquote>\n<p>在导入其他模块的命名时，要注意和本空间的冲突，因为引入的其它来源的命名，很可能覆盖了已有的定义。</p>\n</blockquote>\n<h3 id=\"name-属性\">__name__属性</h3>\n<p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。</p>\n<blockquote>\n<p>注意是前后<code>两个下划线</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file_name:  test_module.py</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;test_module_main&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;file_name: test_module.py&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>每个模块都有一个__name__属性，当其值是’__main__'时，表明该模块自身在运行，否则是被引入。</p>\n<h3 id=\"dir-函数\">dir()函数</h3>\n<p>内置的函数 <a href=\"#dir\"><code>dir()</code></a> 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test_module,sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(test_module))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(sys))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘__builtins__’, ‘__cached__’, ‘__doc__’, ‘__file__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘function’]<br>\n[‘__breakpointhook__’, ‘__displayhook__’, ‘__doc__’, ‘__excepthook__’, ‘__interactivehook__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘__stderr__’, ‘__stdin__’, ‘__stdout__’, ‘__unraisablehook__’, ‘_base_executable’, ‘_clear_type_cache’, ‘_current_frames’, ‘_debugmallocstats’, ‘_enablelegacywindowsfsencoding’, ‘_framework’, ‘_getframe’, ‘_git’, ‘_home’, ‘_xoptions’, ‘addaudithook’, ‘api_version’, ‘argv’, ‘audit’, ‘base_exec_prefix’, ‘base_prefix’, ‘breakpointhook’, ‘builtin_module_names’, ‘byteorder’, ‘call_tracing’, ‘copyright’, ‘displayhook’, ‘dllhandle’, ‘dont_write_bytecode’, ‘exc_info’, ‘excepthook’, ‘exec_prefix’, ‘executable’, ‘exit’, ‘flags’, ‘float_info’, ‘float_repr_style’, ‘get_asyncgen_hooks’, ‘get_coroutine_origin_tracking_depth’, ‘getallocatedblocks’, ‘getdefaultencoding’, ‘getfilesystemencodeerrors’, ‘getfilesystemencoding’, ‘getprofile’, ‘getrecursionlimit’, ‘getrefcount’, ‘getsizeof’, ‘getswitchinterval’, ‘gettrace’, ‘getwindowsversion’, ‘hash_info’, ‘hexversion’, ‘implementation’, ‘int_info’, ‘intern’, ‘is_finalizing’, ‘maxsize’, ‘maxunicode’, ‘meta_path’, ‘modules’, ‘path’, ‘path_hooks’, ‘path_importer_cache’, ‘platform’, ‘platlibdir’, ‘prefix’, ‘ps1’, ‘ps2’, ‘ps3’, ‘pycache_prefix’, ‘set_asyncgen_hooks’, ‘set_coroutine_origin_tracking_depth’, ‘setprofile’, ‘setrecursionlimit’, ‘setswitchinterval’, ‘settrace’, ‘stderr’, ‘stdin’, ‘stdout’, ‘thread_info’, ‘unraisablehook’, ‘version’, ‘version_info’, ‘warnoptions’, ‘winver’]</p>\n</blockquote>\n<p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>())</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[‘__annotations__’, ‘__builtins__’, ‘__cached__’, ‘__doc__’, ‘__file__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’]</p>\n</blockquote>\n<h3 id=\"其他模块\">其他模块</h3>\n<p>除了本章使用到的自定义模块和sys模块，Python还有其他的一些内置模块，可以查看<a href=\"#Python%E5%BA%93%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\">Python库参考文档</a>。</p>\n<p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。<br>\n这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。<br>\n应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sys.ps2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"包\">包</h3>\n<p>包是一种管理 Python 模块命名空间的形式，采用&quot;点模块名称&quot;。<br>\n比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。<br>\n就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。</p>\n<p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。<br>\n目录只有包含一个叫做 __init__.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。<br>\n最简单的情况，放一个空的 :file:__init__.py就可以了。<br>\n当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。</p>\n<p>注意当使用 from package import item 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。<br>\nimport 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。<br>\n反之，如果使用形如 import item.subitem.subsubitem 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</p>\n<p>如果我们使用 from sound.effects import * 会发生什么呢？<br>\nPython 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。<br>\n但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。<br>\n在 Windows 平台平台上，我们无法确定一个叫做 <a href=\"http://ECHO.py\">ECHO.py</a> 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。<br>\n为了解决这个问题，我们只需要提供一个精确包的索引。<br>\n导入语句遵循如下规则：如果包定义文件 __init__.py 存在一个叫做 __all__ 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。<br>\n作为包的作者，可别忘了在更新包之后保证 __all__ 也更新了啊。<br>\n__all__是一个存储模块名字符串的列表。</p>\n<hr>\n<h2 id=\"Python输入输出\">Python输入输出</h2>\n<p>再前面我们已经接触过Python的输入<a href=\"#input\">input()</a>和输出<a href=\"#print\">print()</a>了，本章主要是介绍输入输出的进阶技巧。</p>\n<h3 id=\"输出格式美化\">输出格式美化</h3>\n<p>Python两种输出值的方式: 表达式语句和 print() 函数。<br>\n第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。<br>\n如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。<br>\n如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。</p>\n<blockquote>\n<ul>\n<li>str()： 函数返回一个用户易读的表达形式。</li>\n<li>repr()： 产生一个解释器易读的表达形式。</li>\n</ul>\n</blockquote>\n<p>下面是在Python解释器的运行说明，可以更好的帮忙理解str()和repr()的区别：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;1&#x27;</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(a)</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>(a)</span><br><span class=\"line\"><span class=\"string\">&quot;&#x27;1&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(a))</span><br><span class=\"line\"><span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">str</span>(a)&#125;</span>,<span class=\"subst\">&#123;<span class=\"built_in\">repr</span>(a)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\">#  repr() 函数可以保留转义字符串中的特殊字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">&#x27;hello, world\\n&#x27;</span>      </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos = <span class=\"built_in\">repr</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos)</span><br><span class=\"line\"><span class=\"string\">&#x27;hello, world\\n&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hellos_1 = <span class=\"built_in\">str</span>(hello)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(hellos_1)</span><br><span class=\"line\">hello, world</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">repr</span>((x, y, (<span class=\"string\">&#x27;Go&#x27;</span>,<span class=\"string\">&#x27;Python&#x27;</span>)))      </span><br><span class=\"line\"><span class=\"string\">&quot;(32.5, 40000, (&#x27;Go&#x27;, &#x27;Python&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>\n<p>关于str()和repr()的更多区别请参见<a href=\"str()%E5%92%8Crepr()%E7%9A%84%E5%8C%BA%E5%88%AB\">str()和repr()的区别</a></p>\n<p>其他关于字符串格式化内容请参见: <a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\">字符串格式化</a></p>\n<h3 id=\"读取输入\">读取输入</h3>\n<p>Python 提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p>\n<hr>\n<h2 id=\"Python文件读写操作\">Python文件读写操作</h2>\n<h3 id=\"读和写文件\">读和写文件</h3>\n<p><a href=\"#open\">open()</a>函数将会返回一个file对象，其基本语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(filename, mode)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filename : 包含了你要访问的文件的字符串值。</li>\n<li>mode : 决定了打开文件的模式（只读，写入，追加）等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读®。</li>\n</ul>\n<p>不同模式打开文件的完全列表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">以<code>只读</code>方式打开文件。文件的指针将会放在文件的<code>开头</code>。这是<code>默认</code>模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>只读</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。文件指针将会放在文件的<code>开头</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件只用于<code>写入</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wb+</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>读写</code>。如果该文件已<code>存在则打开</code>文件，并从<code>开头</code>开始编辑，即<code>原有内容会被删除</code>。如果该文件<code>不存在则创建</code>新文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab</td>\n<td style=\"text-align:left\">以<code>二进制</code>格式打开一个文件用于<code>追加</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。也就是说，新的内容将会被<code>写入到已有内容之后</code>。如果该文件<code>不存在则创建</code>新文件进行写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:left\">打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。文件打开时会是追加模式。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ab+</td>\n<td style=\"text-align:left\">以<code>二进制格式</code>打开一个文件用于<code>读写</code>。如果该文件已<code>存在</code>，文件指针将会放在文件的<code>结尾</code>。如果该文件<code>不存在则创建</code>新文件用于读写。</td>\n</tr>\n</tbody>\n</table>\n<p>总结来说模式的情况有三种：</p>\n<ul>\n<li>基础模式： 也就是 <code>r</code> <code>w</code> <code>a</code> (read、write、append)</li>\n<li>二进制模式：  在基础模式上加上<code>b</code>表示以二进制格式打开文件(byte)</li>\n<li>读写模式：  在以上两种模式上加上<code>+</code>表示打开的文件可读写</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">r</th>\n<th style=\"text-align:center\">r+</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:center\">w+</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">a+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">覆盖</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在开始</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指针在结尾</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"rwa-1.png\" alt=\"读写模式\"></p>\n<p>下面是一个读写文件的实例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;a模式写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;w模式再写入&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “\\testpy\\<a href=\"http://quick.py\">quick.py</a>”, line 6, in &lt;module&gt;<br>\nf = open(r&quot;testpy\\test.txt&quot;, “r”)<br>\nFileNotFoundError: [Errno 2] No such file or directory: ‘testpy\\test.txt’<br>\nw模式写入<br>\nw模式写入a模式写入<br>\nw模式再写入</p>\n</blockquote>\n<p>可以看到下图文件结构的改变<br>\n<img src=\"rw_test_1.png\" alt=\"读写测试-前\"><br>\n<img src=\"rw_test_2.png\" alt=\"读写测试-后\"></p>\n<p>以及可以看到，w模式的创建、a模式的附加、w模式的覆盖这几个特性。</p>\n<blockquote>\n<p>这里有几个需要注意的点:</p>\n<ul>\n<li>文件的路径，由于带有反斜杠\\，会被转义，所以需要使用r-string</li>\n<li>打开的文件需要使用f.close()关闭或者使用<a href=\"#with%E5%85%B3%E9%94%AE%E5%AD%97\">with…as…</a>代码块</li>\n<li>读写文件通常需要在try…except里进行</li>\n</ul>\n</blockquote>\n<p>如果你点开刚刚创建的这个test.txt，你可能会遇到下面的情况：<br>\n<img src=\"rw-problem.png\" alt=\"文字乱码\"><br>\n文字乱码一般是编码问题。处理方法之一是更改打开文件的编码和我们写入的编码匹配：<br>\nvscode选择右下角的编码格式改变：<br>\n<img src=\"vscode.png\" alt=\"vscode选择编码\"><br>\n<img src=\"vscode-2.png\" alt=\"vscode选择编码-2\"><br>\n<img src=\"vscode-3.png\" alt=\"vscode选择编码-3\"><br>\n<img src=\"solute.png\" alt=\"文字乱码解决\"></p>\n<p>还有一种解决办法是在我们在用代码创建时，可以选择编码类型，在这里选择想要的编码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>关于上面实例使用的文件对象的方法，请看下节。</p>\n<h3 id=\"文件对象的方法\">文件对象的方法</h3>\n<!-- TODO: 文件对象方法 -->\n<h4 id=\"f-read\"><a href=\"#read\"><code>f.read()</code></a></h4>\n<p>为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。<br>\nsize 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">1</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入<br>\n字</p>\n</blockquote>\n<p>可以看到同一个文件对象read()读取的时候是接续读取而不是重头读取</p>\n<blockquote>\n<p>这是因为read()同时会向后移动指针size个字符.</p>\n</blockquote>\n<p>但是这时候有人又有问题了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;a+&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read(<span class=\"number\">2</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个时候他说a+模式不是用于读写吗？为什么我这样写没有输出呢？</p>\n<blockquote>\n<p>这个是因为read()方法读取的是当前指针后面的size个字符并返回，而a+模式的指针初始在文件末尾，所以读取不到任何字符。</p>\n</blockquote>\n<p>如果你打开文件的方式没有读的权限，那么会报出以下的错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “\\testpy\\<a href=\"http://quick.py\">quick.py</a>”, line 18, in &lt;module&gt;<br>\nprint(f.read())<br>\n<code>io.UnsupportedOperation: not readable</code></p>\n</blockquote>\n<h4 id=\"f-readline\"><a href=\"#readline\"><code>f.readline()</code></a></h4>\n<p>f.readline() 会从文件中读取单独的一行。换行符为 ‘\\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&quot;写入字符串1\\n&quot;</span>)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(f.readline()))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>‘写入字符串\\n’<br>\n‘写入字符串1\\n’</p>\n</blockquote>\n<p>可以看到调用readline()和read()一样都会向后移动指针</p>\n<p>还可以使用迭代文件对象的方式遍历每一行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 使用with...as在代码块结束时会自动关闭文件对象</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(line, end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入字符串<br>\n写入字符串1</p>\n</blockquote>\n<h4 id=\"f-readlines\"><a href=\"#readlines\"><code>f.readlines()</code></a></h4>\n<p>f.readlines() 将返回该文件中包含的所有行。<br>\n如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.readlines())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘写入字符串\\n’, ‘写入字符串1’]</p>\n</blockquote>\n<h4 id=\"f-write\"><a href=\"#write\"><code>f.write()</code></a></h4>\n<p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符</p>\n</blockquote>\n<h4 id=\"f-tell\"><a href=\"#tell\"><code>f.tell()</code></a></h4>\n<p>f.tell() 返回文件对象当前游标所处的位置, 它是从文件开头开始算起的字节数。中文utf-8编码一个字占三个字节数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符<br>\n当前游标处于第12字节处</p>\n</blockquote>\n<p>一些常用编码一个字符所占的字节数：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编码</th>\n<th style=\"text-align:center\">中文</th>\n<th style=\"text-align:center\">英文</th>\n<th style=\"text-align:left\">其他说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ASCII</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Unicode</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">英文符号只占1个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GB2312</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GBK</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ISO-8859-1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-8</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-16</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">Unicode扩展区的一些汉字存储需要4个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UTF-32</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"f-seek\"><a href=\"#seek\"><code>f.seek()</code></a></h4>\n<p>如果要改变文件游标当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p>\n<p>offset 是偏移量；<br>\nfrom_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：</p>\n<ul>\n<li>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符</li>\n<li>seek(x,1) ： 表示从当前位置往后移动x个字符</li>\n<li>seek(-x,2)：表示从文件的结尾往前移动x个字符<br>\nfrom_what 值默认为0，即文件开头。下面给出一个完整的例子：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&quot;testpy\\test2.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;写入<span class=\"subst\">&#123;f.write(<span class=\"string\">&quot;写入测试&quot;</span>)&#125;</span>个字符&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(f.seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;当前游标处于第<span class=\"subst\">&#123;f.tell()&#125;</span>字节处&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    traceback.print_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>写入4个字符<br>\n当前游标处于第12字节处<br>\n0<br>\n当前游标处于第0字节处<br>\n12<br>\n当前游标处于第12字节处</p>\n</blockquote>\n<h4 id=\"f-close\"><a href=\"#close\"><code>f.close()</code></a></h4>\n<p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。<br>\n当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</p>\n<h3 id=\"pickle模块\">pickle模块</h3>\n<p>python的pickle模块实现了基本的数据序列和反序列化。<br>\n通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。<br>\n通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p>\n<p>下面通过一个简单实例来说明pickle模块：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块将数据对象保存到文件</span></span><br><span class=\"line\">data1 = &#123;<span class=\"string\">&quot;a&quot;</span>: [<span class=\"number\">1</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> + <span class=\"number\">6j</span>], <span class=\"string\">&quot;b&quot;</span>: (<span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">u&quot;Unicode string&quot;</span>), <span class=\"string\">&quot;c&quot;</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">selfref_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">selfref_list.append(selfref_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle dictionary using protocol 0.</span></span><br><span class=\"line\">pickle.dump(data1, output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pickle the list using the highest protocol available.</span></span><br><span class=\"line\">pickle.dump(selfref_list, output, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">output.close()</span><br></pre></td></tr></table></figure>\n<p>上面的实例使用pickle模块将数据对象保存到文件，使用到的方法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickle.dump(obj, file, [,protocol])</span><br></pre></td></tr></table></figure>\n<p>它的作用是序列化对象，并将结果数据流写入到文件对象中。参数protocol是序列化模式，默认值为0，表示以文本的形式序列化。protocol的值还可以是1或2，表示以二进制的形式序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;data.pkl&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用pickle模块从文件中重构python对象</span></span><br><span class=\"line\">data1 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data1)</span><br><span class=\"line\">data2 = pickle.load(pkl_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data2)</span><br><span class=\"line\"></span><br><span class=\"line\">pkl_file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>{‘a’: [1, 2.0, 3, (4+6j)], ‘b’: (‘string’, ‘Unicode string’), ‘c’: None}<br>\n[1, 2, 3]</p>\n</blockquote>\n<p>上面的实例使用pickle模块从文件中重构python对象，使用到的接口是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">any_x = pickle.load(file)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-os模块\">Python os模块</h2>\n<!-- TODO: os模块方法 -->\n<h3 id=\"os模块常用方法\">os模块常用方法</h3>\n<p><a href=\"#Python-os%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">os模块</a>提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n方法\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#access\">access()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.txt1111&quot;</span>, os.F_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.R_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/test.pkl&quot;</span>, os.X_OK))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n检验文件/路径的权限模式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#getcwd\">getcwd()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 返回你的当前工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回当前工作目录\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#chdir\">chdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br><span class=\"line\">os.chdir(<span class=\"string\">&quot;../&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g:\\Codes\\Python\\testpy</span><br><span class=\"line\">g:\\Codes\\Python\\</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n改变当前工作目录\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#chmod\">chmod()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os, stat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br><span class=\"line\">os.chmod(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, stat.S_IREAD)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.access(<span class=\"string\">&quot;./testpy/data.pkl&quot;</span>, os.W_OK))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n更改文件或目录的权限\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#open\">open()</a></p>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_CREAT | os.O_RDWR)</span><br><span class=\"line\">os.write(fd, <span class=\"built_in\">str</span>.encode(<span class=\"string\">&quot;This is test\\n&quot;</span>))</span><br><span class=\"line\">os.close(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./testpy/test3.txt&quot;</span>, os.O_RDONLY)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.read(fd, <span class=\"number\">10</span>))</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td rowspan=\"4\" style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;This is te&#x27;</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n打开一个文件，并且设置需要的打开选项\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#write\">write()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n写入字符串到文件描述符 fd中. 返回实际写入的字符串长度\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#read\">read()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#close\">close()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭指定的文件描述符 fd\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#closerange\">closerange()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>,os.O_RDONLY)</span><br><span class=\"line\">os.closerange(fd,fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#dup\">dup()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;foo.txt&quot;</span>, os.O_RDWR | os.O_CREAT)</span><br><span class=\"line\"><span class=\"comment\"># 复制文件描述符</span></span><br><span class=\"line\">d_fd = os.dup(fd)</span><br><span class=\"line\"><span class=\"comment\"># 使用复制的文件描述符写入文件</span></span><br><span class=\"line\">os.write(d_fd, <span class=\"string\">&quot;This is test&quot;</span>.encode())</span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">os.closerange(fd, d_fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n复制文件描述符 fd\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#dup2\">dup2()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n将一个文件描述符 fd 复制到另一个 fd2\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fdopen\">fdopen()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># os.fdopen()</span></span><br><span class=\"line\"><span class=\"comment\"># 用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</span></span><br><span class=\"line\"><span class=\"comment\"># 该方法是内置函数 open() 的别名;</span></span><br><span class=\"line\"><span class=\"comment\"># 可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n通过文件描述符 fd 创建一个文件对象，并返回这个文件对象\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#stat\">stat()</a></p>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.stat(path))</span><br><span class=\"line\"></span><br><span class=\"line\">info = os.lstat(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;st_uid = <span class=\"subst\">&#123;info.st_uid&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fd = os.<span class=\"built_in\">open</span>(path, os.O_RDWR)</span><br><span class=\"line\">info = os.fstat(fd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(info)</span><br><span class=\"line\">os.close(fd)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\" rowspan = \"3\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br><span class=\"line\">st_uid = <span class=\"number\">0</span></span><br><span class=\"line\">os.stat_result(st_mode=<span class=\"number\">33206</span>, st_ino=<span class=\"number\">1407374883563448</span>, </span><br><span class=\"line\">st_dev=<span class=\"number\">2427623123</span>, st_nlink=<span class=\"number\">1</span>, st_uid=<span class=\"number\">0</span>, st_gid=<span class=\"number\">0</span>, st_size=<span class=\"number\">0</span>, </span><br><span class=\"line\">st_atime=<span class=\"number\">1642992982</span>, st_mtime=<span class=\"number\">1642992982</span>, st_ctime=<span class=\"number\">1642908751</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取path指定的路径的信息，功能等同于C API中的stat()系统调用。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#lstat\">lstat()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n像stat(),但是没有软链接\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fstat\">fstat()</a></p>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回文件描述符fd的状态，像stat()。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#fsync\">fsync()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n强制将文件描述符为fd的文件写入硬盘。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#link\">link()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.link(src, dst)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n创建硬链接，名为参数 dst，指向参数 src.该方法对于创建一个已存在文件的拷贝是非常有用的。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#listdir\">listdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">path = <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir(path))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n返回path指定的文件夹包含的文件或文件夹的名字的列表。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#makedirs\">makedirs()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(path, <span class=\"number\">0o777</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#mkdir\">mkdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.mkdir(path)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。\n如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#pipe\">pipe()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">r,w = os.pipe()</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#popen\">popen()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> os.popen(<span class=\"string\">&quot;mkdir test_popen&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,<span class=\"number\">1</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;os._wrap_close <span class=\"built_in\">object</span> at <span class=\"number\">0x000001D8FC929430</span>&gt;</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.popen() 方法用于从一个命令command打开一个管道。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#system\">system()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.system(<span class=\"string\">r&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nsystem()用于简单执行一个系统命令\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#remove\">remove()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">os.remove(<span class=\"string\">&quot;./testpy/test.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除后列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;目录为: %s&quot;</span> % os.listdir(os.getcwd() + <span class=\"string\">&quot;/testpy/&quot;</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br><span class=\"line\">目录为: [<span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>, <span class=\"string\">&#x27;test1.txt&#x27;</span>, <span class=\"string\">&#x27;test2.txt&#x27;</span>, <span class=\"string\">&#x27;test3.txt&#x27;</span>, <span class=\"string\">&#x27;test_makedirs1&#x27;</span>, <span class=\"string\">&#x27;test_unicode.txt&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#removedirs\">removedirs()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.removedirs(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n递归删除目录。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#rmdir\">rmdir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.rmdir(<span class=\"string\">r&quot;./testpy/test_makedirs1/test_makedirs2/test_mkdir&quot;</span>)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n删除path指定的空目录，如果目录非空，则抛出一个OSError异常。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#rename\">rename()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br><span class=\"line\"></span><br><span class=\"line\">os.rename(<span class=\"string\">&quot;test_pack&quot;</span>, <span class=\"string\">&quot;test_rename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.listdir())</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_pack&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br><span class=\"line\">[<span class=\"string\">&#x27;.vscode&#x27;</span>, <span class=\"string\">&#x27;auto.py&#x27;</span>, <span class=\"string\">&#x27;data.pkl&#x27;</span>, <span class=\"string\">&#x27;dp1.py&#x27;</span>, <span class=\"string\">&#x27;foo.txt&#x27;</span>, <span class=\"string\">&#x27;test.py&#x27;</span>, <span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"string\">&#x27;testpy&#x27;</span>, <span class=\"string\">&#x27;test_module.py&#x27;</span>, <span class=\"string\">&#x27;test_popen&#x27;</span>, <span class=\"string\">&#x27;test_rename&#x27;</span>, <span class=\"string\">&#x27;unable&#x27;</span>, <span class=\"string\">&#x27;workspace.code-workspace&#x27;</span>, <span class=\"string\">&#x27;__pycache__&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#renames\">renames()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;当前目录为: %s&quot;</span> %os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出目录</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span>%os.listdir(os.getcwd()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重命名 &quot;aa1.txt&quot;</span></span><br><span class=\"line\">os.renames(<span class=\"string\">&quot;aa1.txt&quot;</span>,<span class=\"string\">&quot;newdir/aanew.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;重命名成功。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出重命名的文件 &quot;aa1.txt&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;目录为: %s&quot;</span> %os.listdir(os.getcwd()))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前目录为: /tmp</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;aa1.txt&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br><span class=\"line\">重命名成功。</span><br><span class=\"line\">目录为:</span><br><span class=\"line\"> [  <span class=\"string\">&#x27;a1.txt&#x27;</span>,<span class=\"string\">&#x27;resume.doc&#x27;</span>,<span class=\"string\">&#x27;a3.py&#x27;</span>,<span class=\"string\">&#x27;Administrator&#x27;</span>,<span class=\"string\">&#x27;newdir&#x27;</span>,<span class=\"string\">&#x27;amrood.admin&#x27;</span> ]</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.renames() 方法用于递归重命名目录或文件。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#walk\">walk()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">&quot;.&quot;</span>, topdown=<span class=\"literal\">False</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(os.path.join(root, name))</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\.vscode\\settings.json</span><br><span class=\"line\">.\\testpy\\data.pkl</span><br><span class=\"line\">.\\testpy\\quick.py</span><br><span class=\"line\">.\\testpy\\quick2.py</span><br><span class=\"line\">.\\testpy\\test1.txt</span><br><span class=\"line\">.\\testpy\\test2.txt</span><br><span class=\"line\">.\\testpy\\test3.txt</span><br><span class=\"line\">.\\testpy\\test_unicode.txt</span><br><span class=\"line\">.\\test_pack\\test_py.py</span><br><span class=\"line\">.\\test_pack\\__init__.py</span><br><span class=\"line\">.\\unable\\__pycache__\\un_test.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\unable\\un_test.py</span><br><span class=\"line\">.\\unable\\__pycache__</span><br><span class=\"line\">.\\__pycache__\\test_module.cpython-<span class=\"number\">39.</span>pyc</span><br><span class=\"line\">.\\auto.py</span><br><span class=\"line\">.\\data.pkl</span><br><span class=\"line\">.\\dp1.py</span><br><span class=\"line\">.\\foo.txt</span><br><span class=\"line\">.\\test.py</span><br><span class=\"line\">.\\test.txt</span><br><span class=\"line\">.\\test_module.py</span><br><span class=\"line\">.\\workspace.code-workspace</span><br><span class=\"line\">.\\.vscode</span><br><span class=\"line\">.\\testpy</span><br><span class=\"line\">.\\test_pack</span><br><span class=\"line\">.\\test_popen</span><br><span class=\"line\">.\\unable</span><br><span class=\"line\">.\\__pycache__</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\nos.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<p><a href=\"#pardir\">pardir()</a></p>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 输出默认值 ..</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.pardir)</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle;\">\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : left;white-space: nowrap;\">\n获取当前目录的父目录\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"path模块\">path模块</h3>\n<p>os.path 模块主要用于获取文件的属性。<br>\n以下是 os.path 模块的几种常用方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">os.path.<code>abspath</code>(path)</td>\n<td style=\"text-align:left\">返回绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>basename</code>(path)</td>\n<td style=\"text-align:left\">返回文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>commonprefix</code>(list)</td>\n<td style=\"text-align:left\">返回list(多个路径)中，所有path共有的最长的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>dirname</code>(path)</td>\n<td style=\"text-align:left\">返回文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>exists</code>(path)</td>\n<td style=\"text-align:left\">路径存在则返回True,路径损坏返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expanduser</code>(path)</td>\n<td style=\"text-align:left\">把path中包含的&quot;~“和”~user&quot;转换成用户目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>expandvars</code>(path)</td>\n<td style=\"text-align:left\">根据环境变量的值替换path中包含的&quot;$name&quot;和&quot;${name}&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getatime</code>(path)</td>\n<td style=\"text-align:left\">返回最近访问时间（浮点型秒数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getmtime</code>(path)</td>\n<td style=\"text-align:left\">返回最近文件修改时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getctime</code>(path)</td>\n<td style=\"text-align:left\">返回文件 path 创建时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>getsize</code>(path)</td>\n<td style=\"text-align:left\">返回文件大小，如果文件不存在就返回错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isabs</code>(path)</td>\n<td style=\"text-align:left\">判断是否为绝对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isfile</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>isdir</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>islink</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>ismount</code>(path)</td>\n<td style=\"text-align:left\">判断路径是否为挂载点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>join</code>(path1[, path2[, …]])</td>\n<td style=\"text-align:left\">把目录和文件名合成一个路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normcase</code>(path)</td>\n<td style=\"text-align:left\">转换path的大小写和斜杠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>normpath</code>(path)</td>\n<td style=\"text-align:left\">规范path字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>realpath</code>(path)</td>\n<td style=\"text-align:left\">返回path的真实路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>relpath</code>(path[, start])</td>\n<td style=\"text-align:left\">从start开始计算相对路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samefile</code>(path1, path2)</td>\n<td style=\"text-align:left\">判断目录或文件是否相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>sameopenfile</code>(fp1, fp2)</td>\n<td style=\"text-align:left\">判断fp1和fp2是否指向同一文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>samestat</code>(stat1, stat2)</td>\n<td style=\"text-align:left\">判断stat tuple stat1和stat2是否指向同一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>split</code>(path)</td>\n<td style=\"text-align:left\">把路径分割成 dirname 和 basename，返回一个元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitdrive</code>(path)</td>\n<td style=\"text-align:left\">一般用在 windows 下，返回驱动器名和路径组成的元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>splitext</code>(path)</td>\n<td style=\"text-align:left\">分割路径中的文件名与拓展名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>walk</code>(path, visit, arg)</td>\n<td style=\"text-align:left\">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">os.path.<code>supports_unicode_filenames</code></td>\n<td style=\"text-align:left\">设置是否支持unicode路径名</td>\n</tr>\n</tbody>\n</table>\n<!--TODO: ### os.open()与open()的区别 -->\n<!--TODO: ### os.popen()与os.system()的区别 -->\n<hr>\n<h2 id=\"Python错误与异常处理\">Python错误与异常处理</h2>\n<p>Python有两种错误：语法错误和异常。<br>\nPython <a href=\"#assert-%E6%96%AD%E8%A8%80\">assert</a>（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。</p>\n<h3 id=\"语法错误\">语法错误</h3>\n<p>Python 的语法错误或者称之为解析错，会报出以下的错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a)</span></span><br><span class=\"line\"><span class=\"string\">             ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a&#x27;</span>) <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">               ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p>如上，程序会报出语法错误<code>SyntaxError</code>，后面跟着的是错误的提示信息。<br>\n语法分析器会指出出错的一行，并且在最先找到的错误的位置标记上箭头。</p>\n<h3 id=\"异常\">异常</h3>\n<p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。<br>\n大多数的异常都不会被程序处理，都以错误信息的形式展现在这里:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> * (<span class=\"number\">1</span>/<span class=\"number\">0</span>)             <span class=\"comment\"># 0 不能作为除数，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4</span> + spam*<span class=\"number\">3</span>             <span class=\"comment\"># spam 未定义，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in ?</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;spam&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;2&#x27;</span> + <span class=\"number\">2</span>               <span class=\"comment\"># int 不能与 str 相加，触发异常</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n<p>异常类型和异常信息会显示出来，例子中的异常类型有：<code>ZeroDivisionError</code>、<code>NameError</code>、<code>TypeError</code><br>\n程序打印出异常发生的上下文的后面是错误信息，以调用栈的形式显示具体信息。<br>\n程序在运行到第一个错误或异常就会停止并打印出错误/异常信息，如果希望程序运行时遇到异常继续运行或者对异常做出反应，就要使用异常处理。</p>\n<h3 id=\"异常处理\">异常处理</h3>\n<p>异常处理的格式是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;</span><br><span class=\"line\"><span class=\"keyword\">except</span> [ErrorType]:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">[...</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    &lt;solute_segment&gt;</span><br><span class=\"line\">]</span><br><span class=\"line\">[<span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    &lt;code_segment&gt;]</span><br></pre></td></tr></table></figure>\n<p>异常处理的工作流程如下：</p>\n<ul>\n<li>try代码块为要执行的代码，被先执行;</li>\n<li>如果在try代码块产生了异常，程序根据异常类型去到对应except处理区;</li>\n<li>如果没有对应处理区则会继续将异常向上抛出到主程序块，异常会在finally语句执行后被执行结束程序产生异常;</li>\n<li>如果try代码块没有产生异常则执行else代码块(如果有);</li>\n<li>最后执行finally代码块, finally 语句无论异常是否发生都会执行。</li>\n</ul>\n<blockquote>\n<p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">except</span> (RuntimeError, TypeError, NameError):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"抛出异常\">抛出异常</h3>\n<p>python使用raise关键字向上层抛出异常:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，如果输入的数字大于等于10就会自定义产生一个异常，被except检测处理。<br>\nraise后面如果跟了具体的参数，它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。<br>\nraise后面如果不跟具体异常，这样会向上抛出<code>RuntimeError</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    x = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个小于10的数字&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> RuntimeError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入数字大于等于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正确&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>异常输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span> , line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">raise</span></span><br><span class=\"line\">RuntimeError: No active exception to reraise</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义异常\">自定义异常</h3>\n<p>用户可以通过<a href=\"#%E7%BB%A7%E6%89%BF\">继承</a>Exception类创建一个新的异常类。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span>(<span class=\"params\">Exception</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">repr</span>(self.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> MyError(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> MyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;error code:&quot;</span>, e.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> MyError(<span class=\"string\">&quot;MyError&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>error code: 0<br>\nTraceback (most recent call last):<br>\nFile “&lt;stdin&gt;”, line 14, in &lt;module&gt;<br>\nraise MyError(“MyError”)<br>\n__main__.MyError: ‘MyError’</p>\n</blockquote>\n<blockquote>\n<p>大多数的异常的名字都以&quot;Error&quot;结尾，就跟标准的异常命名一样。</p>\n</blockquote>\n<h3 id=\"assert-断言\">assert(断言)</h3>\n<p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。<br>\n断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况。</p>\n<p>语法格式为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError</span><br></pre></td></tr></table></figure>\n<p>assert 后面也可以紧跟参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> expression [, arguments]</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> expression:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure>\n<p>下面是实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正常运行&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"literal\">False</span></span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure>\n<p>带参数的实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span>, <span class=\"string\">&quot;1大于2是错误的&quot;</span></span><br><span class=\"line\">AssertionError: <span class=\"number\">1</span>大于<span class=\"number\">2</span>是错误的</span><br></pre></td></tr></table></figure>\n<p>以下实例判断当前系统是否为 Linux，如果不满足条件则直接触发异常，不必执行接下来的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">assert</span> (<span class=\"string\">&#x27;linux&#x27;</span> <span class=\"keyword\">in</span> sys.platform), <span class=\"string\">&quot;该代码只能在 Linux 下执行&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来要执行的代码</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"with关键字\">with关键字</h3>\n<p>Python 中的 with 语句用于异常处理，封装了 try…except…finally 编码范式，提高了易用性。<br>\nwith 语句使代码更清晰、更具可读性， 它简化了文件流等公共资源的管理。<br>\n在处理文件对象时使用 with 关键字是一种很好的做法。<br>\n我们可以看下以下几种代码实例：<br>\n不使用 with，也不使用 try…except…finally</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码如果在调用 write 的过程中，出现了异常，则 close 方法将无法被执行，因此资源就会一直被该程序占用而无法被释放。 接下来我们呢可以使用 try…except…finally 来改进代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    file.close()</span><br></pre></td></tr></table></figure>\n<p>以上代码我们对可能发生异常的代码处进行 try 捕获，发生异常时执行 except 代码块，finally 代码块是无论什么情况都会执行，所以文件会被关闭，不会因为执行异常而占用资源。</p>\n<p>使用 with 关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27;hello world !&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>使用 with 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try/finally 语句是一样的。<br>\n我们可以在执行 with 关键字后检验文件是否关闭：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;./test.txt&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(f.closed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.closed)</span><br></pre></td></tr></table></figure>\n<p>以上代码输出结果为：</p>\n<blockquote>\n<p>False<br>\nTrue</p>\n</blockquote>\n<p>with 语句实现原理建立在上下文管理器之上。<br>\n上下文管理器是一个实现 __enter__ 和 __exit__ 方法的类。<br>\n使用 with 语句确保在嵌套块的末尾调用 __exit__ 方法。<br>\n这个概念类似于 try…finally 块的使用。</p>\n<blockquote>\n<p>在文件对象中定义了 __enter__ 和 __exit__ 方法，即文件对象也实现了上下文管理器，首先调用 __enter__ 方法，然后执行 with 语句中的代码，最后调用 __exit__ 方法。 即使出现错误，也会调用 __exit__ 方法，也就是会关闭文件流。</p>\n</blockquote>\n<!-- TODO：traceback模块 -->\n<!-- TODO: logging模块 -->\n<hr>\n<h2 id=\"Python面向对象\">Python面向对象</h2>\n<h3 id=\"面向对象技术简介\">面向对象技术简介</h3>\n<ul>\n<li>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>\n<li>方法：类中定义的函数。</li>\n<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>\n<li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</li>\n<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>\n<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>\n<li>实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li>\n<li>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟&quot;是一个（is-a）&quot;关系（例图，Dog是一个Animal）。</li>\n<li>实例化：创建一个类的实例，类的具体对象。</li>\n<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>\n</ul>\n<h3 id=\"定义类\">定义类</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。</p>\n<h3 id=\"类对象\">类对象</h3>\n<p>类对象支持两种操作：属性引用和实例化。<br>\n属性引用使用和 Python 中所有的属性引用一样的标准语法：<a href=\"http://obj.name\">obj.name</a>。<br>\n类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;一个简单的类实例&quot;&quot;&quot;</span></span><br><span class=\"line\">    i = <span class=\"number\">12345</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">x = MyClass()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 访问类的属性和方法</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;MyClass 类的属性 i 为：&quot;</span>, x.i)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;MyClass 类的方法 f 输出为：&quot;</span>, x.f())</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果是：</p>\n<blockquote>\n<p>MyClass 类的属性 i 为： 12345<br>\nMyClass 类的方法 f 输出为： hello world</p>\n</blockquote>\n<p>类有一个名为 __init__() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    self.data = []</span><br></pre></td></tr></table></figure>\n<p>类定义了 __init__() 方法，类的实例化操作会自动调用 __init__() 方法。<br>\n当然， __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Complex</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, realpart, imagpart</span>):</span></span><br><span class=\"line\">        self.r = realpart</span><br><span class=\"line\">        self.i = imagpart</span><br><span class=\"line\">x = Complex(<span class=\"number\">3.0</span>, -<span class=\"number\">4.5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.r, x.i)   <span class=\"comment\"># 输出结果：3.0 -4.5</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>self代表类的实例，而非类</strong></em><br>\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prt</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(self.__class__)</span><br><span class=\"line\"> </span><br><span class=\"line\">t = Test()</span><br><span class=\"line\">t.prt()</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>&lt;__main__.Test instance at 0x0000025D089CCFD0&gt;<br>\n__main__.Test</p>\n</blockquote>\n<p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。</p>\n<p>self 不是 python 关键字，我们把他换成其他也是可以正常执行的</p>\n<h3 id=\"类的方法\">类的方法</h3>\n<p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 实例化类</span></span><br><span class=\"line\">p = people(<span class=\"string\">&#x27;sam&#x27;</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>)</span><br><span class=\"line\">p.speak()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>sam 说: 我 10 岁。</p>\n</blockquote>\n<h3 id=\"继承\">继承</h3>\n<p>派生类的定义语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">BaseClassName</span>):</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。</p>\n<p>BaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">modname.BaseClassName</span>):</span></span><br></pre></td></tr></table></figure>\n<p>单继承：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#单继承示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span>(<span class=\"params\">people</span>):</span></span><br><span class=\"line\">    grade = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,n,a,w,g</span>):</span></span><br><span class=\"line\">        <span class=\"comment\">#调用父类的构函</span></span><br><span class=\"line\">        people.__init__(self,n,a,w)</span><br><span class=\"line\">        self.grade = g</span><br><span class=\"line\">    <span class=\"comment\">#覆写父类的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">s = student(<span class=\"string\">&#x27;ken&#x27;</span>,<span class=\"number\">10</span>,<span class=\"number\">60</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">s.speak()</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>ken 说: 我 10 岁了，我在读 3 年级</p>\n</blockquote>\n<h3 id=\"多继承\">多继承</h3>\n<p>Python同样有限的支持多继承形式。多继承的类定义形如下例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClassName</span>(<span class=\"params\">Base1, Base2, Base3</span>):</span></span><br><span class=\"line\">    &lt;statement-<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>\n<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义基本属性</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    age = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class=\"line\">    __weight = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.age = a</span><br><span class=\"line\">        self.__weight = w</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单继承示例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">student</span>(<span class=\"params\">people</span>):</span></span><br><span class=\"line\">    grade = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w, g</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的构函</span></span><br><span class=\"line\">        people.__init__(self, n, a, w)</span><br><span class=\"line\">        self.grade = g</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 覆写父类的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 另一个类，多重继承之前的准备</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">speaker</span>:</span></span><br><span class=\"line\">    topic = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, t</span>):</span></span><br><span class=\"line\">        self.name = n</span><br><span class=\"line\">        self.topic = t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span> % (self.name, self.topic))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多重继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sample</span>(<span class=\"params\">speaker, student</span>):</span></span><br><span class=\"line\">    a = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, n, a, w, g, t</span>):</span></span><br><span class=\"line\">        student.__init__(self, n, a, w, g)</span><br><span class=\"line\">        speaker.__init__(self, n, t)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test = sample(<span class=\"string\">&quot;Tim&quot;</span>, <span class=\"number\">25</span>, <span class=\"number\">80</span>, <span class=\"number\">4</span>, <span class=\"string\">&quot;Python&quot;</span>)</span><br><span class=\"line\">test.speak()  <span class=\"comment\"># 方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>我叫 Tim，我是一个演说家，我演讲的主题是 Python</p>\n</blockquote>\n<h3 id=\"方法重写\">方法重写</h3>\n<p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span>:</span>        <span class=\"comment\"># 定义父类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;调用父类方法&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">Parent</span>):</span> <span class=\"comment\"># 定义子类</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myMethod</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;调用子类方法&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = Child()          <span class=\"comment\"># 子类实例</span></span><br><span class=\"line\">c.myMethod()         <span class=\"comment\"># 子类调用重写方法</span></span><br><span class=\"line\"><span class=\"built_in\">super</span>(Child,c).myMethod() <span class=\"comment\"># 用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure>\n<!-- TODO: super() -->\n<p><a href=\"#super\"><code>super()</code></a> 函数是用于调用父类(超类)的一个方法。<br>\n执行以上程序输出结果为：</p>\n<blockquote>\n<p>调用子类方法<br>\n调用父类方法</p>\n</blockquote>\n<h3 id=\"类属性和方法\">类属性和方法</h3>\n<p><strong>类的私有属性</strong><br>\n__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p>\n<p><strong>类的方法</strong><br>\n在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。<br>\nself 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。</p>\n<p><strong>类的私有方法</strong><br>\n__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JustCounter</span>:</span></span><br><span class=\"line\">    __secretCount = <span class=\"number\">0</span>  <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\">    publicCount = <span class=\"number\">0</span>    <span class=\"comment\"># 公开变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__secretCount += <span class=\"number\">1</span></span><br><span class=\"line\">        self.publicCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (self.__secretCount)</span><br><span class=\"line\"> </span><br><span class=\"line\">counter = JustCounter()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (counter.publicCount)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (counter.__secretCount)  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>1<br>\n2<br>\n2<br>\nTraceback (most recent call last):<br>\nFile “<a href=\"http://test.py\">test.py</a>”, line 16, in &lt;module&gt;<br>\nprint (counter.__secretCount)  # 报错，实例不能访问私有变量<br>\nAttributeError: ‘JustCounter’ object has no attribute ‘__secretCount’</p>\n</blockquote>\n<h3 id=\"私有变量\">私有变量</h3>\n<p>那种仅限从一个对象内部访问的“私有”实例变量在 Python 中并不存在。 但是，大多数 Python 代码都遵循这样一个约定：带有一个下划线的名称 (例如 _spam) 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。 这应当被视为一个实现细节，可能不经通知即加以改变。<br>\n由于存在对于类私有成员的有效使用场景（例如避免名称与子类所定义的名称相冲突），因此存在对此种机制的有限支持，称为 名称改写。 任何形式为 __spam 的标识符（至少带有两个前缀下划线，至多一个后缀下划线）的文本将被替换为 _classname__spam，其中 classname 为去除了前缀下划线的当前类名称。 这种改写不考虑标识符的句法位置，只要它出现在类定义内部就会进行。</p>\n<p>名称改写有助于让子类重载方法而不破坏类内方法调用。</p>\n<!-- TODO：私有变量 -->\n<h3 id=\"类的专有方法\">类的专有方法</h3>\n<ul>\n<li>__init__ : 构造函数，在生成对象时调用</li>\n<li>__del__ : 析构函数，释放对象时使用</li>\n<li>__repr__ : 打印，转换</li>\n<li>__setitem__ : 按照索引赋值</li>\n<li>__getitem__: 按照索引获取值</li>\n<li>__len__: 获得长度</li>\n<li>__cmp__: 比较运算</li>\n<li>__call__: 函数调用</li>\n<li>__add__: 加运算</li>\n<li>__sub__: 减运算</li>\n<li>__mul__: 乘运算</li>\n<li>__truediv__: 除运算</li>\n<li>__mod__: 求余运算</li>\n<li>__pow__: 乘方</li>\n</ul>\n<h3 id=\"运算符重载\">运算符重载</h3>\n<p>Python同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (v1 + v2)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>Vector(7,8)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python命名空间和作用域\">Python命名空间和作用域</h2>\n<h3 id=\"命名空间\">命名空间</h3>\n<p>先看看官方文档的一段话：</p>\n<blockquote>\n<p>A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。</p>\n<p>命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的。</p>\n</blockquote>\n<p>命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。<br>\n我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p>\n<p>一般有三种命名空间：</p>\n<ul>\n<li>内置名称（built-in names）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</li>\n<li>全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</li>\n<li>局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li>\n</ul>\n<p><img src=\"%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png\" alt=\"命名空间\"></p>\n<p>命名空间查找顺序:<br>\n假设我们要使用变量 test，则 Python 的查找顺序为：<strong>局部的命名空间去 -&gt; 全局命名空间 -&gt; 内置命名空间</strong>。<br>\n如果找不到变量 test，它将放弃查找并引发一个 NameError 异常:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NameError: name <span class=\"string\">&#x27;test&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined。</span><br></pre></td></tr></table></figure>\n<p>命名空间的生命周期：<br>\n命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。<br>\n因此，我们无法从外部命名空间访问内部命名空间的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># var1 是全局名称</span></span><br><span class=\"line\">var1 = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_func</span>():</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># var2 是局部名称</span></span><br><span class=\"line\">    var2 = <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_inner_func</span>():</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># var3 是内嵌的局部名称</span></span><br><span class=\"line\">        var3 = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>如下图所示，相同的对象名称可以存在于多个命名空间中。</p>\n<p><img src=\"%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4-2.png\" alt=\"命名空间-2\"></p>\n<h3 id=\"作用域\">作用域</h3>\n<blockquote>\n<p>A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</p>\n</blockquote>\n<p>作用域就是一个 Python 程序可以直接访问命名空间的正文区域。<br>\n在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。<br>\nPython 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>\n<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：</p>\n<ul>\n<li>L（Local）：最内层，包含局部变量，比如一个函数/方法内部。</li>\n<li>E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>\n<li>G（Global）：当前脚本的最外层，比如当前模块的全局变量。</li>\n<li>B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。</li>\n</ul>\n<p>在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>\n<p><img src=\"%E4%BD%9C%E7%94%A8%E5%9F%9F.png\" alt=\"作用域\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g_count = <span class=\"number\">0</span>  <span class=\"comment\"># 全局作用域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span>():</span></span><br><span class=\"line\">    o_count = <span class=\"number\">1</span>  <span class=\"comment\"># 闭包函数外的函数中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        i_count = <span class=\"number\">2</span>  <span class=\"comment\"># 局部作用域</span></span><br></pre></td></tr></table></figure>\n<p>内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> builtins</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(builtins))</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>[‘ArithmeticError’, ‘AssertionError’, ‘AttributeError’, ‘BaseException’, ‘BlockingIOError’, ‘BrokenPipeError’, ‘BufferError’, ‘BytesWarning’, ‘ChildProcessError’, ‘ConnectionAbortedError’, ‘ConnectionError’, ‘ConnectionRefusedError’, ‘ConnectionResetError’, ‘DeprecationWarning’, ‘EOFError’, ‘Ellipsis’, ‘EnvironmentError’, ‘Exception’, ‘False’, ‘FileExistsError’, ‘FileNotFoundError’, ‘FloatingPointError’, ‘FutureWarning’, ‘GeneratorExit’, ‘IOError’, ‘ImportError’, ‘ImportWarning’, ‘IndentationError’, ‘IndexError’, ‘InterruptedError’, ‘IsADirectoryError’, ‘KeyError’, ‘KeyboardInterrupt’, ‘LookupError’, ‘MemoryError’, ‘ModuleNotFoundError’, ‘NameError’, ‘None’, ‘NotADirectoryError’, ‘NotImplemented’, ‘NotImplementedError’, ‘OSError’, ‘OverflowError’, ‘PendingDeprecationWarning’, ‘PermissionError’, ‘ProcessLookupError’, ‘RecursionError’, ‘ReferenceError’, ‘ResourceWarning’, ‘RuntimeError’, ‘RuntimeWarning’, ‘StopAsyncIteration’, ‘StopIteration’, ‘SyntaxError’, ‘SyntaxWarning’, ‘SystemError’, ‘SystemExit’, ‘TabError’, ‘TimeoutError’, ‘True’, ‘TypeError’, ‘UnboundLocalError’, ‘UnicodeDecodeError’, ‘UnicodeEncodeError’, ‘UnicodeError’, ‘UnicodeTranslateError’, ‘UnicodeWarning’, ‘UserWarning’, ‘ValueError’, ‘Warning’, ‘WindowsError’, ‘ZeroDivisionError’, ‘__build_class__’, ‘__debug__’, ‘__doc__’, ‘__import__’, ‘__loader__’, ‘__name__’, ‘__package__’, ‘__spec__’, ‘abs’, ‘all’, ‘any’, ‘ascii’, ‘bin’, ‘bool’, ‘breakpoint’, ‘bytearray’, ‘bytes’, ‘callable’, ‘chr’, ‘classmethod’, ‘compile’, ‘complex’, ‘copyright’, ‘credits’, ‘delattr’, ‘dict’, ‘dir’, ‘divmod’, ‘enumerate’, ‘eval’, ‘exec’, ‘exit’, ‘filter’, ‘float’, ‘format’, ‘frozenset’, ‘getattr’, ‘globals’, ‘hasattr’, ‘hash’, ‘help’, ‘hex’, ‘id’, ‘input’, ‘int’, ‘isinstance’, ‘issubclass’, ‘iter’, ‘len’, ‘license’, ‘list’, ‘locals’, ‘map’, ‘max’, ‘memoryview’, ‘min’, ‘next’, ‘object’, ‘oct’, ‘open’, ‘ord’, ‘pow’, ‘print’, ‘property’, ‘quit’, ‘range’, ‘repr’, ‘reversed’, ‘round’, ‘set’, ‘setattr’, ‘slice’, ‘sorted’, ‘staticmethod’, ‘str’, ‘sum’, ‘super’, ‘tuple’, ‘type’, ‘vars’, ‘zip’]</p>\n</blockquote>\n<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    test = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>test</p>\n</blockquote>\n<p>实例中 test 变量定义在 if 语句块中，但外部还是可以访问的。<br>\n如果将 test 定义在函数中，则它就是局部变量，外部不能访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_func</span>():</span></span><br><span class=\"line\">    test = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile “&lt;stdin&gt;”, line 1, in &lt;module&gt;<br>\nNameError: name ‘test’ is not defined</p>\n</blockquote>\n<p>从报错的信息上看，说明了 test 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。</p>\n<h3 id=\"全局变量和局部变量\">全局变量和局部变量</h3>\n<p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。<br>\n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = <span class=\"number\">0</span> <span class=\"comment\"># 这是一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 可写函数说明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span>(<span class=\"params\"> arg1, arg2 </span>):</span></span><br><span class=\"line\">    <span class=\"comment\">#返回2个参数的和.&quot;</span></span><br><span class=\"line\">    total = arg1 + arg2 <span class=\"comment\"># total在这里是局部变量.</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> (<span class=\"string\">&quot;函数内是局部变量 : &quot;</span>, total)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#调用sum函数</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>( <span class=\"number\">10</span>, <span class=\"number\">20</span> )</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;函数外是全局变量 : &quot;</span>, total)</span><br></pre></td></tr></table></figure>\n<p>以上实例输出结果：</p>\n<blockquote>\n<p>函数内是局部变量 :  30<br>\n函数外是全局变量 :  0</p>\n</blockquote>\n<h3 id=\"global和nonlocal关键字\">global和nonlocal关键字</h3>\n<p>当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> num  <span class=\"comment\"># 需要使用 global 关键字声明</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num) </span><br><span class=\"line\">    num = <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">fun1()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>1<br>\n123<br>\n123</p>\n</blockquote>\n<p>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span>():</span></span><br><span class=\"line\">    num = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span>():</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> num   <span class=\"comment\"># nonlocal关键字声明</span></span><br><span class=\"line\">        num = <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">    inner()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">outer()</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>100<br>\n100</p>\n</blockquote>\n<hr>\n<h2 id=\"Python标准库概览\">Python标准库概览</h2>\n<h3 id=\"操作系统接口\">操作系统接口</h3>\n<p><code>os模块</code>提供了不少与操作系统相关联的函数。更多请参见：<a href=\"#Python-os%E6%A8%A1%E5%9D%97\">Python os模块</a>和<a href=\"#Python-os%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python os模块方法</a></p>\n<blockquote>\n<p>建议使用 “import os” 风格而非 “from os import *”。这样可以保证随操作系统不同而有所变化的 os.open() 不会覆盖内置函数 open()。</p>\n</blockquote>\n<p>针对日常的文件和目录管理任务，<code>shutil模块</code>提供了一个易于使用的高级接口，更多请见：<a href=\"Python-shutil%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95\">Python shutil模块</a></p>\n<h3 id=\"文件通配符\">文件通配符</h3>\n<p><code>glob模块</code>提供了一个函数用于从目录通配符搜索中生成文件列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"built_in\">print</span>(glob.glob(<span class=\"string\">&#x27;*.py&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;quick.py&#x27;</span>, <span class=\"string\">&#x27;quick2.py&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行参数\">命令行参数</h3>\n<p>通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 “python <a href=\"http://demo.py\">demo.py</a> one two three” 后可以得到以下输出结果:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(sys.argv)</span><br><span class=\"line\">[<span class=\"string\">&#x27;demo.py&#x27;</span>, <span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误输出重定向和程序终止\">错误输出重定向和程序终止</h3>\n<p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息。<br>\n大多脚本的定向终止都使用 “sys.exit()”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.stderr.write(<span class=\"string\">&quot;stderr.write_test\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stderr.write_test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串正则匹配\">字符串正则匹配</h3>\n<p><code>re模块</code>为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.findall(<span class=\"string\">r&#x27;\\bf[a-z]*&#x27;</span>, <span class=\"string\">&#x27;which foot or hand fell fastest&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.sub(<span class=\"string\">r&#x27;(\\b[a-z]+) \\1&#x27;</span>, <span class=\"string\">r&#x27;\\1&#x27;</span>, <span class=\"string\">&#x27;cat in the the hat&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>[‘foot’, ‘fell’, ‘fastest’]<br>\n‘cat in the hat’</p>\n</blockquote>\n<p>如果只需要简单的功能，应该首先考虑字符串方法，因为它们非常简单，易于阅读和调试:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;tea for too&#x27;</span>.replace(<span class=\"string\">&#x27;too&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;tea for two&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>更多关于正则表达式表达见后文<a href=\"#Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\">正则表达式</a></p>\n<h3 id=\"数学\">数学</h3>\n<p>python提供了<code>math模块</code>对简单数学支持，以及<code>random模块</code>对随机数的支持。</p>\n<h3 id=\"访问互联网\">访问互联网</h3>\n<p>有几个模块用于访问互联网以及处理网络通信协议。其中最简单的两个是用于处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib。</p>\n<h3 id=\"日期和时间\">日期和时间</h3>\n<p><code>datetime模块</code>为日期和时间处理同时提供了简单和复杂的方法。<br>\n支持日期和时间算法的同时，实现的重点放在更有效的处理和格式化输出。<br>\n该模块还支持时区处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dates are easily constructed and formatted</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">now = datetime.date.today()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.date(<span class=\"number\">2023</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(now.strftime(<span class=\"string\">&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dates support calendar arithmetic</span></span><br><span class=\"line\">birthday = datetime.date(<span class=\"number\">1964</span>, <span class=\"number\">7</span>, <span class=\"number\">31</span>)</span><br><span class=\"line\">age = now - birthday</span><br><span class=\"line\"><span class=\"built_in\">print</span>(age.days)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">2022</span>-<span class=\"number\">02</span>-<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"attribute\">2023</span>-<span class=\"number\">12</span>-<span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"attribute\">02</span>-<span class=\"number\">21</span>-<span class=\"number\">22</span>. <span class=\"number\">21</span> Feb <span class=\"number\">2022</span> is a Monday <span class=\"literal\">on</span> the <span class=\"number\">21</span> day of February.</span><br><span class=\"line\"><span class=\"attribute\">21024</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数据压缩\">数据压缩</h3>\n<p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">b&quot;witch which has which witches wrist watch&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(s))</span><br><span class=\"line\"></span><br><span class=\"line\">t = zlib.compress(s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(t))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(zlib.decompress(t))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zlib.crc32(s))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">41</span></span><br><span class=\"line\"><span class=\"number\">37</span></span><br><span class=\"line\">b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class=\"line\"><span class=\"number\">226805979</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"性能度量\">性能度量</h3>\n<p>有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案。<br>\n例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多,timeit 证明了现代的方法更快一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Timer(<span class=\"string\">&#x27;t=a; a=b; b=t&#x27;</span>, <span class=\"string\">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class=\"line\"><span class=\"number\">0.57535828626024577</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Timer(<span class=\"string\">&#x27;a,b = b,a&#x27;</span>, <span class=\"string\">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class=\"line\"><span class=\"number\">0.54962537085770791</span></span><br></pre></td></tr></table></figure>\n<p>相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具。</p>\n<h3 id=\"测试模块\">测试模块</h3>\n<p>开发高质量软件的方法之一是为每一个函数开发测试代码，并且在开发过程中经常进行测试<br>\n<code>doctest模块</code>提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。<br>\n测试构造如同简单的将它的输出结果剪切并粘贴到文档字符串中。<br>\n通过用户提供的例子，它强化了文档，允许 doctest 模块确认代码的结果是否与文档一致:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average</span>(<span class=\"params\">values</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class=\"line\"><span class=\"string\">    40.0</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(values) / <span class=\"built_in\">len</span>(values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> doctest</span><br><span class=\"line\">doctest.testmod()   <span class=\"comment\"># 自动验证嵌入测试</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>TestResults(failed=0, attempted=1)</p>\n</blockquote>\n<p><code>unittest模块</code>不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatisticalFunctions</span>(<span class=\"params\">unittest.TestCase</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_average</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.assertEqual(average([<span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">70</span>]), <span class=\"number\">40.0</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">round</span>(average([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]), <span class=\"number\">1</span>), <span class=\"number\">4.3</span>)</span><br><span class=\"line\">        self.assertRaises(ZeroDivisionError, average, [])</span><br><span class=\"line\">        self.assertRaises(TypeError, average, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">unittest.main() <span class=\"comment\"># Calling from the command line invokes all tests</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python正则表达式\">Python正则表达式</h2>\n<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。<br>\n<code>re 模块</code>使 Python 语言拥有全部的正则表达式功能。</p>\n<p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。<br>\nre 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>\n<p>本章节主要介绍 Python 中常用的正则表达式处理函数，如果你对正则表达式不了解，可以查看<a href=\"/cn/regex\">正则表达式</a>。</p>\n<h3 id=\"re-match函数\">re.match函数</h3>\n<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>\n<p>函数语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(pattern, string, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>函数参数说明：</p>\n<ul>\n<li>pattern : 匹配的正则表达式</li>\n<li>string : 要匹配的字符串。</li>\n<li>flags : 可选参数，标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6\">正则表达式修饰符</a></li>\n</ul>\n<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>\n<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<ul>\n<li>group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</li>\n<li>groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</li>\n</ul>\n<p>以下是实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.match(<span class=\"string\">&quot;www&quot;</span>, <span class=\"string\">&quot;www.baidu.com&quot;</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.match(<span class=\"string\">&quot;com&quot;</span>, <span class=\"string\">&quot;www.baidu.com&quot;</span>))  <span class=\"comment\"># 不在起始位置匹配</span></span><br><span class=\"line\"></span><br><span class=\"line\">line = <span class=\"string\">&quot;Cats are smarter than dogs&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># .* 表示任意匹配除换行符（\\n、\\r）之外的任何单个或多个字符</span></span><br><span class=\"line\"><span class=\"comment\"># (.*?) 表示&quot;非贪婪&quot;模式，只保存第一个匹配到的子串</span></span><br><span class=\"line\">matchObj = re.match(<span class=\"string\">r&quot;(.*) are (.*?) .*&quot;</span>, line, re.M | re.I)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;matchObj.groups() : &quot;</span>, matchObj.groups())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>(0, 3)<br>\nNone<br>\nmatchObj.group() :  Cats are smarter than dogs<br>\nmatchObj.group(1) :  Cats<br>\nmatchObj.group(2) :  smarter<br>\nmatchObj.groups() :  (‘Cats’, ‘smarter’)</p>\n</blockquote>\n<h3 id=\"re-search函数\">re.search函数</h3>\n<p>re.search扫描整个字符串并返回第一个成功的匹配。</p>\n<p>函数语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.search(pattern, string, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>函数参数说明：</p>\n<ul>\n<li>pattern : 匹配的正则表达式</li>\n<li>string : 要匹配的字符串</li>\n<li>flags : 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6\">正则表达式修饰符</a></li>\n</ul>\n<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。<br>\n我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<!-- TODO: 正则表达式补全 -->\n<hr>\n<h2 id=\"Python操作MySQL\">Python操作MySQL</h2>\n<p>MySQL是最流行的关系型数据库管理系统。<br>\nPython连接mysql数据库的方法有<code>mysql-connector</code>和<code>PyMySQL</code>两种，接下来我们来介绍这两个模块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install mysql-connector</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install PyMySQL</span><br></pre></td></tr></table></figure>\n<p>使用以下代码测试mysql-connector/pymysql是否安装成功：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mysql.connector</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，如果没有产生错误，表明安装成功。</p>\n<p>两个模块的方法基本一致.</p>\n<h3 id=\"创建数据库连接\">创建数据库连接</h3>\n<p>可以使用以下代码来连接数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mysql.connector</span><br><span class=\"line\"></span><br><span class=\"line\">db = mysql.connector.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&quot;localhost&quot;</span>,   <span class=\"comment\"># 数据库主机地址</span></span><br><span class=\"line\">    user = <span class=\"string\">&quot;yourusername&quot;</span>,    <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">    passwd = <span class=\"string\">&quot;yourpassword&quot;</span>    <span class=\"comment\">#  数据库密码 </span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(db)</span><br></pre></td></tr></table></figure>\n<p>如果出现以下错误：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"selector-class\">.connector</span><span class=\"selector-class\">.errors</span><span class=\"selector-class\">.NotSupportedError</span>: Authentication plugin <span class=\"string\">&#x27;caching_sha2_password&#x27;</span> is not supported</span><br></pre></td></tr></table></figure>\n<p>是因为你的 MySQL 是 8.0 以上版本，密码插件验证方式发生了变化，早期版本为 mysql_native_password，8.0 版本为 caching_sha2_password，所以需要做些改变：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db = mysql.connector.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&quot;localhost&quot;</span>,   <span class=\"comment\"># 数据库主机地址</span></span><br><span class=\"line\">    user = <span class=\"string\">&quot;yourusername&quot;</span>,    <span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\">    passwd = <span class=\"string\">&quot;yourpassword&quot;</span>,    <span class=\"comment\">#  数据库密码 </span></span><br><span class=\"line\">    database = <span class=\"string\">&quot;yourdatabase&quot;</span>,   <span class=\"comment\"># 选择数据库</span></span><br><span class=\"line\">    auth_plugin=<span class=\"string\">&quot;mysql_native_password&quot;</span>     <span class=\"comment\"># 选择密码插件验证方式为mysql_native_password</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者修改mysql的my.ini配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库操作\">数据库操作</h3>\n<p>在连接好数据库后，我们使用cursor.execute(sql)来执行数据库操作,并用迭代器打印结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设以连接好数据库db = mysql.connector.connect()</span></span><br><span class=\"line\"></span><br><span class=\"line\">cursor= db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;use mydb&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;show tables&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cursor:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br></pre></td></tr></table></figure>\n<p>执行的sql语句参见<a href=\"/cn/mysql\">mysql</a></p>\n<!-- TODO: mysql博客 -->\n<p>当使用sql语句导致数据表内容有更新时，必须使用db.commit()提交</p>\n<blockquote>\n<p>cursor.rowcount为更改的行数</p>\n</blockquote>\n<p>cursor.execute()只会执行一次数据操作，如果要执行批量插入修改等操作，需要使用executemany(sql,args_tuple_list)方法。该方法的第二参数是一个元组列表,包含要操作的数据。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql = <span class=\"string\">&quot;insert into testtable (name,value) values (%s,%s)&quot;</span></span><br><span class=\"line\">val = [</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name1&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name2&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name3&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;name4&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.executemany(sql,val)</span><br><span class=\"line\"></span><br><span class=\"line\">db.commit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mycursor.rowcount, <span class=\"string\">&quot;记录插入成功。&quot;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>mycursor.lastrowid表示最新数据记录的ID</p>\n</blockquote>\n<p>如果使用查询，可以使用fetchall()获取所有记录，或者fetchone/fetchmany等选择性获取。</p>\n<p>fetchall返回的是一个列表，记录存储为元组。</p>\n<h4 id=\"使用预处理格式（占位符格式）\">使用预处理格式（占位符格式）</h4>\n<p>可以查看一下execute()方法的定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQLCursor</span>(<span class=\"params\">CursorBase</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        省略很多方法和变量</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span>(<span class=\"params\">self, operation, params=<span class=\"literal\">None</span>, multi=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Executes the given operation</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        Executes the given operation substituting any markers with</span></span><br><span class=\"line\"><span class=\"string\">        the given parameters.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        For example, getting all rows where id is 5:</span></span><br><span class=\"line\"><span class=\"string\">          cursor.execute(&quot;SELECT * FROM t1 WHERE id = %s&quot;, (5,))</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        The multi argument should be set to True when executing multiple</span></span><br><span class=\"line\"><span class=\"string\">        statements in one operation. If not set and multiple results are</span></span><br><span class=\"line\"><span class=\"string\">        found, an InterfaceError will be raised.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        If warnings where generated, and connection.get_warnings is True, then</span></span><br><span class=\"line\"><span class=\"string\">        self._warnings will be a list containing these warnings.</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">        Returns an iterator when multi is True, otherwise None.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>第1个参数是要执行的SQL语句，其中，参数位置先使用占位符来占位.<br>\n第2个参数是一个tuple（元组），元素值就是SQL占位符对应的参数，注意只有一个参数的时候，要写成(xxx,)，后面的逗号不要忘记。<br>\n第3个参数是一个bool值，表示第一个参数是不是多个SQL语句，如果是的话，就传入True，否则传入False。</p>\n<p><strong>注意，在SQL中的占位符，统一写%s, 具体的类型，是在tuple中，传入的参数元素类型决定</strong></p>\n<h4 id=\"关闭数据库连接\">关闭数据库连接</h4>\n<p>使用db.close()关闭数据库连接</p>\n<h4 id=\"数据库回滚\">数据库回滚</h4>\n<p>如果数据库发生错误，建议使用db.rollback()进行回滚</p>\n<hr>\n<h2 id=\"Python多线程\">Python多线程</h2>\n<p>多线程类似于同时执行多个不同程序，多线程运行有如下优点：</p>\n<ul>\n<li>使用线程可以把占据长时间的程序中的任务放到后台去处理。</li>\n<li>用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</li>\n<li>程序的运行速度可能加快。</li>\n<li>在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。</li>\n</ul>\n<p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>\n每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。<br>\n指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。</p>\n<ul>\n<li>线程可以被抢占（中断）。</li>\n<li>在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。</li>\n</ul>\n<p>线程可以分为:</p>\n<ul>\n<li>内核线程：由操作系统内核创建和撤销。</li>\n<li>用户线程：不需要内核支持而在用户程序中实现的线程。</li>\n</ul>\n<p>Python3 线程中常用的两个模块为：</p>\n<ul>\n<li>_thread</li>\n<li>threading(推荐使用)</li>\n</ul>\n<p>thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用&quot;thread&quot; 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。</p>\n<p>Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。<br>\n_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。<br>\nthreading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p>\n<ul>\n<li>threading.currentThread(): 返回当前的线程变量。</li>\n<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>\n<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>\n</ul>\n<p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</p>\n<ul>\n<li>run(): 用以表示线程活动的方法。</li>\n<li>start():启动线程活动。</li>\n<li>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li>\n<li>isAlive(): 返回线程是否活动的。</li>\n<li>getName(): 返回线程名。</li>\n<li>setName(): 设置线程名。</li>\n</ul>\n<h3 id=\"thread模块\">_thread模块</h3>\n<p>Python中使用线程有两种方式：函数或者用类来包装线程对象。</p>\n<p>函数式：调用 _thread 模块中的<code>start_new_thread</code>()函数来产生新线程。语法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_thread.start_new_thread ( function, args[, kwargs] )</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<ul>\n<li>function - 线程函数。</li>\n<li>args - 传递给线程函数的参数,他必须是个tuple类型。</li>\n<li>kwargs - 可选参数。</li>\n</ul>\n<p>以下是一个实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为线程定义一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, loopTime</span>):</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> count &lt; loopTime:</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建两个线程</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    _thread.start_new_thread(print_time, (<span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    _thread.start_new_thread(print_time, (<span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: 无法启动线程&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>以上代码的输出结果为：</p>\n<blockquote>\n<p>Thread-1: Tue Mar 22 16:16:05 2022<br>\nThread-2: Tue Mar 22 16:16:07 2022<br>\nThread-1: Tue Mar 22 16:16:07 2022<br>\nThread-1: Tue Mar 22 16:16:09 2022<br>\nThread-2: Tue Mar 22 16:16:11 2022<br>\nThread-1: Tue Mar 22 16:16:11 2022<br>\nThread-1: Tue Mar 22 16:16:13 2022<br>\nThread-2: Tue Mar 22 16:16:15 2022<br>\nThread-2: Tue Mar 22 16:16:19 2022<br>\nThread-2: Tue Mar 22 16:16:23 2022<br>\nThread-2: Tue Mar 22 16:16:27 2022</p>\n</blockquote>\n<h3 id=\"treading模块\">treading模块</h3>\n<p>我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, delay</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.delay = delay</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开始线程：&quot;</span> + self.name)</span><br><span class=\"line\">        print_time(self.name, self.delay, <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出线程：&quot;</span> + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, counter</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> counter:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> exitFlag:</span><br><span class=\"line\">            threadName.exit()</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">        counter -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\">thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新线程</span></span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\">thread1.join()</span><br><span class=\"line\">thread2.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码的运行结果为：</p>\n<blockquote>\n<p>开始线程：Thread-1<br>\n开始线程：Thread-2<br>\nThread-1: Tue Mar 22 16:31:08 2022<br>\nThread-1: Tue Mar 22 16:31:09 2022<br>\nThread-2: Tue Mar 22 16:31:09 2022<br>\nThread-1: Tue Mar 22 16:31:10 2022<br>\nThread-1: Tue Mar 22 16:31:11 2022<br>\nThread-2: Tue Mar 22 16:31:11 2022<br>\nThread-1: Tue Mar 22 16:31:12 2022<br>\n退出线程：Thread-1<br>\nThread-2: Tue Mar 22 16:31:13 2022<br>\nThread-2: Tue Mar 22 16:31:16 2022<br>\nThread-2: Tue Mar 22 16:31:18 2022<br>\n退出线程：Thread-2<br>\n退出主线程</p>\n</blockquote>\n<h3 id=\"线程同步\">线程同步</h3>\n<p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。<br>\n使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p>\n<p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。<br>\n考虑这样一种情况：一个列表里所有元素都是0，线程&quot;set&quot;从后向前把所有元素改成1，而线程&quot;print&quot;负责从前往后读取列表并打印。<br>\n那么，可能线程&quot;set&quot;开始改的时候，线程&quot;print&quot;便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。<br>\n锁有两种状态——锁定和未锁定。每当一个线程比如&quot;set&quot;要访问共享数据时，必须先获得锁定；如果已经有别的线程比如&quot;print&quot;获得锁定了，那么就让线程&quot;set&quot;暂停，也就是同步阻塞；等到线程&quot;print&quot;访问完毕，释放锁以后，再让线程&quot;set&quot;继续。<br>\n经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, delay</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.delay = delay</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开启线程： &quot;</span> + self.name)</span><br><span class=\"line\">        <span class=\"comment\"># 获取锁，用于线程同步</span></span><br><span class=\"line\">        threadLock.acquire()</span><br><span class=\"line\">        print_time(self.name, self.delay, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 释放锁，开启下一个线程</span></span><br><span class=\"line\">        threadLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span>(<span class=\"params\">threadName, delay, counter</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> counter:</span><br><span class=\"line\">        time.sleep(delay)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">        counter -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">threadLock = threading.Lock()</span><br><span class=\"line\">threads = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\">thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新线程</span></span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加线程到线程列表</span></span><br><span class=\"line\">threads.append(thread1)</span><br><span class=\"line\">threads.append(thread2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待所有线程完成</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    t.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程优先级队列\">线程优先级队列</h3>\n<p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。<br>\n这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。<br>\nQueue 模块中的常用方法:</p>\n<ul>\n<li>Queue.qsize() 返回队列的大小</li>\n<li>Queue.empty() 如果队列为空，返回True,反之False</li>\n<li>Queue.full() 如果队列满了，返回True,反之False</li>\n<li>Queue.full 与 maxsize 大小对应</li>\n<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>\n<li>Queue.get_nowait() 相当Queue.get(False)</li>\n<li>Queue.put(item) 写入队列，timeout等待时间</li>\n<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>\n<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>\n<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> (<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, threadID, name, q</span>):</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.threadID = threadID</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.q = q</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;开启线程：&quot;</span> + self.name)</span><br><span class=\"line\">        process_data(self.name, self.q)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出线程：&quot;</span> + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_data</span>(<span class=\"params\">threadName, q</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> exitFlag:</span><br><span class=\"line\">        queueLock.acquire()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> workQueue.empty():</span><br><span class=\"line\">            data = q.get()</span><br><span class=\"line\">            queueLock.release()</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (<span class=\"string\">&quot;%s processing %s&quot;</span> % (threadName, data))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            queueLock.release()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">threadList = [<span class=\"string\">&quot;Thread-1&quot;</span>, <span class=\"string\">&quot;Thread-2&quot;</span>, <span class=\"string\">&quot;Thread-3&quot;</span>]</span><br><span class=\"line\">nameList = [<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;Three&quot;</span>, <span class=\"string\">&quot;Four&quot;</span>, <span class=\"string\">&quot;Five&quot;</span>]</span><br><span class=\"line\">queueLock = threading.Lock()</span><br><span class=\"line\">workQueue = queue.Queue(<span class=\"number\">10</span>)</span><br><span class=\"line\">threads = []</span><br><span class=\"line\">threadID = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新线程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> tName <span class=\"keyword\">in</span> threadList:</span><br><span class=\"line\">    thread = myThread(threadID, tName, workQueue)</span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\">    threads.append(thread)</span><br><span class=\"line\">    threadID += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充队列</span></span><br><span class=\"line\">queueLock.acquire()</span><br><span class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> nameList:</span><br><span class=\"line\">    workQueue.put(word)</span><br><span class=\"line\">queueLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待队列清空</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> workQueue.empty():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通知线程是时候退出</span></span><br><span class=\"line\">exitFlag = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待所有线程完成</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    t.join()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;退出主线程&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-MongoDB\">Python MongoDB</h2>\n<p>MongoDB 是目前最流行的 NoSQL 数据库之一，使用的数据类型 BSON（类似 JSON）。<br>\n关于MongoDB 数据库以查看这篇<a href=\"/cn/mongodb\">MongoDB博客</a>。</p>\n<p>mongoDB下载：<a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a></p>\n<!-- TODO： mongodb blog -->\n<hr>\n<!-- TODO: argparse -->\n<!-- TODO: _变量 -->\n<!-- TODO: as关键字 -->\n<!-- TODO: dir() 和 help() -->\n<hr>\n<h2 id=\"Python内置函数\">Python内置函数</h2>\n<!-- TODO  函数汇总--> \n<!-- TODO: int() tuple()等 -->\n<!-- TODO: type()  isinstance() -->\n<h3 id=\"abs\">abs()</h3>\n<p>abs()函数返回数字的绝对值，如果参数是一个复数，则返回它的大小。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">abs</span>(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><code>x</code> : 数值表达式，可以是int,float,bool,complex</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回对应参数的类型，注意如果是复数返回的是其<code>模</code>。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">1.0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">3</span>+<span class=\"number\">4j</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1<br>\n1.0<br>\n5.0<br>\n0</p>\n</blockquote>\n<hr>\n<h3 id=\"format\">format()</h3>\n<p>format 基本语法是通过 {} 和 : 来代替以前的 % 。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.format(*args: object, **kwargs: object) -&gt; str</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>S :  需要格式化的字符串</li>\n<li>*args/**kwargs :  传入的参数值表</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回格式化后的字符串</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不设置指定位置，按默认顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置指定位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接设置参数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;百度&quot;</span>, url=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过字典设置参数</span></span><br><span class=\"line\">site = &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;谷歌&quot;</span>, <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class=\"built_in\">format</span>(**site))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 通过列表索引设置参数</span></span><br><span class=\"line\">my_list = [<span class=\"string\">&#x27;哔哩哔哩&#x27;</span>, <span class=\"string\">&#x27;https://www.bilibili.com&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(my_list))  <span class=\"comment\"># &quot;0&quot; 是必须的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以传入对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">my_value = TestValue(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value 为: &#123;.value&#125;&#x27;</span>.<span class=\"built_in\">format</span>(my_value))  <span class=\"comment\"># &quot;0&quot; 是可选的，等同上行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用大括号转义大括号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125; 元素对应的位置是 &#123;&#123;0&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>hello<br>\nworld hello world<br>\n网站名：百度, 地址 <a href=\"https://www.baidu.com\">https://www.baidu.com</a><br>\n网站名：谷歌, 地址 <a href=\"https://www.google.com\">https://www.google.com</a><br>\n网站名：哔哩哔哩, 地址 <a href=\"https://www.bilibili.com\">https://www.bilibili.com</a><br>\nvalue 为: 13<br>\nvalue 为: 13<br>\na 元素对应的位置是 {0}</p>\n</blockquote>\n<!-- TODO: 待补充说明(Python输入输出\\输出格式美化) -->\n<p><em><strong>还可以使用format函数进行数字格式化</strong></em></p>\n<table>\n<thead>\n<tr>\n<th style = \"text-align : center\">\n格式\n</th>\n<th style = \"text-align : center\">\n实例\n</th>\n<th style = \"text-align : center\">\n输出\n</th>\n<th style = \"text-align : center\">\n描述\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]f&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.4f&#125;&quot;</span>.<span class=\"built_in\">format</span>(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">3.1415926</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"number\">2.7183</span></span><br><span class=\"line\">+<span class=\"number\">3.14</span></span><br><span class=\"line\">-<span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留小数点后n位,<br>类似执行 <a href = \"#round\">round()</a>\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[c][s][n]d&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:0&gt;5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">101</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:s&lt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:&gt;4d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.^5d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00101</span><br><span class=\"line\">1sss</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">.<span class=\"number\">.1</span>..</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n设定数字宽度为n、对齐方式为>(右)<(左)^(中)、填充字符为c(默认为空格)\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:,&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">13000000</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:,&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1000.7651</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">13</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span>,<span class=\"number\">000</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n以逗号分隔的数字格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]%&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2%&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120.00</span>%</span><br><span class=\"line\"><span class=\"number\">25.0</span>%</span><br><span class=\"line\">-<span class=\"number\">25.00</span>%</span><br><span class=\"line\">+<span class=\"number\">25.00</span>%</span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的百分比格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[+].[n]e&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:.1e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(-<span class=\"number\">0.25</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:+.2e&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0.25</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.20e+00</span></span><br><span class=\"line\"><span class=\"number\">2.5e-01</span></span><br><span class=\"line\">-<span class=\"number\">2.50e-01</span></span><br><span class=\"line\">+<span class=\"number\">2.50e-01</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\n保留n位小数的指数格式\n</td>\n</tr>\n<tr>\n<td style = \"vertical-align : middle;\n            text-align :center;\n            white-space: nowrap;\">\n<code>&#123;:[]&#125;</code>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:d&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:o&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#x&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;:#X&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">11</span>))</span><br></pre></td></tr></table></figure>\n</td>\n<td>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1011</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"number\">0xb</span></span><br><span class=\"line\"><span class=\"number\">0XB</span></span><br></pre></td></tr></table></figure>\n</td>\n<td style = \"vertical-align : middle; text-align : center\">\nb:二进制<br>\nd:十进制<br>\no:八进制<br>\nx:十六进制\n</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"len\">len()</h3>\n<p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>( s )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>s :  对象，可以是序列（如 string、bytes、tuple、list 或 range 等）或集合（如 dictionary、set 或 frozen set 等）</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回对象长度。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"built_in\">len</span>([])</span><br><span class=\"line\"><span class=\"built_in\">len</span>(<span class=\"string\">&quot;abfasdfja&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n0<br>\n9</p>\n</blockquote>\n<hr>\n<h3 id=\"max\">max()</h3>\n<p>max() 方法返回给定参数的最大值，参数可以为序列。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回给定参数的最大值。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n6<br>\ns<br>\n6<br>\n[1, 3, 4]<br>\n[2, 1, 9, 4]<br>\nbabc</p>\n<p>True<br>\n1<br>\nFalse<br>\n0</p>\n</blockquote>\n<p><code>max(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。</p>\n<p>求最大值时，若最大值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。</p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"min\">min()</h3>\n<p>min() 方法返回给定参数的最小值，参数可以为序列。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x,y,z: 数值表达式，可以为序列</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回给定参数的最小值。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([-<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;asdfghj&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"string\">&quot;abcdefg&quot;</span>,<span class=\"string\">&quot;abcd&quot;</span>,<span class=\"string\">&quot;babc&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">True</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">1</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"literal\">False</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">min</span>(<span class=\"number\">0</span>, <span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1<br>\n-1<br>\na<br>\n1<br>\n[1, 2, 6]<br>\n[1, 2, 6, 5, 3]<br>\nabcd<br>\nTrue<br>\n1<br>\nFalse<br>\n0</p>\n</blockquote>\n<p><code>min(x, y[, z...]):Number|Sequence</code> 不能混合入参（要么全Number(int|float|complex|bool），要么全序列）。</p>\n<p>求最小值时，若最小值为<code>True和1</code>或者<code>False和0</code>，将取决于<code>参数顺序</code>，更先的成为返回值。</p>\n<blockquote>\n<p>关于大小的比较，请查看<a href=\"#%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83\">数值比较</a></p>\n</blockquote>\n<hr>\n<h3 id=\"pow\">pow()</h3>\n<p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pow</span>(x,y[,z])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n<li>z :  数值表达式(<strong>可选参数，默认值为 <code>1</code></strong>）</li>\n</ul>\n<p><strong>返回值：</strong><br>\n函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>8<br>\n15.625<br>\n0</p>\n</blockquote>\n<blockquote>\n<p>还有一个math模块的pow函数:<a href=\"#pow-2\">pow()</a><br>\npow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"round\">round()</h3>\n<p>round()返回浮点数 x 的四舍五入值，准确的说保留值将保留到离上一位更近的一端（四舍六入）。<br>\n精度要求高的，不建议使用该函数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(x[,n])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x : 数字表达式。</li>\n<li>n : 表示保留的小数点位数，(<strong>可选参数，默认值为 <code>0</code></strong>）。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回浮点数x保留位数后的最近端点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.23</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">10.53</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.531</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.564</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">1.325</span>,<span class=\"number\">2</span>))     <span class=\"comment\"># 由于精度问题，实际值不足1.325，所以round(x,2)==1.32</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">0.5</span>))         <span class=\"comment\"># 由于精度问题更偏向0，所以round(-0.5)==0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">1.236</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">2.165</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>10<br>\n11<br>\n1.53<br>\n1.6<br>\n1.32<br>\n0<br>\n-1.24<br>\n-2.17</p>\n</blockquote>\n<p>注意： 关于round()其实并不是常规的四舍五入，例如在上面第五、六个用例中，1.325进到1.32时，因为精度问题无法进位，详情请参见<a href=\"#round-%E5%85%B3%E4%BA%8E%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98\">round()关于四舍五入不成功的问题</a></p>\n<hr>\n<h3 id=\"tuple\">tuple()</h3>\n<p>tuple 函数将可迭代系列（如列表）转换为元组。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span>(iterable)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>iterable :  要转换为元组的可迭代序列。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回元组。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = <span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tup)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>(1,2,6)</p>\n</blockquote>\n<hr>\n<h2 id=\"Python-os模块方法\">Python os模块方法</h2>\n<hr>\n<h2 id=\"Python-math模块方法\">Python math模块方法</h2>\n<!-- TODO:三角函数 -->\n<blockquote>\n<p>导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"acos\">acos()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"asin\">asin()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"atan\">atan()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"ceil\">ceil()</h3>\n<p>ceil()函数返回<code>上入整数</code>，即大于或等于 x 的的最小整数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.ceil(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回上入整数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.ceil(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>5<br>\n-4</p>\n</blockquote>\n<hr>\n<h3 id=\"cos\">cos()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"degress\">degress()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"exp\">exp()</h3>\n<p>exp()方法返回x的指数,e^x。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.exp(x)   -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的指数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.exp(math.pi))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>2.718281828459045<br>\n23.140692632779267</p>\n</blockquote>\n<hr>\n<h3 id=\"fabs\">fabs()</h3>\n<p>返回数字的绝对值，相较abs()更具局限性，fabs()只作用于浮点型和整型，而abs()还可以运用于复数中</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.fabs(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数学表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回数字的绝对值，浮点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.fabs(-<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>1.2<br>\n1.0</p>\n</blockquote>\n<hr>\n<h3 id=\"floor\">floor()</h3>\n<p>floor()函数返回<code>下舍整数</code>，即小于或等于 x 的的最大整数。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.floor(x)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回下舍整数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(<span class=\"number\">4.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.floor(-<span class=\"number\">4.5</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>4<br>\n-5</p>\n</blockquote>\n<hr>\n<h3 id=\"log\">log()</h3>\n<p>log() 方法返回x的对数，默认为自然对数，即以e为底，x &gt; 0。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log(x[,y=math.e]) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n<li>y :  底数(<strong>可选参数，默认值为<code>e</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的对数，浮点数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(math.e))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.log(<span class=\"number\">8</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>0.0<br>\n1.0<br>\n2.0<br>\n1.892789260714372</p>\n</blockquote>\n<blockquote>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"log10\">log10()</h3>\n<p>log10() 方法返回以10为基数的x对数，x &gt; 0。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.log10(x) -&gt; float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式，<code>x &gt; 0</code></li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回以10为基数的x对数</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.log10(<span class=\"number\">1000</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<blockquote>\n<p>如果参数为负数，会返回<code>ValueError</code>: math domain error</p>\n</blockquote>\n<hr>\n<h3 id=\"modf\">modf()</h3>\n<p>modf() 方法返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.modf(x) -&gt; tuple</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回元组包含x的整数部分和小数部分</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">100.1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(-<span class=\"number\">1.52</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.modf(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>(0.09999999999999432, 100.0)<br>\n(-0.52, -1.0)<br>\n(0.0, 1.0)</p>\n</blockquote>\n<hr>\n<h3 id=\"pow-2\">pow()</h3>\n<p>pow() 方法返回 x^y（x的y次方） 的值。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.pow(x,y)  -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n<li>y :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回x的y次方值</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(math.<span class=\"built_in\">pow</span>(<span class=\"number\">2.5</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>8.0<br>\n15.625</p>\n</blockquote>\n<blockquote>\n<p>还有一个内置的pow函数:<a href=\"#pow\">pow()</a><br>\npow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>\n</blockquote>\n<hr>\n<h3 id=\"radians\">radians()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"sin\">sin()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h3 id=\"sqrt\">sqrt()</h3>\n<p>sqrt() 方法返回数字x的平方根。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.sqrt(x)    -&gt;  float</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  数值表达式</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回数字x的平方根。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(math.sqrt(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>3.0</p>\n</blockquote>\n<hr>\n<h3 id=\"tan\">tan()</h3>\n<p>xxxxxxxxxx</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :</li>\n</ul>\n<p><strong>返回值：</strong></p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote></blockquote>\n<hr>\n<h2 id=\"Python-random模块方法\">Python random模块方法</h2>\n<blockquote>\n<p>导入模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"choice\">choice()</h3>\n<p>choice() 方法从序列的元素中随机挑选一个元素返回。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.choice(seq)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>seq :  可序列对象，可以是一个列表、元组、字符串</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回一个随机项</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"string\">&quot;asdfghjk&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice((<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice([<span class=\"number\">1</span>,<span class=\"number\">36</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(random.choice(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)))  <span class=\"comment\"># 返回从0到9中随机挑选的一个整数。</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"random\">random()</h3>\n<p>random() 方法返回随机生成的一个实数，它在<code>[0,1)</code>范围内。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong><br>\n无</p>\n<p><strong>返回值：</strong><br>\n返回随机生成的一个实数，它在[0,1)范围内。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.random()</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"randrange\">randrange()</h3>\n<p>randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>start :  指定范围内的开始值，<code>包含</code>在范围内。(<strong>可选参数，默认值为<code>0</code></strong>)</li>\n<li>stop :  指定范围内的结束值，<code>不包含</code>在范围内。</li>\n<li>step :  指定递增基数。 (<strong>可选参数，默认值为<code>1</code></strong>)</li>\n</ul>\n<p><strong>返回值：</strong><br>\n从给定的范围返回随机项。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.randrange(<span class=\"number\">100</span>)   <span class=\"comment\"># 从0-100中随机选取一个数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">2</span>)   <span class=\"comment\"># 从0-100中随机选取一个偶数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>, <span class=\"number\">4</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被4整除的整数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 从0-100中随机选取一个能被3整除后余1的数</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"seed\">seed()</h3>\n<p>改变随机数生成器的种子seed。<strong>可以在调用其他随机模块函数之前调用此函数</strong>。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed([x])</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  (<strong>可选参数</strong>)改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n无</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.seed()</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\">random.seed(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class=\"line\"></span><br><span class=\"line\">random.seed(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>使用默认种子生成随机数： 0.9506421767605476<br>\n使用默认种子生成随机数： 0.20706442655860602<br>\n使用整数 10 种子生成随机数： 0.5714025946899135<br>\n使用整数 10 种子生成随机数： 0.5714025946899135<br>\n使用字符串种子生成随机数： 0.3537754404730722</p>\n</blockquote>\n<hr>\n<h3 id=\"shuffle\">shuffle()</h3>\n<p>将序列的所有元素随机排序</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.shuffle(lst)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>lst :  列表</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回None</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">random.shuffle(list1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br></pre></td></tr></table></figure>\n<p>以上代码运行后的输出结果为：</p>\n<blockquote>\n<p>[3, 2, 4, 1, 6]</p>\n</blockquote>\n<hr>\n<h3 id=\"uniform\">uniform()</h3>\n<p>uniform() 方法将随机生成下一个实数，它在 <code>[x,y]</code> 范围内。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(x,y)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>x :  随机数的最小值，<code>包含</code>该值。</li>\n<li>y :  随机数的最大值，<code>包含</code>该值。</li>\n</ul>\n<p><strong>返回值：</strong><br>\n返回一个浮点数 N，取值范围为如果 <kbd>x&lt;y</kbd> 则<code>x &lt;= N &lt;= y</code>，如果 <kbd>y&lt;x</kbd> 则<code>y &lt;= N &lt;= x</code>。</p>\n</blockquote>\n<p>用例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Python-shutil模块方法\">Python shutil模块方法</h2>\n<hr>\n<h2 id=\"Python-re模块方法\">Python re模块方法</h2>\n<hr>\n<!-- TODO：新建文章记录错误 -->\n<h2 id=\"Python常见问题\">Python常见问题</h2>\n<h3 id=\"float精度问题\">float精度问题</h3>\n<p>Python的float的两个临界点会转换科学计数法表示，是精度问题出现的原因：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000001.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">9999999999999998.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000002.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1e+16</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10000000000000003.0</span> - <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1.0000000000000002e+16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.9999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.999999999999999</span> </span><br><span class=\"line\"><span class=\"number\">9.999999999999998</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9.99999999999999</span></span><br><span class=\"line\"><span class=\"number\">9.99999999999999</span></span><br></pre></td></tr></table></figure>\n<p>解决精度问题的方法是使用<code>decimal</code>包</p>\n<hr>\n<h3 id=\"round-关于四舍五入不成功的问题\">round()关于四舍五入不成功的问题</h3>\n<p>本质还是和浮点数的精度有关。在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。</p>\n <!-- TODO:round精度问题补全  -->\n<p>更多请见：<a href=\"https://www.runoob.com/w3cnote/python-round-func-note.html\">https://www.runoob.com/w3cnote/python-round-func-note.html</a></p>\n<hr>\n<h3 id=\"str-和repr-的区别\">str()和repr()的区别</h3>\n"},{"title":"正则表达式","catalog":true,"lang":"cn","date":"2022-02-22T06:32:32.000Z","subtitle":null,"header-img":"/img/header_img/nier.png","_content":"","source":"_posts/cn/regex.md","raw":"---\ntitle: 正则表达式\ncatalog: true\nlang: cn\ndate: 2022-02-22 14:32:32\nsubtitle:\nheader-img: /img/header_img/nier.png\ntags:\n- regex\ncategories:\n- etc.\n---\n","slug":"regex","published":1,"updated":"2022-02-22T06:32:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ilmg130012wwvo2xau4ani","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/cn/Algorithm-Note/dp1.png","slug":"dp1.png","post":"cl4ilmg0h0003wwvo4ap086w1","modified":0,"renderable":0},{"_id":"source/_posts/cn/Algorithm/bulbswitcher.jpg","slug":"bulbswitcher.jpg","post":"cl4ilmg0j0005wwvo2quch3nb","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/ABC分析法.png","slug":"ABC分析法.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/power_pivot.png","slug":"power_pivot.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/power_query.png","slug":"power_query.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/QuickBI-2.png","slug":"QuickBI-2.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/QuickBI.png","slug":"QuickBI.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/利润和价格的关系.png","slug":"利润和价格的关系.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/制造业-1.png","slug":"制造业-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/变动成本.png","slug":"变动成本.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/固定成本.png","slug":"固定成本.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/市场容量可视化.png","slug":"市场容量可视化.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/市场运营节奏.png","slug":"市场运营节奏.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺品类结构分析.png","slug":"店铺品类结构分析.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺商品分析.png","slug":"店铺商品分析.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺客群分析.png","slug":"店铺客群分析.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺推广分析.png","slug":"店铺推广分析.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺流量分析.png","slug":"店铺流量分析.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺诊断指标拆解.png","slug":"店铺诊断指标拆解.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/店铺销售额预测.png","slug":"店铺销售额预测.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/数据透视表.png","slug":"数据透视表.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-1.png","slug":"杜邦分析法-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/杜邦分析法-2.png","slug":"杜邦分析法-2.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-1.png","slug":"漏斗分析法-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/漏斗分析法-2.png","slug":"漏斗分析法-2.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/物流业-1.png","slug":"物流业-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/盈亏平衡点.png","slug":"盈亏平衡点.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/盈亏预测计算.png","slug":"盈亏预测计算.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-1.png","slug":"矩阵分析法-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/矩阵分析法-2.png","slug":"矩阵分析法-2.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/组合图.png","slug":"组合图.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/表格概述.png","slug":"表格概述.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-1.png","slug":"零售业-1.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-2.png","slug":"零售业-2.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-3.png","slug":"零售业-3.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-4.png","slug":"零售业-4.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-5.png","slug":"零售业-5.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Data-Analysis-Note/零售业-6.png","slug":"零售业-6.png","post":"cl4ilmg0n0009wwvoc8rv19py","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/Django-env10.png","slug":"Django-env10.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/Django-env6.png","slug":"Django-env6.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/Django-env9.png","slug":"Django-env9.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/django-orm1.png","slug":"django-orm1.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/django_init.png","slug":"django_init.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/hello.png","slug":"hello.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/orm-object.png","slug":"orm-object.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/pycharm01.png","slug":"pycharm01.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Django-Note/startapp.png","slug":"startapp.png","post":"cl4ilmg0p000bwwvo16q679y3","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","slug":"bglinecanvas.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","slug":"dark.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","slug":"langcn.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","slug":"langen.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","slug":"light.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","slug":"livemylife-desktop.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","slug":"mouseclick.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","slug":"ribbon.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","slug":"top.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","slug":"wave.png","post":"cl4ilmg0t000gwwvoe76wacgh","modified":0,"renderable":0},{"_id":"source/_posts/cn/MarkDown-Base/title.png","slug":"title.png","post":"cl4ilmg0u000hwwvo3pzf9amo","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/加入1.png","slug":"加入1.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/加入2.png","slug":"加入2.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/加入3.png","slug":"加入3.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期1.png","slug":"续期1.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期10.png","slug":"续期10.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期11.png","slug":"续期11.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期12.png","slug":"续期12.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期13.png","slug":"续期13.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期2.png","slug":"续期2.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期3.png","slug":"续期3.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期4.png","slug":"续期4.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期5.png","slug":"续期5.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期6.png","slug":"续期6.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期7.png","slug":"续期7.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期8.png","slug":"续期8.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/续期9.png","slug":"续期9.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/订阅成功.png","slug":"订阅成功.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/设置沙盒.png","slug":"设置沙盒.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/设置沙盒域名.png","slug":"设置沙盒域名.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置1.png","slug":"配置1.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置2.png","slug":"配置2.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置3.png","slug":"配置3.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置4.png","slug":"配置4.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置5.png","slug":"配置5.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置6.png","slug":"配置6.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置7.png","slug":"配置7.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/配置8.png","slug":"配置8.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":0,"renderable":0},{"_id":"source/_posts/cn/MongoDB/Figure-1-Mapping-Table-to-Collection-1.png","slug":"Figure-1-Mapping-Table-to-Collection-1.png","post":"cl4ilmg0x000mwwvo77n892ey","modified":0,"renderable":0},{"_id":"source/_posts/cn/MongoDB/mongodb分片集群结构分布.png","slug":"mongodb分片集群结构分布.png","post":"cl4ilmg0x000mwwvo77n892ey","modified":0,"renderable":0},{"_id":"source/_posts/cn/MongoDB/mongodb复制原理.png","slug":"mongodb复制原理.png","post":"cl4ilmg0x000mwwvo77n892ey","modified":0,"renderable":0},{"_id":"source/_posts/cn/MongoDB/ObjectId.jpeg","slug":"ObjectId.jpeg","post":"cl4ilmg0x000mwwvo77n892ey","modified":0,"renderable":0},{"_id":"source/_posts/cn/mvc-and-mvt/MTV-Diagram.png","slug":"MTV-Diagram.png","post":"cl4ilmg11000xwwvo6g23emnr","modified":0,"renderable":0},{"_id":"source/_posts/cn/mvc-and-mvt/mvc.png","slug":"mvc.png","post":"cl4ilmg11000xwwvo6g23emnr","modified":0,"renderable":0},{"_id":"source/_posts/cn/mvc-and-mvt/mvt.png","slug":"mvt.png","post":"cl4ilmg11000xwwvo6g23emnr","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/break-continue.jpg","slug":"break-continue.jpg","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/function-1.png","slug":"function-1.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/if-1.png","slug":"if-1.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/if-2.png","slug":"if-2.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/loop-1.jpg","slug":"loop-1.jpg","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/module-1.png","slug":"module-1.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw-problem.png","slug":"rw-problem.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rwa-1.png","slug":"rwa-1.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw_test_1.png","slug":"rw_test_1.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/rw_test_2.png","slug":"rw_test_2.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/solute.png","slug":"solute.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode-2.png","slug":"vscode-2.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode-3.png","slug":"vscode-3.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/vscode.png","slug":"vscode.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/作用域.png","slug":"作用域.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/命名空间-2.png","slug":"命名空间-2.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Python-Note/命名空间.png","slug":"命名空间.png","post":"cl4ilmg11000ywwvo5lug7jt8","modified":0,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/使用1.png","slug":"使用1.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":1,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/使用2.png","slug":"使用2.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":1,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/使用3.png","slug":"使用3.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":1,"renderable":0},{"_id":"source/_posts/cn/Microsoft-E5/使用4.png","slug":"使用4.png","post":"cl4ilmg0w000lwwvohrjw7mdc","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cl4ilmg0p000bwwvo16q679y3","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg0v000iwwvoeuuxbrrf"},{"post_id":"cl4ilmg0u000hwwvo3pzf9amo","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg0z000qwwvo0spn40ee"},{"post_id":"cl4ilmg0n0009wwvoc8rv19py","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg10000twwvo9xz43bo7"},{"post_id":"cl4ilmg0y000pwwvoh2180iq7","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg12000zwwvo8shdc3dq"},{"post_id":"cl4ilmg0h0003wwvo4ap086w1","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg150013wwvohlnmbj9j"},{"post_id":"cl4ilmg0h0003wwvo4ap086w1","category_id":"cl4ilmg0x000nwwvo0ezjafyu","_id":"cl4ilmg150015wwvo5hiwgj13"},{"post_id":"cl4ilmg11000xwwvo6g23emnr","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg160018wwvoc14723wl"},{"post_id":"cl4ilmg11000ywwvo5lug7jt8","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg16001bwwvoh6tu0zya"},{"post_id":"cl4ilmg0j0005wwvo2quch3nb","category_id":"cl4ilmg0k0006wwvo54td88v4","_id":"cl4ilmg17001dwwvo8bg3dt9b"},{"post_id":"cl4ilmg0j0005wwvo2quch3nb","category_id":"cl4ilmg0x000nwwvo0ezjafyu","_id":"cl4ilmg17001fwwvo8hnbhz8p"},{"post_id":"cl4ilmg0t000gwwvoe76wacgh","category_id":"cl4ilmg10000vwwvo60o0gb1t","_id":"cl4ilmg18001jwwvofr15a0pe"},{"post_id":"cl4ilmg0t000gwwvoe76wacgh","category_id":"cl4ilmg17001cwwvo1rh01649","_id":"cl4ilmg19001mwwvof1czfse0"},{"post_id":"cl4ilmg130012wwvo2xau4ani","category_id":"cl4ilmg160016wwvo66kzai9s","_id":"cl4ilmg19001owwvo1igv9fa4"},{"post_id":"cl4ilmg0z000swwvo5wtw3al4","category_id":"cl4ilmg160016wwvo66kzai9s","_id":"cl4ilmg1a001swwvoe69w8oks"},{"post_id":"cl4ilmg0z000swwvo5wtw3al4","category_id":"cl4ilmg18001iwwvo8yryda8f","_id":"cl4ilmg1a001uwwvo7vuv7eu8"}],"PostTag":[{"post_id":"cl4ilmg0h0003wwvo4ap086w1","tag_id":"cl4ilmg0m0007wwvoc0023zbv","_id":"cl4ilmg0s000fwwvod32bcsjr"},{"post_id":"cl4ilmg0j0005wwvo2quch3nb","tag_id":"cl4ilmg0m0007wwvoc0023zbv","_id":"cl4ilmg0z000rwwvoecf5e3es"},{"post_id":"cl4ilmg0j0005wwvo2quch3nb","tag_id":"cl4ilmg0v000kwwvoh69nfrvd","_id":"cl4ilmg10000uwwvo24evbw16"},{"post_id":"cl4ilmg0n0009wwvoc8rv19py","tag_id":"cl4ilmg0y000owwvo9ik92zr0","_id":"cl4ilmg150014wwvo4htmaaht"},{"post_id":"cl4ilmg0n0009wwvoc8rv19py","tag_id":"cl4ilmg10000wwwvo27jh9qs5","_id":"cl4ilmg160017wwvo8gt6ck15"},{"post_id":"cl4ilmg0p000bwwvo16q679y3","tag_id":"cl4ilmg120011wwvoht2vbk8t","_id":"cl4ilmg16001awwvod6q1aaa7"},{"post_id":"cl4ilmg0t000gwwvoe76wacgh","tag_id":"cl4ilmg160019wwvo6s2738i3","_id":"cl4ilmg19001lwwvo0ih66nn4"},{"post_id":"cl4ilmg0t000gwwvoe76wacgh","tag_id":"cl4ilmg17001ewwvo86cq8i6u","_id":"cl4ilmg19001nwwvobgd77nke"},{"post_id":"cl4ilmg0t000gwwvoe76wacgh","tag_id":"cl4ilmg18001hwwvobc0pavnt","_id":"cl4ilmg19001qwwvoh8ec8aax"},{"post_id":"cl4ilmg0u000hwwvo3pzf9amo","tag_id":"cl4ilmg18001kwwvo10mc49e0","_id":"cl4ilmg19001rwwvogaeia9km"},{"post_id":"cl4ilmg0w000lwwvohrjw7mdc","tag_id":"cl4ilmg19001pwwvo68r27d6x","_id":"cl4ilmg1a001wwwvo6kvb5h0w"},{"post_id":"cl4ilmg0w000lwwvohrjw7mdc","tag_id":"cl4ilmg1a001twwvo3ssfftn0","_id":"cl4ilmg1a001xwwvoaer12yuu"},{"post_id":"cl4ilmg0x000mwwvo77n892ey","tag_id":"cl4ilmg1a001vwwvoac0j1qjk","_id":"cl4ilmg1b001zwwvo59iy893h"},{"post_id":"cl4ilmg0y000pwwvoh2180iq7","tag_id":"cl4ilmg1a001ywwvobt69ab8q","_id":"cl4ilmg1b0021wwvod9jh2lzq"},{"post_id":"cl4ilmg0z000swwvo5wtw3al4","tag_id":"cl4ilmg17001ewwvo86cq8i6u","_id":"cl4ilmg1c0024wwvof6wr312n"},{"post_id":"cl4ilmg0z000swwvo5wtw3al4","tag_id":"cl4ilmg1b0022wwvoe5p8741q","_id":"cl4ilmg1c0025wwvobt82d11d"},{"post_id":"cl4ilmg11000xwwvo6g23emnr","tag_id":"cl4ilmg1b0023wwvo63i89dda","_id":"cl4ilmg1c0028wwvo6tz1burb"},{"post_id":"cl4ilmg11000xwwvo6g23emnr","tag_id":"cl4ilmg1c0026wwvoad3w8l7v","_id":"cl4ilmg1d0029wwvo3tpb4hek"},{"post_id":"cl4ilmg11000ywwvo5lug7jt8","tag_id":"cl4ilmg1c0027wwvohjec8niv","_id":"cl4ilmg1d002bwwvob35cfx2x"},{"post_id":"cl4ilmg130012wwvo2xau4ani","tag_id":"cl4ilmg1d002awwvo3u9o1lqq","_id":"cl4ilmg1d002cwwvob52zc7nm"}],"Tag":[{"name":"Algorithm","_id":"cl4ilmg0m0007wwvoc0023zbv"},{"name":"Leetcode","_id":"cl4ilmg0v000kwwvoh69nfrvd"},{"name":"Date Analysis","_id":"cl4ilmg0y000owwvo9ik92zr0"},{"name":"Excel","_id":"cl4ilmg10000wwwvo27jh9qs5"},{"name":"django","_id":"cl4ilmg120011wwvoht2vbk8t"},{"name":"Hexo-Theme-LiveMyLife","_id":"cl4ilmg160019wwvo6s2738i3"},{"name":"Hexo","_id":"cl4ilmg17001ewwvo86cq8i6u"},{"name":"Tutorials","_id":"cl4ilmg18001hwwvobc0pavnt"},{"name":"markdown","_id":"cl4ilmg18001kwwvo10mc49e0"},{"name":"one drive","_id":"cl4ilmg19001pwwvo68r27d6x"},{"name":"microsoft 365","_id":"cl4ilmg1a001twwvo3ssfftn0"},{"name":"MongoDB","_id":"cl4ilmg1a001vwwvoac0j1qjk"},{"name":"Unity","_id":"cl4ilmg1a001ywwvobt69ab8q"},{"name":"Blog","_id":"cl4ilmg1b0022wwvoe5p8741q"},{"name":"MVT","_id":"cl4ilmg1b0023wwvo63i89dda"},{"name":"MVC","_id":"cl4ilmg1c0026wwvoad3w8l7v"},{"name":"Python","_id":"cl4ilmg1c0027wwvohjec8niv"},{"name":"regex","_id":"cl4ilmg1d002awwvo3u9o1lqq"}]}}